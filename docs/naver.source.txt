package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedUpSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_downSkin extends MovieClip {

    }
}//package 
﻿package de.polygonal.ds {

    public interface LinkedListNode {

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {

    public interface Collection {

        function get size():int;
        function isEmpty():Boolean;
        function getIterator():Iterator;
        function clear():void;
        function toArray():Array;
        function contains(_arg1):Boolean;

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function dLinkedMergeSort(_arg1:DListNode, _arg2:Boolean=false):DListNode{
        var _local4:DListNode;
        var _local5:DListNode;
        var _local6:DListNode;
        var _local7:DListNode;
        var _local9:int;
        var _local10:int;
        var _local11:int;
        var _local12:int;
        if (!_arg1){
            return (null);
        };
        var _local3:DListNode = _arg1;
        var _local8 = 1;
        if (_arg2){
            while (true) {
                _local4 = _local3;
                _local7 = null;
                _local3 = _local7;
                _local9 = 0;
                while (_local4) {
                    _local9++;
                    _local12 = 0;
                    _local10 = 0;
                    _local5 = _local4;
                    while (_local12 < _local8) {
                        _local10++;
                        _local5 = _local5.next;
                        if (!_local5){
                            break;
                        };
                        _local12++;
                    };
                    _local11 = _local8;
                    while ((((_local10 > 0)) || ((((_local11 > 0)) && (_local5))))) {
                        if (_local10 == 0){
                            _local6 = _local5;
                            _local5 = _local5.next;
                            _local11--;
                        } else {
                            if ((((_local11 == 0)) || (!(_local5)))){
                                _local6 = _local4;
                                _local4 = _local4.next;
                                _local10--;
                            } else {
                                if ((_local4.data - _local5.data) >= 0){
                                    _local6 = _local4;
                                    _local4 = _local4.next;
                                    _local10--;
                                } else {
                                    _local6 = _local5;
                                    _local5 = _local5.next;
                                    _local11--;
                                };
                            };
                        };
                        if (_local7){
                            _local7.next = _local6;
                        } else {
                            _local3 = _local6;
                        };
                        _local6.prev = _local7;
                        _local7 = _local6;
                    };
                    _local4 = _local5;
                };
                _local7.next = null;
                if (_local9 <= 1){
                    return (_local3);
                };
                _local8 = (_local8 << 1);
            };
        };
        _local4 = _local3;
        _local7 = null;
        _local3 = _local7;
        _local9 = 0;
        while (_local4) {
            _local9++;
            _local12 = 0;
            _local10 = 0;
            _local5 = _local4;
            while (_local12 < _local8) {
                _local10++;
                _local5 = _local5.next;
                if (!_local5){
                    break;
                };
                _local12++;
            };
            _local11 = _local8;
            while ((((_local10 > 0)) || ((((_local11 > 0)) && (_local5))))) {
                if (_local10 == 0){
                    _local6 = _local5;
                    _local5 = _local5.next;
                    _local11--;
                } else {
                    if ((((_local11 == 0)) || (!(_local5)))){
                        _local6 = _local4;
                        _local4 = _local4.next;
                        _local10--;
                    } else {
                        if ((_local4.data - _local5.data) <= 0){
                            _local6 = _local4;
                            _local4 = _local4.next;
                            _local10--;
                        } else {
                            _local6 = _local5;
                            _local5 = _local5.next;
                            _local11--;
                        };
                    };
                };
                if (_local7){
                    _local7.next = _local6;
                } else {
                    _local3 = _local6;
                };
                _local6.prev = _local7;
                _local7 = _local6;
            };
            _local4 = _local5;
        };
        _local7.next = null;
        if (_local9 <= 1){
            return (_local3);
        };
        _local8 = (_local8 << 1);
        //unresolved jump
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function sLinkedMergeSortCmp(_arg1:SListNode, _arg2:Function, _arg3:Boolean=false):SListNode{
        var _local5:SListNode;
        var _local6:SListNode;
        var _local7:SListNode;
        var _local8:SListNode;
        var _local10:int;
        var _local11:int;
        var _local12:int;
        var _local13:int;
        if (((!(_arg1)) || ((_arg2 == null)))){
            return (null);
        };
        var _local4:SListNode = _arg1;
        var _local9 = 1;
        if (_arg3){
            while (true) {
                _local5 = _local4;
                _local8 = null;
                _local4 = _local8;
                _local10 = 0;
                while (_local5) {
                    _local10++;
                    _local13 = 0;
                    _local11 = 0;
                    _local6 = _local5;
                    while (_local13 < _local9) {
                        _local11++;
                        _local6 = _local6.next;
                        if (!_local6){
                            break;
                        };
                        _local13++;
                    };
                    _local12 = _local9;
                    while ((((_local11 > 0)) || ((((_local12 > 0)) && (_local6))))) {
                        if (_local11 == 0){
                            _local7 = _local6;
                            _local6 = _local6.next;
                            _local12--;
                        } else {
                            if ((((_local12 == 0)) || (!(_local6)))){
                                _local7 = _local5;
                                _local5 = _local5.next;
                                _local11--;
                            } else {
                                if (_arg2(_local5.data, _local6.data) >= 0){
                                    _local7 = _local5;
                                    _local5 = _local5.next;
                                    _local11--;
                                } else {
                                    _local7 = _local6;
                                    _local6 = _local6.next;
                                    _local12--;
                                };
                            };
                        };
                        if (_local8){
                            _local8.next = _local7;
                        } else {
                            _local4 = _local7;
                        };
                        _local8 = _local7;
                    };
                    _local5 = _local6;
                };
                _local8.next = null;
                if (_local10 <= 1){
                    return (_local4);
                };
                _local9 = (_local9 << 1);
            };
        };
        _local5 = _local4;
        _local8 = null;
        _local4 = _local8;
        _local10 = 0;
        while (_local5) {
            _local10++;
            _local13 = 0;
            _local11 = 0;
            _local6 = _local5;
            while (_local13 < _local9) {
                _local11++;
                _local6 = _local6.next;
                if (!_local6){
                    break;
                };
                _local13++;
            };
            _local12 = _local9;
            while ((((_local11 > 0)) || ((((_local12 > 0)) && (_local6))))) {
                if (_local11 == 0){
                    _local7 = _local6;
                    _local6 = _local6.next;
                    _local12--;
                } else {
                    if ((((_local12 == 0)) || (!(_local6)))){
                        _local7 = _local5;
                        _local5 = _local5.next;
                        _local11--;
                    } else {
                        if (_arg2(_local5.data, _local6.data) <= 0){
                            _local7 = _local5;
                            _local5 = _local5.next;
                            _local11--;
                        } else {
                            _local7 = _local6;
                            _local6 = _local6.next;
                            _local12--;
                        };
                    };
                };
                if (_local8){
                    _local8.next = _local7;
                } else {
                    _local4 = _local7;
                };
                _local8 = _local7;
            };
            _local5 = _local6;
        };
        _local8.next = null;
        if (_local10 <= 1){
            return (_local4);
        };
        _local9 = (_local9 << 1);
        //unresolved jump
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function sLinkedInsertionSort(_arg1:SListNode, _arg2:Boolean=false):SListNode{
        var _local7:int;
        var _local8:Number;
        var _local3:Array = [];
        var _local4:int;
        var _local5:SListNode = _arg1;
        var _local6:SListNode = _arg1;
        while (_local6) {
            var _temp1 = _local4;
            _local4 = (_local4 + 1);
            var _local10 = _temp1;
            _local3[_local10] = _local6.data;
            _local6 = _local6.next;
        };
        if (_local4 <= 1){
            return (_local5);
        };
        var _local9 = 1;
        while (_local9 < _local4) {
            _local8 = _local3[_local9];
            _local7 = _local9;
            while ((((_local7 > 0)) && ((_local3[int((_local7 - 1))] > _local8)))) {
                _local3[_local7] = _local3[int((_local7 - 1))];
                _local7--;
            };
            _local3[_local7] = _local8;
            _local9++;
        };
        _local6 = _local5;
        _local9 = 0;
        while (_local6) {
            var _temp2 = _local9;
            _local9 = (_local9 + 1);
            _local6.data = _local3[_temp2];
            _local6 = _local6.next;
        };
        return (_local5);
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort.compare {

    public function compareStringCaseInSensitiveDesc(_arg1:String, _arg2:String):int{
        var _local3:int;
        var _local4:int;
        var _local5:int;
        _arg1 = _arg1.toLowerCase();
        _arg2 = _arg2.toLowerCase();
        if ((_arg1.length + _arg2.length) > 2){
            _local3 = 0;
            _local4 = (((_arg1.length > _arg2.length)) ? _arg1.length : _arg2.length);
            _local5 = 0;
            while (_local5 < _local4) {
                _local3 = (_arg2.charCodeAt(_local5) - _arg1.charCodeAt(_local5));
                if (_local3 != 0){
                    break;
                };
                _local5++;
            };
            return (_local3);
        };
        return ((_arg2.charCodeAt(0) - _arg1.charCodeAt(0)));
    }
}//package de.polygonal.ds.sort.compare 
﻿package de.polygonal.ds.sort.compare {

    public function compareStringCaseSensitive(_arg1:String, _arg2:String):int{
        var _local3:int;
        var _local4:int;
        var _local5:int;
        if ((_arg1.length + _arg2.length) > 2){
            _local3 = 0;
            _local4 = (((_arg1.length > _arg2.length)) ? _arg1.length : _arg2.length);
            _local5 = 0;
            while (_local5 < _local4) {
                _local3 = (_arg1.charCodeAt(_local5) - _arg2.charCodeAt(_local5));
                if (_local3 != 0){
                    break;
                };
                _local5++;
            };
            return (_local3);
        };
        return ((_arg1.charCodeAt(0) - _arg2.charCodeAt(0)));
    }
}//package de.polygonal.ds.sort.compare 
﻿package de.polygonal.ds.sort.compare {

    public function compareStringCaseSensitiveDesc(_arg1:String, _arg2:String):int{
        var _local3:int;
        var _local4:int;
        var _local5:int;
        if ((_arg1.length + _arg2.length) > 2){
            _local3 = 0;
            _local4 = (((_arg1.length > _arg2.length)) ? _arg1.length : _arg2.length);
            _local5 = 0;
            while (_local5 < _local4) {
                _local3 = (_arg2.charCodeAt(_local5) - _arg1.charCodeAt(_local5));
                if (_local3 != 0){
                    break;
                };
                _local5++;
            };
            return (_local3);
        };
        return ((_arg2.charCodeAt(0) - _arg1.charCodeAt(0)));
    }
}//package de.polygonal.ds.sort.compare 
﻿package de.polygonal.ds.sort.compare {

    public function compareStringCaseInSensitive(_arg1:String, _arg2:String):int{
        var _local3:int;
        var _local4:int;
        var _local5:int;
        _arg1 = _arg1.toLowerCase();
        _arg2 = _arg2.toLowerCase();
        if ((_arg1.length + _arg2.length) > 2){
            _local3 = 0;
            _local4 = (((_arg1.length > _arg2.length)) ? _arg1.length : _arg2.length);
            _local5 = 0;
            while (_local5 < _local4) {
                _local3 = (_arg1.charCodeAt(_local5) - _arg2.charCodeAt(_local5));
                if (_local3 != 0){
                    break;
                };
                _local5++;
            };
            return (_local3);
        };
        return ((_arg1.charCodeAt(0) - _arg2.charCodeAt(0)));
    }
}//package de.polygonal.ds.sort.compare 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function sLinkedInsertionSortCmp(_arg1:SListNode, _arg2:Function, _arg3:Boolean=false):SListNode{
        var _local8:int;
        var _local9:int;
        var _local10:*;
        var _local4:Array = [];
        var _local5:int;
        var _local6:SListNode = _arg1;
        var _local7:SListNode = _arg1;
        while (_local7) {
            var _temp1 = _local5;
            _local5 = (_local5 + 1);
            var _local11 = _temp1;
            _local4[_local11] = _local7.data;
            _local7 = _local7.next;
        };
        if (_arg3){
            if (_local5 <= 1){
                return (_local6);
            };
            _local9 = 1;
            while (_local9 < _local5) {
                _local10 = _local4[_local9];
                _local8 = _local9;
                while ((((_local8 > 0)) && ((_arg2(_local4[int((_local8 - 1))], _local10) < 0)))) {
                    _local4[_local8] = _local4[int((_local8 - 1))];
                    _local8--;
                };
                _local4[_local8] = _local10;
                _local9++;
            };
        } else {
            if (_local5 <= 1){
                return (_local6);
            };
            _local9 = 1;
            while (_local9 < _local5) {
                _local10 = _local4[_local9];
                _local8 = _local9;
                while ((((_local8 > 0)) && ((_arg2(_local4[int((_local8 - 1))], _local10) > 0)))) {
                    _local4[_local8] = _local4[int((_local8 - 1))];
                    _local8--;
                };
                _local4[_local8] = _local10;
                _local9++;
            };
        };
        _local7 = _local6;
        _local9 = 0;
        while (_local7) {
            var _temp2 = _local9;
            _local9 = (_local9 + 1);
            _local7.data = _local4[_temp2];
            _local7 = _local7.next;
        };
        return (_local6);
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function dLinkedMergeSortCmp(_arg1:DListNode, _arg2:Function, _arg3:Boolean=false):DListNode{
        var _local5:DListNode;
        var _local6:DListNode;
        var _local7:DListNode;
        var _local8:DListNode;
        var _local10:int;
        var _local11:int;
        var _local12:int;
        var _local13:int;
        if (((!(_arg1)) || ((_arg2 == null)))){
            return (null);
        };
        var _local4:DListNode = _arg1;
        var _local9 = 1;
        if (_arg3){
            while (true) {
                _local5 = _local4;
                _local8 = null;
                _local4 = _local8;
                _local10 = 0;
                while (_local5) {
                    _local10++;
                    _local13 = 0;
                    _local11 = 0;
                    _local6 = _local5;
                    while (_local13 < _local9) {
                        _local11++;
                        _local6 = _local6.next;
                        if (!_local6){
                            break;
                        };
                        _local13++;
                    };
                    _local12 = _local9;
                    while ((((_local11 > 0)) || ((((_local12 > 0)) && (_local6))))) {
                        if (_local11 == 0){
                            _local7 = _local6;
                            _local6 = _local6.next;
                            _local12--;
                        } else {
                            if ((((_local12 == 0)) || (!(_local6)))){
                                _local7 = _local5;
                                _local5 = _local5.next;
                                _local11--;
                            } else {
                                if (_arg2(_local5.data, _local6.data) >= 0){
                                    _local7 = _local5;
                                    _local5 = _local5.next;
                                    _local11--;
                                } else {
                                    _local7 = _local6;
                                    _local6 = _local6.next;
                                    _local12--;
                                };
                            };
                        };
                        if (_local8){
                            _local8.next = _local7;
                        } else {
                            _local4 = _local7;
                        };
                        _local7.prev = _local8;
                        _local8 = _local7;
                    };
                    _local5 = _local6;
                };
                _arg1.prev = _local8;
                _local8.next = null;
                if (_local10 <= 1){
                    return (_local4);
                };
                _local9 = (_local9 << 1);
            };
        };
        _local5 = _local4;
        _local8 = null;
        _local4 = _local8;
        _local10 = 0;
        while (_local5) {
            _local10++;
            _local13 = 0;
            _local11 = 0;
            _local6 = _local5;
            while (_local13 < _local9) {
                _local11++;
                _local6 = _local6.next;
                if (!_local6){
                    break;
                };
                _local13++;
            };
            _local12 = _local9;
            while ((((_local11 > 0)) || ((((_local12 > 0)) && (_local6))))) {
                if (_local11 == 0){
                    _local7 = _local6;
                    _local6 = _local6.next;
                    _local12--;
                } else {
                    if ((((_local12 == 0)) || (!(_local6)))){
                        _local7 = _local5;
                        _local5 = _local5.next;
                        _local11--;
                    } else {
                        if (_arg2(_local5.data, _local6.data) <= 0){
                            _local7 = _local5;
                            _local5 = _local5.next;
                            _local11--;
                        } else {
                            _local7 = _local6;
                            _local6 = _local6.next;
                            _local12--;
                        };
                    };
                };
                if (_local8){
                    _local8.next = _local7;
                } else {
                    _local4 = _local7;
                };
                _local7.prev = _local8;
                _local8 = _local7;
            };
            _local5 = _local6;
        };
        _arg1.prev = _local8;
        _local8.next = null;
        if (_local10 <= 1){
            return (_local4);
        };
        _local9 = (_local9 << 1);
        //unresolved jump
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function dLinkedInsertionSortCmp(_arg1:DListNode, _arg2:Function, _arg3:Boolean=false):DListNode{
        var _local5:DListNode;
        var _local6:DListNode;
        var _local7:DListNode;
        var _local8:DListNode;
        var _local9:*;
        if (((!(_arg1)) || ((_arg2 == null)))){
            return (null);
        };
        var _local4:DListNode = _arg1;
        if (_arg3){
            _local6 = _local4.next;
            while (_local6) {
                _local7 = _local6.next;
                _local5 = _local6.prev;
                if (_arg2(_local5.data, _local6.data) < 0){
                    _local8 = _local5;
                    while (_local8.prev) {
                        if (_arg2(_local8.prev.data, _local6.data) < 0){
                            _local8 = _local8.prev;
                        } else {
                            break;
                        };
                    };
                    if (_local7){
                        _local5.next = _local7;
                        _local7.prev = _local5;
                    } else {
                        _local5.next = null;
                    };
                    if (_local8 == _local4){
                        _local6.prev = null;
                        _local6.next = _local8;
                        _local8.prev = _local6;
                        _local4 = _local6;
                    } else {
                        _local6.prev = _local8.prev;
                        _local8.prev.next = _local6;
                        _local6.next = _local8;
                        _local8.prev = _local6;
                    };
                };
                _local6 = _local7;
            };
        } else {
            _local6 = _local4.next;
            while (_local6) {
                _local7 = _local6.next;
                _local5 = _local6.prev;
                if (_arg2(_local5.data, _local6.data) > 0){
                    _local8 = _local5;
                    while (_local8.prev) {
                        if (_arg2(_local8.prev.data, _local6.data) > 0){
                            _local8 = _local8.prev;
                        } else {
                            break;
                        };
                    };
                    if (_local7){
                        _local5.next = _local7;
                        _local7.prev = _local5;
                    } else {
                        _local5.next = null;
                    };
                    if (_local8 == _local4){
                        _local6.prev = null;
                        _local6.next = _local8;
                        _local8.prev = _local6;
                        _local4 = _local6;
                    } else {
                        _local6.prev = _local8.prev;
                        _local8.prev.next = _local6;
                        _local6.next = _local8;
                        _local8.prev = _local6;
                    };
                };
                _local6 = _local7;
            };
        };
        return (_local4);
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function dLinkedInsertionSort(_arg1:DListNode, _arg2:Boolean=false):DListNode{
        var _local4:DListNode;
        var _local5:DListNode;
        var _local6:DListNode;
        var _local7:DListNode;
        var _local8:*;
        if (!_arg1){
            return (null);
        };
        var _local3:DListNode = _arg1;
        if (_arg2){
            _local5 = _local3.next;
            while (_local5) {
                _local6 = _local5.next;
                _local4 = _local5.prev;
                if (_local4.data < _local5.data){
                    _local7 = _local4;
                    while (_local7.prev) {
                        if (_local7.prev.data < _local5.data){
                            _local7 = _local7.prev;
                        } else {
                            break;
                        };
                    };
                    if (_local6){
                        _local4.next = _local6;
                        _local6.prev = _local4;
                    } else {
                        _local4.next = null;
                    };
                    if (_local7 == _local3){
                        _local5.prev = null;
                        _local5.next = _local7;
                        _local7.prev = _local5;
                        _local3 = _local5;
                    } else {
                        _local5.prev = _local7.prev;
                        _local7.prev.next = _local5;
                        _local5.next = _local7;
                        _local7.prev = _local5;
                    };
                };
                _local5 = _local6;
            };
            return (_local3);
        };
        _local5 = _local3.next;
        while (_local5) {
            _local6 = _local5.next;
            _local4 = _local5.prev;
            if (_local4.data > _local5.data){
                _local7 = _local4;
                while (_local7.prev) {
                    if (_local7.prev.data > _local5.data){
                        _local7 = _local7.prev;
                    } else {
                        break;
                    };
                };
                if (_local6){
                    _local4.next = _local6;
                    _local6.prev = _local4;
                } else {
                    _local4.next = null;
                };
                if (_local7 == _local3){
                    _local5.prev = null;
                    _local5.next = _local7;
                    _local7.prev = _local5;
                    _local3 = _local5;
                } else {
                    _local5.prev = _local7.prev;
                    _local7.prev.next = _local5;
                    _local5.next = _local7;
                    _local7.prev = _local5;
                };
            };
            _local5 = _local6;
        };
        return (_local3);
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds.sort {
    import de.polygonal.ds.*;

    public function sLinkedMergeSort(_arg1:SListNode, _arg2:Boolean=false):SListNode{
        var _local4:SListNode;
        var _local5:SListNode;
        var _local6:SListNode;
        var _local7:SListNode;
        var _local9:int;
        var _local10:int;
        var _local11:int;
        var _local12:int;
        if (!_arg1){
            return (null);
        };
        var _local3:SListNode = _arg1;
        var _local8 = 1;
        if (_arg2){
            while (true) {
                _local4 = _local3;
                _local7 = null;
                _local3 = _local7;
                _local9 = 0;
                while (_local4) {
                    _local9++;
                    _local12 = 0;
                    _local10 = 0;
                    _local5 = _local4;
                    while (_local12 < _local8) {
                        _local10++;
                        _local5 = _local5.next;
                        if (!_local5){
                            break;
                        };
                        _local12++;
                    };
                    _local11 = _local8;
                    while ((((_local10 > 0)) || ((((_local11 > 0)) && (_local5))))) {
                        if (_local10 == 0){
                            _local6 = _local5;
                            _local5 = _local5.next;
                            _local11--;
                        } else {
                            if ((((_local11 == 0)) || (!(_local5)))){
                                _local6 = _local4;
                                _local4 = _local4.next;
                                _local10--;
                            } else {
                                if ((_local4.data - _local5.data) >= 0){
                                    _local6 = _local4;
                                    _local4 = _local4.next;
                                    _local10--;
                                } else {
                                    _local6 = _local5;
                                    _local5 = _local5.next;
                                    _local11--;
                                };
                            };
                        };
                        if (_local7){
                            _local7.next = _local6;
                        } else {
                            _local3 = _local6;
                        };
                        _local7 = _local6;
                    };
                    _local4 = _local5;
                };
                _local7.next = null;
                if (_local9 <= 1){
                    return (_local3);
                };
                _local8 = (_local8 << 1);
            };
        };
        _local4 = _local3;
        _local7 = null;
        _local3 = _local7;
        _local9 = 0;
        while (_local4) {
            _local9++;
            _local12 = 0;
            _local10 = 0;
            _local5 = _local4;
            while (_local12 < _local8) {
                _local10++;
                _local5 = _local5.next;
                if (!_local5){
                    break;
                };
                _local12++;
            };
            _local11 = _local8;
            while ((((_local10 > 0)) || ((((_local11 > 0)) && (_local5))))) {
                if (_local10 == 0){
                    _local6 = _local5;
                    _local5 = _local5.next;
                    _local11--;
                } else {
                    if ((((_local11 == 0)) || (!(_local5)))){
                        _local6 = _local4;
                        _local4 = _local4.next;
                        _local10--;
                    } else {
                        if ((_local4.data - _local5.data) <= 0){
                            _local6 = _local4;
                            _local4 = _local4.next;
                            _local10--;
                        } else {
                            _local6 = _local5;
                            _local5 = _local5.next;
                            _local11--;
                        };
                    };
                };
                if (_local7){
                    _local7.next = _local6;
                } else {
                    _local3 = _local6;
                };
                _local7 = _local6;
            };
            _local4 = _local5;
        };
        _local7.next = null;
        if (_local9 <= 1){
            return (_local3);
        };
        _local8 = (_local8 << 1);
        //unresolved jump
    }
}//package de.polygonal.ds.sort 
﻿package de.polygonal.ds {

    public class LinkedQueue implements Collection {

        private var _list:SLinkedList;

        public function LinkedQueue(_arg1:SLinkedList=null){
            if (_arg1 == null){
                _list = new SLinkedList();
            } else {
                _list = _arg1;
            };
        }
        public function get size():int{
            return (_list.size);
        }
        public function isEmpty():Boolean{
            return ((_list.size == 0));
        }
        public function getIterator():Iterator{
            return (_list.getIterator());
        }
        public function contains(_arg1):Boolean{
            return (_list.contains(_arg1));
        }
        public function back(){
            return ((((_list.size > 0)) ? _list.tail.data : null));
        }
        public function enqueue(_arg1):void{
            _list.append(_arg1);
        }
        public function toString():String{
            return ((("[LinkedQueue > " + _list) + "]"));
        }
        public function clear():void{
            _list.clear();
        }
        public function dequeue(){
            var _local1:*;
            if (_list.size > 0){
                _local1 = _list.head.data;
                _list.removeHead();
                return (_local1);
            };
            return (null);
        }
        public function dump():String{
            return (("LinkedQueue:\n" + _list.dump()));
        }
        public function peek(){
            return ((((_list.size > 0)) ? _list.head.data : null));
        }
        public function toArray():Array{
            return (_list.toArray());
        }

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {

    public class SListIterator implements Iterator {

        public var node:SListNode;
        public var list:SLinkedList;

        public function SListIterator(_arg1:SLinkedList=null, _arg2:SListNode=null){
            this.list = _arg1;
            this.node = _arg2;
        }
        public function remove():Boolean{
            return (list.remove(this));
        }
        public function start():void{
            if (list){
                node = list.head;
            };
        }
        public function get data(){
            if (node){
                return (node.data);
            };
            return (null);
        }
        public function forth():void{
            if (node){
                node = node.next;
            };
        }
        public function toString():String{
            return ((("{SListIterator: data=" + node.data) + "}"));
        }
        public function hasNext():Boolean{
            return (Boolean(node));
        }
        public function valid():Boolean{
            return (Boolean(node));
        }
        public function next(){
            var _local1:*;
            if (hasNext()){
                _local1 = node.data;
                node = node.next;
                return (_local1);
            };
            return (null);
        }
        public function set data(_arg1):void{
            node.data = _arg1;
        }
        public function end():void{
            if (list){
                node = list.tail;
            };
        }

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {
    import de.polygonal.ds.sort.*;
    import de.polygonal.ds.sort.compare.*;

    public class SLinkedList implements Collection {

        public static const MERGE_SORT:int = (1 << 2);
        public static const DESCENDING:int = (1 << 4);
        public static const NUMERIC:int = (1 << 3);
        public static const INSERTION_SORT:int = (1 << 1);

        private var _count:int;
        public var tail:SListNode;
        public var head:SListNode;

        public function SLinkedList(... _args){
            head = (tail = null);
            _count = 0;
            if (_args.length > 0){
                append.apply(this, _args);
            };
        }
        public function get size():int{
            return (_count);
        }
        public function isEmpty():Boolean{
            return ((_count == 0));
        }
        public function remove(_arg1:SListIterator):Boolean{
            if (((!((_arg1.list == this))) || (!(_arg1.node)))){
                return (false);
            };
            var _local2:SListNode = head;
            if (_arg1.node == head){
                _arg1.forth();
                removeHead();
                return (true);
            };
            while (_local2.next != _arg1.node) {
                _local2 = _local2.next;
            };
            _arg1.forth();
            if (_local2.next == tail){
                tail = _local2;
            };
            _local2.next = _arg1.node;
            _count--;
            return (true);
        }
        public function removeHead(){
            var _local1:*;
            var _local2:SListNode;
            if (head){
                _local1 = head.data;
                if (head == tail){
                    head = (tail = null);
                } else {
                    _local2 = head;
                    head = head.next;
                    _local2.next = null;
                    if (head == null){
                        tail = null;
                    };
                };
                _count--;
                return (_local1);
            };
            return (null);
        }
        public function clear():void{
            var _local2:SListNode;
            var _local1:SListNode = head;
            head = null;
            while (_local1) {
                _local2 = _local1.next;
                _local1.next = null;
                _local1 = _local2;
            };
            _count = 0;
        }
        public function prepend(... _args):SListNode{
            var _local4:SListNode;
            var _local5:int;
            var _local2:int = _args.length;
            var _local3:SListNode = new SListNode(_args[int((_local2 - 1))]);
            if (head){
                _local3.next = head;
                head = _local3;
            } else {
                head = (tail = _local3);
            };
            if (_local2 > 1){
                _local4 = _local3;
                _local5 = (_local2 - 2);
                while (_local5 >= 0) {
                    _local3 = new SListNode(_args[_local5]);
                    _local3.next = head;
                    head = _local3;
                    _local5--;
                };
                _count = (_count + _local2);
                return (_local4);
            };
            _count++;
            return (_local3);
        }
        public function popDown():void{
            var _local2:SListNode;
            var _local1:SListNode = tail;
            if (head.next == tail){
                tail = head;
                head = _local1;
                tail.next = null;
                head.next = tail;
            } else {
                _local2 = head;
                while (_local2.next != tail) {
                    _local2 = _local2.next;
                };
                tail = _local2;
                tail.next = null;
                _local1.next = head;
                head = _local1;
            };
        }
        public function concat(... _args):SLinkedList{
            var _local3:SLinkedList;
            var _local4:SListNode;
            var _local2:SLinkedList = new SLinkedList();
            _local4 = head;
            while (_local4) {
                _local2.append(_local4.data);
                _local4 = _local4.next;
            };
            var _local5:int = _args.length;
            var _local6:int;
            while (_local6 < _local5) {
                _local3 = _args[_local6];
                _local4 = _local3.head;
                while (_local4) {
                    _local2.append(_local4.data);
                    _local4 = _local4.next;
                };
                _local6++;
            };
            return (_local2);
        }
        public function append(... _args):SListNode{
            var _local4:SListNode;
            var _local5:int;
            var _local2:int = _args.length;
            var _local3:SListNode = new SListNode(_args[0]);
            if (head){
                tail.next = _local3;
                tail = _local3;
            } else {
                head = (tail = _local3);
            };
            if (_local2 > 1){
                _local4 = _local3;
                _local5 = 1;
                while (_local5 < _local2) {
                    _local3 = new SListNode(_args[_local5]);
                    tail.next = _local3;
                    tail = _local3;
                    _local5++;
                };
                _count = (_count + _local2);
                return (_local4);
            };
            _count++;
            return (_local3);
        }
        public function sort(... _args):void{
            var _local2:int;
            var _local3:Function;
            var _local4:*;
            if (_count <= 1){
                return;
            };
            if (_args.length > 0){
                _local2 = 0;
                _local3 = null;
                _local4 = _args[0];
                if ((_local4 is Function)){
                    _local3 = _local4;
                    if (_args.length > 1){
                        _local4 = _args[1];
                        if ((_local4 is int)){
                            _local2 = _local4;
                        };
                    };
                } else {
                    if ((_local4 is int)){
                        _local2 = _local4;
                    };
                };
                if (Boolean(_local3)){
                    if ((_local2 & 2)){
                        head = sLinkedInsertionSortCmp(head, _local3, (_local2 == 18));
                    } else {
                        head = sLinkedMergeSortCmp(head, _local3, (_local2 == 16));
                    };
                } else {
                    if ((_local2 & 2)){
                        if ((_local2 & 4)){
                            if (_local2 == 22){
                                head = sLinkedInsertionSortCmp(head, compareStringCaseSensitiveDesc);
                            } else {
                                if (_local2 == 14){
                                    head = sLinkedInsertionSortCmp(head, compareStringCaseInSensitive);
                                } else {
                                    if (_local2 == 30){
                                        head = sLinkedInsertionSortCmp(head, compareStringCaseInSensitiveDesc);
                                    } else {
                                        head = sLinkedInsertionSortCmp(head, compareStringCaseSensitive);
                                    };
                                };
                            };
                        } else {
                            head = sLinkedInsertionSort(head, (_local2 == 18));
                        };
                    } else {
                        if ((_local2 & 4)){
                            if (_local2 == 20){
                                head = sLinkedMergeSortCmp(head, compareStringCaseSensitiveDesc);
                            } else {
                                if (_local2 == 12){
                                    head = sLinkedMergeSortCmp(head, compareStringCaseInSensitive);
                                } else {
                                    if (_local2 == 28){
                                        head = sLinkedMergeSortCmp(head, compareStringCaseInSensitiveDesc);
                                    } else {
                                        head = sLinkedMergeSortCmp(head, compareStringCaseSensitive);
                                    };
                                };
                            };
                        } else {
                            if ((_local2 & 16)){
                                head = sLinkedMergeSort(head, true);
                            };
                        };
                    };
                };
            } else {
                head = sLinkedMergeSort(head);
            };
        }
        public function reverse():void{
            if (_count == 0){
                return;
            };
            var _local1:Array = new Array(_count);
            var _local2:int;
            var _local3:SListNode = head;
            while (_local3) {
                var _temp1 = _local2;
                _local2 = (_local2 + 1);
                var _local4 = _temp1;
                _local1[_local4] = _local3;
                _local3 = _local3.next;
            };
            _local1.reverse();
            _local3 = (head = _local1[0]);
            _local2 = 1;
            while (_local2 < _count) {
                _local3 = (_local3.next = _local1[_local2]);
                _local2++;
            };
            _local3.next = null;
            tail = _local3;
            _local1 = null;
        }
        public function insertAfter(_arg1:SListIterator, _arg2):SListNode{
            var _local3:SListNode;
            if (_arg1.list != this){
                return (null);
            };
            if (_arg1.node){
                _local3 = new SListNode(_arg2);
                _arg1.node.insertAfter(_local3);
                if (_arg1.node == tail){
                    tail = _arg1.node.next;
                };
                _count++;
                return (_local3);
            };
            return (append(_arg2));
        }
        public function getIterator():Iterator{
            return (new SListIterator(this, head));
        }
        public function toArray():Array{
            var _local1:Array = [];
            var _local2:SListNode = head;
            while (_local2) {
                _local1.push(_local2.data);
                _local2 = _local2.next;
            };
            return (_local1);
        }
        public function contains(_arg1):Boolean{
            var _local2:SListNode = head;
            while (_local2) {
                if (_local2.data == _arg1){
                    return (true);
                };
                _local2 = _local2.next;
            };
            return (false);
        }
        public function getListIterator():SListIterator{
            return (new SListIterator(this, head));
        }
        public function join(_arg1):String{
            if (_count == 0){
                return ("");
            };
            var _local2 = "";
            var _local3:SListNode = head;
            while (_local3.next) {
                _local2 = (_local2 + (_local3.data + _arg1));
                _local3 = _local3.next;
            };
            _local2 = (_local2 + _local3.data);
            return (_local2);
        }
        public function toString():String{
            return ((("[SlinkedList, size=" + size) + "]"));
        }
        public function removeTail(){
            var _local1:*;
            var _local2:SListNode;
            if (tail){
                _local1 = tail.data;
                if (head == tail){
                    head = (tail = null);
                } else {
                    _local2 = head;
                    while (_local2.next != tail) {
                        _local2 = _local2.next;
                    };
                    tail = _local2;
                    _local2.next = null;
                };
                _count--;
                return (_local1);
            };
            return (null);
        }
        public function merge(... _args):void{
            var _local2:SLinkedList;
            if (_args.length == 0){
                return;
            };
            _local2 = _args[0];
            if (_local2.head){
                if (head){
                    tail.next = _local2.head;
                    tail = _local2.tail;
                } else {
                    head = _local2.head;
                    tail = _local2.tail;
                };
                _count = (_count + _local2.size);
            };
            var _local3:int = _args.length;
            var _local4 = 1;
            while (_local4 < _local3) {
                _local2 = _args[_local4];
                if (_local2.head){
                    tail.next = _local2.head;
                    tail = _local2.tail;
                    _count = (_count + _local2.size);
                };
                _local4++;
            };
        }
        public function nodeOf(_arg1, _arg2:SListIterator=null):SListIterator{
            if (_arg2 != null){
                if (_arg2.list != null){
                    return (null);
                };
            };
            var _local3:SListNode = ((_arg2)==null) ? head : _arg2.node;
            while (_local3) {
                if (_local3.data === _arg1){
                    return (new SListIterator(this, _local3));
                };
                _local3 = _local3.next;
            };
            return (null);
        }
        public function dump():String{
            if (!head){
                return ("SLinkedList: (empty)");
            };
            var _local1 = (((("SLinkedList: has " + _count) + " node") + (((_count == 1)) ? "" : "s")) + "\n|< Head\n");
            var _local2:SListIterator = getListIterator();
            while (_local2.valid()) {
                _local1 = (_local1 + (("\t" + _local2.data) + "\n"));
                _local2.forth();
            };
            _local1 = (_local1 + "Tail >|");
            return (_local1);
        }
        public function splice(_arg1:SListIterator, _arg2:uint=0xFFFFFFFF, ... _args):SLinkedList{
            var _local4:SListNode;
            var _local5:SListNode;
            var _local6:SLinkedList;
            var _local7:int;
            var _local8:int;
            var _local9:SListNode;
            if (_arg1){
                if (_arg1.list != this){
                    return (null);
                };
            };
            if (_arg1.node){
                _local4 = _arg1.node;
                _local5 = head;
                while (_local5.next != _local4) {
                    _local5 = _local5.next;
                };
                _local6 = new SLinkedList();
                if (_arg2 == 0xFFFFFFFF){
                    if (_arg1.node == tail){
                        return (_local6);
                    };
                    while (_arg1.node) {
                        _local6.append(_arg1.node.data);
                        _arg1.remove();
                    };
                    _arg1.list = _local6;
                    _arg1.node = _local4;
                    return (_local6);
                };
                _local7 = 0;
                while (_local7 < _arg2) {
                    if (_arg1.node){
                        _local6.append(_arg1.node.data);
                        _arg1.remove();
                    } else {
                        break;
                    };
                    _local7++;
                };
                _local8 = _args.length;
                if (_local8 > 0){
                    if (_count == 0){
                        _local7 = 0;
                        while (_local7 < _local8) {
                            append(_args[_local7]);
                            _local7++;
                        };
                    } else {
                        if (_local5 == null){
                            _local9 = prepend(_args[0]);
                            _local7 = 1;
                            while (_local7 < _local8) {
                                _local9.insertAfter(new SListNode(_args[_local7]));
                                if (_local9 == tail){
                                    tail = _local9.next;
                                };
                                _local9 = _local9.next;
                                _count++;
                                _local7++;
                            };
                        } else {
                            _local9 = _local5;
                            _local7 = 0;
                            while (_local7 < _local8) {
                                _local9.insertAfter(new SListNode(_args[_local7]));
                                if (_local9 == tail){
                                    tail = _local9.next;
                                };
                                _local9 = _local9.next;
                                _count++;
                                _local7++;
                            };
                        };
                    };
                    _arg1.node = _local9;
                } else {
                    _arg1.node = _local4;
                };
                _arg1.list = _local6;
                return (_local6);
            };
            return (null);
        }
        public function shiftUp():void{
            var _local1:SListNode = head;
            if (head.next == tail){
                head = tail;
                tail = _local1;
                tail.next = null;
                head.next = tail;
            } else {
                head = head.next;
                tail.next = _local1;
                _local1.next = null;
                tail = _local1;
            };
        }

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {

    public class SListNode implements LinkedListNode {

        public var next:SListNode;
        public var data;

        public function SListNode(_arg1){
            data = _arg1;
            next = null;
        }
        public function insertAfter(_arg1:SListNode):void{
            _arg1.next = next;
            next = _arg1;
        }
        public function toString():String{
            return ((("[SListNode, data=" + data) + "]"));
        }

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {

    public class DListIterator implements Iterator {

        public var node:DListNode;
        public var list:DLinkedList;

        public function DListIterator(_arg1:DLinkedList, _arg2:DListNode=null){
            this.list = _arg1;
            this.node = _arg2;
        }
        public function remove():Boolean{
            return (list.remove(this));
        }
        public function back():void{
            if (node){
                node = node.prev;
            };
        }
        public function start():void{
            node = list.head;
        }
        public function get data(){
            if (node){
                return (node.data);
            };
            return (null);
        }
        public function forth():void{
            if (node){
                node = node.next;
            };
        }
        public function toString():String{
            return ((("{DListIterator, data=" + ((node) ? node.data : "null")) + "}"));
        }
        public function hasNext():Boolean{
            return (Boolean(node));
        }
        public function valid():Boolean{
            return (Boolean(node));
        }
        public function next(){
            var _local1:*;
            if (hasNext()){
                _local1 = node.data;
                node = node.next;
                return (_local1);
            };
            return (null);
        }
        public function set data(_arg1):void{
            node.data = _arg1;
        }
        public function end():void{
            node = list.tail;
        }

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {
    import de.polygonal.ds.sort.*;
    import de.polygonal.ds.sort.compare.*;

    public class DLinkedList implements Collection {

        private var _count:int;
        public var tail:DListNode;
        public var head:DListNode;

        public function DLinkedList(... _args){
            head = (tail = null);
            _count = 0;
            if (_args.length > 0){
                append.apply(this, _args);
            };
        }
        public function get size():int{
            return (_count);
        }
        public function isEmpty():Boolean{
            return ((_count == 0));
        }
        public function remove(_arg1:DListIterator):Boolean{
            if (((!((_arg1.list == this))) || (!(_arg1.node)))){
                return (false);
            };
            var _local2:DListNode = _arg1.node;
            if (_local2 == head){
                head = head.next;
            } else {
                if (_local2 == tail){
                    tail = tail.prev;
                };
            };
            if (_arg1.node){
                _arg1.node = _arg1.node.next;
            };
            if (_local2.prev){
                _local2.prev.next = _local2.next;
            };
            if (_local2.next){
                _local2.next.prev = _local2.prev;
            };
            _local2.next = (_local2.prev = null);
            if (head == null){
                tail = null;
            };
            _count--;
            return (true);
        }
        public function removeHead(){
            var _local1:*;
            if (head){
                _local1 = head.data;
                head = head.next;
                if (head){
                    head.prev = null;
                } else {
                    tail = null;
                };
                _count--;
                return (_local1);
            };
            return (null);
        }
        public function clear():void{
            var _local2:DListNode;
            var _local1:DListNode = head;
            head = null;
            while (_local1) {
                _local2 = _local1.next;
                _local1.next = (_local1.prev = null);
                _local1 = _local2;
            };
            _count = 0;
        }
        public function prepend(... _args):DListNode{
            var _local4:DListNode;
            var _local5:int;
            var _local2:int = _args.length;
            var _local3:DListNode = new DListNode(_args[int((_local2 - 1))]);
            if (head){
                head.insertBefore(_local3);
                head = head.prev;
            } else {
                head = (tail = _local3);
            };
            if (_local2 > 1){
                _local4 = _local3;
                _local5 = (_local2 - 2);
                while (_local5 >= 0) {
                    _local3 = new DListNode(_args[_local5]);
                    head.insertBefore(_local3);
                    head = head.prev;
                    _local5--;
                };
                _count = (_count + _local2);
                return (_local4);
            };
            _count++;
            return (_local3);
        }
        public function popDown():void{
            var _local1:DListNode = tail;
            if (tail.prev == head){
                tail = head;
                tail.next = null;
                head = _local1;
                head.prev = null;
                head.next = tail;
                tail.prev = head;
            } else {
                tail = tail.prev;
                tail.next = null;
                head.prev = _local1;
                _local1.prev = null;
                _local1.next = head;
                head = _local1;
            };
        }
        public function concat(... _args):DLinkedList{
            var _local3:DLinkedList;
            var _local4:DListNode;
            var _local2:DLinkedList = new DLinkedList();
            _local4 = head;
            while (_local4) {
                _local2.append(_local4.data);
                _local4 = _local4.next;
            };
            var _local5:int = _args.length;
            var _local6:int;
            while (_local6 < _local5) {
                _local3 = _args[_local6];
                _local4 = _local3.head;
                while (_local4) {
                    _local2.append(_local4.data);
                    _local4 = _local4.next;
                };
                _local6++;
            };
            return (_local2);
        }
        public function insertBefore(_arg1:DListIterator, _arg2):DListNode{
            var _local3:DListNode;
            if (_arg1.list != this){
                return (null);
            };
            if (_arg1.node){
                _local3 = new DListNode(_arg2);
                _arg1.node.insertBefore(_local3);
                if (_arg1.node == head){
                    head = head.prev;
                };
                _count++;
                return (_local3);
            };
            return (prepend(_arg2));
        }
        public function append(... _args):DListNode{
            var _local4:DListNode;
            var _local5:int;
            var _local2:int = _args.length;
            var _local3:DListNode = new DListNode(_args[0]);
            if (head){
                tail.insertAfter(_local3);
                tail = tail.next;
            } else {
                head = (tail = _local3);
            };
            if (_local2 > 1){
                _local4 = _local3;
                _local5 = 1;
                while (_local5 < _local2) {
                    _local3 = new DListNode(_args[_local5]);
                    tail.insertAfter(_local3);
                    tail = tail.next;
                    _local5++;
                };
                _count = (_count + _local2);
                return (_local4);
            };
            _count++;
            return (_local3);
        }
        public function sort(... _args):void{
            var _local2:int;
            var _local3:Function;
            var _local4:*;
            if (_count <= 1){
                return;
            };
            if (_args.length > 0){
                _local2 = 0;
                _local3 = null;
                _local4 = _args[0];
                if ((_local4 is Function)){
                    _local3 = _local4;
                    if (_args.length > 1){
                        _local4 = _args[1];
                        if ((_local4 is int)){
                            _local2 = _local4;
                        };
                    };
                } else {
                    if ((_local4 is int)){
                        _local2 = _local4;
                    };
                };
                if (Boolean(_local3)){
                    if ((_local2 & 2)){
                        head = dLinkedInsertionSortCmp(head, _local3, (_local2 == 18));
                    } else {
                        head = dLinkedMergeSortCmp(head, _local3, (_local2 == 16));
                    };
                } else {
                    if ((_local2 & 2)){
                        if ((_local2 & 4)){
                            if (_local2 == 22){
                                head = dLinkedInsertionSortCmp(head, compareStringCaseSensitiveDesc);
                            } else {
                                if (_local2 == 14){
                                    head = dLinkedInsertionSortCmp(head, compareStringCaseInSensitive);
                                } else {
                                    if (_local2 == 30){
                                        head = dLinkedInsertionSortCmp(head, compareStringCaseInSensitiveDesc);
                                    } else {
                                        head = dLinkedInsertionSortCmp(head, compareStringCaseSensitive);
                                    };
                                };
                            };
                        } else {
                            head = dLinkedInsertionSort(head, (_local2 == 18));
                        };
                    } else {
                        if ((_local2 & 4)){
                            if (_local2 == 20){
                                head = dLinkedMergeSortCmp(head, compareStringCaseSensitiveDesc);
                            } else {
                                if (_local2 == 12){
                                    head = dLinkedMergeSortCmp(head, compareStringCaseInSensitive);
                                } else {
                                    if (_local2 == 28){
                                        head = dLinkedMergeSortCmp(head, compareStringCaseInSensitiveDesc);
                                    } else {
                                        head = dLinkedMergeSortCmp(head, compareStringCaseSensitive);
                                    };
                                };
                            };
                        } else {
                            if ((_local2 & 16)){
                                head = dLinkedMergeSort(head, true);
                            };
                        };
                    };
                };
            } else {
                head = dLinkedMergeSort(head);
            };
        }
        public function contains(_arg1):Boolean{
            var _local2:DListNode = head;
            while (_local2) {
                if (_local2.data == _arg1){
                    return (true);
                };
                _local2 = _local2.next;
            };
            return (false);
        }
        public function reverse():void{
            var _local1:DListNode;
            var _local3:DListNode;
            if (_count == 0){
                return;
            };
            var _local2:DListNode = tail;
            while (_local2) {
                _local1 = _local2.prev;
                if (!_local2.next){
                    _local2.next = _local2.prev;
                    _local2.prev = null;
                    head = _local2;
                } else {
                    if (!_local2.prev){
                        _local2.prev = _local2.next;
                        _local2.next = null;
                        tail = _local2;
                    } else {
                        _local3 = _local2.next;
                        _local2.next = _local2.prev;
                        _local2.prev = _local3;
                    };
                };
                _local2 = _local1;
            };
        }
        public function insertAfter(_arg1:DListIterator, _arg2):DListNode{
            var _local3:DListNode;
            if (_arg1.list != this){
                return (null);
            };
            if (_arg1.node){
                _local3 = new DListNode(_arg2);
                _arg1.node.insertAfter(_local3);
                if (_arg1.node == tail){
                    tail = _arg1.node.next;
                };
                _count++;
                return (_local3);
            };
            return (append(_arg2));
        }
        public function getIterator():Iterator{
            return (new DListIterator(this, head));
        }
        public function toArray():Array{
            var _local1:Array = [];
            var _local2:DListNode = head;
            while (_local2) {
                _local1.push(_local2.data);
                _local2 = _local2.next;
            };
            return (_local1);
        }
        public function getListIterator():DListIterator{
            return (new DListIterator(this, head));
        }
        public function join(_arg1):String{
            if (_count == 0){
                return ("");
            };
            var _local2 = "";
            var _local3:DListNode = head;
            while (_local3.next) {
                _local2 = (_local2 + (_local3.data + _arg1));
                _local3 = _local3.next;
            };
            _local2 = (_local2 + _local3.data);
            return (_local2);
        }
        public function toString():String{
            return ((("[DLinkedList > has " + size) + " nodes]"));
        }
        public function removeTail(){
            var _local1:*;
            if (tail){
                _local1 = tail.data;
                tail = tail.prev;
                if (tail){
                    tail.next = null;
                } else {
                    head = null;
                };
                _count--;
                return (_local1);
            };
            return (null);
        }
        public function lastNodeOf(_arg1, _arg2:DListIterator=null):DListIterator{
            if (_arg2 != null){
                if (_arg2.list != this){
                    return (null);
                };
            };
            var _local3:DListNode = ((_arg2)==null) ? tail : _arg2.node;
            while (_local3) {
                if (_local3.data === _arg1){
                    return (new DListIterator(this, _local3));
                };
                _local3 = _local3.prev;
            };
            return (null);
        }
        public function merge(... _args):void{
            var _local2:DLinkedList;
            _local2 = _args[0];
            if (_local2.head){
                if (head){
                    tail.next = _local2.head;
                    _local2.head.prev = tail;
                    tail = _local2.tail;
                } else {
                    head = _local2.head;
                    tail = _local2.tail;
                };
                _count = (_count + _local2.size);
            };
            var _local3:int = _args.length;
            var _local4 = 1;
            while (_local4 < _local3) {
                _local2 = _args[_local4];
                if (_local2.head){
                    tail.next = _local2.head;
                    _local2.head.prev = tail;
                    tail = _local2.tail;
                    _count = (_count + _local2.size);
                };
                _local4++;
            };
        }
        public function nodeOf(_arg1, _arg2:DListIterator=null):DListIterator{
            if (_arg2 != null){
                if (_arg2.list != this){
                    return (null);
                };
            };
            var _local3:DListNode = ((_arg2)==null) ? head : _arg2.node;
            while (_local3) {
                if (_local3.data === _arg1){
                    return (new DListIterator(this, _local3));
                };
                _local3 = _local3.next;
            };
            return (null);
        }
        public function dump():String{
            if (head == null){
                return ("DLinkedList, empty");
            };
            var _local1 = (((("DLinkedList, has " + _count) + " node") + (((_count == 1)) ? "" : "s")) + "\n|< Head\n");
            var _local2:DListIterator = getListIterator();
            while (_local2.valid()) {
                _local1 = (_local1 + (("\t" + _local2.data) + "\n"));
                _local2.forth();
            };
            _local1 = (_local1 + "Tail >|");
            return (_local1);
        }
        public function splice(_arg1:DListIterator, _arg2:uint=0xFFFFFFFF, ... _args):DLinkedList{
            var _local4:DListNode;
            var _local5:DListNode;
            var _local6:DLinkedList;
            var _local7:int;
            var _local8:int;
            var _local9:DListNode;
            if (_arg1){
                if (_arg1.list != this){
                    return (null);
                };
            };
            if (_arg1.node){
                _local4 = _arg1.node;
                _local5 = _arg1.node.prev;
                _local6 = new DLinkedList();
                if (_arg2 == 0xFFFFFFFF){
                    if (_arg1.node == tail){
                        return (_local6);
                    };
                    while (_arg1.node) {
                        _local6.append(_arg1.node.data);
                        _arg1.remove();
                    };
                    _arg1.list = _local6;
                    _arg1.node = _local4;
                    return (_local6);
                };
                _local7 = 0;
                while (_local7 < _arg2) {
                    if (_arg1.node){
                        _local6.append(_arg1.node.data);
                        _arg1.remove();
                    } else {
                        break;
                    };
                    _local7++;
                };
                _local8 = _args.length;
                if (_local8 > 0){
                    if (_count == 0){
                        _local7 = 0;
                        while (_local7 < _local8) {
                            append(_args[_local7]);
                            _local7++;
                        };
                    } else {
                        if (_local5 == null){
                            _local9 = prepend(_args[0]);
                            _local7 = 1;
                            while (_local7 < _local8) {
                                _local9.insertAfter(new DListNode(_args[_local7]));
                                if (_local9 == tail){
                                    tail = _local9.next;
                                };
                                _local9 = _local9.next;
                                _count++;
                                _local7++;
                            };
                        } else {
                            _local9 = _local5;
                            _local7 = 0;
                            while (_local7 < _local8) {
                                _local9.insertAfter(new DListNode(_args[_local7]));
                                if (_local9 == tail){
                                    tail = _local9.next;
                                };
                                _local9 = _local9.next;
                                _count++;
                                _local7++;
                            };
                        };
                    };
                    _arg1.node = _local9;
                } else {
                    _arg1.node = _local4;
                };
                _arg1.list = _local6;
                return (_local6);
            };
            return (null);
        }
        public function shiftUp():void{
            var _local1:DListNode = head;
            if (head.next == tail){
                head = tail;
                head.prev = null;
                tail = _local1;
                tail.next = null;
                head.next = tail;
                tail.prev = head;
            } else {
                head = head.next;
                head.prev = null;
                tail.next = _local1;
                _local1.next = null;
                _local1.prev = tail;
                tail = _local1;
            };
        }

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {

    public interface Iterator {

        function start():void;
        function set data(_arg1):void;
        function get data();
        function next();
        function hasNext():Boolean;

    }
}//package de.polygonal.ds 
﻿package de.polygonal.ds {

    public class DListNode implements LinkedListNode {

        public var prev:DListNode;
        public var next:DListNode;
        public var data;

        public function DListNode(_arg1){
            next = (prev = null);
            data = _arg1;
        }
        public function unlink():void{
            if (prev){
                prev.next = next;
            };
            if (next){
                next.prev = prev;
            };
            next = (prev = null);
        }
        public function insertAfter(_arg1:DListNode):void{
            _arg1.next = next;
            _arg1.prev = this;
            if (next){
                next.prev = _arg1;
            };
            next = _arg1;
        }
        public function insertBefore(_arg1:DListNode):void{
            _arg1.next = this;
            _arg1.prev = prev;
            if (prev){
                prev.next = _arg1;
            };
            prev = _arg1;
        }
        public function toString():String{
            return ((("[DListNode, data=" + data) + "]"));
        }

    }
}//package de.polygonal.ds 
﻿package de.aggro.utils {
    import flash.external.*;

    public class CookieUtil {

        private static const FUNCTION_GETCOOKIE:String = (((((((((((((((("document.insertScript = function ()" + "{ ") + "if (document.snw_getCookie==null)") + "{") + "snw_getCookie = function (name)") + "{") + "var nameEQ = name + '=';") + "var ca = document.cookie.split(';');") + "for(var i=0;i < ca.length;i++) {") + "var c = ca[i];") + "while (c.charAt(0)==' ') c = c.substring(1,c.length);") + "if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);") + "}") + "return null;") + "}") + "}") + "}");
        private static const FUNCTION_SETCOOKIE:String = ((((((((((((((("document.insertScript = function ()" + "{ ") + "if (document.snw_setCookie==null)") + "{") + "snw_setCookie = function (name, value, days)") + "{") + "if (days) {") + "var date = new Date();") + "date.setTime(date.getTime()+(days*24*60*60*1000));") + "var expires = '; expires='+date.toGMTString();") + "}") + "else var expires = '';") + "document.cookie = name+'='+value+expires+'; path=/';") + "}") + "}") + "}");

        private static var INITIALIZED:Boolean = false;

        private static function init():void{
            ExternalInterface.call(FUNCTION_GETCOOKIE);
            ExternalInterface.call(FUNCTION_SETCOOKIE);
            INITIALIZED = true;
        }
        public static function deleteCookie(_arg1:String):void{
            if (!INITIALIZED){
                init();
            };
            ExternalInterface.call("snw_setCookie", _arg1, "", -1);
        }
        public static function getCookie(_arg1:String):Object{
            if (!INITIALIZED){
                init();
            };
            return (ExternalInterface.call("snw_getCookie", _arg1));
        }
        public static function setCookie(_arg1:String, _arg2:Object, _arg3:int):void{
            if (!INITIALIZED){
                init();
            };
            ExternalInterface.call("snw_setCookie", _arg1, _arg2, _arg3);
        }

    }
}//package de.aggro.utils 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedDownSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_emphasizedSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedUpIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedDisabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedOverIcon extends MovieClip {

    }
}//package 
﻿package mx.modules {
    import flash.events.*;
    import mx.core.*;

    public class ModuleBase extends EventDispatcher {

        mx_internal static const VERSION:String = "3.2.0.21464";

    }
}//package mx.modules 
﻿package mx.core {

    public namespace mx_internal = "http://www.adobe.com/2006/flex/mx/internal";
}//package mx.core 
﻿package mx.core {
    import flash.display.*;
    import mx.utils.*;

    public class FlexSprite extends Sprite {

        mx_internal static const VERSION:String = "3.2.0.21464";

        public function FlexSprite(){
            super();
            try {
                name = NameUtil.createUniqueName(this);
            } catch(e:Error) {
            };
        }
        override public function toString():String{
            return (NameUtil.displayObjectToString(this));
        }

    }
}//package mx.core 
﻿package mx.core {

    public class MovieClipAsset extends FlexMovieClip implements IFlexAsset, IFlexDisplayObject, IBorder {

        mx_internal static const VERSION:String = "3.2.0.21464";

        private var _measuredHeight:Number;
        private var _measuredWidth:Number;

        public function MovieClipAsset(){
            _measuredWidth = width;
            _measuredHeight = height;
        }
        public function get measuredWidth():Number{
            return (_measuredWidth);
        }
        public function get measuredHeight():Number{
            return (_measuredHeight);
        }
        public function setActualSize(_arg1:Number, _arg2:Number):void{
            width = _arg1;
            height = _arg2;
        }
        public function move(_arg1:Number, _arg2:Number):void{
            this.x = _arg1;
            this.y = _arg2;
        }
        public function get borderMetrics():EdgeMetrics{
            if (scale9Grid == null){
                return (EdgeMetrics.EMPTY);
            };
            return (new EdgeMetrics(scale9Grid.left, scale9Grid.top, Math.ceil((measuredWidth - scale9Grid.right)), Math.ceil((measuredHeight - scale9Grid.bottom))));
        }

    }
}//package mx.core 
﻿package mx.core {

    public class EdgeMetrics {

        mx_internal static const VERSION:String = "3.2.0.21464";
        public static const EMPTY:EdgeMetrics = new EdgeMetrics(0, 0, 0, 0);
;

        public var top:Number;
        public var left:Number;
        public var bottom:Number;
        public var right:Number;

        public function EdgeMetrics(_arg1:Number=0, _arg2:Number=0, _arg3:Number=0, _arg4:Number=0){
            this.left = _arg1;
            this.top = _arg2;
            this.right = _arg3;
            this.bottom = _arg4;
        }
        public function clone():EdgeMetrics{
            return (new EdgeMetrics(left, top, right, bottom));
        }

    }
}//package mx.core 
﻿package mx.core {

    public class ButtonAsset extends FlexSimpleButton implements IFlexAsset, IFlexDisplayObject {

        mx_internal static const VERSION:String = "3.2.0.21464";

        private var _measuredHeight:Number;
        private var _measuredWidth:Number;

        public function ButtonAsset(){
            _measuredWidth = width;
            _measuredHeight = height;
        }
        public function get measuredWidth():Number{
            return (_measuredWidth);
        }
        public function get measuredHeight():Number{
            return (_measuredHeight);
        }
        public function setActualSize(_arg1:Number, _arg2:Number):void{
            width = _arg1;
            height = _arg2;
        }
        public function move(_arg1:Number, _arg2:Number):void{
            this.x = _arg1;
            this.y = _arg2;
        }

    }
}//package mx.core 
﻿package mx.core {

    public interface IFlexAsset {

    }
}//package mx.core 
﻿package mx.core {
    import flash.display.*;
    import mx.utils.*;

    public class FlexSimpleButton extends SimpleButton {

        mx_internal static const VERSION:String = "3.2.0.21464";

        public function FlexSimpleButton(){
            super();
            try {
                name = NameUtil.createUniqueName(this);
            } catch(e:Error) {
            };
        }
        override public function toString():String{
            return (NameUtil.displayObjectToString(this));
        }

    }
}//package mx.core 
﻿package mx.core {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import flash.accessibility.*;

    public interface IFlexDisplayObject extends IBitmapDrawable, IEventDispatcher {

        function get visible():Boolean;
        function get rotation():Number;
        function localToGlobal(_arg1:Point):Point;
        function get name():String;
        function set width(_arg1:Number):void;
        function get measuredHeight():Number;
        function get blendMode():String;
        function get scale9Grid():Rectangle;
        function set name(_arg1:String):void;
        function set scaleX(_arg1:Number):void;
        function set scaleY(_arg1:Number):void;
        function get measuredWidth():Number;
        function get accessibilityProperties():AccessibilityProperties;
        function set scrollRect(_arg1:Rectangle):void;
        function get cacheAsBitmap():Boolean;
        function globalToLocal(_arg1:Point):Point;
        function get height():Number;
        function set blendMode(_arg1:String):void;
        function get parent():DisplayObjectContainer;
        function getBounds(_arg1:DisplayObject):Rectangle;
        function get opaqueBackground():Object;
        function set scale9Grid(_arg1:Rectangle):void;
        function setActualSize(_arg1:Number, _arg2:Number):void;
        function set alpha(_arg1:Number):void;
        function set accessibilityProperties(_arg1:AccessibilityProperties):void;
        function get width():Number;
        function hitTestPoint(_arg1:Number, _arg2:Number, _arg3:Boolean=false):Boolean;
        function set cacheAsBitmap(_arg1:Boolean):void;
        function get scaleX():Number;
        function get scaleY():Number;
        function get scrollRect():Rectangle;
        function get mouseX():Number;
        function get mouseY():Number;
        function set height(_arg1:Number):void;
        function set mask(_arg1:DisplayObject):void;
        function getRect(_arg1:DisplayObject):Rectangle;
        function get alpha():Number;
        function set transform(_arg1:Transform):void;
        function move(_arg1:Number, _arg2:Number):void;
        function get loaderInfo():LoaderInfo;
        function get root():DisplayObject;
        function hitTestObject(_arg1:DisplayObject):Boolean;
        function set opaqueBackground(_arg1:Object):void;
        function set visible(_arg1:Boolean):void;
        function get mask():DisplayObject;
        function set x(_arg1:Number):void;
        function set y(_arg1:Number):void;
        function get transform():Transform;
        function set filters(_arg1:Array):void;
        function get x():Number;
        function get y():Number;
        function get filters():Array;
        function set rotation(_arg1:Number):void;
        function get stage():Stage;

    }
}//package mx.core 
﻿package mx.core {

    public interface IBorder {

        function get borderMetrics():EdgeMetrics;

    }
}//package mx.core 
﻿package mx.core {

    public interface IRepeaterClient {

        function get instanceIndices():Array;
        function set instanceIndices(_arg1:Array):void;
        function get isDocument():Boolean;
        function set repeaters(_arg1:Array):void;
        function initializeRepeaterArrays(_arg1:IRepeaterClient):void;
        function get repeaters():Array;
        function set repeaterIndices(_arg1:Array):void;
        function get repeaterIndices():Array;

    }
}//package mx.core 
﻿package mx.core {
    import flash.display.*;
    import mx.utils.*;

    public class FlexMovieClip extends MovieClip {

        mx_internal static const VERSION:String = "3.2.0.21464";

        public function FlexMovieClip(){
            super();
            try {
                name = NameUtil.createUniqueName(this);
            } catch(e:Error) {
            };
        }
        override public function toString():String{
            return (NameUtil.displayObjectToString(this));
        }

    }
}//package mx.core 
﻿package mx.core {

    public class SpriteAsset extends FlexSprite implements IFlexAsset, IFlexDisplayObject, IBorder {

        mx_internal static const VERSION:String = "3.2.0.21464";

        private var _measuredHeight:Number;
        private var _measuredWidth:Number;

        public function SpriteAsset(){
            _measuredWidth = width;
            _measuredHeight = height;
        }
        public function get measuredWidth():Number{
            return (_measuredWidth);
        }
        public function get measuredHeight():Number{
            return (_measuredHeight);
        }
        public function setActualSize(_arg1:Number, _arg2:Number):void{
            width = _arg1;
            height = _arg2;
        }
        public function move(_arg1:Number, _arg2:Number):void{
            this.x = _arg1;
            this.y = _arg2;
        }
        public function get borderMetrics():EdgeMetrics{
            if (scale9Grid == null){
                return (EdgeMetrics.EMPTY);
            };
            return (new EdgeMetrics(scale9Grid.left, scale9Grid.top, Math.ceil((measuredWidth - scale9Grid.right)), Math.ceil((measuredHeight - scale9Grid.bottom))));
        }

    }
}//package mx.core 
﻿package mx.utils {
    import flash.display.*;
    import flash.utils.*;
    import mx.core.*;

    public class NameUtil {

        mx_internal static const VERSION:String = "3.2.0.21464";

        private static var counter:int = 0;

        public static function displayObjectToString(_arg1:DisplayObject):String{
            var result:* = null;
            var o:* = null;
            var s:* = null;
            var indices:* = null;
            var displayObject:* = _arg1;
            try {
                o = displayObject;
                while (o != null) {
                    if (((((o.parent) && (o.stage))) && ((o.parent == o.stage)))){
                        break;
                    };
                    s = o.name;
                    if ((o is IRepeaterClient)){
                        indices = IRepeaterClient(o).instanceIndices;
                        if (indices){
                            s = (s + (("[" + indices.join("][")) + "]"));
                        };
                    };
                    result = (((result == null)) ? s : ((s + ".") + result));
                    o = o.parent;
                };
            } catch(e:SecurityError) {
            };
            return (result);
        }
        public static function createUniqueName(_arg1:Object):String{
            if (!_arg1){
                return (null);
            };
            var _local2:String = getQualifiedClassName(_arg1);
            var _local3:int = _local2.indexOf("::");
            if (_local3 != -1){
                _local2 = _local2.substr((_local3 + 2));
            };
            var _local4:int = _local2.charCodeAt((_local2.length - 1));
            if ((((_local4 >= 48)) && ((_local4 <= 57)))){
                _local2 = (_local2 + "_");
            };
            return ((_local2 + counter++));
        }

    }
}//package mx.utils 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_selectedOverSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class focusRectSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedOverSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedDisabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollPane_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_overSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_disabledIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import flash.system.*;
    import com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase.*;
    import com.nhn.application.modules.webplayercontainer.*;
    import com.nhn.webapis.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.viewbase.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.viewBase.*;
    import com.nhn.nclicks.*;
    import flash.ui.*;

    public class NMP_web_player_container extends Sprite {

        private var backgroundLayer:Sprite;
        private var popupLayer:Sprite;
        private var backgroundUI:BackgroundUI;
        private var progressBasicUI:ProgressBasicUI;
        private var applicationLayer:Sprite;
        private var applicationInitialized:Boolean;
        private var externalPostInfoUI:ExternalPostInfoUI;
        private var webPlayerContainerModule;

        public function NMP_web_player_container(){
            var _local3:ContextMenuItem;
            super();
            stage.scaleMode = StageScaleMode.NO_SCALE;
            stage.align = StageAlign.TOP_LEFT;
            stage.frameRate = WebPlayerCoreProperties.FRAME_RATE_HIGH;
            stage.showDefaultContextMenu = false;
            WebPlayerCoreProperties.clientType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER;
            applicationInitialized = false;
            backgroundLayer = new Sprite();
            applicationLayer = new Sprite();
            popupLayer = new Sprite();
            addChild(backgroundLayer);
            addChild(applicationLayer);
            addChild(popupLayer);
            backgroundUI = null;
            progressBasicUI = null;
            externalPostInfoUI = null;
            var _local1:Array = [WebPlayerCoreProperties.WEB_PLAYER_CONTEXT_MENU_NAVER_MUSIC_PLAYER, WebPlayerCoreProperties.WEB_PLAYER_CONTEXT_MENU_NHN_CORP];
            var _local2:ContextMenu = new ContextMenu();
            var _local4:int = _local1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local3 = new ContextMenuItem(_local1[_local5], false, true, true);
                _local2.customItems.push(_local3);
                _local5++;
            };
            this.contextMenu = _local2;
            this.contextMenu.hideBuiltInItems();
            loaderInfo.addEventListener(Event.INIT, handleEvent, false, 0, false);
            loaderInfo.addEventListener(Event.COMPLETE, handleEvent, false, 0, false);
        }
        private function startApplication():void{
            if (startApplicationInternal()){
                if (Boolean(progressBasicUI)){
                    popupLayer.removeChild(progressBasicUI);
                    progressBasicUI.hideImmediately();
                    progressBasicUI.releaseMemory();
                    progressBasicUI = null;
                };
                removeChild(popupLayer);
                popupLayer = null;
            } else {
                showExternalPostInfoUI();
            };
        }
        private function initializeNClicks():void{
            NClicks.NSC = WebPlayerCoreProperties.NCLICKS_NSC;
            NClicks.serviceLocation = WebPlayerCoreProperties.NCLICKS_SERVICE_LOCATION;
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    try {
                        NClicks.__flashID = loaderInfo.parameters["__flashID"];
                        if (Boolean(NClicks.__flashID)){
                            NClicks.isInternal = WebPlayerCoreProperties.NCLICKS_INTERNAL;
                        } else {
                            NClicks.__flashID = WebPlayerCoreProperties.NCLICKS_NMP_WEB_PLAYER_CONTAINER_ID;
                        };
                    } catch(e:Error) {
                        NClicks.__flashID = WebPlayerCoreProperties.NCLICKS_NMP_WEB_PLAYER_CONTAINER_ID;
                    };
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    NClicks.isInternal = WebPlayerCoreProperties.NCLICKS_EXTERNAL;
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                    NClicks.isInternal = WebPlayerCoreProperties.NCLICKS_EXTERNAL;
                    break;
                default:
                    throw (new Error(("NMP_web_player_container : " + "WebPlayerCoreProperties.containerType is not initialized.")));
            };
        }
        private function showExternalPostInfoUI():void{
            if (Boolean(progressBasicUI)){
                popupLayer.removeChild(progressBasicUI);
                progressBasicUI.hideImmediately();
                progressBasicUI.releaseMemory();
                progressBasicUI = null;
            };
            if (Boolean(backgroundUI)){
                backgroundLayer.removeChild(backgroundUI);
                backgroundUI.releaseMemory();
                backgroundUI = null;
            };
            removeChild(backgroundLayer);
            backgroundLayer = null;
            removeChild(applicationLayer);
            applicationLayer = null;
            externalPostInfoUI = new ExternalPostInfoUI();
            popupLayer.addChild(externalPostInfoUI);
            stage.addEventListener(Event.RESIZE, stage_handleEvent, false, 0, false);
            stage.dispatchEvent(new Event(Event.RESIZE));
        }
        private function handleEvent(_arg1:Event):void{
            var _local2:Number;
            var _local3:Number;
            switch (_arg1.type){
                case Event.INIT:
                case Event.COMPLETE:
                    if (loaderInfo.bytesLoaded === loaderInfo.bytesTotal){
                        loaderInfo.removeEventListener(Event.INIT, handleEvent, false);
                        loaderInfo.removeEventListener(Event.COMPLETE, handleEvent, false);
                        applicationInitialized = initializeApplication();
                        if (applicationInitialized){
                            if (WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW !== WebPlayerCoreProperties.containerType){
                                if ((((WebPlayerCoreProperties.PLAYER_TYPE_NONE === WebPlayerCoreProperties.playerType)) || ((WebPlayerCoreProperties.PLAYER_TYPE_BA === WebPlayerCoreProperties.playerType)))){
                                    _local2 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC;
                                    _local3 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC;
                                } else {
                                    if (WebPlayerCoreProperties.PLAYER_TYPE_AL === WebPlayerCoreProperties.playerType){
                                        _local2 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
                                        _local3 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
                                    } else {
                                        if (WebPlayerCoreProperties.PLAYER_TYPE_BP === WebPlayerCoreProperties.playerType){
                                            _local2 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO;
                                            _local3 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO;
                                        } else {
                                            throw (new Error(("NMP_web_player_container : " + "WebPlayerCoreProperties.playerType is not valid.")));
                                        };
                                    };
                                };
                                backgroundUI = new BackgroundUI();
                                backgroundUI.x = int(((_local2 - backgroundUI.width) * 0.5));
                                backgroundUI.y = int(((_local3 - backgroundUI.height) * 0.5));
                                backgroundLayer.addChild(backgroundUI);
                                progressBasicUI = new ProgressBasicUI(WebPlayerCoreProperties.PROGRESS_BASIC_UI_EASING_RATIO);
                                progressBasicUI.x = int(((_local2 - progressBasicUI.width) * 0.5));
                                progressBasicUI.y = int((_local3 * 0.5));
                                progressBasicUI.showImmediately();
                                popupLayer.addChild(progressBasicUI);
                            };
                            startApplication();
                        } else {
                            showExternalPostInfoUI();
                        };
                    };
                    break;
            };
        }
        private function stage_handleEvent(_arg1:Event):void{
            switch (_arg1.type){
                case Event.RESIZE:
                    if (Boolean(externalPostInfoUI)){
                        externalPostInfoUI.x = int(((stage.stageWidth - externalPostInfoUI.width) * 0.5));
                        externalPostInfoUI.y = int(((stage.stageHeight - externalPostInfoUI.height) * 0.5));
                    };
                    break;
            };
        }
        private function initializeApplication():Boolean{
            var clientURL:* = null;
            var splittedContainerURL:* = null;
            var pType:* = null;
            var myListSeq:* = null;
            var streamingOnly:* = null;
            if (((!((Capabilities.playerType === "ActiveX"))) && (!((Capabilities.playerType === "PlugIn"))))){
                WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING;
                WebPlayerCoreProperties.playerType = WebPlayerCoreProperties.PLAYER_TYPE_AL;
                return (false);
            };
            if (((!(Boolean(WebPlayerCoreProperties.clientURL))) || ((WebPlayerCoreProperties.clientURL.indexOf(WebPlayerCoreProperties.APP_NMPWEBPLAYERCONTAINER) >= 0)))){
                WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING;
                WebPlayerCoreProperties.playerType = WebPlayerCoreProperties.PLAYER_TYPE_AL;
                return (false);
            };
            switch (WebPlayerCoreProperties.clientHost){
                case WebPlayerCoreProperties.HOST_UNDEFINED_SERVER:
                    WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING;
                    WebPlayerCoreProperties.playerType = WebPlayerCoreProperties.PLAYER_TYPE_AL;
                    return (false);
                default:
                    if (loaderInfo.parameters.hasOwnProperty(WebPlayerCoreProperties.PARAMETER_NAME_OF_POSTING_TYPE_P_TYPE)){
                        pType = loaderInfo.parameters[decodeURIComponent(WebPlayerCoreProperties.PARAMETER_NAME_OF_POSTING_TYPE_P_TYPE)];
                        myListSeq = loaderInfo.parameters[decodeURIComponent(WebPlayerCoreProperties.PARAMETER_NAME_OF_POSTING_TYPE_MY_LIST_SEQ)];
                        streamingOnly = loaderInfo.parameters[decodeURIComponent(WebPlayerCoreProperties.PARAMETER_NAME_OF_STREAMING_CORE_MODULE)];
                        if (((streamingOnly) && ((streamingOnly.toUpperCase() === "Y")))){
                            WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING = true;
                        };
                    } else {
                        splittedContainerURL = loaderInfo.url.split("/");
                        switch ((splittedContainerURL[(splittedContainerURL.length - 1)] as String)){
                            case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                            case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                            case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                                myListSeq = splittedContainerURL[(splittedContainerURL.length - 2)];
                            case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                            case WebPlayerCoreProperties.PLAYER_TYPE_PV:
                                trace(splittedContainerURL);
                                pType = splittedContainerURL[(splittedContainerURL.length - 1)];
                                break;
                            default:
                                switch (WebPlayerCoreProperties.clientHost){
                                    case WebPlayerCoreProperties.HOST_SUB_NAVER_SERVER:
                                        return (false);
                                    default:
                                        pType = WebPlayerCoreProperties.PLAYER_TYPE_NONE;
                                };
                        };
                    };
                    if (WebPlayerCoreProperties.validatePlayerTypeAccordingToContainerType(pType, WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP)){
                        WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP;
                    } else {
                        if (WebPlayerCoreProperties.validatePlayerTypeAccordingToContainerType(pType, WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING)){
                            WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING;
                            if (!initializePostingListSequence(myListSeq)){
                                return (false);
                            };
                        } else {
                            if (WebPlayerCoreProperties.validatePlayerTypeAccordingToContainerType(pType, WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW)){
                                WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW;
                            } else {
                                if (Boolean(myListSeq)){
                                    pType = WebPlayerCoreProperties.PLAYER_TYPE_POSTING_DEFAULT;
                                    WebPlayerCoreProperties.containerType = WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING;
                                    if (!initializePostingListSequence(myListSeq)){
                                        return (false);
                                    };
                                } else {
                                    return (false);
                                };
                            };
                        };
                    };
                    try {
                        WebPlayerCoreProperties.playerType = pType;
                    } catch(e:Error) {
                        return (false);
                    };
            };
            return (true);
        }
        private function startApplicationInternal():Boolean{
            var webPlayerWorkspaceUI:* = undefined;
            NHNApplication.mode = NHNApplication.RELEASE;
            NHNWebAPI.mode = NHNWebAPI.RELEASE;
            initializeNClicks();
            try {
                if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP){
                    webPlayerWorkspaceUI = new NaverBasicPlayerBaseView();
                } else {
                    if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING){
                        if (WebPlayerCoreProperties.playerType === WebPlayerCoreProperties.PLAYER_TYPE_BA){
                            webPlayerWorkspaceUI = new NaverBasicPostingPlayerBaseView();
                        } else {
                            if (WebPlayerCoreProperties.playerType === WebPlayerCoreProperties.PLAYER_TYPE_AL){
                                webPlayerWorkspaceUI = new NaverMiniPlayerBaseView();
                            } else {
                                if (WebPlayerCoreProperties.playerType === WebPlayerCoreProperties.PLAYER_TYPE_BP){
                                    webPlayerWorkspaceUI = new NaverBasicPostingViewForPromotion();
                                } else {
                                    throw (new Error(("NMP_web_player_container : " + "WebPlayerCoreProperties.playerType is not valid.")));
                                };
                            };
                        };
                    } else {
                        if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW){
                            webPlayerWorkspaceUI = new NaverPreviewPlayer();
                        } else {
                            throw (new Error(("NMP_web_player_container : " + "WebPlayerCoreProperties.containerType is not valid.")));
                        };
                    };
                };
                webPlayerContainerModule = new WebPlayerContainerModule(ModuleNameFactory.generateModuleName(WebPlayerContainerModule.NAME_BASE), new ModuleInitializeData({webPlayerWorkspaceUI:webPlayerWorkspaceUI}));
            } catch(e:Error) {
                return (false);
            };
            webPlayerContainerModule.start();
            applicationLayer.addChild(webPlayerContainerModule.getVisualComponent());
            return (true);
        }
        private function initializePostingListSequence(_arg1:String):Boolean{
            var postingListSequence:* = _arg1;
            try {
                WebPlayerCoreProperties.postingListSequence = postingListSequence;
            } catch(e:Error) {
                return (false);
            };
            return (true);
        }

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_upIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedDownIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedDownSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_downSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_upSkin extends MovieClip {

    }
}//package 
﻿package org.puremvc.as3.multicore.utilities.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public class Junction {

        public static const OUTPUT:String = "output";
        public static const INPUT:String = "input";

        protected var outputPipes:Array;
        protected var pipesMap:Array;
        protected var pipeTypesMap:Array;
        protected var inputPipes:Array;

        public function Junction(){
            inputPipes = new Array();
            outputPipes = new Array();
            pipesMap = new Array();
            pipeTypesMap = new Array();
            super();
        }
        public function addPipeListener(_arg1:String, _arg2:Object, _arg3:Function):Boolean{
            var _local5:IPipeFitting;
            var _local4:Boolean;
            if (hasInputPipe(_arg1)){
                _local5 = (pipesMap[_arg1] as IPipeFitting);
                _local4 = _local5.connect(new PipeListener(_arg2, _arg3));
            };
            return (_local4);
        }
        public function hasPipe(_arg1:String):Boolean{
            return (!((pipesMap[_arg1] == null)));
        }
        public function hasOutputPipe(_arg1:String):Boolean{
            return (((hasPipe(_arg1)) && ((pipeTypesMap[_arg1] == OUTPUT))));
        }
        public function retrievePipe(_arg1:String):IPipeFitting{
            return ((pipesMap[_arg1] as IPipeFitting));
        }
        public function registerPipe(_arg1:String, _arg2:String, _arg3:IPipeFitting):Boolean{
            var _local4:Boolean;
            if (pipesMap[_arg1] == null){
                pipesMap[_arg1] = _arg3;
                pipeTypesMap[_arg1] = _arg2;
                switch (_arg2){
                    case INPUT:
                        inputPipes.push(_arg1);
                        break;
                    case OUTPUT:
                        outputPipes.push(_arg1);
                        break;
                    default:
                        _local4 = false;
                };
            } else {
                _local4 = false;
            };
            return (_local4);
        }
        public function removePipe(_arg1:String):void{
            var _local2:String;
            var _local3:Array;
            var _local4:int;
            if (hasPipe(_arg1)){
                _local2 = pipeTypesMap[_arg1];
                switch (_local2){
                    case INPUT:
                        _local3 = inputPipes;
                        break;
                    case OUTPUT:
                        _local3 = outputPipes;
                        break;
                };
                _local4 = 0;
                while (_local4 < _local3.length) {
                    if (_local3[_local4] == _arg1){
                        _local3.splice(_local4, 1);
                        break;
                    };
                    _local4++;
                };
                delete pipesMap[_arg1];
                delete pipeTypesMap[_arg1];
            };
        }
        public function hasInputPipe(_arg1:String):Boolean{
            return (((hasPipe(_arg1)) && ((pipeTypesMap[_arg1] == INPUT))));
        }
        public function sendMessage(_arg1:String, _arg2:IPipeMessage):Boolean{
            var _local4:IPipeFitting;
            var _local3:Boolean;
            if (hasOutputPipe(_arg1)){
                _local4 = (pipesMap[_arg1] as IPipeFitting);
                _local3 = _local4.write(_arg2);
            };
            return (_local3);
        }

    }
}//package org.puremvc.as3.multicore.utilities.pipes.plumbing 
﻿package org.puremvc.as3.multicore.utilities.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public class Pipe implements IPipeFitting {

        protected var output:IPipeFitting;

        public function Pipe(_arg1:IPipeFitting=null){
            if (_arg1){
                connect(_arg1);
            };
        }
        public function connect(_arg1:IPipeFitting):Boolean{
            var _local2:Boolean;
            if (this.output == null){
                this.output = _arg1;
                _local2 = true;
            };
            return (_local2);
        }
        public function disconnect():IPipeFitting{
            var _local1:IPipeFitting = this.output;
            this.output = null;
            return (_local1);
        }
        public function write(_arg1:IPipeMessage):Boolean{
            return (output.write(_arg1));
        }

    }
}//package org.puremvc.as3.multicore.utilities.pipes.plumbing 
﻿package org.puremvc.as3.multicore.utilities.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public class TeeSplit implements IPipeFitting {

        protected var outputs:Array;

        public function TeeSplit(_arg1:IPipeFitting=null, _arg2:IPipeFitting=null){
            outputs = new Array();
            super();
            if (_arg1){
                connect(_arg1);
            };
            if (_arg2){
                connect(_arg2);
            };
        }
        public function disconnectFitting(_arg1:IPipeFitting):IPipeFitting{
            var _local2:IPipeFitting;
            var _local4:IPipeFitting;
            var _local3:int;
            while (_local3 < outputs.length) {
                _local4 = outputs[_local3];
                if (_local4 === _arg1){
                    outputs.splice(_local3, 1);
                    _local2 = _local4;
                    break;
                };
                _local3++;
            };
            return (_local2);
        }
        public function connect(_arg1:IPipeFitting):Boolean{
            outputs.push(_arg1);
            return (true);
        }
        public function disconnect():IPipeFitting{
            return ((outputs.pop() as IPipeFitting));
        }
        public function write(_arg1:IPipeMessage):Boolean{
            var _local4:IPipeFitting;
            var _local2:Boolean;
            var _local3:int;
            while (_local3 < outputs.length) {
                _local4 = outputs[_local3];
                if (!_local4.write(_arg1)){
                    _local2 = false;
                };
                _local3++;
            };
            return (_local2);
        }

    }
}//package org.puremvc.as3.multicore.utilities.pipes.plumbing 
﻿package org.puremvc.as3.multicore.utilities.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public class PipeListener implements IPipeFitting {

        private var listener:Function;
        private var context:Object;

        public function PipeListener(_arg1:Object, _arg2:Function){
            this.context = _arg1;
            this.listener = _arg2;
        }
        public function write(_arg1:IPipeMessage):Boolean{
            listener.apply(context, [_arg1]);
            return (true);
        }
        public function connect(_arg1:IPipeFitting):Boolean{
            return (false);
        }
        public function disconnect():IPipeFitting{
            return (null);
        }

    }
}//package org.puremvc.as3.multicore.utilities.pipes.plumbing 
﻿package org.puremvc.as3.multicore.utilities.pipes.interfaces {

    public interface IPipeFitting {

        function connect(_arg1:IPipeFitting):Boolean;
        function disconnect():IPipeFitting;
        function write(_arg1:IPipeMessage):Boolean;

    }
}//package org.puremvc.as3.multicore.utilities.pipes.interfaces 
﻿package org.puremvc.as3.multicore.utilities.pipes.interfaces {

    public interface IPipeMessage {

        function getType():String;
        function getHeader():Object;
        function setBody(_arg1:Object):void;
        function setPriority(_arg1:int):void;
        function getBody():Object;
        function getPriority():int;
        function setType(_arg1:String):void;
        function setHeader(_arg1:Object):void;

    }
}//package org.puremvc.as3.multicore.utilities.pipes.interfaces 
﻿package org.puremvc.as3.multicore.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;

    public class SimpleCommand extends Notifier implements ICommand, INotifier {

        public function execute(_arg1:INotification):void{
        }

    }
}//package org.puremvc.as3.multicore.patterns.command 
﻿package org.puremvc.as3.multicore.patterns.observer {
    import org.puremvc.as3.multicore.interfaces.*;

    public class Observer implements IObserver {

        private var notify:Function;
        private var context:Object;

        public function Observer(_arg1:Function, _arg2:Object){
            setNotifyMethod(_arg1);
            setNotifyContext(_arg2);
        }
        private function getNotifyMethod():Function{
            return (notify);
        }
        public function compareNotifyContext(_arg1:Object):Boolean{
            return ((_arg1 === this.context));
        }
        public function setNotifyContext(_arg1:Object):void{
            context = _arg1;
        }
        private function getNotifyContext():Object{
            return (context);
        }
        public function setNotifyMethod(_arg1:Function):void{
            notify = _arg1;
        }
        public function notifyObserver(_arg1:INotification):void{
            this.getNotifyMethod().apply(this.getNotifyContext(), [_arg1]);
        }

    }
}//package org.puremvc.as3.multicore.patterns.observer 
﻿package org.puremvc.as3.multicore.patterns.observer {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.facade.*;

    public class Notifier implements INotifier {

        protected const MULTITON_MSG:String = "multitonKey for this Notifier not yet initialized!";

        protected var multitonKey:String;

        public function sendNotification(_arg1:String, _arg2:Object=null, _arg3:String=null):void{
            if (facade != null){
                facade.sendNotification(_arg1, _arg2, _arg3);
            };
        }
        protected function get facade():IFacade{
            if (multitonKey == null){
                throw (Error(MULTITON_MSG));
            };
            return (Facade.getInstance(multitonKey));
        }
        public function initializeNotifier(_arg1:String):void{
            multitonKey = _arg1;
        }

    }
}//package org.puremvc.as3.multicore.patterns.observer 
﻿package org.puremvc.as3.multicore.patterns.observer {
    import org.puremvc.as3.multicore.interfaces.*;

    public class Notification implements INotification {

        private var body:Object;
        private var name:String;
        private var type:String;

        public function Notification(_arg1:String, _arg2:Object=null, _arg3:String=null){
            this.name = _arg1;
            this.body = _arg2;
            this.type = _arg3;
        }
        public function setBody(_arg1:Object):void{
            this.body = _arg1;
        }
        public function getName():String{
            return (name);
        }
        public function toString():String{
            var _local1:String = ("Notification Name: " + getName());
            _local1 = (_local1 + ("\nBody:" + ((body)==null) ? "null" : body.toString()));
            _local1 = (_local1 + ("\nType:" + ((type)==null) ? "null" : type));
            return (_local1);
        }
        public function getType():String{
            return (type);
        }
        public function setType(_arg1:String):void{
            this.type = _arg1;
        }
        public function getBody():Object{
            return (body);
        }

    }
}//package org.puremvc.as3.multicore.patterns.observer 
﻿package org.puremvc.as3.multicore.patterns.mediator {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;

    public class Mediator extends Notifier implements IMediator, INotifier {

        public static const NAME:String = "Mediator";

        protected var viewComponent:Object;
        protected var mediatorName:String;

        public function Mediator(_arg1:String=null, _arg2:Object=null){
            this.mediatorName = ((_arg1)!=null) ? _arg1 : NAME;
            this.viewComponent = _arg2;
        }
        public function listNotificationInterests():Array{
            return ([]);
        }
        public function onRegister():void{
        }
        public function onRemove():void{
        }
        public function getViewComponent():Object{
            return (viewComponent);
        }
        public function handleNotification(_arg1:INotification):void{
        }
        public function getMediatorName():String{
            return (mediatorName);
        }
        public function setViewComponent(_arg1:Object):void{
            this.viewComponent = _arg1;
        }

    }
}//package org.puremvc.as3.multicore.patterns.mediator 
﻿package org.puremvc.as3.multicore.patterns.proxy {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;

    public class Proxy extends Notifier implements IProxy, INotifier {

        public static var NAME:String = "Proxy";

        protected var data:Object;
        protected var proxyName:String;

        public function Proxy(_arg1:String=null, _arg2:Object=null){
            this.proxyName = ((_arg1)!=null) ? _arg1 : NAME;
            if (_arg2 != null){
                setData(_arg2);
            };
        }
        public function getData():Object{
            return (data);
        }
        public function setData(_arg1:Object):void{
            this.data = _arg1;
        }
        public function onRegister():void{
        }
        public function getProxyName():String{
            return (proxyName);
        }
        public function onRemove():void{
        }

    }
}//package org.puremvc.as3.multicore.patterns.proxy 
﻿package org.puremvc.as3.multicore.patterns.facade {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    import org.puremvc.as3.multicore.core.*;

    public class Facade implements IFacade {

        protected static var instanceMap:Array = new Array();

        protected const MULTITON_MSG:String = "Facade instance for this Multiton key already constructed!";

        protected var multitonKey:String;
        protected var controller:IController;
        protected var model:IModel;
        protected var view:IView;

        public function Facade(_arg1:String){
            if (instanceMap[_arg1] != null){
                throw (Error(MULTITON_MSG));
            };
            initializeNotifier(_arg1);
            instanceMap[multitonKey] = this;
            initializeFacade();
        }
        public static function hasCore(_arg1:String):Boolean{
            return (!((instanceMap[_arg1] == null)));
        }
        public static function getInstance(_arg1:String):IFacade{
            if (instanceMap[_arg1] == null){
                instanceMap[_arg1] = new Facade(_arg1);
            };
            return (instanceMap[_arg1]);
        }
        public static function removeCore(_arg1:String):void{
            if (instanceMap[_arg1] == null){
                return;
            };
            Model.removeModel(_arg1);
            View.removeView(_arg1);
            Controller.removeController(_arg1);
            delete instanceMap[_arg1];
        }

        public function removeProxy(_arg1:String):IProxy{
            var _local2:IProxy;
            if (model != null){
                _local2 = model.removeProxy(_arg1);
            };
            return (_local2);
        }
        public function registerProxy(_arg1:IProxy):void{
            model.registerProxy(_arg1);
        }
        protected function initializeController():void{
            if (controller != null){
                return;
            };
            controller = Controller.getInstance(multitonKey);
        }
        protected function initializeFacade():void{
            initializeModel();
            initializeController();
            initializeView();
        }
        public function retrieveProxy(_arg1:String):IProxy{
            return (model.retrieveProxy(_arg1));
        }
        public function sendNotification(_arg1:String, _arg2:Object=null, _arg3:String=null):void{
            notifyObservers(new Notification(_arg1, _arg2, _arg3));
        }
        public function notifyObservers(_arg1:INotification):void{
            if (view != null){
                view.notifyObservers(_arg1);
            };
        }
        protected function initializeView():void{
            if (view != null){
                return;
            };
            view = View.getInstance(multitonKey);
        }
        public function retrieveMediator(_arg1:String):IMediator{
            return ((view.retrieveMediator(_arg1) as IMediator));
        }
        public function initializeNotifier(_arg1:String):void{
            multitonKey = _arg1;
        }
        public function removeMediator(_arg1:String):IMediator{
            var _local2:IMediator;
            if (view != null){
                _local2 = view.removeMediator(_arg1);
            };
            return (_local2);
        }
        public function hasCommand(_arg1:String):Boolean{
            return (controller.hasCommand(_arg1));
        }
        public function removeCommand(_arg1:String):void{
            controller.removeCommand(_arg1);
        }
        public function registerCommand(_arg1:String, _arg2:Class):void{
            controller.registerCommand(_arg1, _arg2);
        }
        public function hasMediator(_arg1:String):Boolean{
            return (view.hasMediator(_arg1));
        }
        public function registerMediator(_arg1:IMediator):void{
            if (view != null){
                view.registerMediator(_arg1);
            };
        }
        protected function initializeModel():void{
            if (model != null){
                return;
            };
            model = Model.getInstance(multitonKey);
        }
        public function hasProxy(_arg1:String):Boolean{
            return (model.hasProxy(_arg1));
        }

    }
}//package org.puremvc.as3.multicore.patterns.facade 
﻿package org.puremvc.as3.multicore.core {
    import org.puremvc.as3.multicore.interfaces.*;

    public class Model implements IModel {

        protected static var instanceMap:Array = new Array();

        protected const MULTITON_MSG:String = "Model instance for this Multiton key already constructed!";

        protected var multitonKey:String;
        protected var proxyMap:Array;

        public function Model(_arg1:String){
            if (instanceMap[_arg1] != null){
                throw (Error(MULTITON_MSG));
            };
            multitonKey = _arg1;
            instanceMap[multitonKey] = this;
            proxyMap = new Array();
            initializeModel();
        }
        public static function getInstance(_arg1:String):IModel{
            if (instanceMap[_arg1] == null){
                instanceMap[_arg1] = new Model(_arg1);
            };
            return (instanceMap[_arg1]);
        }
        public static function removeModel(_arg1:String):void{
            delete instanceMap[_arg1];
        }

        protected function initializeModel():void{
        }
        public function removeProxy(_arg1:String):IProxy{
            var _local2:IProxy = (proxyMap[_arg1] as IProxy);
            if (_local2){
                proxyMap[_arg1] = null;
                _local2.onRemove();
            };
            return (_local2);
        }
        public function hasProxy(_arg1:String):Boolean{
            return (!((proxyMap[_arg1] == null)));
        }
        public function retrieveProxy(_arg1:String):IProxy{
            return (proxyMap[_arg1]);
        }
        public function registerProxy(_arg1:IProxy):void{
            _arg1.initializeNotifier(multitonKey);
            proxyMap[_arg1.getProxyName()] = _arg1;
            _arg1.onRegister();
        }

    }
}//package org.puremvc.as3.multicore.core 
﻿package org.puremvc.as3.multicore.core {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;

    public class View implements IView {

        protected static var instanceMap:Array = new Array();

        protected const MULTITON_MSG:String = "View instance for this Multiton key already constructed!";

        protected var multitonKey:String;
        protected var observerMap:Array;
        protected var mediatorMap:Array;

        public function View(_arg1:String){
            if (instanceMap[_arg1] != null){
                throw (Error(MULTITON_MSG));
            };
            multitonKey = _arg1;
            instanceMap[multitonKey] = this;
            mediatorMap = new Array();
            observerMap = new Array();
            initializeView();
        }
        public static function removeView(_arg1:String):void{
            delete instanceMap[_arg1];
        }
        public static function getInstance(_arg1:String):IView{
            if (instanceMap[_arg1] == null){
                instanceMap[_arg1] = new View(_arg1);
            };
            return (instanceMap[_arg1]);
        }

        public function removeObserver(_arg1:String, _arg2:Object):void{
            var _local3:Array = (observerMap[_arg1] as Array);
            var _local4:int;
            while (_local4 < _local3.length) {
                if (Observer(_local3[_local4]).compareNotifyContext(_arg2) == true){
                    _local3.splice(_local4, 1);
                    break;
                };
                _local4++;
            };
            if (_local3.length == 0){
                delete observerMap[_arg1];
            };
        }
        public function hasMediator(_arg1:String):Boolean{
            return (!((mediatorMap[_arg1] == null)));
        }
        public function notifyObservers(_arg1:INotification):void{
            var _local2:Array;
            var _local3:Array;
            var _local4:IObserver;
            var _local5:Number;
            if (observerMap[_arg1.getName()] != null){
                _local2 = (observerMap[_arg1.getName()] as Array);
                _local3 = new Array();
                _local5 = 0;
                while (_local5 < _local2.length) {
                    _local4 = (_local2[_local5] as IObserver);
                    _local3.push(_local4);
                    _local5++;
                };
                _local5 = 0;
                while (_local5 < _local3.length) {
                    _local4 = (_local3[_local5] as IObserver);
                    _local4.notifyObserver(_arg1);
                    _local5++;
                };
            };
        }
        protected function initializeView():void{
        }
        public function registerMediator(_arg1:IMediator):void{
            var _local3:Observer;
            var _local4:Number;
            if (mediatorMap[_arg1.getMediatorName()] != null){
                return;
            };
            _arg1.initializeNotifier(multitonKey);
            mediatorMap[_arg1.getMediatorName()] = _arg1;
            var _local2:Array = _arg1.listNotificationInterests();
            if (_local2.length > 0){
                _local3 = new Observer(_arg1.handleNotification, _arg1);
                _local4 = 0;
                while (_local4 < _local2.length) {
                    registerObserver(_local2[_local4], _local3);
                    _local4++;
                };
            };
            _arg1.onRegister();
        }
        public function removeMediator(_arg1:String):IMediator{
            var _local3:Array;
            var _local4:Number;
            var _local2:IMediator = (mediatorMap[_arg1] as IMediator);
            if (_local2){
                _local3 = _local2.listNotificationInterests();
                _local4 = 0;
                while (_local4 < _local3.length) {
                    removeObserver(_local3[_local4], _local2);
                    _local4++;
                };
                delete mediatorMap[_arg1];
                _local2.onRemove();
            };
            return (_local2);
        }
        public function registerObserver(_arg1:String, _arg2:IObserver):void{
            if (observerMap[_arg1] != null){
                observerMap[_arg1].push(_arg2);
            } else {
                observerMap[_arg1] = [_arg2];
            };
        }
        public function retrieveMediator(_arg1:String):IMediator{
            return (mediatorMap[_arg1]);
        }

    }
}//package org.puremvc.as3.multicore.core 
﻿package org.puremvc.as3.multicore.core {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;

    public class Controller implements IController {

        protected static var instanceMap:Array = new Array();

        protected const MULTITON_MSG:String = "Controller instance for this Multiton key already constructed!";

        protected var commandMap:Array;
        protected var view:IView;
        protected var multitonKey:String;

        public function Controller(_arg1:String){
            if (instanceMap[_arg1] != null){
                throw (Error(MULTITON_MSG));
            };
            multitonKey = _arg1;
            instanceMap[multitonKey] = this;
            commandMap = new Array();
            initializeController();
        }
        public static function removeController(_arg1:String):void{
            delete instanceMap[_arg1];
        }
        public static function getInstance(_arg1:String):IController{
            if (instanceMap[_arg1] == null){
                instanceMap[_arg1] = new Controller(_arg1);
            };
            return (instanceMap[_arg1]);
        }

        public function removeCommand(_arg1:String):void{
            if (hasCommand(_arg1)){
                view.removeObserver(_arg1, this);
                commandMap[_arg1] = null;
            };
        }
        public function registerCommand(_arg1:String, _arg2:Class):void{
            if (commandMap[_arg1] == null){
                view.registerObserver(_arg1, new Observer(executeCommand, this));
            };
            commandMap[_arg1] = _arg2;
        }
        protected function initializeController():void{
            view = View.getInstance(multitonKey);
        }
        public function hasCommand(_arg1:String):Boolean{
            return (!((commandMap[_arg1] == null)));
        }
        public function executeCommand(_arg1:INotification):void{
            var _local2:Class = commandMap[_arg1.getName()];
            if (_local2 == null){
                return;
            };
            var _local3:ICommand = new (_local2)();
            _local3.initializeNotifier(multitonKey);
            _local3.execute(_arg1);
        }

    }
}//package org.puremvc.as3.multicore.core 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IView {

        function notifyObservers(_arg1:INotification):void;
        function registerMediator(_arg1:IMediator):void;
        function removeMediator(_arg1:String):IMediator;
        function registerObserver(_arg1:String, _arg2:IObserver):void;
        function removeObserver(_arg1:String, _arg2:Object):void;
        function hasMediator(_arg1:String):Boolean;
        function retrieveMediator(_arg1:String):IMediator;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IProxy extends INotifier {

        function getData():Object;
        function onRegister():void;
        function getProxyName():String;
        function onRemove():void;
        function setData(_arg1:Object):void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface ICommand extends INotifier {

        function execute(_arg1:INotification):void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IFacade extends INotifier {

        function removeCommand(_arg1:String):void;
        function registerCommand(_arg1:String, _arg2:Class):void;
        function removeProxy(_arg1:String):IProxy;
        function registerProxy(_arg1:IProxy):void;
        function hasMediator(_arg1:String):Boolean;
        function retrieveMediator(_arg1:String):IMediator;
        function hasCommand(_arg1:String):Boolean;
        function retrieveProxy(_arg1:String):IProxy;
        function notifyObservers(_arg1:INotification):void;
        function registerMediator(_arg1:IMediator):void;
        function removeMediator(_arg1:String):IMediator;
        function hasProxy(_arg1:String):Boolean;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface INotifier {

        function sendNotification(_arg1:String, _arg2:Object=null, _arg3:String=null):void;
        function initializeNotifier(_arg1:String):void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IObserver {

        function compareNotifyContext(_arg1:Object):Boolean;
        function setNotifyContext(_arg1:Object):void;
        function setNotifyMethod(_arg1:Function):void;
        function notifyObserver(_arg1:INotification):void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IMediator extends INotifier {

        function listNotificationInterests():Array;
        function onRegister():void;
        function handleNotification(_arg1:INotification):void;
        function getMediatorName():String;
        function setViewComponent(_arg1:Object):void;
        function getViewComponent():Object;
        function onRemove():void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IController {

        function registerCommand(_arg1:String, _arg2:Class):void;
        function hasCommand(_arg1:String):Boolean;
        function executeCommand(_arg1:INotification):void;
        function removeCommand(_arg1:String):void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface IModel {

        function removeProxy(_arg1:String):IProxy;
        function retrieveProxy(_arg1:String):IProxy;
        function registerProxy(_arg1:IProxy):void;
        function hasProxy(_arg1:String):Boolean;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package org.puremvc.as3.multicore.interfaces {

    public interface INotification {

        function getType():String;
        function getName():String;
        function toString():String;
        function setBody(_arg1:Object):void;
        function getBody():Object;
        function setType(_arg1:String):void;

    }
}//package org.puremvc.as3.multicore.interfaces 
﻿package {
    import flash.display.*;

    public dynamic class Button_selectedUpSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_selectedDisabledIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CellRenderer_disabledSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_upSkin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class ScrollPane_upSkin extends MovieClip {

    }
}//package 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.core.*;
    import fl.events.*;

    public class MiniBaseButton extends UIComponent {

        private static var defaultStyles:Object = {
            upSkin:"Button_upSkin",
            downSkin:"Button_downSkin",
            overSkin:"Button_overSkin",
            disabledSkin:"Button_disabledSkin",
            selectedDisabledSkin:"Button_selectedDisabledSkin",
            selectedUpSkin:"Button_selectedUpSkin",
            selectedDownSkin:"Button_selectedDownSkin",
            selectedOverSkin:"Button_selectedOverSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            repeatDelay:500,
            repeatInterval:35
        };

        protected var pressTimer:Timer;
        protected var _autoRepeat:Boolean = false;
        protected var _selected:Boolean = false;
        protected var background:DisplayObject;
        private var unlockedMouseState:String;
        protected var mouseState:String;
        private var _mouseStateLocked:Boolean = false;

        public function MiniBaseButton(){
            buttonMode = true;
            mouseChildren = false;
            useHandCursor = false;
            setupMouseEvents();
            setMouseState("up");
            pressTimer = new Timer(1, 0);
            pressTimer.addEventListener(TimerEvent.TIMER, buttonDown, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function get enabled():Boolean{
            return (super.enabled);
        }
        protected function startPress():void{
            if (_autoRepeat){
                pressTimer.delay = Number(getStyleValue("repeatDelay"));
                pressTimer.start();
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function drawLayout():void{
            background.width = width;
            background.height = height;
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            mouseEnabled = _arg1;
        }
        public function set autoRepeat(_arg1:Boolean):void{
            _autoRepeat = _arg1;
        }
        protected function mouseEventHandler(_arg1:MouseEvent):void{
            if (_arg1.type == MouseEvent.MOUSE_DOWN){
                setMouseState("down");
                startPress();
            } else {
                if ((((_arg1.type == MouseEvent.ROLL_OVER)) || ((_arg1.type == MouseEvent.MOUSE_UP)))){
                    setMouseState("over");
                    endPress();
                } else {
                    if (_arg1.type == MouseEvent.ROLL_OUT){
                        setMouseState("up");
                        endPress();
                    };
                };
            };
        }
        protected function drawBackground():void{
            var _local1:String = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local1 = (("selected" + _local1.substr(0, 1).toUpperCase()) + _local1.substr(1));
            };
            _local1 = (_local1 + "Skin");
            var _local2:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue(_local1));
            if (Boolean(background)){
                addChildAt(background, 0);
                if (((!((_local2 == null))) && (!((_local2 == background))))){
                    removeChild(_local2);
                };
            };
        }
        public function get selected():Boolean{
            return (_selected);
        }
        protected function setupMouseEvents():void{
            addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true);
        }
        protected function endPress():void{
            pressTimer.reset();
        }
        public function set mouseStateLocked(_arg1:Boolean):void{
            _mouseStateLocked = _arg1;
            if (_arg1 == false){
                setMouseState(unlockedMouseState);
            } else {
                unlockedMouseState = mouseState;
            };
        }
        public function get autoRepeat():Boolean{
            return (_autoRepeat);
        }
        public function set selected(_arg1:Boolean):void{
            if (_selected == _arg1){
                return;
            };
            _selected = _arg1;
            invalidate(InvalidationType.STATE);
        }
        protected function buttonDown(_arg1:TimerEvent):void{
            if (!_autoRepeat){
                endPress();
                return;
            };
            if (pressTimer.currentCount == 1){
                pressTimer.delay = Number(getStyleValue("repeatInterval"));
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        public function setMouseState(_arg1:String):void{
            if (_mouseStateLocked){
                unlockedMouseState = _arg1;
                return;
            };
            if (mouseState == _arg1){
                return;
            };
            mouseState = _arg1;
            invalidate(InvalidationType.STATE);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.core.*;
    import fl.events.*;

    public class BaseButton extends UIComponent {

        private static var defaultStyles:Object = {
            upSkin:"Button_upSkin",
            downSkin:"Button_downSkin",
            overSkin:"Button_overSkin",
            disabledSkin:"Button_disabledSkin",
            selectedDisabledSkin:"Button_selectedDisabledSkin",
            selectedUpSkin:"Button_selectedUpSkin",
            selectedDownSkin:"Button_selectedDownSkin",
            selectedOverSkin:"Button_selectedOverSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            repeatDelay:500,
            repeatInterval:35
        };

        protected var pressTimer:Timer;
        protected var _autoRepeat:Boolean = false;
        protected var _selected:Boolean = false;
        protected var background:DisplayObject;
        private var unlockedMouseState:String;
        protected var mouseState:String;
        private var _mouseStateLocked:Boolean = false;

        public function BaseButton(){
            buttonMode = true;
            mouseChildren = false;
            useHandCursor = false;
            setupMouseEvents();
            setMouseState("up");
            pressTimer = new Timer(1, 0);
            pressTimer.addEventListener(TimerEvent.TIMER, buttonDown, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function get enabled():Boolean{
            return (super.enabled);
        }
        protected function startPress():void{
            if (_autoRepeat){
                pressTimer.delay = Number(getStyleValue("repeatDelay"));
                pressTimer.start();
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            super.draw();
        }
        protected function drawLayout():void{
            background.width = width;
            background.height = height;
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            mouseEnabled = _arg1;
        }
        public function set autoRepeat(_arg1:Boolean):void{
            _autoRepeat = _arg1;
        }
        protected function mouseEventHandler(_arg1:MouseEvent):void{
            if (_arg1.type == MouseEvent.MOUSE_DOWN){
                setMouseState("down");
                startPress();
            } else {
                if ((((_arg1.type == MouseEvent.ROLL_OVER)) || ((_arg1.type == MouseEvent.MOUSE_UP)))){
                    setMouseState("over");
                    endPress();
                } else {
                    if (_arg1.type == MouseEvent.ROLL_OUT){
                        setMouseState("up");
                        endPress();
                    };
                };
            };
        }
        protected function drawBackground():void{
            var _local1:String = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local1 = (("selected" + _local1.substr(0, 1).toUpperCase()) + _local1.substr(1));
            };
            _local1 = (_local1 + "Skin");
            var _local2:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue(_local1));
            addChildAt(background, 0);
            if (((!((_local2 == null))) && (!((_local2 == background))))){
                removeChild(_local2);
            };
        }
        public function get selected():Boolean{
            return (_selected);
        }
        protected function setupMouseEvents():void{
            addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_UP, mouseEventHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler, false, 0, true);
        }
        protected function endPress():void{
            pressTimer.reset();
        }
        public function set mouseStateLocked(_arg1:Boolean):void{
            _mouseStateLocked = _arg1;
            if (_arg1 == false){
                setMouseState(unlockedMouseState);
            } else {
                unlockedMouseState = mouseState;
            };
        }
        public function get autoRepeat():Boolean{
            return (_autoRepeat);
        }
        public function set selected(_arg1:Boolean):void{
            if (_selected == _arg1){
                return;
            };
            _selected = _arg1;
            invalidate(InvalidationType.STATE);
        }
        protected function buttonDown(_arg1:TimerEvent):void{
            if (!_autoRepeat){
                endPress();
                return;
            };
            if (pressTimer.currentCount == 1){
                pressTimer.delay = Number(getStyleValue("repeatInterval"));
            };
            dispatchEvent(new ComponentEvent(ComponentEvent.BUTTON_DOWN, true));
        }
        public function setMouseState(_arg1:String):void{
            if (_mouseStateLocked){
                unlockedMouseState = _arg1;
                return;
            };
            if (mouseState == _arg1){
                return;
            };
            mouseState = _arg1;
            invalidate(InvalidationType.STATE);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.events.*;
    import fl.controls.listClasses.*;
    import fl.containers.*;
    import flash.ui.*;

    public class SelectableList extends BaseScrollPane implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            skin:"List_skin",
            cellRenderer:CellRenderer,
            contentPadding:null,
            disabledAlpha:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var invalidItems:Dictionary;
        protected var renderedItems:Dictionary;
        protected var caretIndex:int = -1;
        protected var updatedRendererStyles:Object;
        protected var _allowMultipleSelection:Boolean = false;
        protected var lastCaretIndex:int = -1;
        protected var _verticalScrollPosition:Number;
        protected var _selectedIndices:Array;
        protected var preChangeItems:Array;
        protected var activeCellRenderers:Array;
        protected var availableCellRenderers:Array;
        protected var rendererStyles:Object;
        protected var list:Sprite;
        protected var _dataProvider:DataProvider;
        protected var _horizontalScrollPosition:Number;
        private var collectionItemImport:SimpleCollectionItem;
        protected var listHolder:Sprite;
        protected var _selectable:Boolean = true;

        public function SelectableList(){
            activeCellRenderers = [];
            availableCellRenderers = [];
            invalidItems = new Dictionary(true);
            renderedItems = new Dictionary(true);
            _selectedIndices = [];
            if (dataProvider == null){
                dataProvider = new DataProvider();
            };
            verticalScrollPolicy = ScrollPolicy.AUTO;
            rendererStyles = {};
            updatedRendererStyles = {};
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseScrollPane.getStyleDefinition()));
        }

        protected function drawList():void{
        }
        protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        public function get allowMultipleSelection():Boolean{
            return (_allowMultipleSelection);
        }
        protected function onPreChange(_arg1:DataChangeEvent):void{
            switch (_arg1.changeType){
                case DataChangeType.REMOVE:
                case DataChangeType.ADD:
                case DataChangeType.INVALIDATE:
                case DataChangeType.REMOVE_ALL:
                case DataChangeType.REPLACE:
                case DataChangeType.INVALIDATE_ALL:
                    break;
                default:
                    preChangeItems = selectedItems;
            };
        }
        public function set selectedIndices(_arg1:Array):void{
            if (!_selectable){
                return;
            };
            _selectedIndices = ((_arg1)==null) ? [] : _arg1.concat();
            invalidate(InvalidationType.SELECTED);
        }
        public function isItemSelected(_arg1:Object):Boolean{
            return ((selectedItems.indexOf(_arg1) > -1));
        }
        public function set allowMultipleSelection(_arg1:Boolean):void{
            if (_arg1 == _allowMultipleSelection){
                return;
            };
            _allowMultipleSelection = _arg1;
            if (((!(_arg1)) && ((_selectedIndices.length > 1)))){
                _selectedIndices = [_selectedIndices.pop()];
                invalidate(InvalidationType.DATA);
            };
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _verticalScrollPosition){
                return;
            };
            var _local3:Number = (_arg1 - _verticalScrollPosition);
            _verticalScrollPosition = _arg1;
            if (_arg2){
                dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _local3, _arg1));
            };
        }
        public function sortItemsOn(_arg1:String, _arg2:Object=null){
            return (_dataProvider.sortOn(_arg1, _arg2));
        }
        public function getNextIndexAtLetter(_arg1:String, _arg2:int=-1):int{
            var _local5:Number;
            var _local6:Object;
            var _local7:String;
            if (length == 0){
                return (-1);
            };
            _arg1 = _arg1.toUpperCase();
            var _local3:int = (length - 1);
            var _local4:Number = 0;
            while (_local4 < _local3) {
                _local5 = ((_arg2 + 1) + _local4);
                if (_local5 > (length - 1)){
                    _local5 = (_local5 - length);
                };
                _local6 = getItemAt(_local5);
                if (_local6 == null){
                    break;
                };
                _local7 = itemToLabel(_local6);
                if (_local7 == null){
                } else {
                    if (_local7.charAt(0).toUpperCase() == _arg1){
                        return (_local5);
                    };
                };
                _local4++;
            };
            return (-1);
        }
        override protected function draw():void{
            super.draw();
        }
        public function removeItemAt(_arg1:uint):Object{
            return (_dataProvider.removeItemAt(_arg1));
        }
        public function get selectedItem():Object{
            return (((_selectedIndices.length)==0) ? null : _dataProvider.getItemAt(selectedIndex));
        }
        protected function handleDataChange(_arg1:DataChangeEvent):void{
            var _local5:uint;
            var _local2:int = _arg1.startIndex;
            var _local3:int = _arg1.endIndex;
            var _local4:String = _arg1.changeType;
            if (_local4 == DataChangeType.INVALIDATE_ALL){
                clearSelection();
                invalidateList();
            } else {
                if (_local4 == DataChangeType.INVALIDATE){
                    _local5 = 0;
                    while (_local5 < _arg1.items.length) {
                        invalidateItem(_arg1.items[_local5]);
                        _local5++;
                    };
                } else {
                    if (_local4 == DataChangeType.ADD){
                        _local5 = 0;
                        while (_local5 < _selectedIndices.length) {
                            if (_selectedIndices[_local5] >= _local2){
                                _selectedIndices[_local5] = (_selectedIndices[_local5] + (_local2 - _local3));
                            };
                            _local5++;
                        };
                    } else {
                        if (_local4 == DataChangeType.REMOVE){
                            _local5 = 0;
                            while (_local5 < _selectedIndices.length) {
                                if (_selectedIndices[_local5] >= _local2){
                                    if (_selectedIndices[_local5] <= _local3){
                                        delete _selectedIndices[_local5];
                                    } else {
                                        _selectedIndices[_local5] = (_selectedIndices[_local5] - ((_local2 - _local3) + 1));
                                    };
                                };
                                _local5++;
                            };
                        } else {
                            if (_local4 == DataChangeType.REMOVE_ALL){
                                clearSelection();
                            } else {
                                if (_local4 == DataChangeType.REPLACE){
                                } else {
                                    selectedItems = preChangeItems;
                                    preChangeItems = null;
                                };
                            };
                        };
                    };
                };
            };
            invalidate(InvalidationType.DATA);
        }
        public function itemToCellRenderer(_arg1:Object):ICellRenderer{
            var _local2:*;
            var _local3:ICellRenderer;
            if (_arg1 != null){
                for (_local2 in activeCellRenderers) {
                    _local3 = (activeCellRenderers[_local2] as ICellRenderer);
                    if (_local3.data == _arg1){
                        return (_local3);
                    };
                };
            };
            return (null);
        }
        public function addItem(_arg1:Object):void{
            _dataProvider.addItem(_arg1);
            invalidateList();
        }
        public function get rowCount():uint{
            return (0);
        }
        override protected function configUI():void{
            super.configUI();
            listHolder = new Sprite();
            addChild(listHolder);
            listHolder.scrollRect = contentScrollRect;
            list = new Sprite();
            listHolder.addChild(list);
        }
        public function get selectable():Boolean{
            return (_selectable);
        }
        public function clearRendererStyle(_arg1:String, _arg2:int=-1):void{
            delete rendererStyles[_arg1];
            updatedRendererStyles[_arg1] = null;
            invalidate(InvalidationType.RENDERER_STYLES);
        }
        protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            var _local2:ICellRenderer = (_arg1.target as ICellRenderer);
            var _local3:String = ((_arg1.type)==MouseEvent.ROLL_OVER) ? ListEvent.ITEM_ROLL_OVER : ListEvent.ITEM_ROLL_OUT;
            dispatchEvent(new ListEvent(_local3, false, false, _local2.listData.column, _local2.listData.row, _local2.listData.index, _local2.data));
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!selectable){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
            };
        }
        protected function handleCellRendererDoubleClick(_arg1:MouseEvent):void{
            if (!_enabled){
                return;
            };
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            dispatchEvent(new ListEvent(ListEvent.ITEM_DOUBLE_CLICK, false, true, _local2.listData.column, _local2.listData.row, _local3, _local2.data));
        }
        public function setRendererStyle(_arg1:String, _arg2:Object, _arg3:uint=0):void{
            if (rendererStyles[_arg1] == _arg2){
                return;
            };
            updatedRendererStyles[_arg1] = _arg2;
            rendererStyles[_arg1] = _arg2;
            invalidate(InvalidationType.RENDERER_STYLES);
        }
        public function set dataProvider(_arg1:DataProvider):void{
            if (_dataProvider != null){
                _dataProvider.removeEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange);
                _dataProvider.removeEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange);
            };
            _dataProvider = _arg1;
            _dataProvider.addEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
            _dataProvider.addEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange, false, 0, true);
            clearSelection();
            invalidateList();
        }
        public function invalidateList():void{
            _invalidateList();
            invalidate(InvalidationType.DATA);
        }
        public function replaceItemAt(_arg1:Object, _arg2:uint):Object{
            return (_dataProvider.replaceItemAt(_arg1, _arg2));
        }
        public function removeAll():void{
            _dataProvider.removeAll();
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            list.mouseChildren = _enabled;
        }
        public function scrollToIndex(_arg1:int):void{
        }
        public function get selectedIndices():Array{
            return (_selectedIndices.concat());
        }
        override protected function drawLayout():void{
            super.drawLayout();
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            listHolder.scrollRect = contentScrollRect;
        }
        protected function _invalidateList():void{
            availableCellRenderers = [];
            while (activeCellRenderers.length > 0) {
                list.removeChild((activeCellRenderers.pop() as DisplayObject));
            };
        }
        public function set selectedItem(_arg1:Object):void{
            var _local2:int = _dataProvider.getItemIndex(_arg1);
            selectedIndex = _local2;
        }
        public function getItemAt(_arg1:uint):Object{
            return (_dataProvider.getItemAt(_arg1));
        }
        protected function handleCellRendererChange(_arg1:Event):void{
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            _dataProvider.invalidateItemAt(_local3);
        }
        protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        public function itemToLabel(_arg1:Object):String{
            return (_arg1["label"]);
        }
        public function addItemAt(_arg1:Object, _arg2:uint):void{
            _dataProvider.addItemAt(_arg1, _arg2);
            invalidateList();
        }
        override protected function initializeAccessibility():void{
            if (SelectableList.createAccessibilityImplementation != null){
                SelectableList.createAccessibilityImplementation(this);
            };
        }
        protected function updateRendererStyles():void{
            var _local4:String;
            var _local1:Array = availableCellRenderers.concat(activeCellRenderers);
            var _local2:uint = _local1.length;
            var _local3:uint;
            while (_local3 < _local2) {
                if (_local1[_local3].setStyle == null){
                } else {
                    for (_local4 in updatedRendererStyles) {
                        _local1[_local3].setStyle(_local4, updatedRendererStyles[_local4]);
                    };
                    _local1[_local3].drawNow();
                };
                _local3++;
            };
            updatedRendererStyles = {};
        }
        public function set selectable(_arg1:Boolean):void{
            if (_arg1 == _selectable){
                return;
            };
            if (!_arg1){
                selectedIndices = [];
            };
            _selectable = _arg1;
        }
        public function removeItem(_arg1:Object):Object{
            return (_dataProvider.removeItem(_arg1));
        }
        public function get dataProvider():DataProvider{
            return (_dataProvider);
        }
        public function set maxHorizontalScrollPosition(_arg1:Number):void{
            _maxHorizontalScrollPosition = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function clearSelection():void{
            selectedIndex = -1;
        }
        public function invalidateItemAt(_arg1:uint):void{
            var _local2:Object = _dataProvider.getItemAt(_arg1);
            if (_local2 != null){
                invalidateItem(_local2);
            };
        }
        public function sortItems(... _args){
            return (_dataProvider.sort.apply(_dataProvider, _args));
        }
        public function set selectedItems(_arg1:Array):void{
            var _local4:int;
            if (_arg1 == null){
                selectedIndices = null;
                return;
            };
            var _local2:Array = [];
            var _local3:uint;
            while (_local3 < _arg1.length) {
                _local4 = _dataProvider.getItemIndex(_arg1[_local3]);
                if (_local4 != -1){
                    _local2.push(_local4);
                };
                _local3++;
            };
            selectedIndices = _local2;
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _horizontalScrollPosition){
                return;
            };
            var _local3:Number = (_arg1 - _horizontalScrollPosition);
            _horizontalScrollPosition = _arg1;
            if (_arg2){
                dispatchEvent(new ScrollEvent(ScrollBarDirection.HORIZONTAL, _local3, _arg1));
            };
        }
        override public function get maxHorizontalScrollPosition():Number{
            return (_maxHorizontalScrollPosition);
        }
        public function scrollToSelected():void{
            scrollToIndex(selectedIndex);
        }
        public function get selectedItems():Array{
            var _local1:Array = [];
            var _local2:uint;
            while (_local2 < _selectedIndices.length) {
                _local1.push(_dataProvider.getItemAt(_selectedIndices[_local2]));
                _local2++;
            };
            return (_local1);
        }
        public function get length():uint{
            return (_dataProvider.length);
        }
        public function invalidateItem(_arg1:Object):void{
            if (renderedItems[_arg1] == null){
                return;
            };
            invalidItems[_arg1] = true;
            invalidate(InvalidationType.DATA);
        }
        public function set selectedIndex(_arg1:int):void{
            selectedIndices = ((_arg1)==-1) ? null : [_arg1];
        }
        public function get selectedIndex():int{
            return (((_selectedIndices.length)==0) ? -1 : _selectedIndices[(_selectedIndices.length - 1)]);
        }
        public function getRendererStyle(_arg1:String, _arg2:int=-1):Object{
            return (rendererStyles[_arg1]);
        }
        protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local5:int;
            var _local6:uint;
            if (!_enabled){
                return;
            };
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            if (((!(dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK, false, true, _local2.listData.column, _local2.listData.row, _local3, _local2.data)))) || (!(_selectable)))){
                return;
            };
            var _local4:int = selectedIndices.indexOf(_local3);
            if (!_allowMultipleSelection){
                if (_local4 != -1){
                    return;
                };
                _local2.selected = true;
                _selectedIndices = [_local3];
                lastCaretIndex = (caretIndex = _local3);
            } else {
                if (_arg1.shiftKey){
                    _local6 = ((_selectedIndices.length)>0) ? _selectedIndices[0] : _local3;
                    _selectedIndices = [];
                    if (_local6 > _local3){
                        _local5 = _local6;
                        while (_local5 >= _local3) {
                            _selectedIndices.push(_local5);
                            _local5--;
                        };
                    } else {
                        _local5 = _local6;
                        while (_local5 <= _local3) {
                            _selectedIndices.push(_local5);
                            _local5++;
                        };
                    };
                    caretIndex = _local3;
                } else {
                    if (_arg1.ctrlKey){
                        if (_local4 != -1){
                            _local2.selected = false;
                            _selectedIndices.splice(_local4, 1);
                        } else {
                            _local2.selected = true;
                            _selectedIndices.push(_local3);
                        };
                        caretIndex = _local3;
                    } else {
                        _selectedIndices = [_local3];
                        lastCaretIndex = (caretIndex = _local3);
                    };
                };
            };
            dispatchEvent(new Event(Event.CHANGE));
            invalidate(InvalidationType.DATA);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;

    public class CheckBox extends LabelButton {

        private static var defaultStyles:Object = {
            icon:null,
            upIcon:"CheckBox_upIcon",
            downIcon:"CheckBox_downIcon",
            overIcon:"CheckBox_overIcon",
            disabledIcon:"CheckBox_disabledIcon",
            selectedDisabledIcon:"CheckBox_selectedDisabledIcon",
            focusRectSkin:null,
            focusRectPadding:null,
            selectedUpIcon:"CheckBox_selectedUpIcon",
            selectedDownIcon:"CheckBox_selectedDownIcon",
            selectedOverIcon:"CheckBox_selectedOverIcon",
            textFormat:null,
            disabledTextFormat:null,
            embedFonts:null,
            textPadding:5
        };
        public static var createAccessibilityImplementation:Function;

        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override protected function drawBackground():void{
        }
        override public function get toggle():Boolean{
            return (true);
        }
        override protected function initializeAccessibility():void{
            if (CheckBox.createAccessibilityImplementation != null){
                CheckBox.createAccessibilityImplementation(this);
            };
        }
        override public function set toggle(_arg1:Boolean):void{
            throw (new Error("Warning: You cannot change a CheckBox's toggle."));
        }
        override public function get autoRepeat():Boolean{
            return (false);
        }
        override public function set autoRepeat(_arg1:Boolean):void{
        }
        override public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            super.drawFocus(_arg1);
            if (_arg1){
                _local2 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = (background.x - _local2);
                uiFocusRect.y = (background.y - _local2);
                uiFocusRect.width = (background.width + (_local2 << 1));
                uiFocusRect.height = (background.height + (_local2 << 1));
            };
        }
        override protected function configUI():void{
            super.configUI();
            super.toggle = true;
            var _local1:Shape = new Shape();
            var _local2:Graphics = _local1.graphics;
            _local2.beginFill(0, 0);
            _local2.drawRect(0, 0, 100, 100);
            _local2.endFill();
            background = (_local1 as DisplayObject);
            addChildAt(background, 0);
        }
        override protected function drawLayout():void{
            super.drawLayout();
            var _local1:Number = Number(getStyleValue("textPadding"));
            switch (_labelPlacement){
                case ButtonLabelPlacement.RIGHT:
                    icon.x = _local1;
                    textField.x = (icon.x + (icon.width + _local1));
                    background.width = ((textField.x + textField.width) + _local1);
                    background.height = (Math.max(textField.height, icon.height) + (_local1 * 2));
                    break;
                case ButtonLabelPlacement.LEFT:
                    icon.x = ((width - icon.width) - _local1);
                    textField.x = (((width - icon.width) - (_local1 * 2)) - textField.width);
                    background.width = ((textField.width + icon.width) + (_local1 * 3));
                    background.height = (Math.max(textField.height, icon.height) + (_local1 * 2));
                    break;
                case ButtonLabelPlacement.TOP:
                case ButtonLabelPlacement.BOTTOM:
                    background.width = (Math.max(textField.width, icon.width) + (_local1 * 2));
                    background.height = ((textField.height + icon.height) + (_local1 * 3));
                    break;
            };
            background.x = Math.min((icon.x - _local1), (textField.x - _local1));
            background.y = Math.min((icon.y - _local1), (textField.y - _local1));
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.controls.listClasses.*;
    import flash.ui.*;

    public class List extends SelectableList implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            focusRectSkin:null,
            focusRectPadding:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var _iconField:String = "icon";
        protected var _labelField:String = "label";
        protected var _iconFunction:Function;
        protected var _rowHeight:Number = 20;
        protected var _cellRenderer:Object;
        protected var _labelFunction:Function;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, SelectableList.getStyleDefinition()));
        }

        public function get iconField():String{
            return (_iconField);
        }
        public function set iconField(_arg1:String):void{
            if (_arg1 == _iconField){
                return;
            };
            _iconField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function set labelField(_arg1:String):void{
            if (_arg1 == _labelField){
                return;
            };
            _labelField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function set rowHeight(_arg1:Number):void{
            _rowHeight = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == (rowHeight * length)));
            contentHeight = (rowHeight * length);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (_cellRenderer != getStyleValue("cellRenderer")){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                };
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        override public function get rowCount():uint{
            return (Math.ceil((calculateAvailableHeight() / rowHeight)));
        }
        override protected function configUI():void{
            useFixedHorizontalScrolling = true;
            _horizontalScrollPolicy = ScrollPolicy.AUTO;
            _verticalScrollPolicy = ScrollPolicy.AUTO;
            super.configUI();
        }
        public function set labelFunction(_arg1:Function):void{
            if (_labelFunction == _arg1){
                return;
            };
            _labelFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        override public function scrollToIndex(_arg1:int):void{
            drawNow();
            var _local2:uint = (Math.floor(((_verticalScrollPosition + availableHeight) / rowHeight)) - 1);
            var _local3:uint = Math.ceil((_verticalScrollPosition / rowHeight));
            if (_arg1 < _local3){
                verticalScrollPosition = (_arg1 * rowHeight);
            } else {
                if (_arg1 > _local2){
                    verticalScrollPosition = (((_arg1 + 1) * rowHeight) - availableHeight);
                };
            };
        }
        override protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            list.x = -(_arg1);
            super.setHorizontalScrollPosition(_arg1, true);
        }
        override protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
            var _local4:int = Math.max(Math.floor((calculateAvailableHeight() / rowHeight)), 1);
            var _local5 = -1;
            var _local6:int;
            switch (_arg1){
                case Keyboard.UP:
                    if (caretIndex > 0){
                        _local5 = (caretIndex - 1);
                    };
                    break;
                case Keyboard.DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = (caretIndex + 1);
                    };
                    break;
                case Keyboard.PAGE_UP:
                    if (caretIndex > 0){
                        _local5 = Math.max((caretIndex - _local4), 0);
                    };
                    break;
                case Keyboard.PAGE_DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = Math.min((caretIndex + _local4), (length - 1));
                    };
                    break;
                case Keyboard.HOME:
                    if (caretIndex > 0){
                        _local5 = 0;
                    };
                    break;
                case Keyboard.END:
                    if (caretIndex < (length - 1)){
                        _local5 = (length - 1);
                    };
                    break;
            };
            if (_local5 >= 0){
                doKeySelection(_local5, _arg2, _arg3);
                scrollToSelected();
            };
        }
        protected function doKeySelection(_arg1:int, _arg2:Boolean, _arg3:Boolean):void{
            var _local5:int;
            var _local6:Array;
            var _local7:int;
            var _local8:int;
            var _local4:Boolean;
            if (_arg2){
                _local6 = [];
                _local7 = lastCaretIndex;
                _local8 = _arg1;
                if (_local7 == -1){
                    _local7 = ((caretIndex)!=-1) ? caretIndex : _arg1;
                };
                if (_local7 > _local8){
                    _local8 = _local7;
                    _local7 = _arg1;
                };
                _local5 = _local7;
                while (_local5 <= _local8) {
                    _local6.push(_local5);
                    _local5++;
                };
                selectedIndices = _local6;
                caretIndex = _arg1;
                _local4 = true;
            } else {
                selectedIndex = _arg1;
                caretIndex = (lastCaretIndex = _arg1);
                _local4 = true;
            };
            if (_local4){
                dispatchEvent(new Event(Event.CHANGE));
            };
            invalidate(InvalidationType.DATA);
        }
        public function get rowHeight():Number{
            return (_rowHeight);
        }
        override protected function initializeAccessibility():void{
            if (List.createAccessibilityImplementation != null){
                List.createAccessibilityImplementation(this);
            };
        }
        public function get labelField():String{
            return (_labelField);
        }
        public function set iconFunction(_arg1:Function):void{
            if (_iconFunction == _arg1){
                return;
            };
            _iconFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function set rowCount(_arg1:uint):void{
            var _local2:Number = Number(getStyleValue("contentPadding"));
            var _local3:Number = (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0);
            height = (((rowHeight * _arg1) + (2 * _local2)) + _local3);
        }
        public function get labelFunction():Function{
            return (_labelFunction);
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            invalidate(InvalidationType.SCROLL);
            super.setVerticalScrollPosition(_arg1, true);
        }
        override protected function drawList():void{
            var _local4:uint;
            var _local5:Object;
            var _local6:ICellRenderer;
            var _local9:Boolean;
            var _local10:String;
            var _local11:Object;
            var _local12:Sprite;
            var _local13:String;
            listHolder.x = (listHolder.y = contentPadding);
            var _local1:Rectangle = listHolder.scrollRect;
            _local1.x = _horizontalScrollPosition;
            _local1.y = (Math.floor(_verticalScrollPosition) % rowHeight);
            listHolder.scrollRect = _local1;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var _local2:uint = Math.floor((_verticalScrollPosition / rowHeight));
            var _local3:uint = Math.min(length, ((_local2 + rowCount) + 1));
            var _local7:Dictionary = (renderedItems = new Dictionary(true));
            _local4 = _local2;
            while (_local4 < _local3) {
                _local7[_dataProvider.getItemAt(_local4)] = true;
                _local4++;
            };
            var _local8:Dictionary = new Dictionary(true);
            while (activeCellRenderers.length > 0) {
                _local6 = (activeCellRenderers.pop() as ICellRenderer);
                _local5 = _local6.data;
                if ((((_local7[_local5] == null)) || ((invalidItems[_local5] == true)))){
                    availableCellRenderers.push(_local6);
                } else {
                    _local8[_local5] = _local6;
                    invalidItems[_local5] = true;
                };
                list.removeChild((_local6 as DisplayObject));
            };
            invalidItems = new Dictionary(true);
            _local4 = _local2;
            while (_local4 < _local3) {
                _local9 = false;
                _local5 = _dataProvider.getItemAt(_local4);
                if (_local8[_local5] != null){
                    _local9 = true;
                    _local6 = _local8[_local5];
                    delete _local8[_local5];
                } else {
                    if (availableCellRenderers.length > 0){
                        _local6 = (availableCellRenderers.pop() as ICellRenderer);
                    } else {
                        _local6 = (getDisplayObjectInstance(getStyleValue("cellRenderer")) as ICellRenderer);
                        _local12 = (_local6 as Sprite);
                        if (_local12 != null){
                            _local12.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                            _local12.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                            _local12.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                            _local12.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                            _local12.doubleClickEnabled = true;
                            _local12.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                            if (_local12.hasOwnProperty("setStyle")){
                                for (_local13 in rendererStyles) {
                                    var _local16 = _local12;
                                    _local16["setStyle"](_local13, rendererStyles[_local13]);
                                };
                            };
                        };
                    };
                };
                list.addChild((_local6 as Sprite));
                activeCellRenderers.push(_local6);
                _local6.y = (rowHeight * (_local4 - _local2));
                _local6.setSize((availableWidth + _maxHorizontalScrollPosition), rowHeight);
                _local10 = itemToLabel(_local5);
                _local11 = null;
                if (_iconFunction != null){
                    _local11 = _iconFunction(_local5);
                } else {
                    if (_iconField != null){
                        _local11 = _local5[_iconField];
                    };
                };
                if (!_local9){
                    _local6.data = _local5;
                };
                _local6.listData = new ListData(_local10, _local11, this, _local4, _local4, 0);
                _local6.selected = !((_selectedIndices.indexOf(_local4) == -1));
                if ((_local6 is UIComponent)){
                    (_local6 as UIComponent).drawNow();
                };
                _local4++;
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            var _local2:int;
            if (!selectable){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.SPACE:
                    if (caretIndex == -1){
                        caretIndex = 0;
                    };
                    doKeySelection(caretIndex, _arg1.shiftKey, _arg1.ctrlKey);
                    scrollToSelected();
                    break;
                default:
                    _local2 = getNextIndexAtLetter(String.fromCharCode(_arg1.keyCode), selectedIndex);
                    if (_local2 > -1){
                        selectedIndex = _local2;
                        scrollToSelected();
                    };
            };
            _arg1.stopPropagation();
        }
        public function get iconFunction():Function{
            return (_iconFunction);
        }
        override public function itemToLabel(_arg1:Object):String{
            if (_labelFunction != null){
                return (String(_labelFunction(_arg1)));
            };
            return (((_arg1[_labelField])!=null) ? String(_arg1[_labelField]) : "");
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            return (((height - (_local1 * 2)) - (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0)));
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.events.*;
    import fl.controls.listClasses.*;
    import fl.containers.*;
    import flash.ui.*;

    public class MiniSelectableList extends MiniBaseScrollPane implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            skin:"List_skin",
            cellRenderer:CellRenderer,
            contentPadding:null,
            disabledAlpha:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var invalidItems:Dictionary;
        protected var renderedItems:Dictionary;
        protected var caretIndex:int = -1;
        protected var updatedRendererStyles:Object;
        protected var _allowMultipleSelection:Boolean = false;
        protected var lastCaretIndex:int = -1;
        protected var _verticalScrollPosition:Number;
        protected var _selectedIndices:Array;
        protected var preChangeItems:Array;
        protected var activeCellRenderers:Array;
        protected var availableCellRenderers:Array;
        protected var rendererStyles:Object;
        protected var list:Sprite;
        protected var _dataProvider:DataProvider;
        protected var _horizontalScrollPosition:Number;
        private var collectionItemImport:SimpleCollectionItem;
        protected var listHolder:Sprite;
        protected var _selectable:Boolean = true;

        public function MiniSelectableList(){
            activeCellRenderers = [];
            availableCellRenderers = [];
            invalidItems = new Dictionary(true);
            renderedItems = new Dictionary(true);
            _selectedIndices = [];
            if (dataProvider == null){
                dataProvider = new DataProvider();
            };
            verticalScrollPolicy = ScrollPolicy.AUTO;
            rendererStyles = {};
            updatedRendererStyles = {};
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, MiniBaseScrollPane.getStyleDefinition()));
        }

        protected function drawList():void{
        }
        protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        public function get allowMultipleSelection():Boolean{
            return (_allowMultipleSelection);
        }
        protected function onPreChange(_arg1:DataChangeEvent):void{
            switch (_arg1.changeType){
                case DataChangeType.REMOVE:
                case DataChangeType.ADD:
                case DataChangeType.INVALIDATE:
                case DataChangeType.REMOVE_ALL:
                case DataChangeType.REPLACE:
                case DataChangeType.INVALIDATE_ALL:
                    break;
                default:
                    preChangeItems = selectedItems;
            };
        }
        public function set selectedIndices(_arg1:Array):void{
            if (!_selectable){
                return;
            };
            _selectedIndices = ((_arg1)==null) ? [] : _arg1.concat();
            invalidate(InvalidationType.SELECTED);
        }
        public function isItemSelected(_arg1:Object):Boolean{
            return ((selectedItems.indexOf(_arg1) > -1));
        }
        public function set allowMultipleSelection(_arg1:Boolean):void{
            if (_arg1 == _allowMultipleSelection){
                return;
            };
            _allowMultipleSelection = _arg1;
            if (((!(_arg1)) && ((_selectedIndices.length > 1)))){
                _selectedIndices = [_selectedIndices.pop()];
                invalidate(InvalidationType.DATA);
            };
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _verticalScrollPosition){
                return;
            };
            var _local3:Number = (_arg1 - _verticalScrollPosition);
            _verticalScrollPosition = _arg1;
            if (_arg2){
                dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _local3, _arg1));
            };
        }
        public function sortItemsOn(_arg1:String, _arg2:Object=null){
            return (_dataProvider.sortOn(_arg1, _arg2));
        }
        public function getNextIndexAtLetter(_arg1:String, _arg2:int=-1):int{
            var _local5:Number;
            var _local6:Object;
            var _local7:String;
            if (length == 0){
                return (-1);
            };
            _arg1 = _arg1.toUpperCase();
            var _local3:int = (length - 1);
            var _local4:Number = 0;
            while (_local4 < _local3) {
                _local5 = ((_arg2 + 1) + _local4);
                if (_local5 > (length - 1)){
                    _local5 = (_local5 - length);
                };
                _local6 = getItemAt(_local5);
                if (_local6 == null){
                    break;
                };
                _local7 = itemToLabel(_local6);
                if (_local7 == null){
                } else {
                    if (_local7.charAt(0).toUpperCase() == _arg1){
                        return (_local5);
                    };
                };
                _local4++;
            };
            return (-1);
        }
        override protected function draw():void{
            super.draw();
        }
        public function removeItemAt(_arg1:uint):Object{
            return (_dataProvider.removeItemAt(_arg1));
        }
        public function get selectedItem():Object{
            return (((_selectedIndices.length)==0) ? null : _dataProvider.getItemAt(selectedIndex));
        }
        protected function handleDataChange(_arg1:DataChangeEvent):void{
            var _local5:uint;
            var _local2:int = _arg1.startIndex;
            var _local3:int = _arg1.endIndex;
            var _local4:String = _arg1.changeType;
            if (_local4 == DataChangeType.INVALIDATE_ALL){
                clearSelection();
                invalidateList();
            } else {
                if (_local4 == DataChangeType.INVALIDATE){
                    _local5 = 0;
                    while (_local5 < _arg1.items.length) {
                        invalidateItem(_arg1.items[_local5]);
                        _local5++;
                    };
                } else {
                    if (_local4 == DataChangeType.ADD){
                        _local5 = 0;
                        while (_local5 < _selectedIndices.length) {
                            if (_selectedIndices[_local5] >= _local2){
                                _selectedIndices[_local5] = (_selectedIndices[_local5] + (_local2 - _local3));
                            };
                            _local5++;
                        };
                    } else {
                        if (_local4 == DataChangeType.REMOVE){
                            _local5 = 0;
                            while (_local5 < _selectedIndices.length) {
                                if (_selectedIndices[_local5] >= _local2){
                                    if (_selectedIndices[_local5] <= _local3){
                                        delete _selectedIndices[_local5];
                                    } else {
                                        _selectedIndices[_local5] = (_selectedIndices[_local5] - ((_local2 - _local3) + 1));
                                    };
                                };
                                _local5++;
                            };
                        } else {
                            if (_local4 == DataChangeType.REMOVE_ALL){
                                clearSelection();
                            } else {
                                if (_local4 == DataChangeType.REPLACE){
                                } else {
                                    selectedItems = preChangeItems;
                                    preChangeItems = null;
                                };
                            };
                        };
                    };
                };
            };
            invalidate(InvalidationType.DATA);
        }
        public function itemToCellRenderer(_arg1:Object):ICellRenderer{
            var _local2:Object;
            var _local3:ICellRenderer;
            if (_arg1 != null){
                for (_local2 in activeCellRenderers) {
                    _local3 = (activeCellRenderers[_local2] as ICellRenderer);
                    if (_local3.data == _arg1){
                        return (_local3);
                    };
                };
            };
            return (null);
        }
        public function addItem(_arg1:Object):void{
            _dataProvider.addItem(_arg1);
            invalidateList();
        }
        public function get rowCount():uint{
            return (0);
        }
        override protected function configUI():void{
            super.configUI();
            listHolder = new Sprite();
            addChild(listHolder);
            listHolder.scrollRect = contentScrollRect;
            list = new Sprite();
            listHolder.addChild(list);
        }
        public function get selectable():Boolean{
            return (_selectable);
        }
        public function clearRendererStyle(_arg1:String, _arg2:int=-1):void{
            delete rendererStyles[_arg1];
            updatedRendererStyles[_arg1] = null;
            invalidate(InvalidationType.RENDERER_STYLES);
        }
        protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            var _local2:ICellRenderer = (_arg1.target as ICellRenderer);
            var _local3:String = ((_arg1.type)==MouseEvent.ROLL_OVER) ? ListEvent.ITEM_ROLL_OVER : ListEvent.ITEM_ROLL_OUT;
            dispatchEvent(new ListEvent(_local3, false, false, _local2.listData.column, _local2.listData.row, _local2.listData.index, _local2.data));
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!selectable){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
            };
        }
        protected function handleCellRendererDoubleClick(_arg1:MouseEvent):void{
            if (!_enabled){
                return;
            };
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            dispatchEvent(new ListEvent(ListEvent.ITEM_DOUBLE_CLICK, false, true, _local2.listData.column, _local2.listData.row, _local3, _local2.data));
        }
        public function setRendererStyle(_arg1:String, _arg2:Object, _arg3:uint=0):void{
            if (rendererStyles[_arg1] == _arg2){
                return;
            };
            updatedRendererStyles[_arg1] = _arg2;
            rendererStyles[_arg1] = _arg2;
            invalidate(InvalidationType.RENDERER_STYLES);
        }
        public function set dataProvider(_arg1:DataProvider):void{
            if (_dataProvider != null){
                _dataProvider.removeEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange);
                _dataProvider.removeEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange);
            };
            _dataProvider = _arg1;
            _dataProvider.addEventListener(DataChangeEvent.DATA_CHANGE, handleDataChange, false, 0, true);
            _dataProvider.addEventListener(DataChangeEvent.PRE_DATA_CHANGE, onPreChange, false, 0, true);
            clearSelection();
            invalidateList();
        }
        public function invalidateList():void{
            _invalidateList();
            invalidate(InvalidationType.DATA);
        }
        public function replaceItemAt(_arg1:Object, _arg2:uint):Object{
            return (_dataProvider.replaceItemAt(_arg1, _arg2));
        }
        public function removeAll():void{
            _dataProvider.removeAll();
        }
        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            list.mouseChildren = _enabled;
        }
        public function scrollToIndex(_arg1:int):void{
        }
        public function get selectedIndices():Array{
            return (_selectedIndices.concat());
        }
        override protected function drawLayout():void{
            super.drawLayout();
            contentScrollRect = listHolder.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            listHolder.scrollRect = contentScrollRect;
        }
        protected function _invalidateList():void{
            availableCellRenderers = [];
            while (activeCellRenderers.length > 0) {
                list.removeChild((activeCellRenderers.pop() as DisplayObject));
            };
        }
        public function set selectedItem(_arg1:Object):void{
            var _local2:int = _dataProvider.getItemIndex(_arg1);
            selectedIndex = _local2;
        }
        public function getItemAt(_arg1:uint):Object{
            return (_dataProvider.getItemAt(_arg1));
        }
        protected function handleCellRendererChange(_arg1:Event):void{
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            _dataProvider.invalidateItemAt(_local3);
        }
        protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        public function itemToLabel(_arg1:Object):String{
            return (_arg1["label"]);
        }
        public function addItemAt(_arg1:Object, _arg2:uint):void{
            _dataProvider.addItemAt(_arg1, _arg2);
            invalidateList();
        }
        override protected function initializeAccessibility():void{
            if (MiniSelectableList.createAccessibilityImplementation != null){
                MiniSelectableList.createAccessibilityImplementation(this);
            };
        }
        protected function updateRendererStyles():void{
            var _local4:String;
            var _local1:Array = availableCellRenderers.concat(activeCellRenderers);
            var _local2:uint = _local1.length;
            var _local3:uint;
            while (_local3 < _local2) {
                if (_local1[_local3].setStyle == null){
                } else {
                    for (_local4 in updatedRendererStyles) {
                        _local1[_local3].setStyle(_local4, updatedRendererStyles[_local4]);
                    };
                    _local1[_local3].drawNow();
                };
                _local3++;
            };
            updatedRendererStyles = {};
        }
        public function set selectable(_arg1:Boolean):void{
            if (_arg1 == _selectable){
                return;
            };
            if (!_arg1){
                selectedIndices = [];
            };
            _selectable = _arg1;
        }
        public function removeItem(_arg1:Object):Object{
            return (_dataProvider.removeItem(_arg1));
        }
        public function get dataProvider():DataProvider{
            return (_dataProvider);
        }
        public function set maxHorizontalScrollPosition(_arg1:Number):void{
            _maxHorizontalScrollPosition = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function clearSelection():void{
            selectedIndex = -1;
        }
        public function invalidateItemAt(_arg1:uint):void{
            var _local2:Object = _dataProvider.getItemAt(_arg1);
            if (_local2 != null){
                invalidateItem(_local2);
            };
        }
        public function sortItems(... _args){
            return (_dataProvider.sort.apply(_dataProvider, _args));
        }
        public function set selectedItems(_arg1:Array):void{
            var _local4:int;
            if (_arg1 == null){
                selectedIndices = null;
                return;
            };
            var _local2:Array = [];
            var _local3:uint;
            while (_local3 < _arg1.length) {
                _local4 = _dataProvider.getItemIndex(_arg1[_local3]);
                if (_local4 != -1){
                    _local2.push(_local4);
                };
                _local3++;
            };
            selectedIndices = _local2;
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            if (_arg1 == _horizontalScrollPosition){
                return;
            };
            var _local3:Number = (_arg1 - _horizontalScrollPosition);
            _horizontalScrollPosition = _arg1;
            if (_arg2){
                dispatchEvent(new ScrollEvent(ScrollBarDirection.HORIZONTAL, _local3, _arg1));
            };
        }
        override public function get maxHorizontalScrollPosition():Number{
            return (_maxHorizontalScrollPosition);
        }
        public function scrollToSelected():void{
            scrollToIndex(selectedIndex);
        }
        public function get selectedItems():Array{
            var _local1:Array = [];
            var _local2:uint;
            while (_local2 < _selectedIndices.length) {
                _local1.push(_dataProvider.getItemAt(_selectedIndices[_local2]));
                _local2++;
            };
            return (_local1);
        }
        public function get length():uint{
            return (_dataProvider.length);
        }
        public function invalidateItem(_arg1:Object):void{
            if (renderedItems[_arg1] == null){
                return;
            };
            invalidItems[_arg1] = true;
            invalidate(InvalidationType.DATA);
        }
        public function set selectedIndex(_arg1:int):void{
            selectedIndices = ((_arg1)==-1) ? null : [_arg1];
        }
        public function get selectedIndex():int{
            return (((_selectedIndices.length)==0) ? -1 : _selectedIndices[(_selectedIndices.length - 1)]);
        }
        public function getRendererStyle(_arg1:String, _arg2:int=-1):Object{
            return (rendererStyles[_arg1]);
        }
        protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local5:int;
            var _local6:uint;
            if (!_enabled){
                return;
            };
            var _local2:ICellRenderer = (_arg1.currentTarget as ICellRenderer);
            var _local3:uint = _local2.listData.index;
            if (((!(dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK, false, true, _local2.listData.column, _local2.listData.row, _local3, _local2.data)))) || (!(_selectable)))){
                return;
            };
            var _local4:int = selectedIndices.indexOf(_local3);
            if (!_allowMultipleSelection){
                if (_local4 != -1){
                    return;
                };
                _local2.selected = true;
                _selectedIndices = [_local3];
                lastCaretIndex = (caretIndex = _local3);
            } else {
                if (_arg1.shiftKey){
                    _local6 = ((_selectedIndices.length)>0) ? _selectedIndices[0] : _local3;
                    _selectedIndices = [];
                    if (_local6 > _local3){
                        _local5 = _local6;
                        while (_local5 >= _local3) {
                            _selectedIndices.push(_local5);
                            _local5--;
                        };
                    } else {
                        _local5 = _local6;
                        while (_local5 <= _local3) {
                            _selectedIndices.push(_local5);
                            _local5++;
                        };
                    };
                    caretIndex = _local3;
                } else {
                    if (_arg1.ctrlKey){
                        if (_local4 != -1){
                            _local2.selected = false;
                            _selectedIndices.splice(_local4, 1);
                        } else {
                            _local2.selected = true;
                            _selectedIndices.push(_local3);
                        };
                        caretIndex = _local3;
                    } else {
                        _selectedIndices = [_local3];
                        lastCaretIndex = (caretIndex = _local3);
                    };
                };
            };
            dispatchEvent(new Event(Event.CHANGE));
            invalidate(InvalidationType.DATA);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.controls.listClasses.*;
    import flash.ui.*;

    public class MiniList extends MiniSelectableList implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            focusRectSkin:null,
            focusRectPadding:null
        };
        public static var createAccessibilityImplementation:Function;

        protected var _iconField:String = "icon";
        protected var _labelField:String = "label";
        protected var _iconFunction:Function;
        protected var _rowHeight:Number = 20;
        protected var _cellRenderer:Object;
        protected var _labelFunction:Function;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, MiniSelectableList.getStyleDefinition()));
        }

        public function get iconField():String{
            return (_iconField);
        }
        public function set iconField(_arg1:String):void{
            if (_arg1 == _iconField){
                return;
            };
            _iconField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function set labelField(_arg1:String):void{
            if (_arg1 == _labelField){
                return;
            };
            _labelField = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function set rowHeight(_arg1:Number):void{
            _rowHeight = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == (rowHeight * length)));
            contentHeight = (rowHeight * length);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (_cellRenderer != getStyleValue("cellRenderer")){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                };
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        override public function get rowCount():uint{
            return (Math.ceil((calculateAvailableHeight() / rowHeight)));
        }
        override protected function configUI():void{
            useFixedHorizontalScrolling = true;
            _horizontalScrollPolicy = ScrollPolicy.AUTO;
            _verticalScrollPolicy = ScrollPolicy.AUTO;
            super.configUI();
        }
        public function set labelFunction(_arg1:Function):void{
            if (_labelFunction == _arg1){
                return;
            };
            _labelFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        override public function scrollToIndex(_arg1:int):void{
            drawNow();
            var _local2:uint = (Math.floor(((_verticalScrollPosition + availableHeight) / rowHeight)) - 1);
            var _local3:uint = Math.ceil((_verticalScrollPosition / rowHeight));
            if (_arg1 < _local3){
                verticalScrollPosition = (_arg1 * rowHeight);
            } else {
                if (_arg1 > _local2){
                    verticalScrollPosition = (((_arg1 + 1) * rowHeight) - availableHeight);
                };
            };
        }
        override protected function moveSelectionHorizontally(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            list.x = -(_arg1);
            super.setHorizontalScrollPosition(_arg1, true);
        }
        override protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
            var _local4:int = Math.max(Math.floor((calculateAvailableHeight() / rowHeight)), 1);
            var _local5 = -1;
            var _local6:int;
            switch (_arg1){
                case Keyboard.UP:
                    if (caretIndex > 0){
                        _local5 = (caretIndex - 1);
                    };
                    break;
                case Keyboard.DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = (caretIndex + 1);
                    };
                    break;
                case Keyboard.PAGE_UP:
                    if (caretIndex > 0){
                        _local5 = Math.max((caretIndex - _local4), 0);
                    };
                    break;
                case Keyboard.PAGE_DOWN:
                    if (caretIndex < (length - 1)){
                        _local5 = Math.min((caretIndex + _local4), (length - 1));
                    };
                    break;
                case Keyboard.HOME:
                    if (caretIndex > 0){
                        _local5 = 0;
                    };
                    break;
                case Keyboard.END:
                    if (caretIndex < (length - 1)){
                        _local5 = (length - 1);
                    };
                    break;
            };
            if (_local5 >= 0){
                doKeySelection(_local5, _arg2, _arg3);
                scrollToSelected();
            };
        }
        protected function doKeySelection(_arg1:int, _arg2:Boolean, _arg3:Boolean):void{
            var _local5:int;
            var _local6:Array;
            var _local7:int;
            var _local8:int;
            var _local4:Boolean;
            if (_arg2){
                _local6 = [];
                _local7 = lastCaretIndex;
                _local8 = _arg1;
                if (_local7 == -1){
                    _local7 = ((caretIndex)!=-1) ? caretIndex : _arg1;
                };
                if (_local7 > _local8){
                    _local8 = _local7;
                    _local7 = _arg1;
                };
                _local5 = _local7;
                while (_local5 <= _local8) {
                    _local6.push(_local5);
                    _local5++;
                };
                selectedIndices = _local6;
                caretIndex = _arg1;
                _local4 = true;
            } else {
                selectedIndex = _arg1;
                caretIndex = (lastCaretIndex = _arg1);
                _local4 = true;
            };
            if (_local4){
                dispatchEvent(new Event(Event.CHANGE));
            };
            invalidate(InvalidationType.DATA);
        }
        public function get rowHeight():Number{
            return (_rowHeight);
        }
        override protected function initializeAccessibility():void{
            if (MiniList.createAccessibilityImplementation != null){
                MiniList.createAccessibilityImplementation(this);
            };
        }
        public function get labelField():String{
            return (_labelField);
        }
        public function set iconFunction(_arg1:Function):void{
            if (_iconFunction == _arg1){
                return;
            };
            _iconFunction = _arg1;
            invalidate(InvalidationType.DATA);
        }
        public function set rowCount(_arg1:uint):void{
            var _local2:Number = Number(getStyleValue("contentPadding"));
            var _local3:Number = (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0);
            height = (((rowHeight * _arg1) + (2 * _local2)) + _local3);
        }
        public function get labelFunction():Function{
            return (_labelFunction);
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            invalidate(InvalidationType.SCROLL);
            super.setVerticalScrollPosition(_arg1, true);
        }
        override protected function drawList():void{
            var _local4:uint;
            var _local5:Object;
            var _local6:ICellRenderer;
            var _local9:Boolean;
            var _local10:String;
            var _local11:Object;
            var _local12:Sprite;
            var _local13:String;
            listHolder.x = (listHolder.y = contentPadding);
            var _local1:Rectangle = listHolder.scrollRect;
            _local1.x = _horizontalScrollPosition;
            _local1.y = (Math.floor(_verticalScrollPosition) % rowHeight);
            listHolder.scrollRect = _local1;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var _local2:uint = Math.floor((_verticalScrollPosition / rowHeight));
            var _local3:uint = Math.min(length, ((_local2 + rowCount) + 1));
            var _local7:Dictionary = (renderedItems = new Dictionary(true));
            _local4 = _local2;
            while (_local4 < _local3) {
                _local7[_dataProvider.getItemAt(_local4)] = true;
                _local4++;
            };
            var _local8:Dictionary = new Dictionary(true);
            while (activeCellRenderers.length > 0) {
                _local6 = (activeCellRenderers.pop() as ICellRenderer);
                _local5 = _local6.data;
                if ((((_local7[_local5] == null)) || ((invalidItems[_local5] == true)))){
                    availableCellRenderers.push(_local6);
                } else {
                    _local8[_local5] = _local6;
                    invalidItems[_local5] = true;
                };
                list.removeChild((_local6 as DisplayObject));
            };
            invalidItems = new Dictionary(true);
            _local4 = _local2;
            while (_local4 < _local3) {
                _local9 = false;
                _local5 = _dataProvider.getItemAt(_local4);
                if (_local8[_local5] != null){
                    _local9 = true;
                    _local6 = _local8[_local5];
                    delete _local8[_local5];
                } else {
                    if (availableCellRenderers.length > 0){
                        _local6 = (availableCellRenderers.pop() as ICellRenderer);
                    } else {
                        _local6 = (getDisplayObjectInstance(getStyleValue("cellRenderer")) as ICellRenderer);
                        _local12 = (_local6 as Sprite);
                        if (_local12 != null){
                            _local12.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                            _local12.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                            _local12.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                            _local12.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                            _local12.doubleClickEnabled = true;
                            _local12.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                            if (_local12["setStyle"] != null){
                                for (_local13 in rendererStyles) {
                                    var _local16 = _local12;
                                    _local16["setStyle"](_local13, rendererStyles[_local13]);
                                };
                            };
                        };
                    };
                };
                list.addChild((_local6 as Sprite));
                activeCellRenderers.push(_local6);
                _local6.y = (rowHeight * (_local4 - _local2));
                _local6.setSize((availableWidth + _maxHorizontalScrollPosition), rowHeight);
                _local10 = itemToLabel(_local5);
                _local11 = null;
                if (_iconFunction != null){
                    _local11 = _iconFunction(_local5);
                } else {
                    if (_iconField != null){
                        _local11 = _local5[_iconField];
                    };
                };
                if (!_local9){
                    _local6.data = _local5;
                };
                _local6.listData = new ListData(_local10, _local11, this, _local4, _local4, 0);
                _local6.selected = !((_selectedIndices.indexOf(_local4) == -1));
                if ((_local6 is UIComponent)){
                    (_local6 as UIComponent).drawNow();
                };
                _local4++;
            };
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            var _local2:int;
            if (!selectable){
                return;
            };
            switch (_arg1.keyCode){
                case Keyboard.UP:
                case Keyboard.DOWN:
                case Keyboard.END:
                case Keyboard.HOME:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.LEFT:
                case Keyboard.RIGHT:
                    moveSelectionHorizontally(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    break;
                case Keyboard.SPACE:
                    if (caretIndex == -1){
                        caretIndex = 0;
                    };
                    doKeySelection(caretIndex, _arg1.shiftKey, _arg1.ctrlKey);
                    scrollToSelected();
                    break;
                default:
                    _local2 = getNextIndexAtLetter(String.fromCharCode(_arg1.keyCode), selectedIndex);
                    if (_local2 > -1){
                        selectedIndex = _local2;
                        scrollToSelected();
                    };
            };
            _arg1.stopPropagation();
        }
        public function get iconFunction():Function{
            return (_iconFunction);
        }
        override public function itemToLabel(_arg1:Object):String{
            if (_labelFunction != null){
                return (String(_labelFunction(_arg1)));
            };
            return (((_arg1[_labelField])!=null) ? String(_arg1[_labelField]) : "");
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            return (((height - (_local1 * 2)) - (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0)));
        }

    }
}//package fl.controls 
﻿package fl.controls {

    public class ScrollBarDirection {

        public static const HORIZONTAL:String = "horizontal";
        public static const VERTICAL:String = "vertical";

    }
}//package fl.controls 
﻿package fl.controls {

    public class ScrollPolicy {

        public static const OFF:String = "off";
        public static const ON:String = "on";
        public static const AUTO:String = "auto";

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import fl.core.*;
    import fl.events.*;

    public class MiniScrollBar extends UIComponent {

        protected static const THUMB_STYLES:Object = {
            disabledSkin:"thumbDisabledSkin",
            downSkin:"thumbDownSkin",
            overSkin:"thumbOverSkin",
            upSkin:"thumbUpSkin",
            icon:"thumbIcon",
            textPadding:0
        };
        public static const WIDTH:Number = 15;
        protected static const DOWN_ARROW_STYLES:Object = {
            disabledSkin:"downArrowDisabledSkin",
            downSkin:"downArrowDownSkin",
            overSkin:"downArrowOverSkin",
            upSkin:"downArrowUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };
        protected static const UP_ARROW_STYLES:Object = {
            disabledSkin:"upArrowDisabledSkin",
            downSkin:"upArrowDownSkin",
            overSkin:"upArrowOverSkin",
            upSkin:"upArrowUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };
        protected static const TRACK_STYLES:Object = {
            disabledSkin:"trackDisabledSkin",
            downSkin:"trackDownSkin",
            overSkin:"trackOverSkin",
            upSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };

        private static var defaultStyles:Object = {
            downArrowDisabledSkin:"ScrollArrowDown_disabledSkin",
            downArrowDownSkin:"ScrollArrowDown_downSkin",
            downArrowOverSkin:"ScrollArrowDown_overSkin",
            downArrowUpSkin:"ScrollArrowDown_upSkin",
            thumbDisabledSkin:"ScrollThumb_upSkin",
            thumbDownSkin:"ScrollThumb_downSkin",
            thumbOverSkin:"ScrollThumb_overSkin",
            thumbUpSkin:"ScrollThumb_upSkin",
            trackDisabledSkin:"ScrollTrack_skin",
            trackDownSkin:"ScrollTrack_skin",
            trackOverSkin:"ScrollTrack_skin",
            trackUpSkin:"ScrollTrack_skin",
            upArrowDisabledSkin:"ScrollArrowUp_disabledSkin",
            upArrowDownSkin:"ScrollArrowUp_downSkin",
            upArrowOverSkin:"ScrollArrowUp_overSkin",
            upArrowUpSkin:"ScrollArrowUp_upSkin",
            thumbIcon:"ScrollBar_thumbIcon",
            repeatDelay:500,
            repeatInterval:35,
            scrollBarWidth:MiniScrollBar.WIDTH,
            scrollArrowHeight:14
        };

        private var _direction:String = "vertical";
        protected var scrollArrowHeight:Number = 14;
        private var _minScrollPosition:Number = 0;
        private var _pageSize:Number = 10;
        private var _maxScrollPosition:Number = 0;
        protected var downArrow:MiniBaseButton;
        private var _lineScrollSize:Number = 1;
        protected var upArrow:MiniBaseButton;
        private var _scrollPosition:Number = 0;
        private var thumbScrollOffset:Number;
        protected var track:MiniBaseButton;
        protected var thumb:LabelButton;
        protected var scrollBarWidth:Number = 15;
        protected var inDrag:Boolean = false;
        private var _pageScrollSize:Number = 0;

        public function MiniScrollBar(){
            setStyles();
            focusEnabled = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            downArrow.enabled = (track.enabled = (thumb.enabled = (upArrow.enabled = ((enabled) && ((_maxScrollPosition > _minScrollPosition))))));
            updateThumb();
        }
        public function set lineScrollSize(_arg1:Number):void{
            if (_arg1 > 0){
                _lineScrollSize = _arg1;
            };
        }
        public function get minScrollPosition():Number{
            return (_minScrollPosition);
        }
        override public function setSize(_arg1:Number, _arg2:Number):void{
            if (_direction == ScrollBarDirection.HORIZONTAL){
                super.setSize(_arg2, _arg1);
            } else {
                super.setSize(_arg1, _arg2);
            };
        }
        protected function updateThumb():void{
            var _local1:Number = ((_maxScrollPosition - _minScrollPosition) + _pageSize);
            if ((((((track.height <= 12)) || ((_maxScrollPosition <= _minScrollPosition)))) || ((((_local1 == 0)) || (isNaN(_local1)))))){
                thumb.height = 12;
                thumb.visible = false;
            } else {
                thumb.height = Math.max(13, ((_pageSize / _local1) * track.height));
                thumb.y = (track.y + ((track.height - thumb.height) * ((_scrollPosition - _minScrollPosition) / (_maxScrollPosition - _minScrollPosition))));
                thumb.visible = enabled;
            };
        }
        public function set minScrollPosition(_arg1:Number):void{
            setScrollProperties(_pageSize, _arg1, _maxScrollPosition);
        }
        public function get lineScrollSize():Number{
            return (_lineScrollSize);
        }
        public function setScrollPosition(_arg1:Number, _arg2:Boolean=true):void{
            var _local3:Number = scrollPosition;
            var _local4:Number = Math.max(_minScrollPosition, Math.min(_maxScrollPosition, _arg1));
            var _local5:int = (_local4 / lineScrollSize);
            _scrollPosition = _local4;
            if (_local3 == _scrollPosition){
                return;
            };
            if (_arg2){
                dispatchEvent(new ScrollEvent(_direction, (scrollPosition - _local3), scrollPosition));
            };
            updateThumb();
        }
        public function get maxScrollPosition():Number{
            return (_maxScrollPosition);
        }
        public function get scrollPosition():Number{
            return (_scrollPosition);
        }
        override public function get height():Number{
            return (((_direction)==ScrollBarDirection.HORIZONTAL) ? super.width : super.height);
        }
        public function get pageSize():Number{
            return (_pageSize);
        }
        public function set maxScrollPosition(_arg1:Number):void{
            setScrollProperties(_pageSize, _minScrollPosition, _arg1);
        }
        protected function thumbReleaseHandler(_arg1:MouseEvent):void{
            inDrag = false;
            mouseChildren = true;
            thumb.mouseStateLocked = false;
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag);
            stage.removeEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler);
        }
        public function set pageScrollSize(_arg1:Number):void{
            if (_arg1 >= 0){
                _pageScrollSize = _arg1;
            };
        }
        public function set scrollPosition(_arg1:Number):void{
            setScrollPosition(_arg1, true);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override protected function draw():void{
            var _local1:Number;
            if (isInvalid(InvalidationType.SIZE)){
                _local1 = super.height;
                track.height = Math.max(0, _local1);
                updateThumb();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                setStyles();
                resizeElements();
            };
            track.drawNow();
            validate();
        }
        override public function get width():Number{
            return (((_direction)==ScrollBarDirection.HORIZONTAL) ? super.height : super.width);
        }
        protected function resizeElements():void{
            if (getStyleValue("scrollBarWidth") != scrollBarWidth){
                scrollBarWidth = Number(getStyleValue("scrollBarWidth"));
                track.width = scrollBarWidth;
                upArrow.width = scrollBarWidth;
                downArrow.width = scrollBarWidth;
                thumb.width = scrollBarWidth;
                _width = scrollBarWidth;
            };
            if (getStyleValue("scrollArrowHeight") != scrollArrowHeight){
                scrollArrowHeight = Number(getStyleValue("scrollArrowHeight"));
                upArrow.height = scrollArrowHeight;
                downArrow.height = scrollArrowHeight;
                downArrow.y = (super.height - scrollArrowHeight);
                track.height = Math.max(0, super.height);
                track.y = 0;
                updateThumb();
            };
        }
        public function get pageScrollSize():Number{
            return (((_pageScrollSize)==0) ? _pageSize : _pageScrollSize);
        }
        public function setScrollProperties(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number=0):void{
            this.pageSize = _arg1;
            _minScrollPosition = _arg2;
            _maxScrollPosition = _arg3;
            if (_arg4 >= 0){
                _pageScrollSize = _arg4;
            };
            enabled = (_maxScrollPosition > _minScrollPosition);
            setScrollPosition(_scrollPosition, false);
            updateThumb();
        }
        protected function setStyles():void{
            copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
            copyStylesToChild(thumb, THUMB_STYLES);
            copyStylesToChild(track, TRACK_STYLES);
            copyStylesToChild(upArrow, UP_ARROW_STYLES);
        }
        override protected function configUI():void{
            super.configUI();
            track = new MiniBaseButton();
            track.move(0, 0);
            track.setSize(0, 15);
            track.useHandCursor = false;
            track.autoRepeat = true;
            track.focusEnabled = false;
            track.mouseEnabled = false;
            addChild(track);
            thumb = new LabelButton();
            thumb.label = "";
            thumb.setSize(scrollBarWidth, 15);
            thumb.move(0, 15);
            thumb.focusEnabled = false;
            addChild(thumb);
            downArrow = new MiniBaseButton();
            upArrow = new MiniBaseButton();
            thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
            enabled = false;
        }
        public function set pageSize(_arg1:Number):void{
            if (_arg1 > 0){
                _pageSize = _arg1;
            };
        }
        protected function handleThumbDrag(_arg1:MouseEvent):void{
            var _local2:Number = Math.max(0, Math.min((track.height - thumb.height), ((mouseY - track.y) - thumbScrollOffset)));
            var _local3:Number = (((_local2 / (track.height - thumb.height)) * (_maxScrollPosition - _minScrollPosition)) + _minScrollPosition);
            setScrollPosition(_local3);
        }
        protected function scrollPressHandler(_arg1:ComponentEvent):void{
            var _local2:Number;
            var _local3:Number;
            _arg1.stopImmediatePropagation();
            if (_arg1.currentTarget == upArrow){
                setScrollPosition((_scrollPosition - _lineScrollSize));
            } else {
                if (_arg1.currentTarget == downArrow){
                    setScrollPosition((_scrollPosition + _lineScrollSize));
                } else {
                    _local2 = (((track.mouseY / track.height) * (_maxScrollPosition - _minScrollPosition)) + _minScrollPosition);
                    _local3 = ((pageScrollSize)==0) ? pageSize : pageScrollSize;
                    if (_scrollPosition < _local2){
                        setScrollPosition(Math.min(_local2, (_scrollPosition + _local3)));
                    } else {
                        if (_scrollPosition > _local2){
                            setScrollPosition(Math.max(_local2, (_scrollPosition - _local3)));
                        };
                    };
                };
            };
        }
        protected function thumbPressHandler(_arg1:MouseEvent):void{
            inDrag = true;
            thumbScrollOffset = (mouseY - thumb.y);
            thumb.mouseStateLocked = true;
            mouseChildren = false;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag, false, 0, true);
            stage.addEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
        }
        public function set direction(_arg1:String):void{
            if (_direction == _arg1){
                return;
            };
            _direction = _arg1;
            if (isLivePreview){
                return;
            };
            setScaleY(1);
            var _local2 = (_direction == ScrollBarDirection.HORIZONTAL);
            if (((_local2) && (componentInspectorSetting))){
                if (rotation == 90){
                    return;
                };
                setScaleX(-1);
                rotation = -90;
            };
            if (!componentInspectorSetting){
                if (((_local2) && ((rotation == 0)))){
                    rotation = -90;
                    setScaleX(-1);
                } else {
                    if (((!(_local2)) && ((rotation == -90)))){
                        rotation = 0;
                        setScaleX(1);
                    };
                };
            };
            invalidate(InvalidationType.SIZE);
        }
        public function get direction():String{
            return (_direction);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.events.*;
    import flash.text.*;
    import flash.ui.*;

    public class LabelButton extends BaseButton implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            icon:null,
            upIcon:null,
            downIcon:null,
            overIcon:null,
            disabledIcon:null,
            selectedDisabledIcon:null,
            selectedUpIcon:null,
            selectedDownIcon:null,
            selectedOverIcon:null,
            textFormat:null,
            disabledTextFormat:null,
            textPadding:5,
            embedFonts:false
        };
        public static var createAccessibilityImplementation:Function;

        protected var _toggle:Boolean = false;
        public var textField:TextField;
        protected var mode:String = "center";
        protected var _labelPlacement:String = "right";
        protected var oldMouseState:String;
        protected var _label:String = "Label";
        protected var icon:DisplayObject;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseButton.getStyleDefinition()));
        }

        override protected function draw():void{
            if (textField.text != _label){
                label = _label;
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                drawBackground();
                drawIcon();
                drawTextFormat();
                invalidate(InvalidationType.SIZE, false);
            };
            if (isInvalid(InvalidationType.SIZE)){
                drawLayout();
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STYLES)){
                if (((isFocused) && (focusManager.showFocusIndicator))){
                    drawFocus(true);
                };
            };
            validate();
        }
        override protected function drawLayout():void{
            var _local7:Number;
            var _local8:Number;
            var _local1:Number = Number(getStyleValue("textPadding"));
            var _local2:String = (((((icon == null)) && ((mode == "center")))) ? ButtonLabelPlacement.TOP : _labelPlacement);
            textField.height = (textField.textHeight + 4);
            var _local3:Number = (textField.textWidth + 4);
            var _local4:Number = (textField.textHeight + 4);
            var _local5:Number = ((icon)==null) ? 0 : (icon.width + _local1);
            var _local6:Number = ((icon)==null) ? 0 : (icon.height + _local1);
            textField.visible = (label.length > 0);
            if (icon != null){
                icon.x = Math.round(((width - icon.width) / 2));
                icon.y = Math.round(((height - icon.height) / 2));
            };
            if (textField.visible == false){
                textField.width = 0;
                textField.height = 0;
            } else {
                if ((((_local2 == ButtonLabelPlacement.BOTTOM)) || ((_local2 == ButtonLabelPlacement.TOP)))){
                    _local7 = Math.max(0, Math.min(_local3, (width - (2 * _local1))));
                    if ((height - 2) > _local4){
                        _local8 = _local4;
                    } else {
                        _local8 = (height - 2);
                    };
                    _local3 = _local7;
                    textField.width = _local3;
                    _local4 = _local8;
                    textField.height = _local4;
                    textField.x = Math.round(((width - _local3) / 2));
                    textField.y = Math.round(((((height - textField.height) - _local6) / 2) + ((_local2)==ButtonLabelPlacement.BOTTOM) ? _local6 : 0));
                    if (icon != null){
                        icon.y = Math.round(((_local2)==ButtonLabelPlacement.BOTTOM) ? (textField.y - _local6) : ((textField.y + textField.height) + _local1));
                    };
                } else {
                    _local7 = Math.max(0, Math.min(_local3, ((width - _local5) - (2 * _local1))));
                    _local3 = _local7;
                    textField.width = _local3;
                    textField.x = Math.round(((((width - _local3) - _local5) / 2) + ((_local2)!=ButtonLabelPlacement.LEFT) ? _local5 : 0));
                    textField.y = Math.round(((height - textField.height) / 2));
                    if (icon != null){
                        icon.x = Math.round(((_local2)!=ButtonLabelPlacement.LEFT) ? (textField.x - _local5) : ((textField.x + _local3) + _local1));
                    };
                };
            };
            super.drawLayout();
        }
        protected function toggleSelected(_arg1:MouseEvent):void{
            selected = !(selected);
            dispatchEvent(new Event(Event.CHANGE, true));
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            if (!enabled){
                return;
            };
            if (_arg1.keyCode == Keyboard.SPACE){
                setMouseState(oldMouseState);
                oldMouseState = null;
                endPress();
                dispatchEvent(new MouseEvent(MouseEvent.CLICK));
            };
        }
        public function get labelPlacement():String{
            return (_labelPlacement);
        }
        public function get toggle():Boolean{
            return (_toggle);
        }
        protected function setEmbedFont(){
            var _local1:Object = getStyleValue("embedFonts");
            if (_local1 != null){
                textField.embedFonts = _local1;
            };
        }
        override public function get selected():Boolean{
            return (((_toggle) ? _selected : false));
        }
        override protected function configUI():void{
            super.configUI();
            textField = new TextField();
            textField.type = TextFieldType.DYNAMIC;
            textField.selectable = false;
            addChild(textField);
        }
        override protected function initializeAccessibility():void{
            if (LabelButton.createAccessibilityImplementation != null){
                LabelButton.createAccessibilityImplementation(this);
            };
        }
        public function set labelPlacement(_arg1:String):void{
            _labelPlacement = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        protected function drawIcon():void{
            var _local1:DisplayObject = icon;
            var _local2:String = ((enabled) ? mouseState : "disabled");
            if (selected){
                _local2 = (("selected" + _local2.substr(0, 1).toUpperCase()) + _local2.substr(1));
            };
            _local2 = (_local2 + "Icon");
            var _local3:Object = getStyleValue(_local2);
            if (_local3 == null){
                _local3 = getStyleValue("icon");
            };
            if (_local3 != null){
                icon = getDisplayObjectInstance(_local3);
            };
            if (icon != null){
                addChildAt(icon, 1);
            };
            if (((!((_local1 == null))) && (!((_local1 == icon))))){
                removeChild(_local1);
            };
        }
        public function set label(_arg1:String):void{
            _label = _arg1;
            if (textField.text != _label){
                textField.text = _label;
                dispatchEvent(new ComponentEvent(ComponentEvent.LABEL_CHANGE));
            };
            invalidate(InvalidationType.SIZE);
            invalidate(InvalidationType.STYLES);
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            if (!enabled){
                return;
            };
            if (_arg1.keyCode == Keyboard.SPACE){
                if (oldMouseState == null){
                    oldMouseState = mouseState;
                };
                setMouseState("down");
                startPress();
            };
        }
        public function set toggle(_arg1:Boolean):void{
            if (((!(_arg1)) && (super.selected))){
                selected = false;
            };
            _toggle = _arg1;
            if (_toggle){
                addEventListener(MouseEvent.CLICK, toggleSelected, false, 0, true);
            } else {
                removeEventListener(MouseEvent.CLICK, toggleSelected);
            };
            invalidate(InvalidationType.STATE);
        }
        override public function set selected(_arg1:Boolean):void{
            _selected = _arg1;
            if (_toggle){
                invalidate(InvalidationType.STATE);
            };
        }
        protected function drawTextFormat():void{
            var _local1:Object = UIComponent.getStyleDefinition();
            var _local2:TextFormat = ((enabled) ? (_local1.defaultTextFormat as TextFormat) : (_local1.defaultDisabledTextFormat as TextFormat));
            textField.setTextFormat(_local2);
            var _local3:TextFormat = (getStyleValue(((enabled) ? "textFormat" : "disabledTextFormat")) as TextFormat);
            if (_local3 != null){
                textField.setTextFormat(_local3);
            } else {
                _local3 = _local2;
            };
            textField.defaultTextFormat = _local3;
            setEmbedFont();
        }
        public function get label():String{
            return (_label);
        }

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.display.*;
    import fl.managers.*;
    import fl.core.*;

    public class Button extends LabelButton implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            emphasizedSkin:"Button_emphasizedSkin",
            emphasizedPadding:2
        };
        public static var createAccessibilityImplementation:Function;

        protected var _emphasized:Boolean = false;
        protected var emphasizedBorder:DisplayObject;

        public static function getStyleDefinition():Object{
            return (UIComponent.mergeStyles(LabelButton.getStyleDefinition(), defaultStyles));
        }

        public function set emphasized(_arg1:Boolean):void{
            _emphasized = _arg1;
            invalidate(InvalidationType.STYLES);
        }
        override protected function initializeAccessibility():void{
            if (Button.createAccessibilityImplementation != null){
                Button.createAccessibilityImplementation(this);
            };
        }
        protected function drawEmphasized():void{
            var _local2:Number;
            if (emphasizedBorder != null){
                removeChild(emphasizedBorder);
            };
            emphasizedBorder = null;
            if (!_emphasized){
                return;
            };
            var _local1:Object = getStyleValue("emphasizedSkin");
            if (_local1 != null){
                emphasizedBorder = getDisplayObjectInstance(_local1);
            };
            if (emphasizedBorder != null){
                addChildAt(emphasizedBorder, 0);
                _local2 = Number(getStyleValue("emphasizedPadding"));
                emphasizedBorder.x = (emphasizedBorder.y = -(_local2));
                emphasizedBorder.width = (width + (_local2 * 2));
                emphasizedBorder.height = (height + (_local2 * 2));
            };
        }
        public function get emphasized():Boolean{
            return (_emphasized);
        }
        override protected function draw():void{
            if (((isInvalid(InvalidationType.STYLES)) || (isInvalid(InvalidationType.SIZE)))){
                drawEmphasized();
            };
            super.draw();
            if (emphasizedBorder != null){
                setChildIndex(emphasizedBorder, (numChildren - 1));
            };
        }
        override public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            var _local3:*;
            super.drawFocus(_arg1);
            if (_arg1){
                _local2 = Number(getStyleValue("emphasizedPadding"));
                if ((((_local2 < 0)) || (!(_emphasized)))){
                    _local2 = 0;
                };
                _local3 = getStyleValue("focusRectPadding");
                _local3 = ((_local3)==null) ? 2 : _local3;
                _local3 = (_local3 + _local2);
                uiFocusRect.x = -(_local3);
                uiFocusRect.y = -(_local3);
                uiFocusRect.width = (width + (_local3 * 2));
                uiFocusRect.height = (height + (_local3 * 2));
            };
        }

    }
}//package fl.controls 
﻿package fl.controls.listClasses {
    import fl.core.*;

    public class ListData {

        protected var _index:uint;
        protected var _owner:UIComponent;
        protected var _label:String;
        protected var _icon:Object = null;
        protected var _row:uint;
        protected var _column:uint;

        public function ListData(_arg1:String, _arg2:Object, _arg3:UIComponent, _arg4:uint, _arg5:uint, _arg6:uint=0){
            _label = _arg1;
            _icon = _arg2;
            _owner = _arg3;
            _index = _arg4;
            _row = _arg5;
            _column = _arg6;
        }
        public function get row():uint{
            return (_row);
        }
        public function get owner():UIComponent{
            return (_owner);
        }
        public function get label():String{
            return (_label);
        }
        public function get index():uint{
            return (_index);
        }
        public function get icon():Object{
            return (_icon);
        }
        public function get column():uint{
            return (_column);
        }

    }
}//package fl.controls.listClasses 
﻿package fl.controls.listClasses {

    public interface ICellRenderer {

        function set x(_arg1:Number):void;
        function set y(_arg1:Number):void;
        function setSize(_arg1:Number, _arg2:Number):void;
        function set data(_arg1:Object):void;
        function set selected(_arg1:Boolean):void;
        function set listData(_arg1:ListData):void;
        function get listData():ListData;
        function get data():Object;
        function get selected():Boolean;
        function setMouseState(_arg1:String):void;

    }
}//package fl.controls.listClasses 
﻿package fl.controls.listClasses {
    import flash.events.*;
    import fl.controls.*;

    public class CellRenderer extends LabelButton implements ICellRenderer {

        private static var defaultStyles:Object = {
            upSkin:"CellRenderer_upSkin",
            downSkin:"CellRenderer_downSkin",
            overSkin:"CellRenderer_overSkin",
            disabledSkin:"CellRenderer_disabledSkin",
            selectedDisabledSkin:"CellRenderer_selectedDisabledSkin",
            selectedUpSkin:"CellRenderer_selectedUpSkin",
            selectedDownSkin:"CellRenderer_selectedDownSkin",
            selectedOverSkin:"CellRenderer_selectedOverSkin",
            textFormat:null,
            disabledTextFormat:null,
            embedFonts:null,
            textPadding:5
        };

        protected var _listData:ListData;
        protected var _data:Object;

        public function CellRenderer():void{
            toggle = true;
            focusEnabled = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }

        override public function set selected(_arg1:Boolean):void{
            super.selected = _arg1;
        }
        override protected function drawLayout():void{
            var _local3:Number;
            var _local1:Number = Number(getStyleValue("textPadding"));
            var _local2:Number = 0;
            if (icon != null){
                icon.x = _local1;
                icon.y = Math.round(((height - icon.height) >> 1));
                _local2 = (icon.width + _local1);
            };
            if (label.length > 0){
                textField.visible = true;
                _local3 = Math.max(0, ((width - _local2) - (_local1 * 2)));
                textField.width = _local3;
                textField.height = (textField.textHeight + 4);
                textField.x = (_local2 + _local1);
                textField.y = Math.round(((height - textField.height) >> 1));
            } else {
                textField.visible = false;
            };
            background.width = width;
            background.height = height;
        }
        public function get listData():ListData{
            return (_listData);
        }
        override public function setSize(_arg1:Number, _arg2:Number):void{
            super.setSize(_arg1, _arg2);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            _data = _arg1;
        }
        public function set listData(_arg1:ListData):void{
            _listData = _arg1;
            label = _listData.label;
            setStyle("icon", _listData.icon);
        }
        override public function get selected():Boolean{
            return (super.selected);
        }
        override protected function toggleSelected(_arg1:MouseEvent):void{
        }

    }
}//package fl.controls.listClasses 
﻿package fl.controls {

    public class ButtonLabelPlacement {

        public static const TOP:String = "top";
        public static const LEFT:String = "left";
        public static const BOTTOM:String = "bottom";
        public static const RIGHT:String = "right";

    }
}//package fl.controls 
﻿package fl.controls {
    import flash.events.*;
    import flash.display.*;
    import fl.core.*;
    import fl.events.*;

    public class ScrollBar extends UIComponent {

        protected static const THUMB_STYLES:Object = {
            disabledSkin:"thumbDisabledSkin",
            downSkin:"thumbDownSkin",
            overSkin:"thumbOverSkin",
            upSkin:"thumbUpSkin",
            icon:"thumbIcon",
            textPadding:0
        };
        public static const WIDTH:Number = 15;
        protected static const DOWN_ARROW_STYLES:Object = {
            disabledSkin:"downArrowDisabledSkin",
            downSkin:"downArrowDownSkin",
            overSkin:"downArrowOverSkin",
            upSkin:"downArrowUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };
        protected static const UP_ARROW_STYLES:Object = {
            disabledSkin:"upArrowDisabledSkin",
            downSkin:"upArrowDownSkin",
            overSkin:"upArrowOverSkin",
            upSkin:"upArrowUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };
        protected static const TRACK_STYLES:Object = {
            disabledSkin:"trackDisabledSkin",
            downSkin:"trackDownSkin",
            overSkin:"trackOverSkin",
            upSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval"
        };

        private static var trackOutterLineColorStyle:int = 0xDDDDDD;
        private static var defaultStyles:Object = {
            downArrowDisabledSkin:"ScrollArrowDown_disabledSkin",
            downArrowDownSkin:"ScrollArrowDown_downSkin",
            downArrowOverSkin:"ScrollArrowDown_overSkin",
            downArrowUpSkin:"ScrollArrowDown_upSkin",
            thumbDisabledSkin:"ScrollThumb_upSkin",
            thumbDownSkin:"ScrollThumb_downSkin",
            thumbOverSkin:"ScrollThumb_overSkin",
            thumbUpSkin:"ScrollThumb_upSkin",
            trackDisabledSkin:"ScrollTrack_skin",
            trackDownSkin:"ScrollTrack_skin",
            trackOverSkin:"ScrollTrack_skin",
            trackUpSkin:"ScrollTrack_skin",
            upArrowDisabledSkin:"ScrollArrowUp_disabledSkin",
            upArrowDownSkin:"ScrollArrowUp_downSkin",
            upArrowOverSkin:"ScrollArrowUp_overSkin",
            upArrowUpSkin:"ScrollArrowUp_upSkin",
            thumbIcon:"ScrollBar_thumbIcon",
            repeatDelay:500,
            repeatInterval:35,
            scrollBarWidth:ScrollBar.WIDTH,
            scrollArrowHeight:14
        };

        private var _direction:String = "vertical";
        protected var scrollArrowHeight:Number = 14;
        private var _minScrollPosition:Number = 0;
        private var _pageScrollSize:Number = 0;
        private var _pageSize:Number = 10;
        private var _maxScrollPosition:Number = 0;
        protected var downArrow:BaseButton;
        private var _lineScrollSize:Number = 1;
        protected var upArrow:BaseButton;
        private var _scrollPosition:Number = 0;
        private var thumbScrollOffset:Number;
        protected var trackOutter:Shape;
        protected var track:BaseButton;
        protected var thumb:LabelButton;
        protected var scrollBarWidth:Number = 15;
        protected var inDrag:Boolean = false;

        public function ScrollBar(){
            setStyles();
            focusEnabled = false;
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }
        public static function updateLineStyle(_arg1):void{
            trackOutterLineColorStyle = _arg1.TRACK_OUTTER_LINE_COLOR;
        }

        override public function set enabled(_arg1:Boolean):void{
            super.enabled = _arg1;
            downArrow.enabled = (track.enabled = (thumb.enabled = (upArrow.enabled = ((enabled) && ((_maxScrollPosition > _minScrollPosition))))));
            updateThumb();
        }
        public function set lineScrollSize(_arg1:Number):void{
            if (_arg1 > 0){
                _lineScrollSize = _arg1;
            };
        }
        public function get minScrollPosition():Number{
            return (_minScrollPosition);
        }
        override public function setSize(_arg1:Number, _arg2:Number):void{
            if (_direction == ScrollBarDirection.HORIZONTAL){
                super.setSize(_arg2, _arg1);
            } else {
                super.setSize(_arg1, _arg2);
            };
        }
        protected function updateThumb():void{
            var _local1:Number = ((_maxScrollPosition - _minScrollPosition) + _pageSize);
            if ((((((track.height <= 12)) || ((_maxScrollPosition <= _minScrollPosition)))) || ((((_local1 == 0)) || (isNaN(_local1)))))){
                thumb.height = 12;
                thumb.visible = false;
            } else {
                thumb.height = Math.max(13, ((_pageSize / _local1) * track.height));
                thumb.y = (track.y + ((track.height - thumb.height) * ((_scrollPosition - _minScrollPosition) / (_maxScrollPosition - _minScrollPosition))));
                thumb.visible = enabled;
            };
        }
        public function set minScrollPosition(_arg1:Number):void{
            setScrollProperties(_pageSize, _arg1, _maxScrollPosition);
        }
        public function get lineScrollSize():Number{
            return (_lineScrollSize);
        }
        public function get scrollPosition():Number{
            return (_scrollPosition);
        }
        public function setScrollPosition(_arg1:Number, _arg2:Boolean=true):void{
            var _local3:Number = scrollPosition;
            var _local4:Number = Math.max(_minScrollPosition, Math.min(_maxScrollPosition, _arg1));
            var _local5:int = (_local4 / lineScrollSize);
            _scrollPosition = _local4;
            if (_local3 == _scrollPosition){
                return;
            };
            if (_arg2){
                dispatchEvent(new ScrollEvent(_direction, (scrollPosition - _local3), scrollPosition));
            };
            updateThumb();
        }
        public function get maxScrollPosition():Number{
            return (_maxScrollPosition);
        }
        override public function get height():Number{
            return (((_direction)==ScrollBarDirection.HORIZONTAL) ? super.width : super.height);
        }
        public function get pageSize():Number{
            return (_pageSize);
        }
        public function set maxScrollPosition(_arg1:Number):void{
            setScrollProperties(_pageSize, _minScrollPosition, _arg1);
        }
        protected function thumbReleaseHandler(_arg1:MouseEvent):void{
            inDrag = false;
            mouseChildren = true;
            thumb.mouseStateLocked = false;
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag);
            stage.removeEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler);
        }
        public function set pageScrollSize(_arg1:Number):void{
            if (_arg1 >= 0){
                _pageScrollSize = _arg1;
            };
        }
        public function set scrollPosition(_arg1:Number):void{
            setScrollPosition(_arg1, true);
        }
        override public function get enabled():Boolean{
            return (super.enabled);
        }
        override protected function draw():void{
            var _local1:Number;
            if (isInvalid(InvalidationType.SIZE)){
                _local1 = super.height;
                downArrow.move(0, Math.max(upArrow.height, (_local1 - downArrow.height)));
                track.height = Math.max(0, (_local1 - (downArrow.height + upArrow.height)));
                trackOutter.graphics.clear();
                trackOutter.graphics.lineStyle(1, trackOutterLineColorStyle, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                trackOutter.graphics.lineTo(0, (track.height + 2));
                updateThumb();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.STATE)){
                setStyles();
                resizeElements();
            };
            downArrow.drawNow();
            upArrow.drawNow();
            track.drawNow();
            validate();
        }
        override public function get width():Number{
            return (((_direction)==ScrollBarDirection.HORIZONTAL) ? super.height : super.width);
        }
        protected function resizeElements():void{
            if (getStyleValue("scrollBarWidth") != scrollBarWidth){
                scrollBarWidth = Number(getStyleValue("scrollBarWidth"));
                track.width = scrollBarWidth;
                upArrow.width = scrollBarWidth;
                downArrow.width = scrollBarWidth;
                thumb.width = scrollBarWidth;
                _width = scrollBarWidth;
            };
            if (getStyleValue("scrollArrowHeight") != scrollArrowHeight){
                scrollArrowHeight = Number(getStyleValue("scrollArrowHeight"));
                upArrow.height = scrollArrowHeight;
                downArrow.height = scrollArrowHeight;
                downArrow.y = (super.height - scrollArrowHeight);
                track.height = Math.max(0, (super.height - (downArrow.height + upArrow.height)));
                track.y = upArrow.height;
                updateThumb();
            };
        }
        public function unRegistMouseEvent():void{
            stage.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP));
        }
        public function get pageScrollSize():Number{
            return (((_pageScrollSize)==0) ? _pageSize : _pageScrollSize);
        }
        public function setScrollProperties(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number=0):void{
            this.pageSize = _arg1;
            _minScrollPosition = _arg2;
            _maxScrollPosition = _arg3;
            if (_arg4 >= 0){
                _pageScrollSize = _arg4;
            };
            enabled = (_maxScrollPosition > _minScrollPosition);
            setScrollPosition(_scrollPosition, false);
            updateThumb();
        }
        protected function setStyles():void{
            copyStylesToChild(downArrow, DOWN_ARROW_STYLES);
            copyStylesToChild(thumb, THUMB_STYLES);
            copyStylesToChild(track, TRACK_STYLES);
            copyStylesToChild(upArrow, UP_ARROW_STYLES);
        }
        override protected function configUI():void{
            super.configUI();
            track = new BaseButton();
            track.move(0, 14);
            track.setSize(scrollBarWidth, 15);
            track.graphics.lineStyle(1, 0xDDDDDD, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
            track.graphics.moveTo(WIDTH, 0);
            track.graphics.lineTo(WIDTH, height);
            track.useHandCursor = false;
            track.autoRepeat = true;
            track.focusEnabled = false;
            addChild(track);
            trackOutter = new Shape();
            trackOutter.x = 9;
            trackOutter.y = 13;
            addChild(trackOutter);
            thumb = new LabelButton();
            thumb.label = "";
            thumb.setSize(scrollBarWidth, 15);
            thumb.move(0, 15);
            thumb.focusEnabled = false;
            addChild(thumb);
            downArrow = new BaseButton();
            downArrow.setSize(scrollBarWidth, scrollArrowHeight);
            downArrow.autoRepeat = true;
            downArrow.focusEnabled = false;
            addChild(downArrow);
            upArrow = new BaseButton();
            upArrow.setSize(scrollBarWidth, scrollArrowHeight);
            upArrow.move(0, 0);
            upArrow.autoRepeat = true;
            upArrow.focusEnabled = false;
            addChild(upArrow);
            upArrow.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            downArrow.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            track.addEventListener(ComponentEvent.BUTTON_DOWN, scrollPressHandler, false, 0, true);
            thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbPressHandler, false, 0, true);
            enabled = false;
        }
        public function set pageSize(_arg1:Number):void{
            if (_arg1 > 0){
                _pageSize = _arg1;
            };
        }
        protected function handleThumbDrag(_arg1:MouseEvent):void{
            var _local2:Number = Math.max(0, Math.min((track.height - thumb.height), ((mouseY - track.y) - thumbScrollOffset)));
            var _local3:Number = (((_local2 / (track.height - thumb.height)) * (_maxScrollPosition - _minScrollPosition)) + _minScrollPosition);
            setScrollPosition(_local3);
        }
        protected function scrollPressHandler(_arg1:ComponentEvent):void{
            var _local2:Number;
            var _local3:Number;
            var _local4:int;
            var _local5:Number;
            _arg1.stopImmediatePropagation();
            if (_arg1.currentTarget == upArrow){
                setScrollPosition((_scrollPosition - _lineScrollSize));
            } else {
                if (_arg1.currentTarget == downArrow){
                    setScrollPosition((_scrollPosition + _lineScrollSize));
                } else {
                    _local2 = (((track.mouseY / track.height) * (_maxScrollPosition - _minScrollPosition)) + _minScrollPosition);
                    _local3 = ((pageScrollSize)==0) ? pageSize : pageScrollSize;
                    _local4 = int((_local2 / _local3));
                    if (_scrollPosition < _local2){
                        _local5 = Math.min(_local2, (_local4 * 19));
                        if (_local5 < _local2){
                            _local5 = _local2;
                        };
                        setScrollPosition(_local5);
                    } else {
                        if (_scrollPosition > _local2){
                            setScrollPosition(Math.max(_local2, (_local4 * 19)));
                        };
                    };
                };
            };
        }
        protected function thumbPressHandler(_arg1:MouseEvent):void{
            inDrag = true;
            thumbScrollOffset = (mouseY - thumb.y);
            thumb.mouseStateLocked = true;
            mouseChildren = false;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, handleThumbDrag, false, 0, true);
            stage.addEventListener(MouseEvent.MOUSE_UP, thumbReleaseHandler, false, 0, true);
        }
        public function set direction(_arg1:String):void{
            if (_direction == _arg1){
                return;
            };
            _direction = _arg1;
            if (isLivePreview){
                return;
            };
            setScaleY(1);
            var _local2 = (_direction == ScrollBarDirection.HORIZONTAL);
            if (((_local2) && (componentInspectorSetting))){
                if (rotation == 90){
                    return;
                };
                setScaleX(-1);
                rotation = -90;
            };
            if (!componentInspectorSetting){
                if (((_local2) && ((rotation == 0)))){
                    rotation = -90;
                    setScaleX(-1);
                } else {
                    if (((!(_local2)) && ((rotation == -90)))){
                        rotation = 0;
                        setScaleX(1);
                    };
                };
            };
            invalidate(InvalidationType.SIZE);
        }
        public function get direction():String{
            return (_direction);
        }

    }
}//package fl.controls 
﻿package fl.motion.easing {

    public class Cubic {

        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((_arg1 * _arg1) * _arg1) + 1)) + _arg2));
        }
        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / _arg4);
            return (((((_arg3 * _arg1) * _arg1) * _arg1) + _arg2));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((((_arg3 / 2) * _arg1) * _arg1) * _arg1) + _arg2));
            };
            _arg1 = (_arg1 - 2);
            return ((((_arg3 / 2) * (((_arg1 * _arg1) * _arg1) + 2)) + _arg2));
        }

    }
}//package fl.motion.easing 
﻿package fl.motion.easing {

    public class Exponential {

        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg1 == _arg4)) ? (_arg2 + _arg3) : ((_arg3 * (-(Math.pow(2, ((-10 * _arg1) / _arg4))) + 1)) + _arg2)));
        }
        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg1 == 0)) ? _arg2 : ((_arg3 * Math.pow(2, (10 * ((_arg1 / _arg4) - 1)))) + _arg2)));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            if (_arg1 == 0){
                return (_arg2);
            };
            if (_arg1 == _arg4){
                return ((_arg2 + _arg3));
            };
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((_arg3 / 2) * Math.pow(2, (10 * (_arg1 - 1)))) + _arg2));
            };
            --_arg1;
            return ((((_arg3 / 2) * (-(Math.pow(2, (-10 * _arg1))) + 2)) + _arg2));
        }

    }
}//package fl.motion.easing 
﻿package fl.motion.easing {

    public class Linear {

        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeNone(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }

    }
}//package fl.motion.easing 
﻿package fl.core {

    public class InvalidationType {

        public static const SIZE:String = "size";
        public static const ALL:String = "all";
        public static const DATA:String = "data";
        public static const SCROLL:String = "scroll";
        public static const STATE:String = "state";
        public static const STYLES:String = "styles";
        public static const SELECTED:String = "selected";
        public static const RENDERER_STYLES:String = "rendererStyles";

    }
}//package fl.core 
﻿package fl.core {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.managers.*;
    import fl.events.*;
    import flash.text.*;
    import flash.system.*;

    public class UIComponent extends Sprite {

        public static var inCallLaterPhase:Boolean = false;
        private static var defaultStyles:Object = {
            focusRectSkin:"focusRectSkin",
            focusRectPadding:2,
            textFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            disabledTextFormat:new TextFormat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            defaultTextFormat:new TextFormat("_sans", 11, 0, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0),
            defaultDisabledTextFormat:new TextFormat("_sans", 11, 0x999999, false, false, false, "", "", TextFormatAlign.LEFT, 0, 0, 0, 0)
        };
        public static var createAccessibilityImplementation:Function;
        private static var focusManagers:Dictionary = new Dictionary(false);

        protected var _x:Number;
        protected var _enabled:Boolean = true;
        protected var callLaterMethods:Dictionary;
        private var _mouseFocusEnabled:Boolean = true;
        private var tempText:TextField;
        private var _focusEnabled:Boolean = true;
        protected var startHeight:Number;
        protected var _height:Number;
        protected var invalidateFlag:Boolean = false;
        protected var _oldIMEMode:String = null;
        protected var _inspector:Boolean = false;
        protected var startWidth:Number;
        public var focusTarget:IFocusManagerComponent;
        protected var errorCaught:Boolean = false;
        protected var invalidHash:Object;
        protected var sharedStyles:Object;
        protected var uiFocusRect:DisplayObject;
        protected var isLivePreview:Boolean = false;
        protected var _imeMode:String = null;
        protected var _width:Number;
        protected var instanceStyles:Object;
        public var version:String = "3.0.0.16";
        protected var isFocused:Boolean = false;
        protected var _y:Number;

        public function UIComponent(){
            instanceStyles = {};
            sharedStyles = {};
            invalidHash = {};
            callLaterMethods = new Dictionary();
            StyleManager.registerInstance(this);
            configUI();
            invalidate(InvalidationType.ALL);
            tabEnabled = (this is IFocusManagerComponent);
            focusRect = false;
            if (tabEnabled){
                addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
                addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
                addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
                addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            };
            initializeFocusManager();
            addEventListener(Event.ENTER_FRAME, hookAccessibility, false, 0, true);
        }
        public static function getStyleDefinition():Object{
            return (defaultStyles);
        }
        public static function mergeStyles(... _args):Object{
            var _local5:Object;
            var _local6:String;
            var _local2:Object = {};
            var _local3:uint = _args.length;
            var _local4:uint;
            while (_local4 < _local3) {
                _local5 = _args[_local4];
                for (_local6 in _local5) {
                    if (_local2[_local6] != null){
                    } else {
                        _local2[_local6] = _args[_local4][_local6];
                    };
                };
                _local4++;
            };
            return (_local2);
        }

        public function getStyle(_arg1:String):Object{
            return (instanceStyles[_arg1]);
        }
        protected function checkLivePreview():Boolean{
            var className:* = null;
            if (parent == null){
                return (false);
            };
            try {
                className = getQualifiedClassName(parent);
            } catch(e:Error) {
            };
            return ((className == "fl.livepreview::LivePreviewParent"));
        }
        private function callLaterDispatcher(_arg1:Event):void{
            var _local3:Object;
            if (_arg1.type == Event.ADDED_TO_STAGE){
                removeEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher);
                stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
                stage.invalidate();
                return;
            };
            _arg1.target.removeEventListener(Event.RENDER, callLaterDispatcher);
            if (stage == null){
                addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
                return;
            };
            inCallLaterPhase = true;
            var _local2:Dictionary = callLaterMethods;
            for (_local3 in _local2) {
                _local3();
                delete _local2[_local3];
            };
            inCallLaterPhase = false;
        }
        protected function validate():void{
            invalidHash = {};
        }
        protected function focusOutHandler(_arg1:FocusEvent):void{
            if (isOurFocus((_arg1.target as DisplayObject))){
                drawFocus(false);
                isFocused = false;
            };
        }
        public function set mouseFocusEnabled(_arg1:Boolean):void{
            _mouseFocusEnabled = _arg1;
        }
        public function getFocus():InteractiveObject{
            if (stage){
                return (stage.focus);
            };
            return (null);
        }
        override public function get height():Number{
            return (_height);
        }
        private function addedHandler(_arg1:Event):void{
            removeEventListener("addedToStage", addedHandler);
            initializeFocusManager();
        }
        protected function getStyleValue(_arg1:String):Object{
            return (((instanceStyles[_arg1])==null) ? sharedStyles[_arg1] : instanceStyles[_arg1]);
        }
        public function invalidate(_arg1:String="all", _arg2:Boolean=true):void{
            invalidHash[_arg1] = true;
            if (_arg2){
                this.callLater(draw);
            };
        }
        protected function isOurFocus(_arg1:DisplayObject):Boolean{
            return ((_arg1 == this));
        }
        public function get enabled():Boolean{
            return (_enabled);
        }
        protected function getScaleX():Number{
            return (super.scaleX);
        }
        protected function getScaleY():Number{
            return (super.scaleY);
        }
        public function get focusEnabled():Boolean{
            return (_focusEnabled);
        }
        protected function afterComponentParameters():void{
        }
        override public function get scaleY():Number{
            return ((height / startHeight));
        }
        protected function setIMEMode(_arg1:Boolean){
            var enabled:* = _arg1;
            if (_imeMode != null){
                if (enabled){
                    IME.enabled = true;
                    _oldIMEMode = IME.conversionMode;
                    try {
                        if (((!(errorCaught)) && (!((IME.conversionMode == IMEConversionMode.UNKNOWN))))){
                            IME.conversionMode = _imeMode;
                        };
                        errorCaught = false;
                    } catch(e:Error) {
                        errorCaught = true;
                        throw (new Error(("IME mode not supported: " + _imeMode)));
                    };
                } else {
                    if (((!((IME.conversionMode == IMEConversionMode.UNKNOWN))) && (!((_oldIMEMode == IMEConversionMode.UNKNOWN))))){
                        IME.conversionMode = _oldIMEMode;
                    };
                    IME.enabled = false;
                };
            };
        }
        protected function draw():void{
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STYLES)){
                if (((isFocused) && (focusManager.showFocusIndicator))){
                    drawFocus(true);
                };
            };
            validate();
        }
        override public function set height(_arg1:Number):void{
            if (_height == _arg1){
                return;
            };
            setSize(width, _arg1);
        }
        protected function configUI():void{
            isLivePreview = checkLivePreview();
            var _local1:Number = rotation;
            rotation = 0;
            var _local2:Number = super.width;
            var _local3:Number = super.height;
            var _local4 = 1;
            super.scaleY = _local4;
            super.scaleX = _local4;
            setSize(_local2, _local3);
            move(super.x, super.y);
            rotation = _local1;
            startWidth = _local2;
            startHeight = _local3;
            if (numChildren > 0){
                removeChildAt(0);
            };
        }
        protected function setScaleY(_arg1:Number):void{
            super.scaleY = _arg1;
        }
        override public function get scaleX():Number{
            return ((width / startWidth));
        }
        protected function setScaleX(_arg1:Number):void{
            super.scaleX = _arg1;
        }
        private function initializeFocusManager():void{
            if (stage == null){
                addEventListener(Event.ADDED_TO_STAGE, addedHandler, false, 0, true);
            } else {
                createFocusManager();
            };
        }
        protected function keyDownHandler(_arg1:KeyboardEvent):void{
        }
        public function set focusManager(_arg1:IFocusManager):void{
            UIComponent.focusManagers[this] = _arg1;
        }
        public function clearStyle(_arg1:String):void{
            setStyle(_arg1, null);
        }
        protected function isInvalid(_arg1:String, ... _args):Boolean{
            if (((invalidHash[_arg1]) || (invalidHash[InvalidationType.ALL]))){
                return (true);
            };
            while (_args.length > 0) {
                if (invalidHash[_args.pop()]){
                    return (true);
                };
            };
            return (false);
        }
        public function setStyle(_arg1:String, _arg2:Object):void{
            if ((((instanceStyles[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            instanceStyles[_arg1] = _arg2;
            invalidate(InvalidationType.STYLES);
        }
        override public function get visible():Boolean{
            return (super.visible);
        }
        protected function focusInHandler(_arg1:FocusEvent):void{
            var _local2:IFocusManager;
            if (isOurFocus((_arg1.target as DisplayObject))){
                _local2 = focusManager;
                if (((_local2) && (_local2.showFocusIndicator))){
                    drawFocus(true);
                    isFocused = true;
                };
            };
        }
        public function get componentInspectorSetting():Boolean{
            return (_inspector);
        }
        override public function get x():Number{
            return (((isNaN(_x)) ? super.x : _x));
        }
        override public function get y():Number{
            return (((isNaN(_y)) ? super.y : _y));
        }
        public function set enabled(_arg1:Boolean):void{
            if (_arg1 == _enabled){
                return;
            };
            _enabled = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function setSize(_arg1:Number, _arg2:Number):void{
            _width = _arg1;
            _height = _arg2;
            invalidate(InvalidationType.SIZE);
            dispatchEvent(new ComponentEvent(ComponentEvent.RESIZE, false));
        }
        protected function keyUpHandler(_arg1:KeyboardEvent):void{
        }
        public function setSharedStyle(_arg1:String, _arg2:Object):void{
            if ((((sharedStyles[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            sharedStyles[_arg1] = _arg2;
            if (instanceStyles[_arg1] == null){
                invalidate(InvalidationType.STYLES);
            };
        }
        public function set focusEnabled(_arg1:Boolean):void{
            _focusEnabled = _arg1;
        }
        override public function set width(_arg1:Number):void{
            if (_width == _arg1){
                return;
            };
            setSize(_arg1, height);
        }
        public function setFocus():void{
            if (stage){
                stage.focus = this;
            };
        }
        override public function set scaleX(_arg1:Number):void{
            setSize((startWidth * _arg1), height);
        }
        public function get mouseFocusEnabled():Boolean{
            return (_mouseFocusEnabled);
        }
        override public function set scaleY(_arg1:Number):void{
            setSize(width, (startHeight * _arg1));
        }
        protected function getDisplayObjectInstance(_arg1:Object):DisplayObject{
            var skin:* = _arg1;
            var classDef:* = null;
            if ((skin is Class)){
                return ((new (skin)() as DisplayObject));
            };
            if ((skin is DisplayObject)){
                (skin as DisplayObject).x = 0;
                (skin as DisplayObject).y = 0;
                return ((skin as DisplayObject));
            };
            try {
                classDef = getDefinitionByName(skin.toString());
            } catch(e:Error) {
                try {
                    classDef = (loaderInfo.applicationDomain.getDefinition(skin.toString()) as Object);
                } catch(e:Error) {
                };
            };
            if (classDef == null){
                return (null);
            };
            return ((new (classDef)() as DisplayObject));
        }
        protected function copyStylesToChild(_arg1:UIComponent, _arg2:Object):void{
            var _local3:String;
            for (_local3 in _arg2) {
                _arg1.setStyle(_local3, getStyleValue(_arg2[_local3]));
            };
        }
        protected function initializeAccessibility():void{
            if (UIComponent.createAccessibilityImplementation != null){
                UIComponent.createAccessibilityImplementation(this);
            };
        }
        public function get focusManager():IFocusManager{
            var _local1:DisplayObject = this;
            while (_local1) {
                if (UIComponent.focusManagers[_local1] != null){
                    return (IFocusManager(UIComponent.focusManagers[_local1]));
                };
                _local1 = _local1.parent;
            };
            return (null);
        }
        override public function get width():Number{
            return (_width);
        }
        protected function beforeComponentParameters():void{
        }
        protected function callLater(_arg1:Function):void{
            if (inCallLaterPhase){
                return;
            };
            callLaterMethods[_arg1] = true;
            if (stage != null){
                stage.addEventListener(Event.RENDER, callLaterDispatcher, false, 0, true);
                stage.invalidate();
            } else {
                addEventListener(Event.ADDED_TO_STAGE, callLaterDispatcher, false, 0, true);
            };
        }
        public function move(_arg1:Number, _arg2:Number):void{
            _x = _arg1;
            _y = _arg2;
            super.x = Math.round(_arg1);
            super.y = Math.round(_arg2);
            dispatchEvent(new ComponentEvent(ComponentEvent.MOVE));
        }
        public function validateNow():void{
            invalidate(InvalidationType.ALL, false);
            draw();
        }
        override public function set visible(_arg1:Boolean):void{
            if (super.visible == _arg1){
                return;
            };
            super.visible = _arg1;
            var _local2:String = ((_arg1) ? ComponentEvent.SHOW : ComponentEvent.HIDE);
            dispatchEvent(new ComponentEvent(_local2, true));
        }
        protected function createFocusManager():void{
            if (focusManagers[stage] == null){
                focusManagers[stage] = new FocusManager(stage);
            };
        }
        protected function hookAccessibility(_arg1:Event):void{
            removeEventListener(Event.ENTER_FRAME, hookAccessibility);
            initializeAccessibility();
        }
        public function set componentInspectorSetting(_arg1:Boolean):void{
            _inspector = _arg1;
            if (_inspector){
                beforeComponentParameters();
            } else {
                afterComponentParameters();
            };
        }
        override public function set y(_arg1:Number):void{
            move(_x, _arg1);
        }
        public function drawFocus(_arg1:Boolean):void{
            var _local2:Number;
            isFocused = _arg1;
            if (((!((uiFocusRect == null))) && (contains(uiFocusRect)))){
                removeChild(uiFocusRect);
                uiFocusRect = null;
            };
            if (_arg1){
                uiFocusRect = (getDisplayObjectInstance(getStyleValue("focusRectSkin")) as Sprite);
                if (uiFocusRect == null){
                    return;
                };
                _local2 = Number(getStyleValue("focusRectPadding"));
                uiFocusRect.x = -(_local2);
                uiFocusRect.y = -(_local2);
                uiFocusRect.width = (width + (_local2 * 2));
                uiFocusRect.height = (height + (_local2 * 2));
                addChildAt(uiFocusRect, 0);
            };
        }
        override public function set x(_arg1:Number):void{
            move(_arg1, _y);
        }
        public function drawNow():void{
            draw();
        }

    }
}//package fl.core 
﻿package fl.core {
    import flash.display.*;

    public dynamic class ComponentShim extends MovieClip {

    }
}//package fl.core 
﻿package fl.managers {
    import flash.display.*;
    import fl.controls.*;

    public interface IFocusManager {

        function getFocus():InteractiveObject;
        function deactivate():void;
        function set defaultButton(_arg1:Button):void;
        function set showFocusIndicator(_arg1:Boolean):void;
        function get defaultButtonEnabled():Boolean;
        function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject;
        function get nextTabIndex():int;
        function get defaultButton():Button;
        function get showFocusIndicator():Boolean;
        function hideFocus():void;
        function activate():void;
        function showFocus():void;
        function set defaultButtonEnabled(_arg1:Boolean):void;
        function setFocus(_arg1:InteractiveObject):void;
        function getNextFocusManagerComponent(_arg1:Boolean=false):InteractiveObject;

    }
}//package fl.managers 
﻿package fl.managers {

    public interface IFocusManagerComponent {

        function set focusEnabled(_arg1:Boolean):void;
        function drawFocus(_arg1:Boolean):void;
        function setFocus():void;
        function get focusEnabled():Boolean;
        function get tabEnabled():Boolean;
        function get tabIndex():int;
        function get mouseFocusEnabled():Boolean;

    }
}//package fl.managers 
﻿package fl.managers {
    import flash.utils.*;
    import fl.core.*;
    import flash.text.*;

    public class StyleManager {

        private static var _instance:StyleManager;

        private var classToInstancesDict:Dictionary;
        private var globalStyles:Object;
        private var styleToClassesHash:Object;
        private var classToStylesDict:Dictionary;
        private var classToDefaultStylesDict:Dictionary;

        public function StyleManager(){
            styleToClassesHash = {};
            classToInstancesDict = new Dictionary(true);
            classToStylesDict = new Dictionary(true);
            classToDefaultStylesDict = new Dictionary(true);
            globalStyles = UIComponent.getStyleDefinition();
        }
        public static function clearComponentStyle(_arg1:Object, _arg2:String):void{
            var _local3:Class = getClassDef(_arg1);
            var _local4:Object = getInstance().classToStylesDict[_local3];
            if (((!((_local4 == null))) && (!((_local4[_arg2] == null))))){
                delete _local4[_arg2];
                invalidateComponentStyle(_local3, _arg2);
            };
        }
        private static function getClassDef(_arg1:Object):Class{
            var component:* = _arg1;
            if ((component is Class)){
                return ((component as Class));
            };
            try {
                return ((getDefinitionByName(getQualifiedClassName(component)) as Class));
            } catch(e:Error) {
                if ((component is UIComponent)){
                    try {
                        return ((component.loaderInfo.applicationDomain.getDefinition(getQualifiedClassName(component)) as Class));
                    } catch(e:Error) {
                    };
                };
            };
            return (null);
        }
        public static function clearStyle(_arg1:String):void{
            setStyle(_arg1, null);
        }
        public static function setComponentStyle(_arg1:Object, _arg2:String, _arg3:Object):void{
            var _local4:Class = getClassDef(_arg1);
            var _local5:Object = getInstance().classToStylesDict[_local4];
            if (_local5 == null){
                _local5 = (getInstance().classToStylesDict[_local4] = {});
            };
            if (_local5 == _arg3){
                return;
            };
            _local5[_arg2] = _arg3;
            invalidateComponentStyle(_local4, _arg2);
        }
        private static function setSharedStyles(_arg1:UIComponent):void{
            var _local5:String;
            var _local2:StyleManager = getInstance();
            var _local3:Class = getClassDef(_arg1);
            var _local4:Object = _local2.classToDefaultStylesDict[_local3];
            for (_local5 in _local4) {
                _arg1.setSharedStyle(_local5, getSharedStyle(_arg1, _local5));
            };
        }
        public static function getComponentStyle(_arg1:Object, _arg2:String):Object{
            var _local3:Class = getClassDef(_arg1);
            var _local4:Object = getInstance().classToStylesDict[_local3];
            return (((_local4)==null) ? null : _local4[_arg2]);
        }
        private static function getInstance(){
            if (_instance == null){
                _instance = new (StyleManager)();
            };
            return (_instance);
        }
        private static function invalidateComponentStyle(_arg1:Class, _arg2:String):void{
            var _local4:Object;
            var _local5:UIComponent;
            var _local3:Dictionary = getInstance().classToInstancesDict[_arg1];
            if (_local3 == null){
                return;
            };
            for (_local4 in _local3) {
                _local5 = (_local4 as UIComponent);
                if (_local5 == null){
                } else {
                    _local5.setSharedStyle(_arg2, getSharedStyle(_local5, _arg2));
                };
            };
        }
        private static function invalidateStyle(_arg1:String):void{
            var _local3:Object;
            var _local2:Dictionary = getInstance().styleToClassesHash[_arg1];
            if (_local2 == null){
                return;
            };
            for (_local3 in _local2) {
                invalidateComponentStyle(Class(_local3), _arg1);
            };
        }
        public static function registerInstance(_arg1:UIComponent):void{
            var target:* = null;
            var defaultStyles:* = null;
            var styleToClasses:* = null;
            var n:* = null;
            var instance:* = _arg1;
            var inst:* = getInstance();
            var classDef:* = getClassDef(instance);
            if (classDef == null){
                return;
            };
            if (inst.classToInstancesDict[classDef] == null){
                inst.classToInstancesDict[classDef] = new Dictionary(true);
                target = classDef;
                while (defaultStyles == null) {
                    if (target["getStyleDefinition"] != null){
                        defaultStyles = target["getStyleDefinition"]();
                        break;
                    };
                    try {
                        target = (instance.loaderInfo.applicationDomain.getDefinition(getQualifiedSuperclassName(target)) as Class);
                    } catch(err:Error) {
                        try {
                            target = (getDefinitionByName(getQualifiedSuperclassName(target)) as Class);
                        } catch(e:Error) {
                            defaultStyles = UIComponent.getStyleDefinition();
                            break;
                        };
                    };
                };
                styleToClasses = inst.styleToClassesHash;
                for (n in defaultStyles) {
                    if (styleToClasses[n] == null){
                        styleToClasses[n] = new Dictionary(true);
                    };
                    styleToClasses[n][classDef] = true;
                };
                inst.classToDefaultStylesDict[classDef] = defaultStyles;
                if (inst.classToStylesDict[classDef] == null){
                    inst.classToStylesDict[classDef] = {};
                };
            };
            inst.classToInstancesDict[classDef][instance] = true;
            setSharedStyles(instance);
        }
        public static function getStyle(_arg1:String):Object{
            return (getInstance().globalStyles[_arg1]);
        }
        private static function getSharedStyle(_arg1:UIComponent, _arg2:String):Object{
            var _local3:Class = getClassDef(_arg1);
            var _local4:StyleManager = getInstance();
            var _local5:Object = _local4.classToStylesDict[_local3][_arg2];
            if (_local5 != null){
                return (_local5);
            };
            _local5 = _local4.globalStyles[_arg2];
            if (_local5 != null){
                return (_local5);
            };
            return (_local4.classToDefaultStylesDict[_local3][_arg2]);
        }
        public static function setStyle(_arg1:String, _arg2:Object):void{
            var _local3:Object = getInstance().globalStyles;
            if ((((_local3[_arg1] === _arg2)) && (!((_arg2 is TextFormat))))){
                return;
            };
            _local3[_arg1] = _arg2;
            invalidateStyle(_arg1);
        }

    }
}//package fl.managers 
﻿package fl.managers {

    public interface IFocusManagerGroup {

        function get groupName():String;
        function get selected():Boolean;
        function set groupName(_arg1:String):void;
        function set selected(_arg1:Boolean):void;

    }
}//package fl.managers 
﻿package fl.managers {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import fl.core.*;
    import fl.controls.*;
    import flash.text.*;
    import flash.ui.*;

    public class FocusManager implements IFocusManager {

        private var focusableObjects:Dictionary;
        private var _showFocusIndicator:Boolean = true;
        private var defButton:Button;
        private var focusableCandidates:Array;
        private var _form:DisplayObjectContainer;
        private var _defaultButtonEnabled:Boolean = true;
        private var activated:Boolean = false;
        private var _defaultButton:Button;
        private var calculateCandidates:Boolean = true;
        private var lastFocus:InteractiveObject;
        private var lastAction:String;

        public function FocusManager(_arg1:DisplayObjectContainer){
            focusableObjects = new Dictionary(true);
            if (_arg1 != null){
                _form = _arg1;
                addFocusables(DisplayObject(_arg1));
                _arg1.addEventListener(Event.ADDED, addedHandler);
                _arg1.addEventListener(Event.REMOVED, removedHandler);
                activate();
            };
        }
        public function get showFocusIndicator():Boolean{
            return (_showFocusIndicator);
        }
        private function getIndexOfNextObject(_arg1:int, _arg2:Boolean, _arg3:Boolean, _arg4:String):int{
            var _local7:DisplayObject;
            var _local8:IFocusManagerGroup;
            var _local9:int;
            var _local10:DisplayObject;
            var _local11:IFocusManagerGroup;
            var _local5:int = focusableCandidates.length;
            var _local6:int = _arg1;
            while (true) {
                if (_arg2){
                    _arg1--;
                } else {
                    _arg1++;
                };
                if (_arg3){
                    if (((_arg2) && ((_arg1 < 0)))){
                        break;
                    };
                    if (((!(_arg2)) && ((_arg1 == _local5)))){
                        break;
                    };
                } else {
                    _arg1 = ((_arg1 + _local5) % _local5);
                    if (_local6 == _arg1){
                        break;
                    };
                };
                if (isValidFocusCandidate(focusableCandidates[_arg1], _arg4)){
                    _local7 = DisplayObject(findFocusManagerComponent(focusableCandidates[_arg1]));
                    if ((_local7 is IFocusManagerGroup)){
                        _local8 = IFocusManagerGroup(_local7);
                        _local9 = 0;
                        while (_local9 < focusableCandidates.length) {
                            _local10 = focusableCandidates[_local9];
                            if ((_local10 is IFocusManagerGroup)){
                                _local11 = IFocusManagerGroup(_local10);
                                if ((((_local11.groupName == _local8.groupName)) && (_local11.selected))){
                                    _arg1 = _local9;
                                    break;
                                };
                            };
                            _local9++;
                        };
                    };
                    return (_arg1);
                };
            };
            return (_arg1);
        }
        private function mouseFocusChangeHandler(_arg1:FocusEvent):void{
            if ((_arg1.relatedObject is TextField)){
                return;
            };
            _arg1.preventDefault();
        }
        public function set form(_arg1:DisplayObjectContainer):void{
            _form = _arg1;
        }
        private function addFocusables(_arg1:DisplayObject, _arg2:Boolean=false):void{
            var focusable:* = null;
            var io:* = null;
            var doc:* = null;
            var i:* = 0;
            var child:* = null;
            var o:* = _arg1;
            var skipTopLevel:Boolean = _arg2;
            if (!skipTopLevel){
                if ((o is IFocusManagerComponent)){
                    focusable = IFocusManagerComponent(o);
                    if (focusable.focusEnabled){
                        if (((focusable.tabEnabled) && (isTabVisible(o)))){
                            focusableObjects[o] = true;
                            calculateCandidates = true;
                        };
                        o.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                        o.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
                    };
                } else {
                    if ((o is InteractiveObject)){
                        io = (o as InteractiveObject);
                        if (((((io) && (io.tabEnabled))) && ((findFocusManagerComponent(io) == io)))){
                            focusableObjects[io] = true;
                            calculateCandidates = true;
                        };
                        io.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                        io.addEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
                    };
                };
            };
            if ((o is DisplayObjectContainer)){
                doc = DisplayObjectContainer(o);
                o.addEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler);
                if ((((((doc is Stage)) || ((doc.parent is Stage)))) || (doc.tabChildren))){
                    i = 0;
                    while (i < doc.numChildren) {
                        try {
                            child = doc.getChildAt(i);
                            if (child != null){
                                addFocusables(doc.getChildAt(i));
                            };
                        } catch(error:SecurityError) {
                        };
                        i = (i + 1);
                    };
                };
            };
        }
        private function getChildIndex(_arg1:DisplayObjectContainer, _arg2:DisplayObject):int{
            return (_arg1.getChildIndex(_arg2));
        }
        public function findFocusManagerComponent(_arg1:InteractiveObject):InteractiveObject{
            var _local2:InteractiveObject = _arg1;
            while (_arg1) {
                if ((((_arg1 is IFocusManagerComponent)) && (IFocusManagerComponent(_arg1).focusEnabled))){
                    return (_arg1);
                };
                _arg1 = _arg1.parent;
            };
            return (_local2);
        }
        private function focusOutHandler(_arg1:FocusEvent):void{
            var _local2:InteractiveObject = (_arg1.target as InteractiveObject);
        }
        private function isValidFocusCandidate(_arg1:DisplayObject, _arg2:String):Boolean{
            var _local3:IFocusManagerGroup;
            if (!isEnabledAndVisible(_arg1)){
                return (false);
            };
            if ((_arg1 is IFocusManagerGroup)){
                _local3 = IFocusManagerGroup(_arg1);
                if (_arg2 == _local3.groupName){
                    return (false);
                };
            };
            return (true);
        }
        private function setFocusToNextObject(_arg1:FocusEvent):void{
            if (!hasFocusableObjects()){
                return;
            };
            var _local2:InteractiveObject = getNextFocusManagerComponent(_arg1.shiftKey);
            if (_local2){
                setFocus(_local2);
            };
        }
        private function sortFocusableObjectsTabIndex():void{
            var _local1:Object;
            var _local2:InteractiveObject;
            focusableCandidates = [];
            for (_local1 in focusableObjects) {
                _local2 = InteractiveObject(_local1);
                if (((_local2.tabIndex) && (!(isNaN(Number(_local2.tabIndex)))))){
                    focusableCandidates.push(_local2);
                };
            };
            focusableCandidates.sort(sortByTabIndex);
        }
        private function removeFocusables(_arg1:DisplayObject):void{
            var _local2:Object;
            var _local3:DisplayObject;
            if ((_arg1 is DisplayObjectContainer)){
                _arg1.removeEventListener(Event.TAB_CHILDREN_CHANGE, tabChildrenChangeHandler);
                _arg1.removeEventListener(Event.TAB_INDEX_CHANGE, tabIndexChangeHandler);
                for (_local2 in focusableObjects) {
                    _local3 = DisplayObject(_local2);
                    if (DisplayObjectContainer(_arg1).contains(_local3)){
                        if (_local3 == lastFocus){
                            lastFocus = null;
                        };
                        _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                        delete focusableObjects[_local2];
                        calculateCandidates = true;
                    };
                };
            };
        }
        private function getTopLevelFocusTarget(_arg1:InteractiveObject):InteractiveObject{
            while (_arg1 != InteractiveObject(form)) {
                if ((((((((_arg1 is IFocusManagerComponent)) && (IFocusManagerComponent(_arg1).focusEnabled))) && (IFocusManagerComponent(_arg1).mouseFocusEnabled))) && (UIComponent(_arg1).enabled))){
                    return (_arg1);
                };
                _arg1 = _arg1.parent;
                if (_arg1 == null){
                    break;
                };
            };
            return (null);
        }
        public function sendDefaultButtonEvent():void{
            defButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
        }
        private function addedHandler(_arg1:Event):void{
            var _local2:DisplayObject = DisplayObject(_arg1.target);
            if (_local2.stage){
                addFocusables(DisplayObject(_arg1.target));
            };
        }
        private function isEnabledAndVisible(_arg1:DisplayObject):Boolean{
            var _local3:TextField;
            var _local4:SimpleButton;
            var _local2:DisplayObjectContainer = DisplayObject(form).parent;
            while (_arg1 != _local2) {
                if ((_arg1 is UIComponent)){
                    if (!UIComponent(_arg1).enabled){
                        return (false);
                    };
                } else {
                    if ((_arg1 is TextField)){
                        _local3 = TextField(_arg1);
                        if ((((_local3.type == TextFieldType.DYNAMIC)) || (!(_local3.selectable)))){
                            return (false);
                        };
                    } else {
                        if ((_arg1 is SimpleButton)){
                            _local4 = SimpleButton(_arg1);
                            if (!_local4.enabled){
                                return (false);
                            };
                        };
                    };
                };
                if (!_arg1.visible){
                    return (false);
                };
                _arg1 = _arg1.parent;
            };
            return (true);
        }
        private function tabChildrenChangeHandler(_arg1:Event):void{
            if (_arg1.target != _arg1.currentTarget){
                return;
            };
            calculateCandidates = true;
            var _local2:DisplayObjectContainer = DisplayObjectContainer(_arg1.target);
            if (_local2.tabChildren){
                addFocusables(_local2, true);
            } else {
                removeFocusables(_local2);
            };
        }
        private function deactivateHandler(_arg1:Event):void{
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
        }
        public function setFocus(_arg1:InteractiveObject):void{
            if ((_arg1 is IFocusManagerComponent)){
                IFocusManagerComponent(_arg1).setFocus();
            } else {
                form.stage.focus = _arg1;
            };
        }
        public function getFocus():InteractiveObject{
            var _local1:InteractiveObject = form.stage.focus;
            return (findFocusManagerComponent(_local1));
        }
        private function hasFocusableObjects():Boolean{
            var _local1:Object;
            for (_local1 in focusableObjects) {
                return (true);
            };
            return (false);
        }
        private function tabIndexChangeHandler(_arg1:Event):void{
            calculateCandidates = true;
        }
        public function set defaultButton(_arg1:Button):void{
            var _local2:Button = ((_arg1) ? Button(_arg1) : null);
            if (_local2 != _defaultButton){
                if (_defaultButton){
                    _defaultButton.emphasized = false;
                };
                if (defButton){
                    defButton.emphasized = false;
                };
                _defaultButton = _local2;
                defButton = _local2;
                if (_local2){
                    _local2.emphasized = true;
                };
            };
        }
        private function sortFocusableObjects():void{
            var _local1:Object;
            var _local2:InteractiveObject;
            focusableCandidates = [];
            for (_local1 in focusableObjects) {
                _local2 = InteractiveObject(_local1);
                if (((((_local2.tabIndex) && (!(isNaN(Number(_local2.tabIndex)))))) && ((_local2.tabIndex > 0)))){
                    sortFocusableObjectsTabIndex();
                    return;
                };
                focusableCandidates.push(_local2);
            };
            focusableCandidates.sort(sortByDepth);
        }
        private function keyFocusChangeHandler(_arg1:FocusEvent):void{
            showFocusIndicator = true;
            if ((((((_arg1.keyCode == Keyboard.TAB)) || ((_arg1.keyCode == 0)))) && (!(_arg1.isDefaultPrevented())))){
                setFocusToNextObject(_arg1);
                _arg1.preventDefault();
            };
        }
        private function getIndexOfFocusedObject(_arg1:DisplayObject):int{
            var _local2:int = focusableCandidates.length;
            var _local3:int;
            _local3 = 0;
            while (_local3 < _local2) {
                if (focusableCandidates[_local3] == _arg1){
                    return (_local3);
                };
                _local3++;
            };
            return (-1);
        }
        public function hideFocus():void{
        }
        private function removedHandler(_arg1:Event):void{
            var _local2:int;
            var _local4:InteractiveObject;
            var _local3:DisplayObject = DisplayObject(_arg1.target);
            if ((((_local3 is IFocusManagerComponent)) && ((focusableObjects[_local3] == true)))){
                if (_local3 == lastFocus){
                    IFocusManagerComponent(lastFocus).drawFocus(false);
                    lastFocus = null;
                };
                _local3.removeEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                delete focusableObjects[_local3];
                calculateCandidates = true;
            } else {
                if ((((_local3 is InteractiveObject)) && ((focusableObjects[_local3] == true)))){
                    _local4 = (_local3 as InteractiveObject);
                    if (_local4){
                        if (_local4 == lastFocus){
                            lastFocus = null;
                        };
                        delete focusableObjects[_local4];
                        calculateCandidates = true;
                    };
                    _local3.addEventListener(Event.TAB_ENABLED_CHANGE, tabEnabledChangeHandler);
                };
            };
            removeFocusables(_local3);
        }
        private function sortByDepth(_arg1:InteractiveObject, _arg2:InteractiveObject):Number{
            var _local5:int;
            var _local6:String;
            var _local7:String;
            var _local3 = "";
            var _local4 = "";
            var _local8 = "0000";
            var _local9:DisplayObject = DisplayObject(_arg1);
            var _local10:DisplayObject = DisplayObject(_arg2);
            while (((!((_local9 == DisplayObject(form)))) && (_local9.parent))) {
                _local5 = getChildIndex(_local9.parent, _local9);
                _local6 = _local5.toString(16);
                if (_local6.length < 4){
                    _local7 = (_local8.substring(0, (4 - _local6.length)) + _local6);
                };
                _local3 = (_local7 + _local3);
                _local9 = _local9.parent;
            };
            while (((!((_local10 == DisplayObject(form)))) && (_local10.parent))) {
                _local5 = getChildIndex(_local10.parent, _local10);
                _local6 = _local5.toString(16);
                if (_local6.length < 4){
                    _local7 = (_local8.substring(0, (4 - _local6.length)) + _local6);
                };
                _local4 = (_local7 + _local4);
                _local10 = _local10.parent;
            };
            return ((((_local3 > _local4)) ? 1 : (((_local3 < _local4)) ? -1 : 0)));
        }
        public function get defaultButton():Button{
            return (_defaultButton);
        }
        private function activateHandler(_arg1:Event):void{
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
            if (lastFocus){
                if ((lastFocus is IFocusManagerComponent)){
                    IFocusManagerComponent(lastFocus).setFocus();
                } else {
                    form.stage.focus = lastFocus;
                };
            };
            lastAction = "ACTIVATE";
        }
        public function showFocus():void{
        }
        public function set defaultButtonEnabled(_arg1:Boolean):void{
            _defaultButtonEnabled = _arg1;
        }
        public function getNextFocusManagerComponent(_arg1:Boolean=false):InteractiveObject{
            var _local8:IFocusManagerGroup;
            if (!hasFocusableObjects()){
                return (null);
            };
            if (calculateCandidates){
                sortFocusableObjects();
                calculateCandidates = false;
            };
            var _local2:DisplayObject = form.stage.focus;
            _local2 = DisplayObject(findFocusManagerComponent(InteractiveObject(_local2)));
            var _local3 = "";
            if ((_local2 is IFocusManagerGroup)){
                _local8 = IFocusManagerGroup(_local2);
                _local3 = _local8.groupName;
            };
            var _local4:int = getIndexOfFocusedObject(_local2);
            var _local5:Boolean;
            var _local6:int = _local4;
            if (_local4 == -1){
                if (_arg1){
                    _local4 = focusableCandidates.length;
                };
                _local5 = true;
            };
            var _local7:int = getIndexOfNextObject(_local4, _arg1, _local5, _local3);
            return (findFocusManagerComponent(focusableCandidates[_local7]));
        }
        private function mouseDownHandler(_arg1:MouseEvent):void{
            if (_arg1.isDefaultPrevented()){
                return;
            };
            var _local2:InteractiveObject = getTopLevelFocusTarget(InteractiveObject(_arg1.target));
            if (!_local2){
                return;
            };
            showFocusIndicator = false;
            if (((((!((_local2 == lastFocus))) || ((lastAction == "ACTIVATE")))) && (!((_local2 is TextField))))){
                setFocus(_local2);
            };
            lastAction = "MOUSEDOWN";
        }
        private function isTabVisible(_arg1:DisplayObject):Boolean{
            var _local2:DisplayObjectContainer = _arg1.parent;
            while (((((_local2) && (!((_local2 is Stage))))) && (!(((_local2.parent) && ((_local2.parent is Stage))))))) {
                if (!_local2.tabChildren){
                    return (false);
                };
                _local2 = _local2.parent;
            };
            return (true);
        }
        public function get nextTabIndex():int{
            return (0);
        }
        private function keyDownHandler(_arg1:KeyboardEvent):void{
            if (_arg1.keyCode == Keyboard.TAB){
                lastAction = "KEY";
                if (calculateCandidates){
                    sortFocusableObjects();
                    calculateCandidates = false;
                };
            };
            if (((((((defaultButtonEnabled) && ((_arg1.keyCode == Keyboard.ENTER)))) && (defaultButton))) && (defButton.enabled))){
                sendDefaultButtonEvent();
            };
        }
        private function focusInHandler(_arg1:FocusEvent):void{
            var _local3:Button;
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
            if (form.contains(_local2)){
                lastFocus = findFocusManagerComponent(InteractiveObject(_local2));
                if ((lastFocus is Button)){
                    _local3 = Button(lastFocus);
                    if (defButton){
                        defButton.emphasized = false;
                        defButton = _local3;
                        _local3.emphasized = true;
                    };
                } else {
                    if (((defButton) && (!((defButton == _defaultButton))))){
                        defButton.emphasized = false;
                        defButton = _defaultButton;
                        _defaultButton.emphasized = true;
                    };
                };
            };
        }
        private function tabEnabledChangeHandler(_arg1:Event):void{
            calculateCandidates = true;
            var _local2:InteractiveObject = InteractiveObject(_arg1.target);
            var _local3 = (focusableObjects[_local2] == true);
            if (_local2.tabEnabled){
                if (((!(_local3)) && (isTabVisible(_local2)))){
                    if (!(_local2 is IFocusManagerComponent)){
                        _local2.focusRect = false;
                    };
                    focusableObjects[_local2] = true;
                };
            } else {
                if (_local3){
                    delete focusableObjects[_local2];
                };
            };
        }
        public function set showFocusIndicator(_arg1:Boolean):void{
            _showFocusIndicator = _arg1;
        }
        public function get form():DisplayObjectContainer{
            return (_form);
        }
        private function sortByTabIndex(_arg1:InteractiveObject, _arg2:InteractiveObject):int{
            return ((((_arg1.tabIndex > _arg2.tabIndex)) ? 1 : (((_arg1.tabIndex < _arg2.tabIndex)) ? -1 : sortByDepth(_arg1, _arg2))));
        }
        public function get defaultButtonEnabled():Boolean{
            return (_defaultButtonEnabled);
        }
        public function activate():void{
            if (activated){
                return;
            };
            form.stage.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler, false, 0, true);
            form.stage.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler, false, 0, true);
            form.addEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
            form.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
            form.stage.addEventListener(Event.ACTIVATE, activateHandler, false, 0, true);
            form.stage.addEventListener(Event.DEACTIVATE, deactivateHandler, false, 0, true);
            form.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            form.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
            activated = true;
            if (lastFocus){
                setFocus(lastFocus);
            };
        }
        public function deactivate():void{
            form.stage.removeEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
            form.stage.removeEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            form.removeEventListener(FocusEvent.FOCUS_IN, focusInHandler, true);
            form.removeEventListener(FocusEvent.FOCUS_OUT, focusOutHandler, true);
            form.stage.removeEventListener(Event.ACTIVATE, activateHandler);
            form.stage.removeEventListener(Event.DEACTIVATE, deactivateHandler);
            form.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            form.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler, true);
            activated = false;
        }

    }
}//package fl.managers 
﻿package fl.containers {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.events.*;

    public class MiniBaseScrollPane extends UIComponent {

        protected static const SCROLL_BAR_STYLES:Object = {
            upArrowDisabledSkin:"upArrowDisabledSkin",
            upArrowDownSkin:"upArrowDownSkin",
            upArrowOverSkin:"upArrowOverSkin",
            upArrowUpSkin:"upArrowUpSkin",
            downArrowDisabledSkin:"downArrowDisabledSkin",
            downArrowDownSkin:"downArrowDownSkin",
            downArrowOverSkin:"downArrowOverSkin",
            downArrowUpSkin:"downArrowUpSkin",
            thumbDisabledSkin:"thumbDisabledSkin",
            thumbDownSkin:"thumbDownSkin",
            thumbOverSkin:"thumbOverSkin",
            thumbUpSkin:"thumbUpSkin",
            thumbIcon:"thumbIcon",
            trackDisabledSkin:"trackDisabledSkin",
            trackDownSkin:"trackDownSkin",
            trackOverSkin:"trackOverSkin",
            trackUpSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval",
            scrollArrowHeight:"scrollArrowHeight",
            scrollBarWidth:"scrollBarWidth"
        };

        private static var defaultStyles:Object = {
            repeatDelay:500,
            repeatInterval:35,
            skin:"ScrollPane_upSkin",
            contentPadding:0,
            disabledAlpha:0.5
        };

        protected var contentHeight:Number = 0;
        protected var _horizontalScrollBar:MiniScrollBar;
        protected var _horizontalPageScrollSize:Number = 0;
        protected var _verticalPageScrollSize:Number = 0;
        protected var _maxHorizontalScrollPosition:Number = 0;
        protected var defaultLineScrollSize:Number = 4;
        protected var vOffset:Number = 0;
        protected var contentScrollRect:Rectangle;
        protected var background:DisplayObject;
        protected var _verticalScrollBar:MiniScrollBar;
        protected var disabledOverlay:Shape;
        protected var vScrollBar:Boolean;
        protected var _horizontalScrollPolicy:String;
        protected var useFixedHorizontalScrolling:Boolean = false;
        protected var contentWidth:Number = 0;
        protected var availableHeight:Number;
        protected var _verticalScrollPolicy:String;
        protected var contentPadding:Number = 0;
        protected var _useBitmpScrolling:Boolean = false;
        protected var scrollBarWidth:Number;
        protected var availableWidth:Number;
        protected var hScrollBar:Boolean;

        public function MiniBaseScrollPane(){
            scrollBarWidth = MiniScrollBar.WIDTH;
            super();
        }
        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, MiniScrollBar.getStyleDefinition()));
        }

        override public function set enabled(_arg1:Boolean):void{
            if (enabled == _arg1){
                return;
            };
            _verticalScrollBar.enabled = _arg1;
            _horizontalScrollBar.enabled = _arg1;
            super.enabled = _arg1;
        }
        public function set useBitmapScrolling(_arg1:Boolean):void{
            _useBitmpScrolling = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function set horizontalLineScrollSize(_arg1:Number):void{
            _horizontalScrollBar.lineScrollSize = _arg1;
        }
        protected function drawLayout():void{
            calculateAvailableSize();
            calculateContentWidth();
            background.width = width;
            background.height = height;
            if (vScrollBar){
                _verticalScrollBar.visible = true;
                _verticalScrollBar.x = ((width - Number(getStyleValue("scrollBarWidth"))) - contentPadding);
                _verticalScrollBar.y = contentPadding;
                _verticalScrollBar.height = availableHeight;
            } else {
                _verticalScrollBar.visible = false;
            };
            var _local1:Number = (contentHeight - availableHeight);
            _verticalScrollBar.setScrollProperties(availableHeight, 0, _local1, verticalPageScrollSize);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
            if (hScrollBar){
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.x = contentPadding;
                _horizontalScrollBar.y = ((height - Number(getStyleValue("scrollBarWidth"))) - contentPadding);
                _horizontalScrollBar.width = availableWidth;
            } else {
                _horizontalScrollBar.visible = false;
            };
            _horizontalScrollBar.setScrollProperties(availableWidth, 0, ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - availableWidth)), horizontalPageScrollSize);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
            drawDisabledOverlay();
        }
        protected function handleWheel(_arg1:MouseEvent):void{
            if (((((!(enabled)) || (!(_verticalScrollBar.visible)))) || ((contentHeight <= availableHeight)))){
                return;
            };
            _verticalScrollBar.scrollPosition = (_verticalScrollBar.scrollPosition - (_arg1.delta * verticalLineScrollSize));
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition);
            dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _arg1.delta, horizontalScrollPosition));
        }
        protected function handleScroll(_arg1:ScrollEvent):void{
            if (_arg1.target == _verticalScrollBar){
                setVerticalScrollPosition(_arg1.position);
            } else {
                setHorizontalScrollPosition(_arg1.position);
            };
        }
        protected function drawBackground():void{
            var _local1:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue("skin"));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (((!((_local1 == null))) && (!((_local1 == background))))){
                removeChild(_local1);
            };
        }
        public function get verticalLineScrollSize():Number{
            return (_verticalScrollBar.lineScrollSize);
        }
        protected function calculateAvailableSize():void{
            var _local1:Number = Number(getStyleValue("scrollBarWidth"));
            var _local2:Number = (contentPadding = Number(getStyleValue("contentPadding")));
            var _local3:Number = ((height - (2 * _local2)) - vOffset);
            vScrollBar = (((_verticalScrollPolicy == ScrollPolicy.ON)) || ((((_verticalScrollPolicy == ScrollPolicy.AUTO)) && ((contentHeight > 230)))));
            var _local4:Number = ((width - ((vScrollBar) ? _local1 : 0)) - (2 * _local2));
            var _local5:Number = ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - _local4));
            hScrollBar = (((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_local5 > 0)))));
            if (hScrollBar){
                _local3 = (_local3 - _local1);
            };
            if (((((((hScrollBar) && (!(vScrollBar)))) && ((_verticalScrollPolicy == ScrollPolicy.AUTO)))) && ((contentHeight > _local3)))){
                vScrollBar = true;
                _local4 = (_local4 - _local1);
            };
            availableHeight = (_local3 + vOffset);
            availableWidth = _local4;
        }
        public function get verticalScrollPosition():Number{
            return (_verticalScrollBar.scrollPosition);
        }
        public function get horizontalScrollPolicy():String{
            return (_horizontalScrollPolicy);
        }
        protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
        }
        public function get horizontalPageScrollSize():Number{
            if (isNaN(availableWidth)){
                drawNow();
            };
            return ((((((_horizontalPageScrollSize == 0)) && (!(isNaN(availableWidth))))) ? availableWidth : _horizontalPageScrollSize));
        }
        public function set horizontalScrollPosition(_arg1:Number):void{
            drawNow();
            _horizontalScrollBar.scrollPosition = _arg1;
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
        }
        public function set verticalLineScrollSize(_arg1:Number):void{
            _verticalScrollBar.lineScrollSize = _arg1;
        }
        public function get maxVerticalScrollPosition():Number{
            drawNow();
            return (Math.max(0, (contentHeight - availableHeight)));
        }
        public function set horizontalPageScrollSize(_arg1:Number):void{
            _horizontalPageScrollSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (((!((contentPadding == getStyleValue("contentPadding")))) || (!((scrollBarWidth == getStyleValue("scrollBarWidth")))))){
                    invalidate(InvalidationType.SIZE, false);
                };
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STATE)){
                drawLayout();
            };
            updateChildren();
            super.draw();
        }
        public function get horizontalScrollBar():MiniScrollBar{
            return (_horizontalScrollBar);
        }
        protected function calculateContentWidth():void{
        }
        public function set horizontalScrollPolicy(_arg1:String):void{
            _horizontalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override protected function configUI():void{
            super.configUI();
            contentScrollRect = new Rectangle(0, 0, 85, 85);
            _verticalScrollBar = new MiniScrollBar();
            _verticalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _verticalScrollBar.visible = false;
            _verticalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_verticalScrollBar);
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            _horizontalScrollBar = new MiniScrollBar();
            _horizontalScrollBar.direction = ScrollBarDirection.HORIZONTAL;
            _horizontalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _horizontalScrollBar.visible = false;
            _horizontalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_horizontalScrollBar);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            disabledOverlay = new Shape();
            var _local1:Graphics = disabledOverlay.graphics;
            _local1.beginFill(0xFFFFFF);
            _local1.drawRect(0, 0, width, height);
            _local1.endFill();
            addEventListener(MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
        }
        protected function drawDisabledOverlay():void{
            if (enabled){
                if (contains(disabledOverlay)){
                    removeChild(disabledOverlay);
                };
            } else {
                disabledOverlay.x = (disabledOverlay.y = contentPadding);
                disabledOverlay.width = availableWidth;
                disabledOverlay.height = availableHeight;
                disabledOverlay.alpha = (getStyleValue("disabledAlpha") as Number);
                addChild(disabledOverlay);
            };
        }
        public function get horizontalScrollPosition():Number{
            return (_horizontalScrollBar.scrollPosition);
        }
        public function get verticalScrollBar():MiniScrollBar{
            return (_verticalScrollBar);
        }
        public function get horizontalLineScrollSize():Number{
            return (_horizontalScrollBar.lineScrollSize);
        }
        public function set verticalScrollPosition(_arg1:Number):void{
            drawNow();
            _verticalScrollBar.scrollPosition = _arg1;
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
        }
        protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
        }
        protected function setStyles():void{
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
        }
        public function set verticalPageScrollSize(_arg1:Number):void{
            _verticalPageScrollSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function set verticalScrollPolicy(_arg1:String):void{
            _verticalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get maxHorizontalScrollPosition():Number{
            drawNow();
            return (Math.max(0, (contentWidth - availableWidth)));
        }
        protected function updateChildren():void{
            _verticalScrollBar.enabled = (_horizontalScrollBar.enabled = enabled);
            _verticalScrollBar.drawNow();
        }
        protected function setContentSize(_arg1:Number, _arg2:Number):void{
            if ((((((contentWidth == _arg1)) || (useFixedHorizontalScrolling))) && ((contentHeight == _arg2)))){
                return;
            };
            contentWidth = _arg1;
            contentHeight = _arg2;
            invalidate(InvalidationType.SIZE);
        }
        public function get verticalPageScrollSize():Number{
            if (isNaN(availableHeight)){
                drawNow();
            };
            return ((((((_verticalPageScrollSize == 0)) && (!(isNaN(availableHeight))))) ? availableHeight : _verticalPageScrollSize));
        }
        public function get verticalScrollPolicy():String{
            return (_verticalScrollPolicy);
        }
        public function get useBitmapScrolling():Boolean{
            return (_useBitmpScrolling);
        }

    }
}//package fl.containers 
﻿package fl.containers {
    import flash.events.*;
    import flash.display.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.events.*;
    import flash.net.*;
    import flash.system.*;
    import flash.ui.*;

    public class ScrollPane extends BaseScrollPane implements IFocusManagerComponent {

        private static var defaultStyles:Object = {
            upSkin:"ScrollPane_upSkin",
            disabledSkin:"ScrollPane_disabledSkin",
            focusRectSkin:null,
            focusRectPadding:null,
            contentPadding:0
        };

        protected var scrollDragHPos:Number;
        protected var loader:Loader;
        protected var xOffset:Number;
        protected var _source:Object = "";
        protected var scrollDragVPos:Number;
        protected var _scrollDrag:Boolean = false;
        protected var currentContent:Object;
        protected var contentClip:Sprite;
        protected var yOffset:Number;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, BaseScrollPane.getStyleDefinition()));
        }

        protected function clearContent():void{
            if (contentClip.numChildren == 0){
                return;
            };
            contentClip.removeChildAt(0);
            currentContent = null;
            if (loader != null){
                try {
                    loader.close();
                } catch(e) {
                };
                try {
                    loader.unload();
                } catch(e) {
                };
                loader = null;
            };
        }
        protected function passEvent(_arg1:Event):void{
            dispatchEvent(_arg1);
        }
        protected function calculateAvailableHeight():Number{
            var _local1:Number = Number(getStyleValue("contentPadding"));
            return (((height - (_local1 * 2)) - (((((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_maxHorizontalScrollPosition > 0)))))) ? 15 : 0)));
        }
        override protected function drawLayout():void{
            super.drawLayout();
            contentScrollRect = contentClip.scrollRect;
            contentScrollRect.width = availableWidth;
            contentScrollRect.height = availableHeight;
            contentClip.cacheAsBitmap = useBitmapScrolling;
            contentClip.scrollRect = contentScrollRect;
            contentClip.x = (contentClip.y = contentPadding);
        }
        public function get bytesTotal():Number{
            return ((((((loader == null)) || ((loader.contentLoaderInfo == null)))) ? 0 : loader.contentLoaderInfo.bytesTotal));
        }
        public function get source():Object{
            return (_source);
        }
        override protected function handleScroll(_arg1:ScrollEvent):void{
            passEvent(_arg1);
            super.handleScroll(_arg1);
        }
        protected function onContentLoad(_arg1:Event):void{
            update();
            var _local2:* = calculateAvailableHeight();
            calculateAvailableSize();
            horizontalScrollBar.setScrollProperties(availableWidth, 0, ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - availableWidth)), availableWidth);
            verticalScrollBar.setScrollProperties(_local2, 0, (contentHeight - _local2), _local2);
            passEvent(_arg1);
        }
        public function get scrollDrag():Boolean{
            return (_scrollDrag);
        }
        protected function setScrollDrag():void{
            if (_scrollDrag){
                contentClip.addEventListener(MouseEvent.MOUSE_DOWN, doStartDrag, false, 0, true);
                stage.addEventListener(MouseEvent.MOUSE_UP, endDrag, false, 0, true);
            } else {
                contentClip.removeEventListener(MouseEvent.MOUSE_DOWN, doStartDrag);
                stage.removeEventListener(MouseEvent.MOUSE_UP, endDrag);
                removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
            };
            contentClip.buttonMode = _scrollDrag;
        }
        public function get percentLoaded():Number{
            if (loader != null){
                return (Math.round(((bytesLoaded / bytesTotal) * 100)));
            };
            return (0);
        }
        override protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            var _local3:* = contentClip.scrollRect;
            _local3.y = _arg1;
            contentClip.scrollRect = _local3;
        }
        protected function endDrag(_arg1:MouseEvent):void{
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, doDrag);
        }
        override protected function drawBackground():void{
            var _local1:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue(((enabled) ? "upSkin" : "disabledSkin")));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (((!((_local1 == null))) && (!((_local1 == background))))){
                removeChild(_local1);
            };
        }
        public function set source(_arg1:Object):void{
            var _local2:*;
            clearContent();
            if (isLivePreview){
                return;
            };
            _source = _arg1;
            if ((((_source == "")) || ((_source == null)))){
                return;
            };
            currentContent = getDisplayObjectInstance(_arg1);
            if (currentContent != null){
                _local2 = contentClip.addChild((currentContent as DisplayObject));
                dispatchEvent(new Event(Event.INIT));
                update();
            } else {
                load(new URLRequest(_source.toString()));
            };
        }
        public function set scrollDrag(_arg1:Boolean):void{
            _scrollDrag = _arg1;
            invalidate(InvalidationType.STATE);
        }
        protected function initLoader():void{
            loader = new Loader();
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.OPEN, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onContentLoad, false, 0, true);
            loader.contentLoaderInfo.addEventListener(Event.INIT, passEvent, false, 0, true);
            loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, passEvent, false, 0, true);
            contentClip.addChild(loader);
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES)){
                drawBackground();
            };
            if (isInvalid(InvalidationType.STATE)){
                setScrollDrag();
            };
            super.draw();
        }
        protected function clearLoadEvents():void{
            loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError);
            loader.contentLoaderInfo.removeEventListener(Event.OPEN, passEvent);
            loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, passEvent);
            loader.contentLoaderInfo.removeEventListener(HTTPStatusEvent.HTTP_STATUS, passEvent);
            loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onContentLoad);
        }
        protected function handleError(_arg1:Event):void{
            passEvent(_arg1);
            clearLoadEvents();
            loader.contentLoaderInfo.removeEventListener(Event.INIT, handleInit);
        }
        public function get bytesLoaded():Number{
            return ((((((loader == null)) || ((loader.contentLoaderInfo == null)))) ? 0 : loader.contentLoaderInfo.bytesLoaded));
        }
        override protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
            var _local3:* = contentClip.scrollRect;
            _local3.x = _arg1;
            contentClip.scrollRect = _local3;
        }
        override protected function configUI():void{
            super.configUI();
            contentClip = new Sprite();
            addChild(contentClip);
            contentClip.scrollRect = contentScrollRect;
            _horizontalScrollPolicy = ScrollPolicy.AUTO;
            _verticalScrollPolicy = ScrollPolicy.AUTO;
        }
        protected function handleInit(_arg1:Event):void{
            loader.contentLoaderInfo.removeEventListener(Event.INIT, handleInit);
            passEvent(_arg1);
            invalidate(InvalidationType.SIZE);
        }
        public function update():void{
            var _local1:DisplayObject = contentClip.getChildAt(0);
            setContentSize(_local1.width, _local1.height);
        }
        public function refreshPane():void{
            if ((_source is URLRequest)){
                _source = _source.url;
            };
            source = _source;
        }
        public function load(_arg1:URLRequest, _arg2:LoaderContext=null):void{
            if (_arg2 == null){
                _arg2 = new LoaderContext(false, ApplicationDomain.currentDomain);
            };
            clearContent();
            initLoader();
            currentContent = (_source = _arg1);
            loader.load(_arg1, _arg2);
        }
        protected function doStartDrag(_arg1:MouseEvent):void{
            if (!enabled){
                return;
            };
            xOffset = mouseX;
            yOffset = mouseY;
            scrollDragHPos = horizontalScrollPosition;
            scrollDragVPos = verticalScrollPosition;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, doDrag, false, 0, true);
        }
        protected function doDrag(_arg1:MouseEvent):void{
            var _local2:* = (scrollDragVPos - (mouseY - yOffset));
            _verticalScrollBar.setScrollPosition(_local2);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, true);
            var _local3:* = (scrollDragHPos - (mouseX - xOffset));
            _horizontalScrollBar.setScrollPosition(_local3);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, true);
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
            var _local2:int = calculateAvailableHeight();
            switch (_arg1.keyCode){
                case Keyboard.DOWN:
                    verticalScrollPosition++;
                    break;
                case Keyboard.UP:
                    verticalScrollPosition--;
                    break;
                case Keyboard.RIGHT:
                    horizontalScrollPosition++;
                    break;
                case Keyboard.LEFT:
                    horizontalScrollPosition--;
                    break;
                case Keyboard.END:
                    verticalScrollPosition = maxVerticalScrollPosition;
                    break;
                case Keyboard.HOME:
                    verticalScrollPosition = 0;
                    break;
                case Keyboard.PAGE_UP:
                    verticalScrollPosition = (verticalScrollPosition - _local2);
                    break;
                case Keyboard.PAGE_DOWN:
                    verticalScrollPosition = (verticalScrollPosition + _local2);
                    break;
            };
        }
        public function get content():DisplayObject{
            var _local1:Object = currentContent;
            if ((_local1 is URLRequest)){
                _local1 = loader.content;
            };
            return ((_local1 as DisplayObject));
        }

    }
}//package fl.containers 
﻿package fl.containers {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.events.*;

    public class BaseScrollPane extends UIComponent {

        protected static const SCROLL_BAR_STYLES:Object = {
            upArrowDisabledSkin:"upArrowDisabledSkin",
            upArrowDownSkin:"upArrowDownSkin",
            upArrowOverSkin:"upArrowOverSkin",
            upArrowUpSkin:"upArrowUpSkin",
            downArrowDisabledSkin:"downArrowDisabledSkin",
            downArrowDownSkin:"downArrowDownSkin",
            downArrowOverSkin:"downArrowOverSkin",
            downArrowUpSkin:"downArrowUpSkin",
            thumbDisabledSkin:"thumbDisabledSkin",
            thumbDownSkin:"thumbDownSkin",
            thumbOverSkin:"thumbOverSkin",
            thumbUpSkin:"thumbUpSkin",
            thumbIcon:"thumbIcon",
            trackDisabledSkin:"trackDisabledSkin",
            trackDownSkin:"trackDownSkin",
            trackOverSkin:"trackOverSkin",
            trackUpSkin:"trackUpSkin",
            repeatDelay:"repeatDelay",
            repeatInterval:"repeatInterval",
            scrollArrowHeight:"scrollArrowHeight",
            scrollBarWidth:"scrollBarWidth"
        };

        private static var defaultStyles:Object = {
            repeatDelay:500,
            repeatInterval:35,
            skin:"ScrollPane_upSkin",
            contentPadding:0,
            disabledAlpha:0.5
        };

        protected var contentHeight:Number = 0;
        protected var _horizontalScrollBar:ScrollBar;
        protected var _horizontalPageScrollSize:Number = 0;
        protected var _verticalPageScrollSize:Number = 0;
        protected var _maxHorizontalScrollPosition:Number = 0;
        protected var defaultLineScrollSize:Number = 4;
        protected var vOffset:Number = 0;
        protected var contentScrollRect:Rectangle;
        protected var background:DisplayObject;
        protected var _verticalScrollBar:ScrollBar;
        protected var disabledOverlay:Shape;
        protected var vScrollBar:Boolean;
        protected var _horizontalScrollPolicy:String;
        protected var useFixedHorizontalScrolling:Boolean = false;
        protected var contentWidth:Number = 0;
        protected var availableHeight:Number;
        protected var _verticalScrollPolicy:String;
        protected var contentPadding:Number = 0;
        protected var _useBitmpScrolling:Boolean = false;
        protected var scrollBarWidth:Number = 15;
        protected var availableWidth:Number;
        protected var hScrollBar:Boolean;

        public static function getStyleDefinition():Object{
            return (mergeStyles(defaultStyles, ScrollBar.getStyleDefinition()));
        }

        override public function set enabled(_arg1:Boolean):void{
            if (enabled == _arg1){
                return;
            };
            _verticalScrollBar.enabled = _arg1;
            _horizontalScrollBar.enabled = _arg1;
            super.enabled = _arg1;
        }
        public function set useBitmapScrolling(_arg1:Boolean):void{
            _useBitmpScrolling = _arg1;
            invalidate(InvalidationType.STATE);
        }
        public function set horizontalLineScrollSize(_arg1:Number):void{
            _horizontalScrollBar.lineScrollSize = _arg1;
        }
        protected function drawLayout():void{
            calculateAvailableSize();
            calculateContentWidth();
            background.width = width;
            background.height = height;
            if (vScrollBar){
                _verticalScrollBar.visible = true;
                _verticalScrollBar.x = ((width - Number(getStyleValue("scrollBarWidth"))) - contentPadding);
                _verticalScrollBar.y = contentPadding;
                _verticalScrollBar.height = (availableHeight - 1);
            } else {
                _verticalScrollBar.visible = false;
            };
            var _local1:Number = (contentHeight - availableHeight);
            _verticalScrollBar.setScrollProperties(availableHeight, 0, _local1, verticalPageScrollSize);
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
            if (hScrollBar){
                _horizontalScrollBar.visible = true;
                _horizontalScrollBar.x = contentPadding;
                _horizontalScrollBar.y = ((height - Number(getStyleValue("scrollBarWidth"))) - contentPadding);
                _horizontalScrollBar.width = availableWidth;
            } else {
                _horizontalScrollBar.visible = false;
            };
            _horizontalScrollBar.setScrollProperties(availableWidth, 0, ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - availableWidth)), horizontalPageScrollSize);
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
            drawDisabledOverlay();
        }
        protected function handleWheel(_arg1:MouseEvent):void{
            if (((((!(enabled)) || (!(_verticalScrollBar.visible)))) || ((contentHeight <= availableHeight)))){
                return;
            };
            _verticalScrollBar.scrollPosition = (_verticalScrollBar.scrollPosition - (_arg1.delta * verticalLineScrollSize));
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition);
            dispatchEvent(new ScrollEvent(ScrollBarDirection.VERTICAL, _arg1.delta, horizontalScrollPosition));
        }
        protected function handleScroll(_arg1:ScrollEvent):void{
            if (_arg1.target == _verticalScrollBar){
                setVerticalScrollPosition(_arg1.position);
            } else {
                setHorizontalScrollPosition(_arg1.position);
            };
        }
        protected function drawBackground():void{
            var _local1:DisplayObject = background;
            background = getDisplayObjectInstance(getStyleValue("skin"));
            background.width = width;
            background.height = height;
            addChildAt(background, 0);
            if (((!((_local1 == null))) && (!((_local1 == background))))){
                removeChild(_local1);
            };
        }
        public function get verticalLineScrollSize():Number{
            return (_verticalScrollBar.lineScrollSize);
        }
        protected function calculateAvailableSize():void{
            var _local1:Number = Number(getStyleValue("scrollBarWidth"));
            var _local2:Number = (contentPadding = Number(getStyleValue("contentPadding")));
            var _local3:Number = ((height - (2 * _local2)) - vOffset);
            vScrollBar = (((_verticalScrollPolicy == ScrollPolicy.ON)) || ((((_verticalScrollPolicy == ScrollPolicy.AUTO)) && ((contentHeight > 275)))));
            var _local4:Number = ((width - ((vScrollBar) ? _local1 : 0)) - (2 * _local2));
            var _local5:Number = ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - _local4));
            hScrollBar = (((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_local5 > 0)))));
            if (hScrollBar){
                _local3 = (_local3 - _local1);
            };
            if (((((((hScrollBar) && (!(vScrollBar)))) && ((_verticalScrollPolicy == ScrollPolicy.AUTO)))) && ((contentHeight > _local3)))){
                vScrollBar = true;
                _local4 = (_local4 - _local1);
            };
            availableHeight = (_local3 + vOffset);
            availableWidth = _local4;
        }
        public function get verticalScrollPosition():Number{
            return (_verticalScrollBar.scrollPosition);
        }
        public function get horizontalScrollPolicy():String{
            return (_horizontalScrollPolicy);
        }
        protected function setVerticalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
        }
        public function get horizontalPageScrollSize():Number{
            if (isNaN(availableWidth)){
                drawNow();
            };
            return ((((((_horizontalPageScrollSize == 0)) && (!(isNaN(availableWidth))))) ? availableWidth : _horizontalPageScrollSize));
        }
        public function set horizontalScrollPosition(_arg1:Number):void{
            drawNow();
            _horizontalScrollBar.scrollPosition = _arg1;
            setHorizontalScrollPosition(_horizontalScrollBar.scrollPosition, false);
        }
        public function set verticalLineScrollSize(_arg1:Number):void{
            _verticalScrollBar.lineScrollSize = _arg1;
        }
        public function get maxVerticalScrollPosition():Number{
            drawNow();
            return (Math.max(0, (contentHeight - availableHeight)));
        }
        public function set horizontalPageScrollSize(_arg1:Number):void{
            _horizontalPageScrollSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override protected function draw():void{
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (((!((contentPadding == getStyleValue("contentPadding")))) || (!((scrollBarWidth == getStyleValue("scrollBarWidth")))))){
                    invalidate(InvalidationType.SIZE, false);
                };
            };
            if (isInvalid(InvalidationType.SIZE, InvalidationType.STATE)){
                drawLayout();
            };
            updateChildren();
            super.draw();
        }
        public function get horizontalScrollBar():ScrollBar{
            return (_horizontalScrollBar);
        }
        protected function calculateContentWidth():void{
        }
        public function set horizontalScrollPolicy(_arg1:String):void{
            _horizontalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        override protected function configUI():void{
            super.configUI();
            contentScrollRect = new Rectangle(0, 0, 85, 85);
            _verticalScrollBar = new ScrollBar();
            _verticalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _verticalScrollBar.visible = false;
            _verticalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_verticalScrollBar);
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            _horizontalScrollBar = new ScrollBar();
            _horizontalScrollBar.direction = ScrollBarDirection.HORIZONTAL;
            _horizontalScrollBar.addEventListener(ScrollEvent.SCROLL, handleScroll, false, 0, true);
            _horizontalScrollBar.visible = false;
            _horizontalScrollBar.lineScrollSize = defaultLineScrollSize;
            addChild(_horizontalScrollBar);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
            disabledOverlay = new Shape();
            var _local1:Graphics = disabledOverlay.graphics;
            _local1.beginFill(0xFFFFFF);
            _local1.drawRect(0, 0, width, height);
            _local1.endFill();
            addEventListener(MouseEvent.MOUSE_WHEEL, handleWheel, false, 0, true);
        }
        protected function drawDisabledOverlay():void{
            if (enabled){
                if (contains(disabledOverlay)){
                    removeChild(disabledOverlay);
                };
            } else {
                disabledOverlay.x = (disabledOverlay.y = contentPadding);
                disabledOverlay.width = availableWidth;
                disabledOverlay.height = availableHeight;
                disabledOverlay.alpha = (getStyleValue("disabledAlpha") as Number);
                addChild(disabledOverlay);
            };
        }
        public function get horizontalScrollPosition():Number{
            return (_horizontalScrollBar.scrollPosition);
        }
        public function get verticalScrollBar():ScrollBar{
            return (_verticalScrollBar);
        }
        public function get horizontalLineScrollSize():Number{
            return (_horizontalScrollBar.lineScrollSize);
        }
        public function set verticalScrollPosition(_arg1:Number):void{
            drawNow();
            _verticalScrollBar.scrollPosition = _arg1;
            setVerticalScrollPosition(_verticalScrollBar.scrollPosition, false);
        }
        protected function setHorizontalScrollPosition(_arg1:Number, _arg2:Boolean=false):void{
        }
        protected function setStyles():void{
            copyStylesToChild(_verticalScrollBar, SCROLL_BAR_STYLES);
            copyStylesToChild(_horizontalScrollBar, SCROLL_BAR_STYLES);
        }
        public function set verticalPageScrollSize(_arg1:Number):void{
            _verticalPageScrollSize = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function set verticalScrollPolicy(_arg1:String):void{
            _verticalScrollPolicy = _arg1;
            invalidate(InvalidationType.SIZE);
        }
        public function get maxHorizontalScrollPosition():Number{
            drawNow();
            return (Math.max(0, (contentWidth - availableWidth)));
        }
        protected function updateChildren():void{
            _verticalScrollBar.enabled = (_horizontalScrollBar.enabled = enabled);
            _verticalScrollBar.drawNow();
        }
        protected function setContentSize(_arg1:Number, _arg2:Number):void{
            if ((((((contentWidth == _arg1)) || (useFixedHorizontalScrolling))) && ((contentHeight == _arg2)))){
                return;
            };
            contentWidth = _arg1;
            contentHeight = _arg2;
            invalidate(InvalidationType.SIZE);
        }
        public function get verticalPageScrollSize():Number{
            if (isNaN(availableHeight)){
                drawNow();
            };
            return ((((((_verticalPageScrollSize == 0)) && (!(isNaN(availableHeight))))) ? availableHeight : _verticalPageScrollSize));
        }
        public function get verticalScrollPolicy():String{
            return (_verticalScrollPolicy);
        }
        public function get useBitmapScrolling():Boolean{
            return (_useBitmpScrolling);
        }

    }
}//package fl.containers 
﻿package fl.data {

    public dynamic class SimpleCollectionItem {

        public var data:String;
        public var label:String;

        public function toString():String{
            return ((((("[SimpleCollectionItem: " + label) + ",") + data) + "]"));
        }

    }
}//package fl.data 
﻿package fl.data {
    import flash.events.*;
    import fl.events.*;

    public class DataProvider extends EventDispatcher {

        protected var data:Array;

        public function DataProvider(_arg1:Object=null){
            if (_arg1 == null){
                data = [];
            } else {
                data = getDataFromObject(_arg1);
            };
        }
        public function invalidateItemAt(_arg1:int):void{
            checkIndex(_arg1, (data.length - 1));
            dispatchChangeEvent(DataChangeType.INVALIDATE, [data[_arg1]], _arg1, _arg1);
        }
        protected function dispatchPreChangeEvent(_arg1:String, _arg2:Array, _arg3:int, _arg4:int):void{
            dispatchEvent(new DataChangeEvent(DataChangeEvent.PRE_DATA_CHANGE, _arg1, _arg2, _arg3, _arg4));
        }
        public function getItemIndex(_arg1:Object):int{
            return (data.indexOf(_arg1));
        }
        public function removeItemAt(_arg1:uint):Object{
            checkIndex(_arg1, (data.length - 1));
            dispatchPreChangeEvent(DataChangeType.REMOVE, data.slice(_arg1, (_arg1 + 1)), _arg1, _arg1);
            var _local2:Array = data.splice(_arg1, 1);
            dispatchChangeEvent(DataChangeType.REMOVE, _local2, _arg1, _arg1);
            return (_local2[0]);
        }
        protected function getDataFromObject(_arg1:Object):Array{
            var _local2:Array;
            var _local3:Array;
            var _local4:uint;
            var _local5:Object;
            var _local6:XML;
            var _local7:XMLList;
            var _local8:XML;
            var _local9:XMLList;
            var _local10:XML;
            var _local11:XMLList;
            var _local12:XML;
            if ((_arg1 is Array)){
                _local3 = (_arg1 as Array);
                if (_local3.length > 0){
                    if ((((_local3[0] is String)) || ((_local3[0] is Number)))){
                        _local2 = [];
                        _local4 = 0;
                        while (_local4 < _local3.length) {
                            _local5 = {
                                label:String(_local3[_local4]),
                                data:_local3[_local4]
                            };
                            _local2.push(_local5);
                            _local4++;
                        };
                        return (_local2);
                    };
                };
                return (_arg1.concat());
            };
            if ((_arg1 is DataProvider)){
                return (_arg1.toArray());
            };
            if ((_arg1 is XML)){
                _local6 = (_arg1 as XML);
                _local2 = [];
                _local7 = _local6.*;
                for each (_local8 in _local7) {
                    _arg1 = {};
                    _local9 = _local8.attributes();
                    for each (_local10 in _local9) {
                        _arg1[_local10.localName()] = _local10.toString();
                    };
                    _local11 = _local8.*;
                    for each (_local12 in _local11) {
                        if (_local12.hasSimpleContent()){
                            _arg1[_local12.localName()] = _local12.toString();
                        };
                    };
                    _local2.push(_arg1);
                };
                return (_local2);
            };
            throw (new TypeError((("Error: Type Coercion failed: cannot convert " + _arg1) + " to Array or DataProvider.")));
        }
        public function addItem(_arg1:Object):void{
            dispatchPreChangeEvent(DataChangeType.ADD, [_arg1], (data.length - 1), (data.length - 1));
            data.push(_arg1);
            dispatchChangeEvent(DataChangeType.ADD, [_arg1], (data.length - 1), (data.length - 1));
        }
        public function concat(_arg1:Object):void{
            addItems(_arg1);
        }
        public function getItemAt(_arg1:uint):Object{
            checkIndex(_arg1, (data.length - 1));
            return (data[_arg1]);
        }
        public function sortOn(_arg1:Object, _arg2:Object=null){
            dispatchPreChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            var _local3:Array = data.sortOn(_arg1, _arg2);
            dispatchChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            return (_local3);
        }
        public function toArray():Array{
            return (data.concat());
        }
        public function addItems(_arg1:Object):void{
            addItemsAt(_arg1, data.length);
        }
        public function clone():DataProvider{
            return (new DataProvider(data));
        }
        public function sort(... _args){
            dispatchPreChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            var _local2:Array = data.sort.apply(data, _args);
            dispatchChangeEvent(DataChangeType.SORT, data.concat(), 0, (data.length - 1));
            return (_local2);
        }
        public function get length():uint{
            return (data.length);
        }
        public function addItemAt(_arg1:Object, _arg2:uint):void{
            checkIndex(_arg2, data.length);
            dispatchPreChangeEvent(DataChangeType.ADD, [_arg1], _arg2, _arg2);
            data.splice(_arg2, 0, _arg1);
            dispatchChangeEvent(DataChangeType.ADD, [_arg1], _arg2, _arg2);
        }
        override public function toString():String{
            return ((("DataProvider [" + data.join(" , ")) + "]"));
        }
        public function invalidateItem(_arg1:Object):void{
            var _local2:uint = getItemIndex(_arg1);
            if (_local2 == -1){
                return;
            };
            invalidateItemAt(_local2);
        }
        protected function dispatchChangeEvent(_arg1:String, _arg2:Array, _arg3:int, _arg4:int):void{
            dispatchEvent(new DataChangeEvent(DataChangeEvent.DATA_CHANGE, _arg1, _arg2, _arg3, _arg4));
        }
        protected function checkIndex(_arg1:int, _arg2:int):void{
            if ((((_arg1 > _arg2)) || ((_arg1 < 0)))){
                throw (new RangeError((((("DataProvider index (" + _arg1) + ") is not in acceptable range (0 - ") + _arg2) + ")")));
            };
        }
        public function addItemsAt(_arg1:Object, _arg2:uint):void{
            checkIndex(_arg2, data.length);
            var _local3:Array = getDataFromObject(_arg1);
            dispatchPreChangeEvent(DataChangeType.ADD, _local3, _arg2, ((_arg2 + _local3.length) - 1));
            data.splice.apply(data, [_arg2, 0].concat(_local3));
            dispatchChangeEvent(DataChangeType.ADD, _local3, _arg2, ((_arg2 + _local3.length) - 1));
        }
        public function replaceItem(_arg1:Object, _arg2:Object):Object{
            var _local3:int = getItemIndex(_arg2);
            if (_local3 != -1){
                return (replaceItemAt(_arg1, _local3));
            };
            return (null);
        }
        public function removeItem(_arg1:Object):Object{
            var _local2:int = getItemIndex(_arg1);
            if (_local2 != -1){
                return (removeItemAt(_local2));
            };
            return (null);
        }
        public function merge(_arg1:Object):void{
            var _local6:Object;
            var _local2:Array = getDataFromObject(_arg1);
            var _local3:uint = _local2.length;
            var _local4:uint = data.length;
            dispatchPreChangeEvent(DataChangeType.ADD, data.slice(_local4, data.length), _local4, (this.data.length - 1));
            var _local5:uint;
            while (_local5 < _local3) {
                _local6 = _local2[_local5];
                if (getItemIndex(_local6) == -1){
                    data.push(_local6);
                };
                _local5++;
            };
            if (data.length > _local4){
                dispatchChangeEvent(DataChangeType.ADD, data.slice(_local4, data.length), _local4, (this.data.length - 1));
            } else {
                dispatchChangeEvent(DataChangeType.ADD, [], -1, -1);
            };
        }
        public function replaceItemAt(_arg1:Object, _arg2:uint):Object{
            checkIndex(_arg2, (data.length - 1));
            var _local3:Array = [data[_arg2]];
            dispatchPreChangeEvent(DataChangeType.REPLACE, _local3, _arg2, _arg2);
            data[_arg2] = _arg1;
            dispatchChangeEvent(DataChangeType.REPLACE, _local3, _arg2, _arg2);
            return (_local3[0]);
        }
        public function invalidate():void{
            dispatchEvent(new DataChangeEvent(DataChangeEvent.DATA_CHANGE, DataChangeType.INVALIDATE_ALL, data.concat(), 0, data.length));
        }
        public function removeAll():void{
            var _local1:Array = data.concat();
            dispatchPreChangeEvent(DataChangeType.REMOVE_ALL, _local1, 0, _local1.length);
            data = [];
            dispatchChangeEvent(DataChangeType.REMOVE_ALL, _local1, 0, _local1.length);
        }

    }
}//package fl.data 
﻿package fl.events {
    import flash.events.*;

    public class ListEvent extends Event {

        public static const ITEM_DOUBLE_CLICK:String = "itemDoubleClick";
        public static const ITEM_ROLL_OUT:String = "itemRollOut";
        public static const ITEM_ROLL_OVER:String = "itemRollOver";
        public static const ITEM_CLICK:String = "itemClick";

        protected var _item:Object;
        protected var _index:int;
        protected var _rowIndex:int;
        protected var _columnIndex:int;

        public function ListEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:int=-1, _arg5:int=-1, _arg6:int=-1, _arg7:Object=null){
            super(_arg1, _arg2, _arg3);
            _rowIndex = _arg5;
            _columnIndex = _arg4;
            _index = _arg6;
            _item = _arg7;
        }
        public function get item():Object{
            return (_item);
        }
        override public function toString():String{
            return (formatToString("ListEvent", "type", "bubbles", "cancelable", "columnIndex", "rowIndex", "index", "item"));
        }
        override public function clone():Event{
            return (new ListEvent(type, bubbles, cancelable, _columnIndex, _rowIndex));
        }
        public function get rowIndex():Object{
            return (_rowIndex);
        }
        public function get index():int{
            return (_index);
        }
        public function get columnIndex():int{
            return (_columnIndex);
        }

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class ScrollEvent extends Event {

        public static const SCROLL:String = "scroll";

        private var _direction:String;
        private var _position:Number;
        private var _delta:Number;

        public function ScrollEvent(_arg1:String, _arg2:Number, _arg3:Number){
            super(ScrollEvent.SCROLL, false, false);
            _direction = _arg1;
            _delta = _arg2;
            _position = _arg3;
        }
        public function get position():Number{
            return (_position);
        }
        public function get direction():String{
            return (_direction);
        }
        public function get delta():Number{
            return (_delta);
        }
        override public function toString():String{
            return (formatToString("ScrollEvent", "type", "bubbles", "cancelable", "direction", "delta", "position"));
        }
        override public function clone():Event{
            return (new ScrollEvent(_direction, _delta, _position));
        }

    }
}//package fl.events 
﻿package fl.events {

    public class DataChangeType {

        public static const ADD:String = "add";
        public static const REMOVE:String = "remove";
        public static const REMOVE_ALL:String = "removeAll";
        public static const CHANGE:String = "change";
        public static const REPLACE:String = "replace";
        public static const INVALIDATE:String = "invalidate";
        public static const INVALIDATE_ALL:String = "invalidateAll";
        public static const SORT:String = "sort";

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class DataChangeEvent extends Event {

        public static const PRE_DATA_CHANGE:String = "preDataChange";
        public static const DATA_CHANGE:String = "dataChange";

        protected var _items:Array;
        protected var _changeType:String;
        protected var _startIndex:uint;
        protected var _endIndex:uint;

        public function DataChangeEvent(_arg1:String, _arg2:String, _arg3:Array, _arg4:int=-1, _arg5:int=-1):void{
            super(_arg1);
            _changeType = _arg2;
            _startIndex = _arg4;
            _items = _arg3;
            _endIndex = ((_arg5)==-1) ? _startIndex : _arg5;
        }
        public function get items():Array{
            return (_items);
        }
        public function get changeType():String{
            return (_changeType);
        }
        public function get startIndex():uint{
            return (_startIndex);
        }
        public function get endIndex():uint{
            return (_endIndex);
        }
        override public function toString():String{
            return (formatToString("DataChangeEvent", "type", "changeType", "startIndex", "endIndex", "bubbles", "cancelable"));
        }
        override public function clone():Event{
            return (new DataChangeEvent(type, _changeType, _items, _startIndex, _endIndex));
        }

    }
}//package fl.events 
﻿package fl.events {
    import flash.events.*;

    public class ComponentEvent extends Event {

        public static const HIDE:String = "hide";
        public static const BUTTON_DOWN:String = "buttonDown";
        public static const MOVE:String = "move";
        public static const RESIZE:String = "resize";
        public static const ENTER:String = "enter";
        public static const LABEL_CHANGE:String = "labelChange";
        public static const SHOW:String = "show";

        public function ComponentEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        override public function toString():String{
            return (formatToString("ComponentEvent", "type", "bubbles", "cancelable"));
        }
        override public function clone():Event{
            return (new ComponentEvent(type, bubbles, cancelable));
        }

    }
}//package fl.events 
﻿package {
    import flash.display.*;

    public dynamic class List_skin extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_downIcon extends MovieClip {

    }
}//package 
﻿package com.adobe.serialization.json {

    public class JSONToken {

        private var _value:Object;
        private var _type:int;

        public function JSONToken(_arg1:int=-1, _arg2:Object=null){
            this._type = _arg1;
            this._value = _arg2;
        }
        public function get value():Object{
            return (this._value);
        }
        public function get type():int{
            return (this._type);
        }
        public function set type(_arg1:int):void{
            this._type = _arg1;
        }
        public function set value(_arg1:Object):void{
            this._value = _arg1;
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {
    import flash.utils.*;

    public class JSONEncoder {

        private var jsonString:String;

        public function JSONEncoder(_arg1){
            this.jsonString = this.convertToString(_arg1);
        }
        private function escapeString(_arg1:String):String{
            var _local3:String;
            var _local6:String;
            var _local7:String;
            var _local2 = "";
            var _local4:Number = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local3 = _arg1.charAt(_local5);
                switch (_local3){
                    case "\"":
                        _local2 = (_local2 + "\\\"");
                        break;
                    case "\\":
                        _local2 = (_local2 + "\\\\");
                        break;
                    case "\b":
                        _local2 = (_local2 + "\\b");
                        break;
                    case "\f":
                        _local2 = (_local2 + "\\f");
                        break;
                    case "\n":
                        _local2 = (_local2 + "\\n");
                        break;
                    case "\r":
                        _local2 = (_local2 + "\\r");
                        break;
                    case "\t":
                        _local2 = (_local2 + "\\t");
                        break;
                    default:
                        if (_local3 < " "){
                            _local6 = _local3.charCodeAt(0).toString(16);
                            _local7 = (((_local6.length == 2)) ? "00" : "000");
                            _local2 = (_local2 + (("\\u" + _local7) + _local6));
                        } else {
                            _local2 = (_local2 + _local3);
                        };
                };
                _local5++;
            };
            return ((("\"" + _local2) + "\""));
        }
        private function arrayToString(_arg1:Array):String{
            var _local2 = "";
            var _local3:int;
            while (_local3 < _arg1.length) {
                if (_local2.length > 0){
                    _local2 = (_local2 + ",");
                };
                _local2 = (_local2 + this.convertToString(_arg1[_local3]));
                _local3++;
            };
            return ((("[" + _local2) + "]"));
        }
        public function getString():String{
            return (this.jsonString);
        }
        private function objectToString(_arg1:Object):String{
            var value:* = null;
            var key:* = null;
            var v:* = null;
            var o:* = _arg1;
            var s:* = "";
            var classInfo:* = describeType(o);
            if (classInfo.@name.toString() == "Object"){
                for (key in o) {
                    value = o[key];
                    if ((value is Function)){
                    } else {
                        if (s.length > 0){
                            s = (s + ",");
                        };
                        s = (s + ((this.escapeString(key) + ":") + this.convertToString(value)));
                    };
                };
            } else {
                for each (v in classInfo..*.(((name() == "variable")) || ((((name() == "accessor")) && ((attribute("access").charAt(0) == "r")))))) {
                    if (((v.metadata) && ((v.metadata.(@name == "Transient").length() > 0)))){
                    } else {
                        if (s.length > 0){
                            s = (s + ",");
                        };
                        s = (s + ((this.escapeString(v.@name.toString()) + ":") + this.convertToString(o[v.@name])));
                    };
                };
            };
            return ((("{" + s) + "}"));
        }
        private function convertToString(_arg1):String{
            if ((_arg1 is String)){
                return (this.escapeString((_arg1 as String)));
            };
            if ((_arg1 is Number)){
                return (((isFinite((_arg1 as Number))) ? _arg1.toString() : "null"));
            };
            if ((_arg1 is Boolean)){
                return (((_arg1) ? "true" : "false"));
            };
            if ((_arg1 is Array)){
                return (this.arrayToString((_arg1 as Array)));
            };
            if ((((_arg1 is Object)) && (!((_arg1 == null))))){
                return (this.objectToString(_arg1));
            };
            return ("null");
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONParseError extends Error {

        private var _location:int;
        private var _text:String;

        public function JSONParseError(_arg1:String="", _arg2:int=0, _arg3:String=""){
            super(_arg1);
            name = "JSONParseError";
            this._location = _arg2;
            this._text = _arg3;
        }
        public function get location():int{
            return (this._location);
        }
        public function get text():String{
            return (this._text);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONTokenizer {

        private var ch:String;
        private var loc:int;
        private var jsonString:String;
        private var strict:Boolean;
        private var controlCharsRegExp:RegExp;
        private var obj:Object;

        public function JSONTokenizer(_arg1:String, _arg2:Boolean){
            this.controlCharsRegExp = /[\x00-\x1F]/;
            super();
            this.jsonString = _arg1;
            this.strict = _arg2;
            this.loc = 0;
            this.nextChar();
        }
        private function skipComments():void{
            if (this.ch == "/"){
                this.nextChar();
                switch (this.ch){
                    case "/":
                        do  {
                            this.nextChar();
                        } while (((!((this.ch == "\n"))) && (!((this.ch == "")))));
                        this.nextChar();
                        break;
                    case "*":
                        this.nextChar();
                        while (true) {
                            if (this.ch == "*"){
                                this.nextChar();
                                if (this.ch == "/"){
                                    this.nextChar();
                                    break;
                                };
                            } else {
                                this.nextChar();
                            };
                            if (this.ch == ""){
                                this.parseError("Multi-line comment not closed");
                            };
                        };
                        break;
                    default:
                        this.parseError((("Unexpected " + this.ch) + " encountered (expecting '/' or '*' )"));
                };
            };
        }
        private function isDigit(_arg1:String):Boolean{
            return ((((_arg1 >= "0")) && ((_arg1 <= "9"))));
        }
        private function readNumber():JSONToken{
            var _local3:JSONToken;
            var _local1 = "";
            if (this.ch == "-"){
                _local1 = (_local1 + "-");
                this.nextChar();
            };
            if (!this.isDigit(this.ch)){
                this.parseError("Expecting a digit");
            };
            if (this.ch == "0"){
                _local1 = (_local1 + this.ch);
                this.nextChar();
                if (this.isDigit(this.ch)){
                    this.parseError("A digit cannot immediately follow 0");
                } else {
                    if (((!(this.strict)) && ((this.ch == "x")))){
                        _local1 = (_local1 + this.ch);
                        this.nextChar();
                        if (this.isHexDigit(this.ch)){
                            _local1 = (_local1 + this.ch);
                            this.nextChar();
                        } else {
                            this.parseError("Number in hex format require at least one hex digit after \"0x\"");
                        };
                        while (this.isHexDigit(this.ch)) {
                            _local1 = (_local1 + this.ch);
                            this.nextChar();
                        };
                    };
                };
            } else {
                while (this.isDigit(this.ch)) {
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
            };
            if (this.ch == "."){
                _local1 = (_local1 + ".");
                this.nextChar();
                if (!this.isDigit(this.ch)){
                    this.parseError("Expecting a digit");
                };
                while (this.isDigit(this.ch)) {
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
            };
            if ((((this.ch == "e")) || ((this.ch == "E")))){
                _local1 = (_local1 + "e");
                this.nextChar();
                if ((((this.ch == "+")) || ((this.ch == "-")))){
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
                if (!this.isDigit(this.ch)){
                    this.parseError("Scientific notation number needs exponent value");
                };
                while (this.isDigit(this.ch)) {
                    _local1 = (_local1 + this.ch);
                    this.nextChar();
                };
            };
            var _local2:Number = Number(_local1);
            if (((isFinite(_local2)) && (!(isNaN(_local2))))){
                _local3 = new JSONToken();
                _local3.type = JSONTokenType.NUMBER;
                _local3.value = _local2;
                return (_local3);
            };
            this.parseError((("Number " + _local2) + " is not valid!"));
            return (null);
        }
        public function unescapeString(_arg1:String):String{
            var _local6:*;
            var _local7:*;
            var _local8:*;
            var _local9:*;
            var _local10:*;
            if (((this.strict) && (this.controlCharsRegExp.test(_arg1)))){
                this.parseError("String contains unescaped control character (0x00-0x1F)");
            };
            var _local2 = "";
            var _local3:int;
            var _local4:int;
            var _local5:int = _arg1.length;
            do  {
                _local3 = _arg1.indexOf("\\", _local4);
                if (_local3 >= 0){
                    _local2 = (_local2 + _arg1.substr(_local4, (_local3 - _local4)));
                    _local4 = (_local3 + 2);
                    _local6 = (_local3 + 1);
                    _local7 = _arg1.charAt(_local6);
                    switch (_local7){
                        case "\"":
                            _local2 = (_local2 + "\"");
                            break;
                        case "\\":
                            _local2 = (_local2 + "\\");
                            break;
                        case "n":
                            _local2 = (_local2 + "\n");
                            break;
                        case "r":
                            _local2 = (_local2 + "\r");
                            break;
                        case "t":
                            _local2 = (_local2 + "\t");
                            break;
                        case "u":
                            _local8 = "";
                            if ((_local4 + 4) > _local5){
                                this.parseError("Unexpected end of input.  Expecting 4 hex digits after \\u.");
                            };
                            _local9 = _local4;
                            while (_local9 < (_local4 + 4)) {
                                _local10 = _arg1.charAt(_local9);
                                if (!this.isHexDigit(_local10)){
                                    this.parseError(("Excepted a hex digit, but found: " + _local10));
                                };
                                _local8 = (_local8 + _local10);
                                _local9++;
                            };
                            _local2 = (_local2 + String.fromCharCode(parseInt(_local8, 16)));
                            _local4 = (_local4 + 4);
                            break;
                        case "f":
                            _local2 = (_local2 + "\f");
                            break;
                        case "/":
                            _local2 = (_local2 + "/");
                            break;
                        case "b":
                            _local2 = (_local2 + "\b");
                            break;
                        default:
                            _local2 = (_local2 + ("\\" + _local7));
                    };
                } else {
                    _local2 = (_local2 + _arg1.substr(_local4));
                    break;
                };
            } while (_local4 < _local5);
            return (_local2);
        }
        private function skipWhite():void{
            while (this.isWhiteSpace(this.ch)) {
                this.nextChar();
            };
        }
        private function isWhiteSpace(_arg1:String):Boolean{
            if ((((((((_arg1 == " ")) || ((_arg1 == "\t")))) || ((_arg1 == "\n")))) || ((_arg1 == "\r")))){
                return (true);
            };
            if (((!(this.strict)) && ((_arg1.charCodeAt(0) == 160)))){
                return (true);
            };
            return (false);
        }
        public function parseError(_arg1:String):void{
            throw (new JSONParseError(_arg1, this.loc, this.jsonString));
        }
        private function readString():JSONToken{
            var _local3:*;
            var _local4:*;
            var _local1:int = this.loc;
            do  {
                _local1 = this.jsonString.indexOf("\"", _local1);
                if (_local1 >= 0){
                    _local3 = 0;
                    _local4 = (_local1 - 1);
                    while (this.jsonString.charAt(_local4) == "\\") {
                        _local3++;
                        _local4--;
                    };
                    if ((_local3 % 2) == 0){
                        break;
                    };
                    _local1++;
                } else {
                    this.parseError("Unterminated string literal");
                };
            } while (true);
            var _local2:JSONToken = new JSONToken();
            _local2.type = JSONTokenType.STRING;
            _local2.value = this.unescapeString(this.jsonString.substr(this.loc, (_local1 - this.loc)));
            this.loc = (_local1 + 1);
            this.nextChar();
            return (_local2);
        }
        private function nextChar():String{
            return ((this.ch = this.jsonString.charAt(this.loc++)));
        }
        private function skipIgnored():void{
            var _local1:int;
            do  {
                _local1 = this.loc;
                this.skipWhite();
                this.skipComments();
            } while (_local1 != this.loc);
        }
        private function isHexDigit(_arg1:String):Boolean{
            return (((((this.isDigit(_arg1)) || ((((_arg1 >= "A")) && ((_arg1 <= "F")))))) || ((((_arg1 >= "a")) && ((_arg1 <= "f"))))));
        }
        public function getNextToken():JSONToken{
            var _local2:String;
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local1:JSONToken = new JSONToken();
            this.skipIgnored();
            switch (this.ch){
                case "{":
                    _local1.type = JSONTokenType.LEFT_BRACE;
                    _local1.value = "{";
                    this.nextChar();
                    break;
                case "}":
                    _local1.type = JSONTokenType.RIGHT_BRACE;
                    _local1.value = "}";
                    this.nextChar();
                    break;
                case "[":
                    _local1.type = JSONTokenType.LEFT_BRACKET;
                    _local1.value = "[";
                    this.nextChar();
                    break;
                case "]":
                    _local1.type = JSONTokenType.RIGHT_BRACKET;
                    _local1.value = "]";
                    this.nextChar();
                    break;
                case ",":
                    _local1.type = JSONTokenType.COMMA;
                    _local1.value = ",";
                    this.nextChar();
                    break;
                case ":":
                    _local1.type = JSONTokenType.COLON;
                    _local1.value = ":";
                    this.nextChar();
                    break;
                case "t":
                    _local2 = ((("t" + this.nextChar()) + this.nextChar()) + this.nextChar());
                    if (_local2 == "true"){
                        _local1.type = JSONTokenType.TRUE;
                        _local1.value = true;
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'true' but found " + _local2));
                    };
                    break;
                case "f":
                    _local3 = (((("f" + this.nextChar()) + this.nextChar()) + this.nextChar()) + this.nextChar());
                    if (_local3 == "false"){
                        _local1.type = JSONTokenType.FALSE;
                        _local1.value = false;
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'false' but found " + _local3));
                    };
                    break;
                case "n":
                    _local4 = ((("n" + this.nextChar()) + this.nextChar()) + this.nextChar());
                    if (_local4 == "null"){
                        _local1.type = JSONTokenType.NULL;
                        _local1.value = null;
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'null' but found " + _local4));
                    };
                    break;
                case "N":
                    _local5 = (("N" + this.nextChar()) + this.nextChar());
                    if (_local5 == "NaN"){
                        _local1.type = JSONTokenType.NAN;
                        _local1.value = NaN;
                        this.nextChar();
                    } else {
                        this.parseError(("Expecting 'NaN' but found " + _local5));
                    };
                    break;
                case "\"":
                    _local1 = this.readString();
                    break;
                default:
                    if (((this.isDigit(this.ch)) || ((this.ch == "-")))){
                        _local1 = this.readNumber();
                    } else {
                        if (this.ch == ""){
                            return (null);
                        };
                        this.parseError((("Unexpected " + this.ch) + " encountered"));
                    };
            };
            return (_local1);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONTokenType {

        public static const FALSE:int = 8;
        public static const RIGHT_BRACKET:int = 4;
        public static const NULL:int = 9;
        public static const NUMBER:int = 11;
        public static const TRUE:int = 7;
        public static const RIGHT_BRACE:int = 2;
        public static const STRING:int = 10;
        public static const LEFT_BRACKET:int = 3;
        public static const LEFT_BRACE:int = 1;
        public static const UNKNOWN:int = -1;
        public static const COMMA:int = 0;
        public static const NAN:int = 12;
        public static const COLON:int = 6;

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSONDecoder {

        private var strict:Boolean;
        private var value;
        private var tokenizer:JSONTokenizer;
        private var token:JSONToken;

        public function JSONDecoder(_arg1:String, _arg2:Boolean){
            this.strict = _arg2;
            this.tokenizer = new JSONTokenizer(_arg1, _arg2);
            this.nextToken();
            this.value = this.parseValue();
            if (((_arg2) && (!((this.nextToken() == null))))){
                this.tokenizer.parseError("Unexpected characters left in input stream");
            };
        }
        private function nextToken():JSONToken{
            return ((this.token = this.tokenizer.getNextToken()));
        }
        private function parseObject():Object{
            var _local2:String;
            var _local1:Object = new Object();
            this.nextToken();
            if (this.token.type == JSONTokenType.RIGHT_BRACE){
                return (_local1);
            };
            if (((!(this.strict)) && ((this.token.type == JSONTokenType.COMMA)))){
                this.nextToken();
                if (this.token.type == JSONTokenType.RIGHT_BRACE){
                    return (_local1);
                };
                this.tokenizer.parseError(("Leading commas are not supported.  Expecting '}' but found " + this.token.value));
            };
            if (this.token.type == JSONTokenType.STRING){
                _local2 = String(this.token.value);
                this.nextToken();
                if (this.token.type == JSONTokenType.COLON){
                    this.nextToken();
                    _local1[_local2] = this.parseValue();
                    this.nextToken();
                    if (this.token.type == JSONTokenType.RIGHT_BRACE){
                        return (_local1);
                    };
                    if (this.token.type == JSONTokenType.COMMA){
                        this.nextToken();
                        if (!this.strict){
                            if (this.token.type == JSONTokenType.RIGHT_BRACE){
                                return (_local1);
                            };
                        };
                    } else {
                        this.tokenizer.parseError(("Expecting } or , but found " + this.token.value));
                    };
                } else {
                    this.tokenizer.parseError(("Expecting : but found " + this.token.value));
                };
            } else {
                this.tokenizer.parseError(("Expecting string but found " + this.token.value));
            };
            //unresolved jump
        }
        private function parseArray():Array{
            var _local1:Array = new Array();
            this.nextToken();
            if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                return (_local1);
            };
            if (((!(this.strict)) && ((this.token.type == JSONTokenType.COMMA)))){
                this.nextToken();
                if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                    return (_local1);
                };
                this.tokenizer.parseError(("Leading commas are not supported.  Expecting ']' but found " + this.token.value));
            };
            _local1.push(this.parseValue());
            this.nextToken();
            if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                return (_local1);
            };
            if (this.token.type == JSONTokenType.COMMA){
                this.nextToken();
                if (!this.strict){
                    if (this.token.type == JSONTokenType.RIGHT_BRACKET){
                        return (_local1);
                    };
                };
            } else {
                this.tokenizer.parseError(("Expecting ] or , but found " + this.token.value));
            };
            //unresolved jump
        }
        public function getValue(){
            return (this.value);
        }
        private function parseValue():Object{
            if (this.token == null){
                this.tokenizer.parseError("Unexpected end of input");
            };
            switch (this.token.type){
                case JSONTokenType.LEFT_BRACE:
                    return (this.parseObject());
                case JSONTokenType.LEFT_BRACKET:
                    return (this.parseArray());
                case JSONTokenType.STRING:
                case JSONTokenType.NUMBER:
                case JSONTokenType.TRUE:
                case JSONTokenType.FALSE:
                case JSONTokenType.NULL:
                    return (this.token.value);
                case JSONTokenType.NAN:
                    if (!this.strict){
                        return (this.token.value);
                    };
                    this.tokenizer.parseError(("Unexpected " + this.token.value));
                default:
                    this.tokenizer.parseError(("Unexpected " + this.token.value));
            };
            return (null);
        }

    }
}//package com.adobe.serialization.json 
﻿package com.adobe.serialization.json {

    public class JSON {

        public static function decode(_arg1:String, _arg2:Boolean=true){
            return (new JSONDecoder(_arg1, _arg2).getValue());
        }
        public static function encode(_arg1:Object):String{
            return (new JSONEncoder(_arg1).getString());
        }

    }
}//package com.adobe.serialization.json 
﻿package com.nhn.webapis.core.serviceobject {
    import com.nhn.core.interfaces.*;

    public class ServiceObjectBase implements ICloneable, IReleaseMemory {

        public function dump(_arg1:int=0):String{
            throw (new Error(("ServiceObjectBase : You should implements " + "dump method in sub-classes.")));
        }
        public function releaseMemory():void{
            throw (new Error(("ServiceObjectBase : You should implements " + "releaseMemory method in sub-classes.")));
        }
        protected function getPrefix(_arg1:int=0):String{
            var _local2 = "";
            while (_arg1--) {
                _local2 = (_local2 + "\t");
            };
            return (_local2);
        }
        public function clone(){
            throw (new Error(("ServiceObjectBase : You should implements " + "clone method in sub-classes.")));
        }

    }
}//package com.nhn.webapis.core.serviceobject 
﻿package com.nhn.webapis.core {
    import flash.events.*;
    import de.polygonal.ds.*;
    import flash.utils.*;
    import com.nhn.events.*;
    import com.nhn.net.*;
    import com.nhn.webapis.core.events.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.webapis.*;
    import com.nhn.webapis.ns.*;

    public class NHNServiceBase extends EventDispatcher {

        public static const MIN_REQUESTS:uint = 1;
        public static const USE_ADVANCED_URL_STREAM:uint = 2;
        public static const USE_ADVANCED_URL_LOADER:uint = 1;
        public static const DEFAULT_REQUESTS:uint = 10;

        protected var _loaderType:uint;
        protected var requestsWorkingTableByID:Dictionary;
        protected var _endPoints:Array;
        protected var requestsWaitingQueue:LinkedQueue;
        protected var requestsWorkingTableByLoader:Dictionary;
        protected var maxNumOfRequestsInWorking:int;
        protected var waitingLoadersToWork:Array;

        public function NHNServiceBase(_arg1:Array=null, _arg2:uint=10, _arg3:uint=1){
            var _local5:*;
            super();
            nhn_webapis_ns::endPoints = _arg1;
            this.maxNumOfRequestsInWorking = ((NHNServiceBase.MIN_REQUESTS)<=_arg2) ? _arg2 : NHNServiceBase.DEFAULT_REQUESTS;
            switch (_arg3){
                case USE_ADVANCED_URL_LOADER:
                case USE_ADVANCED_URL_STREAM:
                    _loaderType = _arg3;
                    break;
                default:
                    throw (new Error("NHNServiceBase : loaderType is not valid."));
            };
            waitingLoadersToWork = [];
            var _local4:int;
            while (_local4 < this.maxNumOfRequestsInWorking) {
                switch (_arg3){
                    case USE_ADVANCED_URL_LOADER:
                        _local5 = getAdvancedURLLoaderInternal();
                        break;
                    case USE_ADVANCED_URL_STREAM:
                        _local5 = getAdvancedURLStreamInternal();
                        break;
                };
                waitingLoadersToWork[_local4] = _local5;
                _local4++;
            };
            requestsWorkingTableByID = new Dictionary(false);
            requestsWorkingTableByLoader = new Dictionary(false);
            requestsWaitingQueue = new LinkedQueue();
        }
        protected function getAdvancedURLLoaderInternal():AdvancedURLLoader{
            var _local1:AdvancedURLLoader;
            if (Boolean((USE_ADVANCED_URL_LOADER & loaderType))){
                _local1 = new AdvancedURLLoader();
            };
            return (_local1);
        }
        protected function removeRequestInternal(_arg1:RequestID):void{
            var _local2:RequestItem;
            var _local5:String;
            var _local7:SListIterator;
            var _local3:* = null;
            var _local4:Boolean;
            var _local6:String = _arg1.id;
            _local2 = (requestsWorkingTableByID[_arg1.id] as RequestItem);
            if (Boolean(_local2)){
                requestsWorkingTableByID[_arg1.id] = null;
                delete requestsWorkingTableByID[_arg1.id];
                requestsWorkingTableByLoader[_local2.nhn_webapis_ns::loader] = null;
                delete requestsWorkingTableByLoader[_local2.nhn_webapis_ns::loader];
                _local3 = releaseMemoryOfRequestItem(_local2);
                if (Boolean(_local3)){
                    waitingLoadersToWork.push(_local3);
                } else {
                    throw (new Error("NHNServiceBase : removeRequest does not complete."));
                };
                startRequest();
                _local4 = true;
                _local5 = (((((("\tRemove request of service in working table : RequestID - " + _local6) + " (Working : ") + numOfRequestsInWorking) + ", Waiting : ") + requestsWaitingQueue.size) + ")\n");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_INFORMATION, this, _local5);
            } else {
                _local7 = (requestsWaitingQueue.getIterator() as SListIterator);
                _local7.start();
                while (Boolean((_local2 = (_local7.data as RequestItem)))) {
                    if (_local2.requestID === _arg1){
                        if (!_local7.remove()){
                            throw (new Error(("NHNServiceBase : Can not remove request " + "in watingRequests.")));
                        };
                        _local3 = releaseMemoryOfRequestItem(_local2);
                        if (Boolean(_local3)){
                            throw (new Error(("NHNServiceBase : removeRequest" + " does not complete.")));
                        };
                        _local4 = true;
                        _local5 = (((((("\tRemove request of service in wating queue : RequestID - " + _local6) + " (Working : ") + numOfRequestsInWorking) + ", Waiting : ") + requestsWaitingQueue.size) + ")\n");
                        NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_INFORMATION, this, _local5);
                        break;
                    };
                    _local7.next();
                };
            };
            if (!_local4){
                throw (new Error(("NHNServiceBase : Can not remove request. " + "There is no request in working table and wating queue.")));
            };
        }
        protected function addRequestInternal(_arg1:RequestItem):void{
            requestsWaitingQueue.enqueue(_arg1);
            startRequest();
        }
        protected function startRequest():void{
            var request:* = null;
            var loader:* = undefined;
            var log:* = null;
            if (((Boolean(waitingLoadersToWork[0])) && ((requestsWaitingQueue.size > 0)))){
                request = (requestsWaitingQueue.dequeue() as RequestItem);
                request.nhn_webapis_ns::loader = waitingLoadersToWork.pop();
                loader = request.nhn_webapis_ns::loader;
                try {
                    (loader as IMementoLoader).memento = request.memento;
                } catch(e:Error) {
                    throw (new Error(("NHNServiceBase : loader must be " + "type of IMementoLoader.")));
                };
                requestsWorkingTableByID[request.requestID.id] = request;
                requestsWorkingTableByLoader[loader] = request;
                (loader as EventDispatcher).addEventListener(Event.COMPLETE, request.handler, false, (int.MAX_VALUE - 1), false);
                (loader as EventDispatcher).addEventListener(Event.COMPLETE, handleEventInternal, false, int.MIN_VALUE, false);
                (loader as EventDispatcher).addEventListener(AdvancedLoaderEvent.LOAD, handleAdvancedLoaderEventInternal, false, (int.MAX_VALUE - 1), false);
                (loader as EventDispatcher).addEventListener(AdvancedLoaderEvent.CLOSE, handleAdvancedLoaderEventInternal, false, (int.MAX_VALUE - 1), false);
                (loader as EventDispatcher).addEventListener(IOErrorEvent.IO_ERROR, handleIOErrorEventInternal, false, (int.MAX_VALUE - 1), false);
                (loader as EventDispatcher).addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityErrorEventInternal, false, (int.MAX_VALUE - 1), false);
                switch (loaderType){
                    case NHNServiceBase.USE_ADVANCED_URL_LOADER:
                        (loader as AdvancedURLLoader).load(request.urlRequest);
                        break;
                    case NHNServiceBase.USE_ADVANCED_URL_STREAM:
                        (loader as AdvancedURLStream).load(request.urlRequest);
                        break;
                    default:
                        throw (new Error("NHNServiceBase : loaderType is not valid."));
                };
                log = (((((("\tStart request of service : RequestID - " + request.requestID.id) + " (Working : ") + numOfRequestsInWorking) + ", Waiting : ") + requestsWaitingQueue.size) + ")\n");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_INFORMATION, this, log);
            };
        }
        protected function handleEventInternal(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:NHNServiceEvent;
            switch (_arg1.type){
                case Event.COMPLETE:
                    _local2 = nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                    _local3 = new NHNServiceEvent(NHNServiceEvent.SERVICE_COMPLETE, _local2, true);
                    _local3.nhn_webapis_ns::numOfRequestsInWorking = (numOfRequestsInWorking - 1);
                    _local3.nhn_webapis_ns::numOfRequestsInWating = requestsWaitingQueue.size;
                    dispatchEvent(_local3);
                    removeRequestInternal(_local2);
                    break;
                default:
                    throw (new Error(("NHNServiceBase : Type of event " + "is not valid.")));
            };
        }
        nhn_webapis_ns function getAdvancedURLStream():AdvancedURLStream{
            return (getAdvancedURLStreamInternal());
        }
        protected function handleAdvancedLoaderEventInternal(_arg1:AdvancedLoaderEvent):void{
            var _local2:NHNServiceEvent;
            var _local4:String;
            var _local5:String;
            var _local3:RequestID = nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
            switch (_arg1.type){
                case AdvancedLoaderEvent.LOAD:
                    _local2 = new NHNServiceEvent(NHNServiceEvent.SERVICE_START, _local3, true);
                    _local2.nhn_webapis_ns::numOfRequestsInWorking = numOfRequestsInWorking;
                    _local2.nhn_webapis_ns::numOfRequestsInWating = requestsWaitingQueue.size;
                    dispatchEvent(_local2);
                    break;
                case AdvancedLoaderEvent.CLOSE:
                    _local4 = _local3.id;
                    _local2 = new NHNServiceEvent(NHNServiceEvent.SERVICE_STOP, _local3, true);
                    _local2.nhn_webapis_ns::numOfRequestsInWorking = (numOfRequestsInWorking - 1);
                    _local2.nhn_webapis_ns::numOfRequestsInWating = requestsWaitingQueue.size;
                    dispatchEvent(_local2);
                    removeRequestInternal(_local3);
                    _local5 = (((((("\tCancel request of service : RequestID - " + _local4) + " (Working : ") + numOfRequestsInWorking) + ", Waiting : ") + requestsWaitingQueue.size) + ")\n");
                    NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_INFORMATION, this, _local5);
                    break;
                default:
                    throw (new Error(("NHNServiceBase : Type of event " + "is not valid.")));
            };
        }
        public function get endPoints():Array{
            return (_endPoints.concat());
        }
        protected function releaseMemoryOfRequestItem(_arg1:RequestItem){
            var request:* = _arg1;
            var loader:* = request.nhn_webapis_ns::loader;
            if (Boolean(loader)){
                (loader as EventDispatcher).removeEventListener(Event.COMPLETE, request.handler, false);
                (loader as EventDispatcher).removeEventListener(Event.COMPLETE, handleEventInternal, false);
                (loader as EventDispatcher).removeEventListener(AdvancedLoaderEvent.LOAD, handleAdvancedLoaderEventInternal, false);
                (loader as EventDispatcher).removeEventListener(AdvancedLoaderEvent.CLOSE, handleAdvancedLoaderEventInternal, false);
                (loader as EventDispatcher).removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorEventInternal, false);
                (loader as EventDispatcher).removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityErrorEventInternal, false);
                try {
                    (loader as IReleaseMemory).releaseMemory();
                } catch(e:Error) {
                    throw (new Error(("NHNServiceBase : loader must be " + "type of IReleaseMemory.")));
                };
            };
            request.releaseMemory();
            return (loader);
        }
        nhn_webapis_ns function getAdvancedURLLoader():AdvancedURLLoader{
            return (getAdvancedURLLoaderInternal());
        }
        public function get loaderType():uint{
            return (_loaderType);
        }
        nhn_webapis_ns function addRequest(_arg1:RequestItem):void{
            var _local2:String;
            if (!Boolean(_arg1)){
                throw (new Error(("NHNServiceBase : Parameter request should " + "not be a null.")));
            };
            if (!_arg1.validate()){
                throw (new Error(("NHNServiceBase : request does not ready to " + "added in request-queue.")));
            };
            if (Boolean(requestsWorkingTableByID[_arg1.requestID.id])){
                _local2 = (("[" + _arg1.requestID.id) + "] is already added request queue.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local2, true);
            } else {
                addRequestInternal(_arg1);
            };
        }
        protected function get numOfRequestsInWorking():int{
            return ((maxNumOfRequestsInWorking - waitingLoadersToWork.length));
        }
        protected function getAdvancedURLStreamInternal():AdvancedURLStream{
            var _local1:AdvancedURLStream;
            if (Boolean((USE_ADVANCED_URL_STREAM & loaderType))){
                _local1 = new AdvancedURLStream();
            };
            return (_local1);
        }
        protected function set endPointsInternal(_arg1:Array):void{
            if (Boolean(_arg1)){
                _arg1 = _arg1.concat();
            };
            _endPoints = _arg1;
        }
        protected function handleSecurityErrorEventInternal(_arg1:SecurityErrorEvent):void{
            var _local2:NHNServiceEvent;
            var _local3:RequestID = nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
            switch (_arg1.type){
                case SecurityErrorEvent.SECURITY_ERROR:
                    _local2 = new NHNServiceEvent(NHNServiceEvent.SERVICE_SECURITY_ERROR, _local3, false);
                    dispatchEvent(_local2);
                    removeRequestInternal(_local3);
                    break;
                default:
                    throw (new Error(("NHNServiceBase : Type of event " + "is not valid.")));
            };
        }
        nhn_webapis_ns function retrieveRequestIDByLoader(_arg1):RequestID{
            var _local2:RequestItem = (requestsWorkingTableByLoader[_arg1] as RequestItem);
            return (_local2.requestID);
        }
        nhn_webapis_ns function removeRequest(_arg1:RequestID):void{
            var _local3:*;
            var _local2:RequestItem = requestsWorkingTableByID[_arg1.id];
            if (Boolean(_local2)){
                _local3 = _local2.nhn_webapis_ns::loader;
                if (Boolean(_local3)){
                    switch (loaderType){
                        case NHNServiceBase.USE_ADVANCED_URL_LOADER:
                            (_local3 as AdvancedURLLoader).close();
                            break;
                        case NHNServiceBase.USE_ADVANCED_URL_STREAM:
                            (_local3 as AdvancedURLStream).close();
                            break;
                        default:
                            throw (new Error("NHNServiceBase : loaderType is not valid."));
                    };
                };
            } else {
                removeRequestInternal(_arg1);
            };
        }
        nhn_webapis_ns function set endPoints(_arg1:Array):void{
            endPointsInternal = _arg1;
        }
        protected function handleIOErrorEventInternal(_arg1:IOErrorEvent):void{
            var _local2:NHNServiceEvent;
            var _local3:RequestID = nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
            switch (_arg1.type){
                case IOErrorEvent.IO_ERROR:
                    _local2 = new NHNServiceEvent(NHNServiceEvent.SERVICE_IO_ERROR, _local3, false);
                    dispatchEvent(_local2);
                    removeRequestInternal(_local3);
                    break;
                default:
                    throw (new Error(("NHNServiceBase : Type of event " + "is not valid.")));
            };
        }

    }
}//package com.nhn.webapis.core 
﻿package com.nhn.webapis.core {
    import flash.utils.*;

    public class RequestID {

        private static const REQUEST_ID_PREFIX:String = "REQUEST_ID";
        private static const DELIMITER:String = "#";

        private static var counter:uint = 0;

        private var _id:String;

        public function RequestID(_arg1:RequestIDEnforcer){
            if (!Boolean(_arg1)){
                throw (new Error("RequestID : Using RequestID.getRequestID() not \"new\" operation."));
            };
            _id = null;
        }
        public static function getRequestID(_arg1:String):RequestID{
            if (_arg1.indexOf(DELIMITER) >= 0){
                throw (new Error("RequestID : baseID can not use \"#\" character."));
            };
            var _local2:RequestID = new RequestID(new RequestIDEnforcer());
            var _local3:String = (((((DELIMITER + getTimer()) + DELIMITER) + int((Math.random() * 10000))) + DELIMITER) + counter++);
            _local2._id = (((REQUEST_ID_PREFIX + DELIMITER) + _arg1) + _local3);
            return (_local2);
        }
        public static function getBaseID(_arg1:RequestID):String{
            var _local3:String;
            var _local4:Array;
            var _local2:String;
            if (Boolean(_arg1)){
                _local3 = _arg1.id;
                _local4 = _local3.split(DELIMITER);
                _local2 = _local4[1];
            };
            return (_local2);
        }

        public function get id():String{
            return (_id);
        }

    }
}//package com.nhn.webapis.core 

class RequestIDEnforcer {

    public function RequestIDEnforcer(){
    }
}
﻿package com.nhn.webapis.core.methodobject {
    import flash.net.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.core.events.*;
    import com.nhn.webapis.ns.*;

    public class MethodHelperBase {

        protected static function getURLRequestHeaders(_arg1:Array):Array{
            var _local3:NameValuePair;
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:Array = [];
            var _local4:int = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local3 = (_arg1[_local5] as NameValuePair);
                if (!Boolean(_local3)){
                    throw (new Error(("MethodHelperBase : params should be a type " + "of NameValuePair.")));
                };
                _local2[_local5] = new URLRequestHeader(_local3.name, _local3.value);
                _local5++;
            };
            return (_local2);
        }
        protected static function getMemento(_arg1:Array):Array{
            var _local3:NameValuePair;
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:Array = [];
            var _local4:int = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local3 = (_arg1[_local5] as NameValuePair);
                if (!Boolean(_local3)){
                    throw (new Error(("MethodHelperBase : params should be a type " + "of NameValuePair.")));
                };
                _local2[_local5] = (_local3.clone() as NameValuePair);
                _local5++;
            };
            return (_local2);
        }
        protected static function getURLRequest(_arg1:String, _arg2:String, _arg3:Array, _arg4:URLVariables):URLRequest{
            var _local6:URLRequestHeader;
            var _local7:int;
            var _local8:int;
            var _local5:URLRequest = new URLRequest();
            if (Boolean(_arg1)){
                _local5.url = _arg1;
            } else {
                throw (new Error("MethodHelperBase : url is not valid."));
            };
            if (Boolean(_arg2)){
                _local5.method = _arg2;
            };
            if (Boolean(_arg4)){
                _local5.data = _arg4;
            };
            if (Boolean(_arg3)){
                _local7 = _arg3.length;
                _local8 = 0;
                while (_local8 < _local7) {
                    _local6 = (_arg3[_local8] as URLRequestHeader);
                    if (!Boolean(_local6)){
                        throw (new Error("MethodHelperBase : header is not valid."));
                    };
                    _local5.requestHeaders.push(_local6);
                    _local8++;
                };
            };
            return (_local5);
        }
        protected static function getURLRequestMethod(_arg1:String):String{
            switch (_arg1){
                case URLRequestMethod.GET:
                case URLRequestMethod.POST:
                    break;
                default:
                    throw (new Error("MethodHelperBase : method is not valid."));
            };
            return (_arg1);
        }
        protected static function getURL(_arg1:NHNServiceBase, _arg2:uint, _arg3:String):String{
            var _local4:String = (_arg1.endPoints[_arg2] + _arg3);
            return (_local4);
        }
        public static function defaultParseFunction(_arg1=null, _arg2=null):ReturnObjectOfParseFunction{
            return (new ReturnObjectOfParseFunction(true, null));
        }
        public static function convertArrayOfMementoToObject(_arg1:Array):Object{
            var _local3:NameValuePair;
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:Object = {};
            var _local4:int = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local3 = (_arg1[_local5] as NameValuePair);
                _local2[_local3.name] = _local3.value;
                _local5++;
            };
            return (_local2);
        }
        protected static function getURLVariables(_arg1:Array):URLVariables{
            var _local3:NameValuePair;
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:URLVariables = new URLVariables();
            var _local4:int = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local3 = (_arg1[_local5] as NameValuePair);
                if (!Boolean(_local3)){
                    throw (new Error(("MethodHelperBase : params should be a type " + "of NameValuePair.")));
                };
                _local2[_local3.name] = _local3.value;
                _local5++;
            };
            return (_local2);
        }

        nhn_webapis_ns function requestMethod(_arg1:NHNServiceBase, _arg2:RequestID, _arg3:Function=null, _arg4:uint=0, _arg5:String="", _arg6:String="GET", _arg7:Array=null, _arg8:Array=null, _arg9:Array=null):void{
            requestMethodInternal(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9);
        }
        protected function parseResponse(_arg1:String, _arg2:Function, _arg3=null):ReturnObjectOfParseFunction{
            return (_arg2(_arg1, _arg3));
        }
        protected function parseAndDispatchInternal(_arg1:NHNServiceBase, _arg2:String, _arg3:NHNServiceEvent, _arg4:Function=null, _arg5=null):void{
            var _local6:ReturnObjectOfParseFunction = parseResponse(_arg2, ((Boolean(_arg4)) ? _arg4 : MethodHelperBase.defaultParseFunction), _arg5);
            if (!Boolean(_arg3)){
                throw (new Error("MethodHelperBase : resultEvent must not be a null."));
            };
            _arg3.nhn_webapis_ns::success = _local6.success;
            _arg3.nhn_webapis_ns::serviceObject = _local6.serviceObject;
            _arg1.dispatchEvent(_arg3);
        }
        protected function requestMethodInternal(_arg1:NHNServiceBase, _arg2:RequestID, _arg3:Function, _arg4:uint=0, _arg5:String="", _arg6:String="GET", _arg7:Array=null, _arg8:Array=null, _arg9:Array=null):void{
            var _local10:URLRequest = getURLRequest(getURL(_arg1, _arg4, _arg5), getURLRequestMethod(_arg6), getURLRequestHeaders(_arg7), getURLVariables(_arg9));
            var _local11:RequestItem = new RequestItem(_arg2, _local10, _arg3, getMemento(_arg8));
            var _local12 = _arg1;
            _local12.nhn_webapis_ns::addRequest(_local11);
        }
        nhn_webapis_ns function parseAndDispatch(_arg1:NHNServiceBase, _arg2:String, _arg3:NHNServiceEvent, _arg4:Function, _arg5=null):void{
            parseAndDispatchInternal(_arg1, _arg2, _arg3, _arg4, _arg5);
        }

    }
}//package com.nhn.webapis.core.methodobject 
﻿package com.nhn.webapis.core.methodobject {
    import com.nhn.webapis.core.*;

    public class MethodObjectBase {

        protected var service:NHNServiceBase;

        public function MethodObjectBase(_arg1:NHNServiceBase){
            if (!Boolean(_arg1)){
                throw (new Error("MethodObjectBase : service must be not a null."));
            };
            this.service = _arg1;
        }
        protected function get methodHelper():MethodHelperBase{
            return (null);
        }

    }
}//package com.nhn.webapis.core.methodobject 
﻿package com.nhn.webapis.core.methodobject {
    import com.nhn.webapis.core.serviceobject.*;

    public class ReturnObjectOfParseFunction {

        protected var _success:Boolean;
        protected var _serviceObject:ServiceObjectBase;

        public function ReturnObjectOfParseFunction(_arg1:Boolean, _arg2:ServiceObjectBase){
            _success = _arg1;
            _serviceObject = _arg2;
        }
        public function get success():Boolean{
            return (_success);
        }
        public function get serviceObject():ServiceObjectBase{
            return (_serviceObject);
        }

    }
}//package com.nhn.webapis.core.methodobject 
﻿package com.nhn.webapis.core {
    import com.nhn.core.interfaces.*;

    public class NameValuePair implements ICloneable, IReleaseMemory {

        protected var _name:String;
        protected var _value;

        public function NameValuePair(_arg1:String=null, _arg2=null){
            this.name = _arg1;
            this.value = _arg2;
        }
        public function set value(_arg1):void{
            _value = _arg1;
        }
        public function releaseMemory():void{
            name = null;
            value = null;
        }
        public function get name():String{
            return (_name);
        }
        public function clone(){
            var _local1:NameValuePair = new NameValuePair(name, value);
            return (_local1);
        }
        public function get value(){
            return (_value);
        }
        public function toString():String{
            return (((("[NameValuePair] name : " + name) + ", value : ") + value));
        }
        public function set name(_arg1:String):void{
            _name = _arg1;
        }

    }
}//package com.nhn.webapis.core 
﻿package com.nhn.webapis.core {
    import flash.net.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.webapis.ns.*;

    public class RequestItem implements IReleaseMemory {

        protected var _handler:Function;
        protected var _requestID:RequestID;
        nhn_webapis_ns var loader;
        protected var _memento:Array;
        protected var _urlRequest:URLRequest;

        public function RequestItem(_arg1:RequestID, _arg2:URLRequest, _arg3:Function, _arg4:Array=null){
            _requestID = _arg1;
            _urlRequest = _arg2;
            _handler = _arg3;
            nhn_webapis_ns::memento = _arg4;
            nhn_webapis_ns::loader = null;
        }
        public function get urlRequest():URLRequest{
            return (_urlRequest);
        }
        nhn_webapis_ns function set memento(_arg1:Array):void{
            var _local2:int;
            var _local3:int;
            if (!Boolean(_arg1)){
                _memento = null;
            } else {
                _local2 = _arg1.length;
                _local3 = 0;
                while (_local3 < _local2) {
                    if (!Boolean((_arg1[_local3] is NameValuePair))){
                        throw (new Error(("RequestItem : Item of memeto must be " + "type of NameValuePair.")));
                    };
                    _local3++;
                };
                _memento = _arg1;
            };
        }
        public function validate():Boolean{
            if (((((Boolean(requestID)) && (Boolean(urlRequest)))) && (Boolean(handler)))){
                return (true);
            };
            return (false);
        }
        public function releaseMemory():void{
            _requestID = null;
            _urlRequest = null;
            _handler = null;
            nhn_webapis_ns::memento = null;
            nhn_webapis_ns::loader = null;
        }
        public function get handler():Function{
            return (_handler);
        }
        public function get requestID():RequestID{
            return (_requestID);
        }
        public function get memento():Array{
            return (_memento);
        }

    }
}//package com.nhn.webapis.core 
﻿package com.nhn.webapis.core.events {
    import flash.events.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.core.serviceobject.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.webapis.ns.*;

    public class NHNServiceEvent extends Event implements IReleaseMemory {

        public static const SERVICE_COMPLETE:String = "NHNSERVICEEVENT_SERVICE_COMPLETE";
        public static const SERVICE_START:String = "NHNSERVICEEVENT_SERVICE_START";
        public static const SERVICE_IO_ERROR:String = "NHNSERVICEEVENT_SERVICE_IO_ERROR";
        public static const SERVICE_SECURITY_ERROR:String = "NHNSERVICEEVENT_SERVICE_SECURITY_ERROR";
        public static const SERVICE_STOP:String = "NHNSERVICEEVENT_SERVICE_STOP";

        protected var _success:Boolean;
        protected var _numOfRequestsInWorking:int;
        protected var _serviceObject:ServiceObjectBase;
        protected var _requestID:RequestID;
        protected var _numOfRequestsInWating:int;

        public function NHNServiceEvent(_arg1:String, _arg2:RequestID, _arg3:Boolean=true, _arg4:ServiceObjectBase=null, _arg5:Boolean=false, _arg6:Boolean=false){
            super(_arg1, _arg5, _arg6);
            nhn_webapis_ns::requestID = _arg2;
            nhn_webapis_ns::success = _arg3;
            nhn_webapis_ns::serviceObject = _arg4;
        }
        public function get success():Boolean{
            return (_success);
        }
        nhn_webapis_ns function set success(_arg1:Boolean):void{
            _success = _arg1;
        }
        nhn_webapis_ns function set requestID(_arg1:RequestID):void{
            _requestID = _arg1;
        }
        override public function clone():Event{
            var _local1:NHNServiceEvent = new NHNServiceEvent(type, requestID, success, serviceObject, bubbles, cancelable);
            _local1.nhn_webapis_ns::numOfRequestsInWorking = numOfRequestsInWorking;
            _local1.nhn_webapis_ns::numOfRequestsInWating = numOfRequestsInWating;
            return (_local1);
        }
        public function get serviceObject():ServiceObjectBase{
            return (_serviceObject);
        }
        nhn_webapis_ns function set numOfRequestsInWorking(_arg1:int):void{
            _numOfRequestsInWorking = _arg1;
        }
        override public function toString():String{
            return (formatToString("NHNServiceEvent", "type", "bubbles", "cancelable", "requestID", "success", "serviceObject", "numOfRequestsInWorking", "numOfRequestsInWating"));
        }
        nhn_webapis_ns function set serviceObject(_arg1:ServiceObjectBase):void{
            _serviceObject = _arg1;
        }
        public function get requestID():RequestID{
            return (_requestID);
        }
        public function get numOfRequestsInWorking():int{
            return (_numOfRequestsInWorking);
        }
        public function releaseMemory():void{
            _serviceObject = null;
        }
        nhn_webapis_ns function set numOfRequestsInWating(_arg1:int):void{
            _numOfRequestsInWating = _arg1;
        }
        public function get numOfRequestsInWating():int{
            return (_numOfRequestsInWating);
        }

    }
}//package com.nhn.webapis.core.events 
﻿package com.nhn.webapis {

    public class NHNWebAPI {

        public static const RELEASE:uint = 65521;
        public static const LOG_STATUS_WARNING:uint = 1048561;
        public static const DEBUG:uint = 65520;
        public static const LOG_STATUS_ERROR:uint = 1048562;
        public static const LOG_STATUS_INFORMATION:uint = 1048560;

        public static var _mode:uint = 65520;

        public static function get mode():uint{
            return (_mode);
        }
        public static function set mode(_arg1:uint):void{
            switch (_arg1){
                case DEBUG:
                case RELEASE:
                    _mode = _arg1;
                    break;
                default:
                    throw (new Error("NHNWebAPI : mode is not valid."));
            };
        }
        public static function printLog(_arg1:uint, _arg2, _arg3:String, _arg4:Boolean=false):void{
            var _local5:String;
            if (((_arg4) || ((mode === DEBUG)))){
                _local5 = "";
                switch (_arg1){
                    case LOG_STATUS_INFORMATION:
                        _local5 = "infomation";
                        break;
                    case LOG_STATUS_WARNING:
                        _local5 = "warning";
                        break;
                    case LOG_STATUS_ERROR:
                        _local5 = "error";
                        break;
                };
                trace(((("NHNWebAPI : " + _arg2) + " : ") + _local5));
                trace(_arg3);
            };
        }

    }
}//package com.nhn.webapis 
﻿package com.nhn.webapis.ns {

    public namespace nhn_webapis_ns = "http://www.nhncorp.com/nhn/webapis/ns";
}//package com.nhn.webapis.ns 
﻿package com.nhn.webapis.ns {

    public namespace nhn_music_ns = "http://www.nhncorp.com/nhn/webapis/music/ns";
}//package com.nhn.webapis.ns 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.webapis.ns.*;

    public class Article extends MusicServiceObjectBase {

        protected var _userid:String;
        protected var _mylist_seq:String;
        protected var _link:String;
        protected var _title:String;
        protected var _pcolor:String;
        protected var _ptype:String;
        protected var _linkyn:String;
        protected var _songlist:SongList;

        public function Article(_arg1:String=null, _arg2:String=null, _arg3:String=null, _arg4:String=null, _arg5:String=null, _arg6:String=null, _arg7:String=null, _arg8:SongList=null, _arg9:Boolean=true){
            if (_arg9){
                if (Boolean(_arg8)){
                    _arg8 = (_arg8.clone() as SongList);
                };
            };
            nhn_music_ns::mylist_seq = _arg1;
            nhn_music_ns::userid = _arg2;
            nhn_music_ns::title = _arg3;
            nhn_music_ns::ptype = _arg4;
            nhn_music_ns::pcolor = _arg5;
            nhn_music_ns::linkyn = _arg6;
            nhn_music_ns::link = _arg7;
            nhn_music_ns::songlist = _arg8;
        }
        public function get songlist():SongList{
            return (_songlist);
        }
        nhn_music_ns function set userid(_arg1:String):void{
            _userid = _arg1;
        }
        public function get linkyn():String{
            return (_linkyn);
        }
        nhn_music_ns function set mylist_seq(_arg1:String):void{
            _mylist_seq = _arg1;
        }
        public function get title():String{
            return (_title);
        }
        nhn_music_ns function set ptype(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                if (!WebPlayerCoreProperties.validatePlayerTypeAccordingToContainerType(_arg1, WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING)){
                    _arg1 = WebPlayerCoreProperties.PLAYER_TYPE_POSTING_DEFAULT;
                };
            };
            _ptype = _arg1;
        }
        override public function clone(){
            return (new Article(mylist_seq, userid, title, ptype, pcolor, linkyn, link, songlist, true));
        }
        nhn_music_ns function set linkyn(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _linkyn = _arg1;
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Article;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Article);
                if (((((((((((((((((((!(Boolean(_local4))) || (!((_local4.mylist_seq === mylist_seq))))) || (!((_local4.userid === userid))))) || (!((_local4.title === title))))) || (!((_local4.ptype === ptype))))) || (!((_local4.pcolor === pcolor))))) || (!((_local4.linkyn === linkyn))))) || (!((_local4.link === link))))) || (!((Boolean(_local4.songlist) === Boolean(songlist)))))) || (((Boolean(_local4.songlist)) ? !(_local4.songlist.compare(songlist, _arg2)) : false)))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        public function get userid():String{
            return (_userid);
        }
        override public function releaseMemory():void{
            songlist.releaseMemory();
            nhn_music_ns::mylist_seq = null;
            nhn_music_ns::userid = null;
            nhn_music_ns::title = null;
            nhn_music_ns::ptype = null;
            nhn_music_ns::pcolor = null;
            nhn_music_ns::linkyn = null;
            nhn_music_ns::link = null;
            nhn_music_ns::songlist = null;
        }
        public function get ptype():String{
            return (_ptype);
        }
        nhn_music_ns function set pcolor(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                if (!WebPlayerCoreProperties.validateSkin(_arg1)){
                    _arg1 = WebPlayerCoreProperties.SKIN_TYPE_COLOR_DEFAULT;
                };
            };
            _pcolor = _arg1;
        }
        nhn_music_ns function set title(_arg1:String):void{
            _title = _arg1;
        }
        public function get mylist_seq():String{
            return (_mylist_seq);
        }
        public function get pcolor():String{
            return (_pcolor);
        }
        nhn_music_ns function set link(_arg1:String):void{
            _link = _arg1;
        }
        nhn_music_ns function set songlist(_arg1:SongList):void{
            _songlist = _arg1;
        }
        public function get link():String{
            return (_link);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Article]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[mylist_seq] : ") + ((Boolean(mylist_seq)) ? mylist_seq : "has no mylist_seq.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[userid] : ") + ((Boolean(userid)) ? userid : "has no userid.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[title] : ") + ((Boolean(title)) ? title : "has no title.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[ptype] : ") + ((Boolean(ptype)) ? ptype : "has no ptype.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[pcolor] : ") + ((Boolean(pcolor)) ? pcolor : "has no pcolor.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[linkyn] : ") + ((Boolean(linkyn)) ? linkyn : "has no linkyn.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[link] : ") + ((Boolean(link)) ? link : "has no link.")));
            _local3 = (_local3 + ("\n" + ((Boolean(songlist)) ? songlist.dump((_arg1 + 1)) : (_local2 + "\t[songlist] : has no songlist."))));
            return (_local3);
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.webapis.ns.*;

    public class Artist extends MusicServiceObjectBase {

        public static const ARTIST_ID_UNDEFINED:String = "0";
        public static const ARTIST_NAME_VARIOUS_ARTIST:String = "Various Artist";

        protected var _artistid:String;
        protected var _artistname:String;

        public function Artist(_arg1:String=null, _arg2:String=null){
            nhn_music_ns::artistid = _arg1;
            nhn_music_ns::artistname = _arg2;
        }
        nhn_music_ns function set artistid(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = Artist.ARTIST_ID_UNDEFINED;
                };
            };
            _artistid = _arg1;
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Artist;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Artist);
                if (((((!(Boolean(_local4))) || (!((_local4.artistid === artistid))))) || (!((_local4.artistname === artistname))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        override public function releaseMemory():void{
            nhn_music_ns::artistid = null;
            nhn_music_ns::artistname = null;
        }
        public function get artistid():String{
            return (_artistid);
        }
        nhn_music_ns function set artistname(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = Artist.ARTIST_NAME_VARIOUS_ARTIST;
                };
            };
            _artistname = _arg1;
        }
        override public function clone(){
            return (new Artist(artistid, artistname));
        }
        public function get artistname():String{
            return (_artistname);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Artist]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[artistid] : ") + ((Boolean(artistid)) ? artistid : "has no artistid.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[artistname] : ") + ((Boolean(artistname)) ? artistname : "has no artistname.")));
            return (_local3);
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import flash.geom.*;
    import com.nhn.webapis.ns.*;

    public class PromotionLink extends MusicServiceObjectBase {

        protected var _linkbounds:Rectangle;
        protected var _linkurl:String;

        public function PromotionLink(_arg1:String=null, _arg2:Rectangle=null){
            nhn_music_ns::linkurl = _arg1;
            nhn_music_ns::linkbounds = _arg2;
        }
        override public function clone(){
            return (new PromotionLink(linkurl, linkbounds.clone()));
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:PromotionLink;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as PromotionLink);
                if (((((!(Boolean(_local4))) || (!((_local4.linkurl === linkurl))))) || (!(_local4.linkbounds.equals(linkbounds))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        override public function releaseMemory():void{
            nhn_music_ns::linkurl = null;
            nhn_music_ns::linkbounds = null;
        }
        nhn_music_ns function set linkurl(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = null;
                };
            };
            _linkurl = _arg1;
        }
        public function get linkbounds():Rectangle{
            return (_linkbounds);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[PromotionLink]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[linkurl] : ") + ((Boolean(linkurl)) ? linkurl : "has no linkurl.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[linkbounds] : ") + ((Boolean(linkbounds)) ? linkbounds.toString() : "has no linkbounds.")));
            return (_local3);
        }
        public function get linkurl():String{
            return (_linkurl);
        }
        nhn_music_ns function set linkbounds(_arg1:Rectangle):void{
            if (Boolean(_arg1)){
            };
            _linkbounds = _arg1;
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.core.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.webapis.ns.*;

    public class MusicServiceResult extends MusicServiceObjectBase {

        protected var _message:String;
        protected var _resultcode:String;
        protected var _resultvalue:MusicServiceObjectBase;
        protected var _optionvalue;

        public function MusicServiceResult(_arg1:String=null, _arg2:String=null, _arg3:MusicServiceObjectBase=null, _arg4=null){
            nhn_music_ns::resultcode = _arg1;
            nhn_music_ns::message = _arg2;
            nhn_music_ns::resultvalue = _arg3;
            nhn_music_ns::optionvalue = _arg4;
        }
        public static function checkSuccessByResultCode(_arg1:String):Boolean{
            var _local2:Boolean;
            switch (_arg1){
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_000:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_001:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                    _local2 = true;
                    break;
                default:
                    _local2 = false;
            };
            return (_local2);
        }

        public function get success():Boolean{
            var _local1:Boolean;
            if (!Boolean(resultcode)){
                _local1 = false;
            } else {
                _local1 = MusicServiceResult.checkSuccessByResultCode(resultcode);
            };
            return (_local1);
        }
        override public function clone(){
            var _local1:* = (((this.optionvalue is ICloneable)) ? (this.optionvalue as ICloneable).clone() : this.optionvalue);
            return (new MusicServiceResult(resultcode, message, resultvalue.clone(), _local1));
        }
        public function get message():String{
            return (_message);
        }
        nhn_music_ns function set message(_arg1:String):void{
            _message = _arg1;
        }
        nhn_music_ns function set resultvalue(_arg1:MusicServiceObjectBase):void{
            _resultvalue = _arg1;
        }
        public function get resultcode():String{
            return (_resultcode);
        }
        nhn_music_ns function set resultcode(_arg1:String):void{
            _resultcode = _arg1;
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[MusicServiceResult]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[success] : ") + success));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[resultcode] : ") + ((Boolean(resultcode)) ? resultcode : "has no resultcode.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[message] : ") + ((Boolean(message)) ? message : "has no message.")));
            _local3 = (_local3 + ("\n" + ((Boolean(resultvalue)) ? resultvalue.dump((_arg1 + 1)) : (_local2 + "\t[resultvalue] : has no resultvalue."))));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[optionvalue] : ") + ((Boolean(optionvalue)) ? optionvalue : "has no optionvalue.")));
            _local3 = (_local3 + "\n");
            return (_local3);
        }
        override public function releaseMemory():void{
            resultvalue.releaseMemory();
            if ((optionvalue is IReleaseMemory)){
                (optionvalue as IReleaseMemory).releaseMemory();
            };
            nhn_music_ns::resultcode = null;
            nhn_music_ns::message = null;
            nhn_music_ns::resultvalue = null;
            nhn_music_ns::optionvalue = null;
        }
        nhn_music_ns function set optionvalue(_arg1):void{
            _optionvalue = _arg1;
        }
        public function get resultvalue():MusicServiceObjectBase{
            return (_resultvalue);
        }
        public function get optionvalue(){
            return (_optionvalue);
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {

    public class MusicServiceObjectListBase extends MusicServiceObjectBase {

        protected var _length:int;
        protected var listDirty:Boolean;
        protected var _list:Array;

        public function MusicServiceObjectListBase(_arg1:Array=null, _arg2:Boolean=true){
            var _local3:int;
            var _local4:int;
            super();
            listDirty = true;
            if (((Boolean(_arg1)) && ((_arg1.length > 0)))){
                _local3 = _arg1.length;
                _local4 = 0;
                while (_local4 < _local3) {
                    addItem((_arg1[_local4] as MusicServiceObjectBase), _arg2);
                    _local4++;
                };
            };
        }
        public function retrieveItemAt(_arg1:int, _arg2:Boolean=false):MusicServiceObjectBase{
            var _local4:MusicServiceObjectBase;
            var _local3:MusicServiceObjectBase;
            if ((((_arg1 >= 0)) && ((_arg1 < length)))){
                _local4 = (_list[_arg1] as MusicServiceObjectBase);
                _local3 = ((_arg2) ? (_local4.clone() as MusicServiceObjectBase) : _local4);
            };
            return (_local3);
        }
        final protected function indexOf(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):int{
            var _local4:int;
            var _local3 = -1;
            if (Boolean(_list)){
                _local4 = 0;
                while (_local4 < length) {
                    if (_arg1.compare((_list[_local4] as MusicServiceObjectBase), _arg2)){
                        _local3 = _local4;
                        break;
                    };
                    _local4++;
                };
            };
            return (_local3);
        }
        public function removeItemAt(_arg1:int):MusicServiceObjectBase{
            listDirty = true;
            var _local2:MusicServiceObjectBase;
            if ((((_arg1 >= 0)) && ((_arg1 < length)))){
                _local2 = (_list.splice(_arg1, 1)[0] as MusicServiceObjectBase);
            };
            return (_local2);
        }
        final protected function lastIndexOf(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):int{
            var _local3 = -1;
            if (Boolean(_list)){
                _local3 = this.length;
                while (_local3--) {
                    if (_arg1.compare((_list[_local3] as MusicServiceObjectBase), _arg2)){
                        break;
                    };
                };
            };
            return (_local3);
        }
        public function addItem(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):MusicServiceObjectBase{
            listDirty = true;
            var _local3:MusicServiceObjectBase;
            if (Boolean(_arg1)){
                _local3 = ((_arg2) ? _arg1.clone() : _arg1);
                if (!Boolean(_list)){
                    _list = [];
                };
                _list.push(_local3);
            };
            return (_local3);
        }
        override public function clone(){
            return (new MusicServiceObjectListBase(_list, true));
        }
        public function get list():Array{
            var _local1:Array;
            if (Boolean(_list)){
                _local1 = _list.concat();
            };
            return (_local1);
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:MusicServiceObjectListBase;
            var _local5:int;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as MusicServiceObjectListBase);
                if (((Boolean(_local4)) && ((length === _local4.length)))){
                    _local3 = true;
                    _local5 = 0;
                    while (_local5 < length) {
                        if (!(_list[_local5] as MusicServiceObjectBase).compare(_local4._list[_local5], _arg2)){
                            _local3 = false;
                            break;
                        };
                        _local5++;
                    };
                };
            };
            return (_local3);
        }
        public function get length():int{
            if (listDirty){
                if (Boolean(_list)){
                    _length = _list.length;
                } else {
                    _length = -1;
                };
                listDirty = false;
            };
            return (_length);
        }
        override public function releaseMemory():void{
            var _local1:MusicServiceObjectBase;
            listDirty = true;
            if (!Boolean(_list)){
                while (Boolean((_local1 = (_list.pop() as MusicServiceObjectBase)))) {
                    _local1.releaseMemory();
                };
            };
            _list = null;
        }
        public function removeItemAll():Array{
            listDirty = true;
            var _local1:Array = _list;
            _list = null;
            return (_local1);
        }
        protected function get itemType():String{
            return ("MusicServiceObjectBase");
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (((_local2 + "[") + listType) + "]");
            if (length < 0){
                _local3 = (_local3 + " : has released from memory.");
            } else {
                _local3 = (_local3 + ((((" : has " + length) + " items type of ") + itemType) + "."));
            };
            var _local4:int;
            while (_local4 < length) {
                _local3 = (_local3 + ("\n" + (_list[_local4] as MusicServiceObjectBase).dump((_arg1 + 1))));
                _local4++;
            };
            return (_local3);
        }
        public function retrieveItem(_arg1:MusicServiceObjectBase, _arg2:Boolean=true, _arg3:Boolean=false):MusicServiceObjectBase{
            return (retrieveItemAt(indexOf(_arg1, _arg2), _arg3));
        }
        protected function get listType():String{
            return ("MusicServiceObjectListBase");
        }
        public function removeItem(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):MusicServiceObjectBase{
            return (removeItemAt(indexOf(_arg1, _arg2)));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {

    public class FMSConfiguration extends MusicServiceObjectBase {

        protected static var instance:FMSConfiguration;

        private var _port:int;
        private var _application:String;
        private var _encoding:String;
        private var _host:String;
        private var _protocol:String;

        public function FMSConfiguration(_arg1:FMSConfigurationSingletonEnforcer, _arg2:String, _arg3:int, _arg4:String, _arg5:String, _arg6:String){
            if (!Boolean(_arg1)){
                throw (new Error(("FMSConfiguration : FMSConfiguration is " + "singleton-class, so you should run FMSConfiguration.getInstance().")));
            };
            _protocol = _arg2;
            _port = _arg3;
            _host = _arg4;
            _application = _arg5;
            _encoding = _arg6;
        }
        public static function getInstance(_arg1:String=null, _arg2:int=-1, _arg3:String=null, _arg4:String=null, _arg5:String=null):FMSConfiguration{
            if (!Boolean(instance)){
                instance = new FMSConfiguration(new FMSConfigurationSingletonEnforcer(), _arg1, _arg2, _arg3, _arg4, _arg5);
            };
            return (instance);
        }
        public static function releaseInstance():void{
            if (Boolean(instance)){
                instance.releaseMemory();
                instance = null;
            };
        }

        public function get port():int{
            return (_port);
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:FMSConfiguration;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as FMSConfiguration);
                if (((((((((((!(Boolean(_local4))) || (!((_local4.protocol === protocol))))) || (!((_local4.port === port))))) || (!((_local4.host === host))))) || (!((_local4.application === application))))) || (!((_local4.encoding === encoding))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        public function get host():String{
            return (_host);
        }
        override public function releaseMemory():void{
            _protocol = null;
            _port = -1;
            _host = null;
            _application = null;
            _encoding = null;
        }
        public function get application():String{
            return (_application);
        }
        public function get encoding():String{
            return (_encoding);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[FMSConfiguration]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[protocol] : ") + ((Boolean(protocol)) ? protocol : "has no protocol.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[port] : ") + ((Boolean((0 < port))) ? port : "has no port.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[host] : ") + ((Boolean(host)) ? host : "has no host.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[application] : ") + ((Boolean(application)) ? application : "has no application.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[encoding] : ") + ((Boolean(encoding)) ? encoding : "has no encoding.")));
            return (_local3);
        }
        public function get protocol():String{
            return (_protocol);
        }
        override public function clone(){
            throw (new Error(("FMSConfiguration : FMSConfiguration is " + "singleton-class, so You can not clone it.")));
        }

    }
}//package com.nhn.webapis.music.serviceobject 

class FMSConfigurationSingletonEnforcer {

    public function FMSConfigurationSingletonEnforcer(){
    }
}
﻿package com.nhn.webapis.music.serviceobject {

    public class PromotionLinkList extends MusicServiceObjectListBase {

        public function PromotionLinkList(_arg1:Array=null, _arg2:Boolean=true){
            super(_arg1, _arg2);
        }
        override public function addItem(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):MusicServiceObjectBase{
            if ((_arg1 is PromotionLink)){
                return (super.addItem(_arg1, _arg2));
            };
            throw (new Error(((listType + " : type of item is not ") + itemType)));
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local3:Boolean;
            var _local4:PromotionLinkList = (_arg1 as PromotionLinkList);
            if (Boolean(_local4)){
                _local3 = super.compare(_local4, _arg2);
            };
            return (_local3);
        }
        override protected function get listType():String{
            return ("PromotionLinkList");
        }
        override protected function get itemType():String{
            return ("PromotionLink");
        }
        override public function clone(){
            return (new PromotionLinkList(_list, true));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {

    public class ArtistList extends MusicServiceObjectListBase {

        public function ArtistList(_arg1:Array=null, _arg2:Boolean=true){
            super(_arg1, _arg2);
        }
        override public function addItem(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):MusicServiceObjectBase{
            if ((_arg1 is Artist)){
                return (super.addItem(_arg1, _arg2));
            };
            throw (new Error(((listType + " : type of item is not ") + itemType)));
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local3:Boolean;
            var _local4:ArtistList = (_arg1 as ArtistList);
            if (Boolean(_local4)){
                _local3 = super.compare(_local4, _arg2);
            };
            return (_local3);
        }
        override protected function get listType():String{
            return ("ArtistList");
        }
        override protected function get itemType():String{
            return ("Artist");
        }
        override public function clone(){
            return (new ArtistList(_list, true));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.webapis.ns.*;

    public class Authorization extends MusicServiceObjectBase {

        protected static var instance:Authorization;

        protected var _encuserid:String;
        protected var _cookie:String;
        protected var _islogin:String;
        protected var _isadult:String;
        protected var _hasticket:String;
        protected var _isteam:String;

        public function Authorization(_arg1:AuthorizationSingletonEnforcer, _arg2:String, _arg3:String, _arg4:String, _arg5:String, _arg6:String, _arg7:String){
            if (!Boolean(_arg1)){
                throw (new Error(("Authorization : Authorization is singleton-class, " + "so you should run Authorization.getInstance().")));
            };
            nhn_music_ns::cookie = _arg2;
            nhn_music_ns::islogin = _arg3;
            nhn_music_ns::hasticket = _arg4;
            nhn_music_ns::isadult = _arg5;
            nhn_music_ns::isteam = _arg6;
            nhn_music_ns::encuserid = _arg7;
        }
        public static function getInstance(_arg1:String=null, _arg2:String=null, _arg3:String=null, _arg4:String=null, _arg5:String=null, _arg6:String=null):Authorization{
            if (!Boolean(instance)){
                instance = new Authorization(new AuthorizationSingletonEnforcer(), _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            };
            return (instance);
        }
        public static function releaseInstance():void{
            if (Boolean(instance)){
                instance.releaseMemory();
                instance = null;
            };
        }

        nhn_music_ns function set cookie(_arg1:String):void{
            if (_arg1 !== null){
                switch (_arg1){
                    case "":
                        _arg1 = "N";
                        break;
                };
            };
            _cookie = _arg1;
        }
        nhn_music_ns function set hasticket(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _hasticket = _arg1;
        }
        public function get isteam():String{
            return (_isteam);
        }
        public function get encuserid():String{
            return (_encuserid);
        }
        public function get isadult():String{
            return (_isadult);
        }
        nhn_music_ns function set encuserid(_arg1:String):void{
            _encuserid = _arg1;
        }
        nhn_music_ns function set isteam(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _isteam = _arg1;
        }
        nhn_music_ns function set isadult(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _isadult = _arg1;
        }
        public function get cookie():String{
            return (_cookie);
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Authorization;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Authorization);
                if (((((((((((((!(Boolean(_local4))) || (!((_local4.cookie === cookie))))) || (!((_local4.islogin === islogin))))) || (!((_local4.hasticket === hasticket))))) || (!((_local4.isadult === isadult))))) || (!((_local4.isteam === isteam))))) || (!((_local4.encuserid === encuserid))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        public function get hasticket():String{
            return (_hasticket);
        }
        override public function releaseMemory():void{
            nhn_music_ns::cookie = null;
            nhn_music_ns::islogin = null;
            nhn_music_ns::hasticket = null;
            nhn_music_ns::isadult = null;
            nhn_music_ns::isteam = null;
            nhn_music_ns::encuserid = null;
        }
        override public function clone(){
            throw (new Error(("Authorization : Authorization is " + "singleton-class, so You can not clone it.")));
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Authorization]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[cookie] : ") + ((Boolean(cookie)) ? cookie : "has no cookie.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[islogin] : ") + ((Boolean(islogin)) ? islogin : "has no islogin.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[hasticket] : ") + ((Boolean(hasticket)) ? hasticket : "has no hasticket.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[isadult] : ") + ((Boolean(isadult)) ? isadult : "has no isadult.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[isteam] : ") + ((Boolean(isteam)) ? isteam : "has no isteam.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[encuserid] : ") + ((Boolean(encuserid)) ? encuserid : "has no encuserid.")));
            return (_local3);
        }
        nhn_music_ns function set islogin(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _islogin = _arg1;
        }
        public function get islogin():String{
            return (_islogin);
        }

    }
}//package com.nhn.webapis.music.serviceobject 

class AuthorizationSingletonEnforcer {

    public function AuthorizationSingletonEnforcer(){
    }
}
﻿package com.nhn.webapis.music.serviceobject {

    public class SongList extends MusicServiceObjectListBase {

        public function SongList(_arg1:Array=null, _arg2:Boolean=true){
            super(_arg1, _arg2);
        }
        override public function addItem(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):MusicServiceObjectBase{
            if ((_arg1 is Song)){
                return (super.addItem(_arg1, _arg2));
            };
            throw (new Error(((listType + " : type of item is not ") + itemType)));
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local3:Boolean;
            var _local4:SongList = (_arg1 as SongList);
            if (Boolean(_local4)){
                _local3 = super.compare(_local4, _arg2);
            };
            return (_local3);
        }
        override protected function get listType():String{
            return ("SongList");
        }
        override protected function get itemType():String{
            return ("Song");
        }
        override public function clone(){
            return (new SongList(_list, true));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.webapis.ns.*;

    public class Track extends MusicServiceObjectBase {

        protected var _trackid:String;
        protected var _tracktitle:String;

        public function Track(_arg1:String=null, _arg2:String=null){
            nhn_music_ns::trackid = _arg1;
            nhn_music_ns::tracktitle = _arg2;
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Track;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Track);
                if (((((!(Boolean(_local4))) || (!((_local4.trackid === trackid))))) || (!((_local4.tracktitle === tracktitle))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        public function get trackid():String{
            return (_trackid);
        }
        override public function releaseMemory():void{
            nhn_music_ns::trackid = null;
            nhn_music_ns::tracktitle = null;
        }
        nhn_music_ns function set trackid(_arg1:String):void{
            if (_arg1 !== null){
                if (!WebPlayerCoreProperties.validateTrackID(_arg1)){
                    throw (new Error((("Track : " + "id is not valid, id = ") + _arg1)));
                };
            };
            _trackid = _arg1;
        }
        public function get tracktitle():String{
            return (_tracktitle);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Track]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[trackid] : ") + ((Boolean(trackid)) ? trackid : "has no trackid.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[tracktitle] : ") + ((Boolean(tracktitle)) ? tracktitle : "has no tracktitle.")));
            return (_local3);
        }
        nhn_music_ns function set tracktitle(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = "일시적 오류로 곡명을 불러오지 못하였습니다";
                };
            };
            _tracktitle = _arg1;
        }
        override public function clone(){
            return (new Track(trackid, tracktitle));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.webapis.core.serviceobject.*;

    public class MusicServiceObjectBase extends ServiceObjectBase {

        override public function dump(_arg1:int=0):String{
            throw (new Error(("MusicServiceObjectBase : You should implements " + "dump method in sub-classes.")));
        }
        public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            throw (new Error(("MusicServiceObjectBase : You should implements " + "compare method in sub-classes.")));
        }
        override public function releaseMemory():void{
            throw (new Error(("MusicServiceObjectBase : You should implements " + "releaseMemory method in sub-classes.")));
        }
        override public function clone(){
            throw (new Error(("MusicServiceObjectBase : You should implements " + "clone method in sub-classes.")));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import flash.geom.*;
    import com.nhn.webapis.ns.*;

    public class Promotion extends MusicServiceObjectBase {

        protected static var instance:Promotion;

        protected var _imageurl:String;
        protected var _persistence:uint;
        protected var _closebuttonbounds:Rectangle;
        protected var _ispromotion:String;
        protected var _promotionlinklist:PromotionLinkList;
        protected var _persistenceclosebuttonbounds:Rectangle;

        public function Promotion(_arg1:PromotionSingletonEnforcer, _arg2:String=null, _arg3:String=null, _arg4:uint=0, _arg5:PromotionLinkList=null, _arg6:Rectangle=null, _arg7:Rectangle=null, _arg8:Boolean=true){
            if (!Boolean(_arg1)){
                throw (new Error(("Promotion : Promotion is singleton-class, " + "so you should run Promotion.getInstance().")));
            };
            if (_arg8){
                if (Boolean(_arg5)){
                    _arg5 = (_arg5.clone() as PromotionLinkList);
                };
                if (Boolean(_arg6)){
                    _arg6 = (_arg6.clone() as Rectangle);
                };
                if (Boolean(_arg7)){
                    _arg7 = (_arg7.clone() as Rectangle);
                };
            };
            nhn_music_ns::ispromotion = _arg2;
            nhn_music_ns::imageurl = _arg3;
            nhn_music_ns::persistence = _arg4;
            nhn_music_ns::promotionlinklist = _arg5;
            nhn_music_ns::closebuttonbounds = _arg6;
            nhn_music_ns::persistenceclosebuttonbounds = _arg7;
        }
        public static function getInstance(_arg1:String=null, _arg2:String=null, _arg3:uint=0, _arg4:PromotionLinkList=null, _arg5:Rectangle=null, _arg6:Rectangle=null):Promotion{
            if (!Boolean(instance)){
                instance = new Promotion(new PromotionSingletonEnforcer(), _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            };
            return (instance);
        }
        public static function releaseInstance():void{
            if (Boolean(instance)){
                instance.releaseMemory();
                instance = null;
            };
        }

        nhn_music_ns function set persistenceclosebuttonbounds(_arg1:Rectangle):void{
            if (Boolean(_arg1)){
            };
            _persistenceclosebuttonbounds = _arg1;
        }
        public function get imageurl():String{
            return (_imageurl);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Promotion]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[ispromotion] : ") + ((Boolean(ispromotion)) ? ispromotion : "has no ispromotion.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[imageurl] : ") + ((Boolean(imageurl)) ? imageurl : "has no imageurl.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[persistence] : ") + ((0)<persistence) ? persistence : "has no persistence."));
            _local3 = (_local3 + ("\n" + ((Boolean(promotionlinklist)) ? promotionlinklist.dump((_arg1 + 1)) : (_local2 + "\t[promotionlinklist] : has no promotionlinklist."))));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[closebuttonbounds] : ") + ((Boolean(closebuttonbounds)) ? closebuttonbounds.toString() : "has no closebuttonbounds.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[persistenceclosebuttonbounds] : ") + ((Boolean(persistenceclosebuttonbounds)) ? persistenceclosebuttonbounds.toString() : "has no persistenceclosebuttonbounds.")));
            return (_local3);
        }
        nhn_music_ns function set persistence(_arg1:uint):void{
            var persistence:* = _arg1;
            try {
                switch (ispromotion){
                    case "Y":
                        if (0 < persistence){
                            _persistence = persistence;
                        } else {
                            throw (new Error("persistence is not valid."));
                        };
                        break;
                    case "N":
                        break;
                    default:
                        throw (new Error(("Promotion : " + "ispromotion should be initialized first.")));
                };
            } catch(e:Error) {
                persistence = 1;
            };
            _persistence = persistence;
        }
        override public function clone(){
            throw (new Error(("Promotion : Promotion is " + "singleton-class, so You can not clone it.")));
        }
        public function get closebuttonbounds():Rectangle{
            return (_closebuttonbounds);
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Promotion;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Promotion);
                if (((((((((((((((!(Boolean(_local4))) || (!((_local4.ispromotion === ispromotion))))) || (!((_local4.imageurl === imageurl))))) || (!((_local4.persistence === persistence))))) || (!((Boolean(_local4.promotionlinklist) === Boolean(promotionlinklist)))))) || (((Boolean(_local4.promotionlinklist)) ? !(_local4.promotionlinklist.compare(promotionlinklist, _arg2)) : false)))) || (!(_local4.closebuttonbounds.equals(closebuttonbounds))))) || (!(_local4.persistenceclosebuttonbounds.equals(persistenceclosebuttonbounds))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        public function get persistenceclosebuttonbounds():Rectangle{
            return (_persistenceclosebuttonbounds);
        }
        nhn_music_ns function set imageurl(_arg1:String):void{
            var imageurl:* = _arg1;
            try {
                switch (ispromotion){
                    case "Y":
                        if (((Boolean(imageurl)) && (!((imageurl === null))))){
                            _imageurl = imageurl;
                        } else {
                            throw (new Error("imageurl is not valid."));
                        };
                        break;
                    case "N":
                        imageurl = null;
                        break;
                    default:
                        throw (new Error(("Promotion : " + "ispromotion should be initialized first.")));
                };
            } catch(e:Error) {
                nhn_music_ns::ispromotion = "N";
                imageurl = null;
            };
            _imageurl = imageurl;
        }
        public function get persistence():uint{
            return (_persistence);
        }
        nhn_music_ns function set ispromotion(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _ispromotion = _arg1;
        }
        nhn_music_ns function set promotionlinklist(_arg1:PromotionLinkList):void{
            _promotionlinklist = _arg1;
        }
        override public function releaseMemory():void{
            nhn_music_ns::ispromotion = null;
        }
        public function get ispromotion():String{
            return (_ispromotion);
        }
        public function get promotionlinklist():PromotionLinkList{
            return (_promotionlinklist);
        }
        nhn_music_ns function set closebuttonbounds(_arg1:Rectangle):void{
            if (Boolean(_arg1)){
            };
            _closebuttonbounds = _arg1;
        }

    }
}//package com.nhn.webapis.music.serviceobject 

class PromotionSingletonEnforcer {

    public function PromotionSingletonEnforcer(){
    }
}
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.webapis.ns.*;

    public class Top100 extends MusicServiceObjectBase {

        protected var _date:String;
        protected var _songlist:SongList;

        public function Top100(_arg1:String=null, _arg2:SongList=null, _arg3:Boolean=true){
            if (_arg3){
                if (Boolean(_arg2)){
                    _arg2 = (_arg2.clone() as SongList);
                };
            };
            nhn_music_ns::date = _arg1;
            nhn_music_ns::songlist = _arg2;
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Top100;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Top100);
                if (((((((!(Boolean(_local4))) || (!((_local4.date === date))))) || (!((Boolean(_local4.songlist) === Boolean(songlist)))))) || (((Boolean(_local4.songlist)) ? !(_local4.songlist.compare(songlist, _arg2)) : false)))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        nhn_music_ns function set songlist(_arg1:SongList):void{
            _songlist = _arg1;
        }
        override public function releaseMemory():void{
            songlist.releaseMemory();
            nhn_music_ns::date = null;
            nhn_music_ns::songlist = null;
        }
        override public function clone(){
            return (new Top100(date, songlist, true));
        }
        public function get date():String{
            return (_date);
        }
        public function get songlist():SongList{
            return (_songlist);
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Top100]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[date] : ") + ((Boolean(date)) ? date : "has no date.")));
            _local3 = (_local3 + ("\n" + ((Boolean(songlist)) ? songlist.dump((_arg1 + 1)) : (_local2 + "\t[songlist] : has no songlist."))));
            return (_local3);
        }
        nhn_music_ns function set date(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = "일시적 오류로 업데이트 날짜를 불러오지 못하였습니다";
                };
            };
            _date = _arg1;
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.webapis.ns.*;

    public class Song extends MusicServiceObjectBase {

        protected var _track:Track;
        protected var _free:String;
        protected var _artistlist:ArtistList;
        protected var _serviceflag:String;
        protected var _lyric:String;
        protected var _album:Album;
        protected var _hasmp3:String;
        protected var _adult:String;

        public function Song(_arg1:Track, _arg2:String, _arg3:String, _arg4:String, _arg5:String, _arg6:Album, _arg7:ArtistList, _arg8:String, _arg9:Boolean=true){
            if (_arg9){
                if (Boolean(_arg1)){
                    _arg1 = (_arg1.clone() as Track);
                };
                if (Boolean(_arg6)){
                    _arg6 = (_arg6.clone() as Album);
                };
                if (Boolean(_arg7)){
                    _arg7 = (_arg7.clone() as ArtistList);
                };
            };
            nhn_music_ns::track = _arg1;
            nhn_music_ns::adult = _arg2;
            nhn_music_ns::free = _arg3;
            nhn_music_ns::serviceflag = _arg4;
            nhn_music_ns::hasmp3 = _arg5;
            nhn_music_ns::album = _arg6;
            nhn_music_ns::artistlist = _arg7;
            nhn_music_ns::lyric = _arg8;
        }
        nhn_music_ns function set serviceflag(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "Y";
                };
            };
            _serviceflag = _arg1;
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Song]");
            _local3 = (_local3 + ("\n" + ((Boolean(track)) ? track.dump((_arg1 + 1)) : (_local2 + "\t[track] : has no track."))));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[adult] : ") + ((Boolean(adult)) ? adult : "has no adult.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[free] : ") + ((Boolean(free)) ? free : "has no free.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[serviceflag] : ") + ((Boolean(serviceflag)) ? serviceflag : "has no serviceflag.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[hasmp3] : ") + ((Boolean(hasmp3)) ? hasmp3 : "has no hasmp3.")));
            _local3 = (_local3 + ("\n" + ((Boolean(album)) ? album.dump((_arg1 + 1)) : (_local2 + "\t[album] : has no album."))));
            _local3 = (_local3 + ("\n" + ((Boolean(artistlist)) ? artistlist.dump((_arg1 + 1)) : (_local2 + "\t[artistlist] : has no artistlist."))));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[lyric] : ") + ((Boolean(lyric)) ? lyric : "has no lyric.")));
            return (_local3);
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Song;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Song);
                if (((((((((((((((((((((((!(Boolean(_local4))) || (!((Boolean(_local4.track) === Boolean(track)))))) || (((Boolean(_local4.track)) ? !(_local4.track.compare(track, _arg2)) : false)))) || (!((_local4.adult === adult))))) || (!((_local4.free === free))))) || (!((_local4.serviceflag === serviceflag))))) || (!((_local4.hasmp3 === hasmp3))))) || (!((Boolean(_local4.album) === Boolean(album)))))) || (((Boolean(_local4.album)) ? !(_local4.album.compare(album, _arg2)) : false)))) || (!((Boolean(_local4.artistlist) === Boolean(artistlist)))))) || (((Boolean(_local4.artistlist)) ? !(_local4.artistlist.compare(artistlist, _arg2)) : false)))) || (!((_local4.lyric === lyric))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        nhn_music_ns function set artistlist(_arg1:ArtistList):void{
            _artistlist = _arg1;
        }
        public function get track():Track{
            return (_track);
        }
        nhn_music_ns function set track(_arg1:Track):void{
            _track = _arg1;
        }
        public function get hasmp3():String{
            return (_hasmp3);
        }
        nhn_music_ns function set album(_arg1:Album):void{
            _album = _arg1;
        }
        nhn_music_ns function set free(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _free = _arg1;
        }
        public function get serviceflag():String{
            return (_serviceflag);
        }
        override public function clone(){
            return (new Song(track, adult, free, serviceflag, hasmp3, album, artistlist, lyric, true));
        }
        public function get lyric():String{
            return (_lyric);
        }
        override public function releaseMemory():void{
            if (Boolean(track)){
                track.releaseMemory();
            };
            if (Boolean(album)){
                album.releaseMemory();
            };
            if (Boolean(artistlist)){
                artistlist.releaseMemory();
            };
            nhn_music_ns::track = null;
            nhn_music_ns::adult = null;
            nhn_music_ns::free = null;
            nhn_music_ns::serviceflag = null;
            nhn_music_ns::hasmp3 = null;
            nhn_music_ns::album = null;
            nhn_music_ns::artistlist = null;
            nhn_music_ns::lyric = null;
        }
        public function get free():String{
            return (_free);
        }
        public function get album():Album{
            return (_album);
        }
        nhn_music_ns function set hasmp3(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "Y";
                };
            };
            _hasmp3 = _arg1;
        }
        nhn_music_ns function set adult(_arg1:String):void{
            if (_arg1 !== null){
                _arg1 = _arg1.toUpperCase();
                switch (_arg1){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _arg1 = "N";
                };
            };
            _adult = _arg1;
        }
        public function get adult():String{
            return (_adult);
        }
        public function get artistlist():ArtistList{
            return (_artistlist);
        }
        nhn_music_ns function set lyric(_arg1:String):void{
            _lyric = _arg1;
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.serviceobject {
    import com.nhn.webapis.ns.*;

    public class Album extends MusicServiceObjectBase {

        public static const ALBUM_ID_UNDEFINED:String = "0";

        protected var _albumtitle:String;
        protected var _albumid:String;
        protected var _imageurl:String;

        public function Album(_arg1:String=null, _arg2:String=null, _arg3:String=null){
            nhn_music_ns::albumid = _arg1;
            nhn_music_ns::albumtitle = _arg2;
            nhn_music_ns::imageurl = _arg3;
        }
        override public function dump(_arg1:int=0):String{
            var _local2:String = getPrefix(_arg1);
            var _local3 = (_local2 + "[Album]");
            _local3 = (_local3 + ((("\n" + _local2) + "\t[albumid] : ") + ((Boolean(albumid)) ? albumid : "has no albumid.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[albumtitle] : ") + ((Boolean(albumtitle)) ? albumtitle : "has no albumtitle.")));
            _local3 = (_local3 + ((("\n" + _local2) + "\t[imageurl] : ") + ((Boolean(imageurl)) ? imageurl : "has no imageurl.")));
            return (_local3);
        }
        override public function compare(_arg1:MusicServiceObjectBase, _arg2:Boolean=true):Boolean{
            var _local4:Album;
            var _local3:Boolean;
            if (!_arg2){
                _local3 = (this === _arg1);
            } else {
                _local4 = (_arg1 as Album);
                if (((((((!(Boolean(_local4))) || (!((_local4.albumid === albumid))))) || (!((_local4.albumtitle === albumtitle))))) || (!((_local4.imageurl === imageurl))))){
                    _local3 = false;
                };
            };
            return (_local3);
        }
        public function get albumtitle():String{
            return (_albumtitle);
        }
        public function get albumid():String{
            return (_albumid);
        }
        nhn_music_ns function set imageurl(_arg1:String):void{
            _imageurl = _arg1;
        }
        nhn_music_ns function set albumtitle(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = "일시적 오류로 앨범명을 불러오지 못하였습니다";
                };
            };
            _albumtitle = _arg1;
        }
        nhn_music_ns function set albumid(_arg1:String):void{
            if (_arg1 !== null){
                if (_arg1 === ""){
                    _arg1 = Album.ALBUM_ID_UNDEFINED;
                };
            };
            _albumid = _arg1;
        }
        override public function releaseMemory():void{
            nhn_music_ns::albumid = null;
            nhn_music_ns::albumtitle = null;
            nhn_music_ns::imageurl = null;
        }
        public function get imageurl():String{
            return (_imageurl);
        }
        override public function clone(){
            return (new Album(albumid, albumtitle, imageurl));
        }

    }
}//package com.nhn.webapis.music.serviceobject 
﻿package com.nhn.webapis.music.methodobject {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import flash.net.*;
    import com.nhn.net.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.music.*;
    import com.nhn.webapis.music.events.*;
    import com.nhn.core.*;
    import com.nhn.webapis.core.methodobject.*;
    import com.nhn.webapis.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.webapis.ns.*;

    public class MusicInfoMethods extends MusicMethodObjectBase {

        public static const METHOD_GET_TOP_100:String = "api.nhn";
        public static const METHOD_GET_SONG_LIST:String = "api.nhn";
        public static const METHOD_GET_ARTICLE:String = "api.nhn";
        public static const METHOD_GET_LYRIC:String = "api.nhn";
        public static const METHOD_ADD_FAVORITE_SONG:String = "myMusic/addFavoriteAPI.nhn";
        public static const METHOD_GET_ARTICLE_SONG_LIST:String = "api.nhn";

        public function MusicInfoMethods(_arg1:MusicService){
            super(_arg1);
        }
        static function parseGetTop100Result(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local5:Object;
            var _local6:Array;
            var _local7:SongList;
            var _local8:Top100;
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local3);
            if (_local4.success){
                if (!Boolean((_local3.resultvalue as Object))){
                    throw (new Error(("MusicInfoMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                _local5 = (_local3.resultvalue as Object);
                _local6 = (_local5.songlist as Array);
                _local7 = MusicMethodHelper.parseCommonRawSongList(_local6);
                _local8 = new Top100((_local5.date as String), _local7, false);
                _local4.nhn_music_ns::resultvalue = _local8;
            };
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }
        static function parseGetArticleResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local5:Object;
            var _local6:Array;
            var _local7:SongList;
            var _local8:Article;
            var _local9:ContextFunctionPair;
            var _local10:Array;
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local3);
            _local4.nhn_music_ns::optionvalue = {launchOption:_arg2["launchOption"]};
            if (_local4.success){
                if (!Boolean((_local3.resultvalue as Object))){
                    throw (new Error(("MusicInfoMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                _local5 = (_local3.resultvalue as Object);
                _local6 = (_local5.mytrack as Array);
                _local7 = MusicMethodHelper.parseCommonRawSongList(_local6);
                _local8 = new Article((_local5.mylist_seq as String), (_local5.userid as String), (_local5.title as String), (_local5.ptype as String), (_local5.pcolor as String), (_local5.linkYn as String), (_local5.link as String), _local7, false);
                _local4.nhn_music_ns::resultvalue = _local8;
                _local9 = _arg2["callback"];
                _local10 = _arg2["args"];
                if (Boolean(_local9)){
                    if (!Boolean(_local10)){
                        _local10 = [];
                    };
                    _local10.unshift(_local4);
                    _local9.applyByArray(_local10);
                    _local9.releaseMemory();
                    _local9 = null;
                };
            };
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }
        static function parseGetArticleSongListResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local3:MusicServiceResult = parseCommonSongListResultInternal(_arg1);
            return (new ReturnObjectOfParseFunction(_local3.success, _local3));
        }
        protected static function parseCommonSongListResultInternal(_arg1:String):MusicServiceResult{
            var _local4:Array;
            var _local5:SongList;
            var _local2:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local3:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local2);
            if (((_local3.success) || ((_local3.resultcode === WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112)))){
                if (!Boolean((_local2.resultvalue as Array))){
                    throw (new Error(("MusicInfoMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                _local4 = (_local2.resultvalue as Array);
                _local5 = MusicMethodHelper.parseCommonRawSongList(_local4);
                _local3.nhn_music_ns::resultvalue = _local5;
            };
            return (_local3);
        }
        static function parseGetSongListResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local3:MusicServiceResult = parseCommonSongListResultInternal(_arg1);
            _local3.nhn_music_ns::optionvalue = {launchOption:_arg2["launchOption"]};
            return (new ReturnObjectOfParseFunction(_local3.success, _local3));
        }
        static function parseAddFavoriteSongResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfMusicServerAPI(_local3);
            _local4.nhn_music_ns::resultcode = null;
            _local4.nhn_music_ns::message = null;
            _local4.nhn_music_ns::resultvalue = null;
            _local4.nhn_music_ns::optionvalue = null;
            var _local5:String;
            switch ((_local3.sResult as String).toLowerCase()){
                case "success":
                    _local5 = WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115;
                    break;
                case "fail":
                    switch ((_local3.nErrorCode as int).toString()){
                        case "-1":
                            _local5 = WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116;
                            break;
                        case "-2":
                            _local5 = WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117;
                            break;
                        default:
                            _local5 = WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101;
                    };
                    break;
                default:
                    _local5 = WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101;
            };
            _local4.nhn_music_ns::resultcode = _local5;
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }
        static function parseGetLyricResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local5:Object;
            var _local6:SongList;
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local3);
            if (_local4.success){
                if (!Boolean((_local3.resultvalue as Object))){
                    throw (new Error(("MusicInfoMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                _local5 = {};
                _local5.trackid = ((_local3.resultvalue as Object).trackid as String);
                _local5.tracktitle = ((_local3.resultvalue as Object).tracktitle as String);
                _local5.lyric = ((_local3.resultvalue as Object).lyric as String);
                _local6 = MusicMethodHelper.parseCommonRawSongList([_local5]);
                _local4.nhn_music_ns::resultvalue = _local6.retrieveItemAt(0, true);
                _local6.releaseMemory();
                _local6 = null;
            };
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }

        public function getArticle(_arg1:RequestID, _arg2:String, _arg3:int, _arg4:ContextFunctionPair=null, _arg5:Array=null):void{
            var _local6 = musicMethodHelper;
            _local6.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetArticleResult, musicService.playerServerAPIEndPointIndex, MusicInfoMethods.METHOD_GET_ARTICLE, URLRequestMethod.POST, null, [new NameValuePair("launchOption", _arg3), new NameValuePair("callback", _arg4), new NameValuePair("args", _arg5)], [new NameValuePair("m", "myinfo"), new NameValuePair("mylist_seq", _arg2)]);
        }
        protected function handleGetArticleResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:Object;
            var _local4:Object;
            var _local5:MusicServiceEvent;
            var _local6:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = MethodHelperBase.convertArrayOfMementoToObject(((_arg1.target as IMementoLoader).memento as Array));
                _local4 = _local3;
                _local5 = new MusicServiceEvent(MusicServiceEvent.MUSIC_INFO_GET_ARTICLE, _local2);
                var _local7 = methodHelper;
                _local7.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local5, MusicInfoMethods.parseGetArticleResult, _local4);
            } else {
                _local6 = ("MusicInfoMethods : handleGetArticleResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local6, true);
            };
        }
        protected function handleGetTop100Result(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:MusicServiceEvent;
            var _local4:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = new MusicServiceEvent(MusicServiceEvent.MUSIC_INFO_GET_TOP_100, _local2);
                var _local5 = methodHelper;
                _local5.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local3, MusicInfoMethods.parseGetTop100Result, null);
            } else {
                _local4 = ("MusicInfoMethods : handleGetTop100Result " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local4, true);
            };
        }
        public function getSongList(_arg1:RequestID, _arg2:String, _arg3:int):void{
            if (!Boolean(_arg2)){
                throw (new Error(("MusicInfoMethods : commaSeparatedTrackIDs " + "is not valid.")));
            };
            var _local4 = musicMethodHelper;
            _local4.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetSongListResult, musicService.playerServerAPIEndPointIndex, MusicInfoMethods.METHOD_GET_SONG_LIST, URLRequestMethod.POST, null, [new NameValuePair("launchOption", _arg3)], [new NameValuePair("m", "songinfo"), new NameValuePair("trackid", _arg2)]);
        }
        protected function handleGetLyricResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:MusicServiceEvent;
            var _local4:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = new MusicServiceEvent(MusicServiceEvent.MUSIC_INFO_GET_LYRIC, _local2);
                var _local5 = methodHelper;
                _local5.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local3, MusicInfoMethods.parseGetLyricResult, null);
            } else {
                _local4 = ("MusicInfoMethods : handleGetLyricResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local4, true);
            };
        }
        public function getLyric(_arg1:RequestID, _arg2:String):void{
            var _local3 = musicMethodHelper;
            _local3.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetLyricResult, musicService.playerServerAPIEndPointIndex, MusicInfoMethods.METHOD_GET_LYRIC, URLRequestMethod.POST, null, null, [new NameValuePair("m", "lyric"), new NameValuePair("trackid", _arg2)]);
        }
        public function addFavoriteSong(_arg1:RequestID, _arg2:String):void{
            var _local3 = musicMethodHelper;
            _local3.nhn_webapis_ns::requestMethod(musicService, _arg1, handleAddFavoriteSongResult, musicService.musicServerAPIEndPointIndex, MusicInfoMethods.METHOD_ADD_FAVORITE_SONG, URLRequestMethod.POST, null, null, [new NameValuePair("type", "track"), new NameValuePair("id", _arg2)]);
        }
        public function getArticleSongList(_arg1:RequestID, _arg2:String):void{
            var _local3 = musicMethodHelper;
            _local3.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetArticleSongListResult, musicService.playerServerAPIEndPointIndex, MusicInfoMethods.METHOD_GET_ARTICLE_SONG_LIST, URLRequestMethod.POST, null, null, [new NameValuePair("m", "mytrack"), new NameValuePair("mylist_seq", _arg2)]);
        }
        protected function handleAddFavoriteSongResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:MusicServiceEvent;
            var _local4:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = new MusicServiceEvent(MusicServiceEvent.MUSIC_INFO_ADD_FAVORITE_SONG, _local2);
                var _local5 = methodHelper;
                _local5.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local3, MusicInfoMethods.parseAddFavoriteSongResult, null);
            } else {
                _local4 = ("MusicInfoMethods : handleAddFavoriteSongResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local4, true);
            };
        }
        protected function handleGetArticleSongListResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:MusicServiceEvent;
            var _local4:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = new MusicServiceEvent(MusicServiceEvent.MUSIC_INFO_GET_ARTICLE_SONG_LIST, _local2);
                var _local5 = methodHelper;
                _local5.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local3, MusicInfoMethods.parseGetArticleSongListResult, null);
            } else {
                _local4 = ("MusicInfoMethods : handleGetArticleSongListResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local4, true);
            };
        }
        public function getTop100(_arg1:RequestID):void{
            var _local2 = musicMethodHelper;
            _local2.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetTop100Result, musicService.playerServerAPIEndPointIndex, MusicInfoMethods.METHOD_GET_TOP_100, URLRequestMethod.POST, null, null, [new NameValuePair("m", "top100")]);
        }
        protected function handleGetSongListResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:Object;
            var _local4:Object;
            var _local5:MusicServiceEvent;
            var _local6:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = MethodHelperBase.convertArrayOfMementoToObject(((_arg1.target as IMementoLoader).memento as Array));
                _local4 = _local3;
                _local5 = new MusicServiceEvent(MusicServiceEvent.MUSIC_INFO_GET_SONG_LIST, _local2);
                var _local7 = methodHelper;
                _local7.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local5, MusicInfoMethods.parseGetSongListResult, _local4);
            } else {
                _local6 = ("MusicInfoMethods : handleGetSongListResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local6, true);
            };
        }

    }
}//package com.nhn.webapis.music.methodobject 
﻿package com.nhn.webapis.music.methodobject {
    import com.nhn.webapis.music.*;
    import com.nhn.webapis.core.methodobject.*;

    public class MusicMethodObjectBase extends MethodObjectBase {

        public function MusicMethodObjectBase(_arg1:MusicService){
            super(_arg1);
        }
        protected function get musicService():MusicService{
            return ((service as MusicService));
        }
        protected function get musicMethodHelper():MusicMethodHelper{
            return ((methodHelper as MusicMethodHelper));
        }
        override protected function get methodHelper():MethodHelperBase{
            return (MusicMethodHelper.getInstance());
        }

    }
}//package com.nhn.webapis.music.methodobject 
﻿package com.nhn.webapis.music.methodobject {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.net.*;
    import com.nhn.webapis.core.methodobject.*;
    import com.adobe.serialization.json.*;
    import com.nhn.webapis.ns.*;

    public class MusicMethodHelper extends MethodHelperBase {

        protected static var instance:MusicMethodHelper;

        public function MusicMethodHelper(_arg1:MusicMethodHelperSingletonEnforcer){
            if (!Boolean(_arg1)){
                throw (new Error(("MusicMethodHelper : MusicMethodHelper is singleton-class, " + "so you should run MusicMethodHelper.getInstance().")));
            };
        }
        static function parseCommonRawTrack(_arg1:String, _arg2:String):Track{
            return (new Track(_arg1, _arg2));
        }
        static function parseCommonRawAlbum(_arg1:Object):Album{
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:Album = new Album((_arg1.albumid as String), (_arg1.albumtitle as String), (_arg1.imageurl as String));
            return (_local2);
        }
        static function initMusicServiceResultOfMusicServerAPI(_arg1:Object):MusicServiceResult{
            var _local2:MusicServiceResult = new MusicServiceResult();
            _local2.nhn_music_ns::resultcode = null;
            _local2.nhn_music_ns::message = null;
            _local2.nhn_music_ns::resultvalue = null;
            _local2.nhn_music_ns::optionvalue = null;
            return (_local2);
        }
        static function initMusicServiceResultOfPlayerServerAPI(_arg1:Object):MusicServiceResult{
            var _local2:MusicServiceResult = new MusicServiceResult();
            _local2.nhn_music_ns::resultcode = (_arg1.resultcode as String);
            _local2.nhn_music_ns::message = (_arg1.message as String);
            _local2.nhn_music_ns::resultvalue = null;
            _local2.nhn_music_ns::optionvalue = null;
            if (!_local2.success){
                _local2.nhn_music_ns::optionvalue = (_arg1.resultvalue as Object);
            };
            return (_local2);
        }
        public static function getInstance():MusicMethodHelper{
            if (!Boolean(instance)){
                instance = new MusicMethodHelper(new MusicMethodHelperSingletonEnforcer());
            };
            return (instance);
        }
        static function parseCommonRawArtistList(_arg1:Array):ArtistList{
            var _local2:Object;
            var _local3:Artist;
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local4:ArtistList = new ArtistList();
            var _local5:int = _arg1.length;
            var _local6:int;
            while (_local6 < _local5) {
                _local2 = (_arg1[_local6] as Object);
                _local3 = new Artist((_arg1[_local6].artistid as String), (_arg1[_local6].artistname as String));
                _local4.addItem(_local3, false);
                _local3 = null;
                _local6++;
            };
            return (_local4);
        }
        static function parseNoRespondMethodsResultOfPlayerServerAPI(_arg1:String):MusicServiceResult{
            var _local2:Object = decodeJSON(_arg1);
            var _local3:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local2);
            return (_local3);
        }
        static function readMultiByte(_arg1:AdvancedURLStream, _arg2:String="UTF-8"):String{
            if (_arg1.bytesAvailable === 0){
                return (null);
            };
            return (_arg1.readMultiByte(_arg1.bytesAvailable, _arg2));
        }
        static function decodeJSON(_arg1:String):Object{
            if (!Boolean(_arg1)){
                throw (new Error("MusicMethodHelper : json string is not valid."));
            };
            _arg1 = _arg1.replace(/\+/g, "%20");
            var _local2:Object = JSON.decode(decodeURIComponent(_arg1));
            return (_local2);
        }
        static function parseCommonRawSongList(_arg1:Array):SongList{
            var rawSong:* = null;
            var song:* = null;
            var rawSongList:* = _arg1;
            if (!Boolean(rawSongList)){
                return (null);
            };
            var songList:* = new SongList();
            var length:* = rawSongList.length;
            var i:* = 0;
            for (;i < length;(i = (i + 1))) {
                rawSong = (rawSongList[i] as Object);
                song = new Song(parseCommonRawTrack((rawSong.trackid as String), (rawSong.tracktitle as String)), (rawSong.adult as String), (rawSong.free as String), (rawSong.serviceflag as String), (rawSong.hasmp3 as String), parseCommonRawAlbum((rawSong.album as Object)), parseCommonRawArtistList((rawSong.artist as Array)), (rawSong.lyric as String), false);
                //unresolved jump
                var _slot1:* = e;
                song = null;
                continue;
                songList.addItem(song, false);
                song = null;
            };
            return (songList);
        }

    }
}//package com.nhn.webapis.music.methodobject 

class MusicMethodHelperSingletonEnforcer {

    public function MusicMethodHelperSingletonEnforcer(){
    }
}
﻿package com.nhn.webapis.music.methodobject {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import flash.net.*;
    import com.nhn.net.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.music.*;
    import com.nhn.webapis.music.events.*;
    import com.nhn.core.*;
    import com.nhn.webapis.core.methodobject.*;
    import com.nhn.webapis.*;
    import com.nhn.webapis.ns.*;

    public class FMSInfoMethods extends MusicMethodObjectBase {

        public static const METHOD_GET_FMS_CONFIGURATION:String = "api.nhn";

        public function FMSInfoMethods(_arg1:MusicService){
            super(_arg1);
        }
        protected static function parseGetFMSConfigurationResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local5:Object;
            var _local6:FMSConfiguration;
            var _local7:ContextFunctionPair;
            var _local8:Array;
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local3);
            if (_local4.success){
                if (!Boolean((_local3.resultvalue as Object))){
                    throw (new Error(("FMSInfoMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                _local5 = (_local3.resultvalue as Object);
                FMSConfiguration.releaseInstance();
                _local6 = FMSConfiguration.getInstance((_local5.protocol as String), (_local5.port as int), (_local5.host as String), (_local5.application as String), (_local5.encoding as String));
                _local4.nhn_music_ns::resultvalue = _local6;
                _local7 = _arg2["callback"];
                _local8 = _arg2["args"];
                if (Boolean(_local7)){
                    if (!Boolean(_local8)){
                        _local8 = [];
                    };
                    _local8.unshift(_local4);
                    _local7.applyByArray(_local8);
                    _local7.releaseMemory();
                    _local7 = null;
                };
            };
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }

        public function getFMSConfiguration(_arg1:RequestID, _arg2:ContextFunctionPair=null, _arg3:Array=null):void{
            var _local4 = musicMethodHelper;
            _local4.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetFMSConfigurationResult, musicService.playerServerAPIEndPointIndex, FMSInfoMethods.METHOD_GET_FMS_CONFIGURATION, URLRequestMethod.POST, null, [new NameValuePair("callback", _arg2), new NameValuePair("args", _arg3)], [new NameValuePair("m", "fmsinfo")]);
        }
        protected function handleGetFMSConfigurationResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:Object;
            var _local4:Object;
            var _local5:MusicServiceEvent;
            var _local6:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = MethodHelperBase.convertArrayOfMementoToObject(((_arg1.target as IMementoLoader).memento as Array));
                _local4 = _local3;
                _local5 = new MusicServiceEvent(MusicServiceEvent.FMS_INFO_GET_FMS_CONFIGURATION, _local2);
                var _local7 = methodHelper;
                _local7.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local5, FMSInfoMethods.parseGetFMSConfigurationResult, _local4);
            } else {
                _local6 = ("FMSInfoMethods : handleGetFMSConfigurationResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local6, true);
            };
        }

    }
}//package com.nhn.webapis.music.methodobject 
﻿package com.nhn.webapis.music.methodobject {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import flash.net.*;
    import com.nhn.net.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.music.*;
    import com.nhn.webapis.music.events.*;
    import com.nhn.core.*;
    import com.nhn.webapis.core.methodobject.*;
    import com.nhn.webapis.*;
    import com.nhn.webapis.ns.*;

    public class AuthorizationMethods extends MusicMethodObjectBase {

        public static const METHOD_GET_COOKIE:String = "api.nhn";
        public static const METHOD_CHECK_VALIDATION:String = "api.nhn";

        public function AuthorizationMethods(_arg1:MusicService){
            super(_arg1);
        }
        static function parseGetCookieResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local5:Object;
            var _local6:Authorization;
            var _local7:ContextFunctionPair;
            var _local8:Array;
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local3);
            if (_local4.success){
                if (!Boolean((_local3.resultvalue as Object))){
                    throw (new Error(("AuthorizationMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                _local5 = (_local3.resultvalue as Object);
                Authorization.releaseInstance();
                _local6 = Authorization.getInstance(_local5.cookie, _local5.islogin, _local5.hasticket, _local5.isadult, _local5.isTeam, _local5.encUserId);
                _local4.nhn_music_ns::resultvalue = _local6;
                _local7 = _arg2["callback"];
                _local8 = _arg2["args"];
                if (Boolean(_local7)){
                    if (!Boolean(_local8)){
                        _local8 = [];
                    };
                    _local8.unshift(_local4);
                    _local7.applyByArray(_local8);
                    _local7.releaseMemory();
                    _local7 = null;
                };
            };
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }
        static function parseCheckValidationResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local3:MusicServiceResult = MusicMethodHelper.parseNoRespondMethodsResultOfPlayerServerAPI(_arg1);
            return (new ReturnObjectOfParseFunction(_local3.success, _local3));
        }

        public function checkValidation(_arg1:RequestID):void{
            var _local2 = musicMethodHelper;
            _local2.nhn_webapis_ns::requestMethod(musicService, _arg1, handleCheckValidationResult, musicService.playerServerAPIEndPointIndex, AuthorizationMethods.METHOD_CHECK_VALIDATION, URLRequestMethod.POST, null, null, [new NameValuePair("m", "playvalidator")]);
        }
        public function getCookie(_arg1:RequestID, _arg2:ContextFunctionPair=null, _arg3:Array=null):void{
            var _local4 = musicMethodHelper;
            _local4.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetCookieResult, musicService.playerServerAPIEndPointIndex, AuthorizationMethods.METHOD_GET_COOKIE, URLRequestMethod.POST, null, [new NameValuePair("callback", _arg2), new NameValuePair("args", _arg3)], [new NameValuePair("m", "cookie")]);
        }
        protected function handleCheckValidationResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:MusicServiceEvent;
            var _local4:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = new MusicServiceEvent(MusicServiceEvent.AUTHORIZATION_CHECK_VALIDATION, _local2);
                var _local5 = methodHelper;
                _local5.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local3, AuthorizationMethods.parseCheckValidationResult, null);
            } else {
                _local4 = ("AuthorizationMethods : handleCheckValidationResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local4, true);
            };
        }
        protected function handleGetCookieResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:Object;
            var _local4:Object;
            var _local5:MusicServiceEvent;
            var _local6:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = MethodHelperBase.convertArrayOfMementoToObject(((_arg1.target as IMementoLoader).memento as Array));
                _local4 = _local3;
                _local5 = new MusicServiceEvent(MusicServiceEvent.AUTHORIZATION_GET_COOKIE, _local2);
                var _local7 = methodHelper;
                _local7.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local5, AuthorizationMethods.parseGetCookieResult, _local4);
            } else {
                _local6 = ("AuthorizationMethods : handleGetCookieResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local6, true);
            };
        }

    }
}//package com.nhn.webapis.music.methodobject 
﻿package com.nhn.webapis.music.methodobject {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import flash.geom.*;
    import flash.net.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.music.*;
    import com.nhn.webapis.music.events.*;
    import com.nhn.core.*;
    import com.nhn.webapis.core.methodobject.*;
    import com.nhn.webapis.*;
    import com.nhn.webapis.ns.*;

    public class PromotionMethods extends MusicMethodObjectBase {

        public static const METHOD_GET_PROMOTION:String = "api.nhn";

        public function PromotionMethods(_arg1:MusicService){
            super(_arg1);
        }
        static function parseGetPromotionResult(_arg1:String, _arg2=null):ReturnObjectOfParseFunction{
            var _local5:Object;
            var _local6:String;
            var _local7:uint;
            var _local8:PromotionLinkList;
            var _local9:Rectangle;
            var _local10:Rectangle;
            var _local11:Promotion;
            var _local12:Object;
            var _local13:Array;
            var _local14:int;
            var _local15:PromotionLink;
            var _local16:int;
            var _local3:Object = MusicMethodHelper.decodeJSON(_arg1);
            var _local4:MusicServiceResult = MusicMethodHelper.initMusicServiceResultOfPlayerServerAPI(_local3);
            if (_local4.success){
                if (!Boolean((_local3.resultvalue as Object))){
                    throw (new Error(("PromotionMethods : " + "decodedJSON.resultvalue is not valid.")));
                };
                Promotion.releaseInstance();
                _local5 = (_local3.resultvalue as Object);
                _local6 = null;
                _local7 = 0;
                _local8 = null;
                _local9 = null;
                _local10 = null;
                if ((_local5.isPromotion as String).toUpperCase() === "Y"){
                    _local12 = null;
                    _local13 = (_local5.link as Array);
                    _local14 = _local13.length;
                    _local15 = null;
                    _local6 = _local5.imageUrl;
                    _local7 = uint(_local5.persistence);
                    _local8 = new PromotionLinkList();
                    _local16 = 0;
                    while (_local16 < _local14) {
                        _local12 = (_local13[_local16] as Object);
                        _local15 = new PromotionLink(_local12.linkUrl, new Rectangle(_local12.linkRect.x, _local12.linkRect.y, _local12.linkRect.w, _local12.linkRect.h));
                        _local8.addItem(_local15, false);
                        _local16++;
                    };
                    if (_local8.length <= 0){
                        _local8.releaseMemory();
                        _local8 = null;
                    };
                    _local9 = new Rectangle(_local5.closeBtnRect.x, _local5.closeBtnRect.y, _local5.closeBtnRect.w, _local5.closeBtnRect.h);
                    _local10 = new Rectangle(_local5.persistenceCloseBtnRect.x, _local5.persistenceCloseBtnRect.y, _local5.persistenceCloseBtnRect.w, _local5.persistenceCloseBtnRect.h);
                };
                _local11 = Promotion.getInstance(_local5.isPromotion, _local6, _local7, _local8, _local9, _local10);
                _local4.nhn_music_ns::resultvalue = _local11;
            };
            return (new ReturnObjectOfParseFunction(_local4.success, _local4));
        }

        protected function handleGetPromotionResult(_arg1:Event):void{
            var _local2:RequestID;
            var _local3:MusicServiceEvent;
            var _local4:String;
            if (_arg1.type === Event.COMPLETE){
                _local2 = musicService.nhn_webapis_ns::retrieveRequestIDByLoader(_arg1.target);
                _local3 = new MusicServiceEvent(MusicServiceEvent.PROMOTION_GET_PROMOTION, _local2);
                var _local5 = methodHelper;
                _local5.nhn_webapis_ns::parseAndDispatch(musicService, (_arg1.target.data as String), _local3, PromotionMethods.parseGetPromotionResult, null);
            } else {
                _local4 = ("PromotionMethods : handleGetPromotionResult " + "just invoke when Event.COMPLETE is comming.");
                NHNWebAPI.printLog(NHNWebAPI.LOG_STATUS_WARNING, this, _local4, true);
            };
        }
        public function getPromotion(_arg1:RequestID, _arg2:ContextFunctionPair=null, _arg3:Array=null):void{
            var _local4 = musicMethodHelper;
            _local4.nhn_webapis_ns::requestMethod(musicService, _arg1, handleGetPromotionResult, musicService.playerServerAPIEndPointIndex, PromotionMethods.METHOD_GET_PROMOTION, URLRequestMethod.POST, null, null, [new NameValuePair("m", "isPromotion")]);
        }

    }
}//package com.nhn.webapis.music.methodobject 
﻿package com.nhn.webapis.music {
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.music.methodobject.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.webapis.ns.*;

    public class MusicService extends NHNServiceBase {

        private var _playerServerAPIEndPointIndex:int;
        protected var _fmsInfoMethods:FMSInfoMethods;
        private var _musicServerAPIEndPointIndex:int;
        protected var _promotionMethods:PromotionMethods;
        protected var _musicInfoMethods:MusicInfoMethods;
        protected var _authorizationMethods:AuthorizationMethods;

        public function MusicService(_arg1:uint=1){
            super([(("http://" + WebPlayerCoreProperties.playerServerAPIHost) + "/"), (("http://" + WebPlayerCoreProperties.musicServerAPIHost) + "/")], _arg1, NHNServiceBase.USE_ADVANCED_URL_LOADER);
            nhn_music_ns::playerServerAPIEndPointIndex = 0;
            nhn_music_ns::musicServerAPIEndPointIndex = 1;
            _authorizationMethods = new AuthorizationMethods(this);
            _musicInfoMethods = new MusicInfoMethods(this);
            _fmsInfoMethods = new FMSInfoMethods(this);
            _promotionMethods = new PromotionMethods(this);
        }
        public function get playerServerAPIEndPointIndex():int{
            return (_playerServerAPIEndPointIndex);
        }
        public function get musicServerAPIEndPointIndex():int{
            return (_musicServerAPIEndPointIndex);
        }
        nhn_music_ns function set playerServerAPIEndPointIndex(_arg1:int):void{
            if ((((0 <= _arg1)) && ((endPoints.length >= (_arg1 + 1))))){
                _playerServerAPIEndPointIndex = _arg1;
            };
        }
        public function get promotionMethods():PromotionMethods{
            return (_promotionMethods);
        }
        override protected function addRequestInternal(_arg1:RequestItem):void{
            super.addRequestInternal(_arg1);
        }
        nhn_music_ns function set musicServerAPIEndPointIndex(_arg1:int):void{
            if ((((0 <= _arg1)) && ((endPoints.length >= (_arg1 + 1))))){
                _musicServerAPIEndPointIndex = _arg1;
            };
        }
        public function get musicInfoMethods():MusicInfoMethods{
            return (_musicInfoMethods);
        }
        public function get authorizationMethods():AuthorizationMethods{
            return (_authorizationMethods);
        }
        public function get fmsInfoMethods():FMSInfoMethods{
            return (_fmsInfoMethods);
        }
        public function getRequestItem(_arg1:RequestID):RequestItem{
            return ((requestsWorkingTableByID[_arg1.id] as RequestItem));
        }

    }
}//package com.nhn.webapis.music 
﻿package com.nhn.webapis.music.events {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.core.events.*;

    public class MusicServiceEvent extends NHNServiceEvent {

        public static const PROMOTION_GET_PROMOTION:String = "MUSICSERVICEEVENT_PROMOTION_GET_PROMOTION";
        public static const MUSIC_INFO_ADD_FAVORITE_SONG:String = "MUSICSERVICEEVENT_MUSIC_INFO_ADD_FAVORITE_SONG";
        public static const MUSIC_INFO_GET_TOP_100:String = "MUSICSERVICEEVENT_MUSIC_INFO_GET_TOP_100";
        public static const MUSIC_INFO_GET_SONG_LIST:String = "MUSICSERVICEEVENT_MUSIC_INFO_GET_SONG_LIST";
        public static const AUTHORIZATION_GET_COOKIE:String = "MUSICSERVICEEVENT_AUTHORIZATION_GET_COOKIE";
        public static const AUTHORIZATION_CHECK_VALIDATION:String = "MUSICSERVICEEVENT_AUTHORIZATION_CHECK_VALIDATION";
        public static const MUSIC_INFO_GET_ARTICLE_SONG_LIST:String = "MUSICSERVICEEVENT_MUSIC_INFO_GET_ARTICLE_SONG_LIST";
        public static const FMS_INFO_GET_FMS_CONFIGURATION:String = "MUSICSERVICEEVENT_FMS_INFO_GET_FMS_CONFIGURATION";
        public static const MUSIC_INFO_GET_ARTICLE:String = "MUSICSERVICEEVENT_MUSIC_INFO_GET_ARTICLE";
        public static const MUSIC_INFO_GET_LYRIC:String = "MUSICSERVICEEVENT_MUSIC_INFO_GET_LYRIC";

        public function MusicServiceEvent(_arg1:String, _arg2:RequestID, _arg3:Boolean=true, _arg4:MusicServiceObjectBase=null, _arg5:Boolean=false, _arg6:Boolean=false){
            super(MusicServiceEvent.validateType(_arg1), _arg2, _arg3, _arg4, _arg5, _arg6);
        }
        protected static function validateType(_arg1:String):String{
            switch (_arg1){
                case MusicServiceEvent.AUTHORIZATION_GET_COOKIE:
                case MusicServiceEvent.AUTHORIZATION_CHECK_VALIDATION:
                case MusicServiceEvent.MUSIC_INFO_GET_SONG_LIST:
                case MusicServiceEvent.MUSIC_INFO_GET_TOP_100:
                case MusicServiceEvent.MUSIC_INFO_GET_LYRIC:
                case MusicServiceEvent.MUSIC_INFO_GET_ARTICLE:
                case MusicServiceEvent.MUSIC_INFO_GET_ARTICLE_SONG_LIST:
                case MusicServiceEvent.MUSIC_INFO_ADD_FAVORITE_SONG:
                case MusicServiceEvent.FMS_INFO_GET_FMS_CONFIGURATION:
                case MusicServiceEvent.PROMOTION_GET_PROMOTION:
                    break;
                default:
                    throw (new Error("MusicServiceEvent : type is not valid."));
            };
            return (_arg1);
        }

        public function get serviceResult():MusicServiceResult{
            return ((serviceObject as MusicServiceResult));
        }
        override public function toString():String{
            return (formatToString("MusicServiceEvent", "type", "bubbles", "cancelable", "requestID", "success", "serviceResult", "numRequestsInWorkingTable", "numRequestsInWatingQueue"));
        }

    }
}//package com.nhn.webapis.music.events 
﻿package com.nhn.dto {

    public class NHNMusicStreamInfodto {

        public static const BITRATE_192:String = "192";
        public static const BITRATE_320:String = "320";

        private var _path:String;
        private var _length:Number;
        public var serviceType:String = "PC";
        private var _isDisplayMessage:String;
        private var _isAuth:uint;
        private var _isLogin:String;
        private var _pbkind:uint;
        private var _bitrate:String;
        private var _hasmp3:String;
        public var isUsingPlatformLimit:String;
        private var _userid:String;
        private var _hasTicket:String;
        private var _message:String;
        private var _tnBApiUrl:String;
        private var _isTeam:String;
        private var _trackAdult:String;
        public var time:Number;
        private var _trackFree:String;
        private var _trackid:String;
        private var _serviceflag:String;
        private var _displayTime:Number;
        private var _isAdult:String;
        public var usingPlatformLimitFlashMsg:String;
        private var _isTnB:String;

        public function NHNMusicStreamInfodto(_arg1:Object=null){
            if (_arg1 != null){
                _hasTicket = _arg1.hasTicket;
                _isAdult = _arg1.isAdult;
                _isAuth = _arg1.isAuth;
                _isLogin = _arg1.isLogin;
                _length = _arg1.length;
                _path = _arg1.path;
                _pbkind = _arg1.pbkind;
                _trackAdult = _arg1.trackAdult;
                _trackFree = _arg1.trackFree;
                _trackid = _arg1.trackid;
                _userid = _arg1.userid;
                _hasmp3 = _arg1.hasmp3;
                _displayTime = _arg1.displayTime;
                _serviceflag = _arg1.serviceflag;
                _isTeam = _arg1.isTeam;
                if (_arg1.usingPlatformLimitFlashMsg){
                    usingPlatformLimitFlashMsg = _arg1.usingPlatformLimitFlashMsg;
                } else {
                    usingPlatformLimitFlashMsg = "usingPlatformLimitFlashMsg is empty";
                };
                if (_arg1.isUsingPlatformLimit){
                    isUsingPlatformLimit = _arg1.isUsingPlatformLimit;
                } else {
                    isUsingPlatformLimit = "isUsingPlatformLimit is empty";
                };
                _bitrate = (_arg1.bitrate as String);
                switch (bitrate){
                    case NHNMusicStreamInfodto.BITRATE_192:
                    case NHNMusicStreamInfodto.BITRATE_320:
                        break;
                    default:
                        _bitrate = NHNMusicStreamInfodto.BITRATE_192;
                };
                _message = ((Boolean(_arg1.message)) ? _arg1.message : null);
                _isDisplayMessage = (_arg1.isDisplayMessage as String);
                if (Boolean(isDisplayMessage)){
                    _isDisplayMessage = isDisplayMessage.toUpperCase();
                };
                switch (isDisplayMessage){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _isDisplayMessage = "N";
                };
                _isTnB = (_arg1.isTnB as String);
                if (Boolean(isTnB)){
                    _isTnB = isTnB.toUpperCase();
                };
                switch (isTnB){
                    case "Y":
                    case "N":
                        break;
                    default:
                        _isTnB = "N";
                };
                _tnBApiUrl = ((Boolean(_arg1.tnBApiUrl)) ? _arg1.tnBApiUrl : null);
            };
        }
        public function get pbkind():uint{
            return (_pbkind);
        }
        public function get message():String{
            return (_message);
        }
        public function get isTnB():String{
            return (_isTnB);
        }
        public function get hasmp3():String{
            return (_hasmp3);
        }
        public function get tnBApiUrl():String{
            return (_tnBApiUrl);
        }
        public function get serviceflag():String{
            return (_serviceflag);
        }
        public function get trackid():String{
            return (_trackid);
        }
        public function get isTeam():String{
            return (_isTeam);
        }
        public function toObject():Object{
            var _local1:Object = {
                hasTicket:_hasTicket,
                isAdult:_isAdult,
                isLogin:_isLogin,
                path:_path,
                trackAdult:_trackAdult,
                trackFree:_trackFree,
                trackid:_trackid,
                userid:_userid,
                pbkind:_pbkind,
                hasmp3:_hasmp3,
                isTeam:_isTeam,
                serviceType:serviceType
            };
            return (_local1);
        }
        public function get path():String{
            return (_path);
        }
        public function get userid():String{
            return (_userid);
        }
        public function get trackAdult():String{
            return (_trackAdult);
        }
        public function get isAdult():String{
            return (_isAdult);
        }
        public function get displayTime():Number{
            return (_displayTime);
        }
        public function get isDisplayMessage():String{
            return (_isDisplayMessage);
        }
        public function get hasTicket():String{
            return (_hasTicket);
        }
        public function get trackFree():String{
            return (_trackFree);
        }
        public function get isLogin():String{
            return (_isLogin);
        }
        public function sentTnBApiUrl():void{
            _tnBApiUrl = null;
        }
        public function get length():Number{
            return (_length);
        }
        public function releaseMemory():void{
            _hasTicket = null;
            _isAdult = null;
            _isLogin = null;
            _path = null;
            _trackAdult = null;
            _trackFree = null;
            _trackid = null;
            _userid = null;
            _isTeam = null;
            _serviceflag = null;
            _bitrate = null;
            _message = null;
            _isDisplayMessage = null;
            _isTnB = null;
            _tnBApiUrl = null;
            serviceType = null;
            isUsingPlatformLimit = null;
            usingPlatformLimitFlashMsg = null;
        }
        public function toString():String{
            var _local1:Array = [("hasTicket = " + hasTicket), ("isAdult = " + isAdult), ("isLogin = " + isLogin), ("path = " + path), ("trackAdult = " + trackAdult), ("trackFree = " + trackFree), ("trackid = " + trackid), ("userid = " + userid), ("pbkind = " + pbkind), ("hasmp3 = " + hasmp3), ("time = " + time), ("displayTime = " + displayTime), ("length = " + length), ("serviceflag = " + serviceflag), ("isTeam = " + isTeam), ("bitrate = " + bitrate), ("message = " + message), ("isDisplayMessage = " + isDisplayMessage), ("isTnB = " + isTnB), ("tnBApiUrl = " + tnBApiUrl), ("isUsingPlatformLimit = " + isUsingPlatformLimit), ("usingPlatformLimitFlashMsg = " + usingPlatformLimitFlashMsg)];
            _local1.sort();
            return (("NHNMusicStreamInfodto::" + _local1.join(", ")));
        }
        public function get bitrate():String{
            return (_bitrate);
        }
        public function get isAuth():uint{
            return (_isAuth);
        }

    }
}//package com.nhn.dto 
﻿package com.nhn.easing {

    public class Exponential {

        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg1 == _arg4)) ? (_arg2 + _arg3) : ((_arg3 * (-(Math.pow(2, ((-10 * _arg1) / _arg4))) + 1)) + _arg2)));
        }
        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg1 == 0)) ? _arg2 : ((_arg3 * Math.pow(2, (10 * ((_arg1 / _arg4) - 1)))) + _arg2)));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            if (_arg1 == 0){
                return (_arg2);
            };
            if (_arg1 == _arg4){
                return ((_arg2 + _arg3));
            };
            _arg1 = (_arg1 / (_arg4 / 2));
            if (_arg1 < 1){
                return ((((_arg3 / 2) * Math.pow(2, (10 * (_arg1 - 1)))) + _arg2));
            };
            --_arg1;
            return ((((_arg3 / 2) * (-(Math.pow(2, (-10 * _arg1))) + 2)) + _arg2));
        }

    }
}//package com.nhn.easing 
﻿package com.nhn.easing {

    public class Linear {

        public static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeIn(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeInOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }
        public static function easeNone(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            return ((((_arg3 * _arg1) / _arg4) + _arg2));
        }

    }
}//package com.nhn.easing 
﻿package com.nhn.core {
    import com.nhn.core.interfaces.*;

    public class ContextFunctionPair implements ICloneable, IReleaseMemory {

        protected var _func:Function;
        protected var _context:Object;

        public function ContextFunctionPair(_arg1:Object=null, _arg2:Function=null){
            this.context = _arg1;
            this.func = _arg2;
        }
        public function get func():Function{
            return (_func);
        }
        public function set func(_arg1:Function):void{
            _func = _arg1;
        }
        public function clone(){
            return (new ContextFunctionPair(context, func));
        }
        public function get context():Object{
            return (_context);
        }
        public function applyByArray(_arg1:Array):void{
            if (((!(Boolean(context))) || (!(Boolean(func))))){
                throw (new Error(("ContextFunctionPair : " + "context or func is not valid.")));
            };
            if (Boolean(_arg1)){
                func.apply(context, _arg1);
            } else {
                func.apply(context);
            };
        }
        public function releaseMemory():void{
            context = null;
            func = null;
        }
        public function applyByRest(... _args):void{
            applyByArray((_args as Array));
        }
        public function set context(_arg1:Object):void{
            _context = _arg1;
        }

    }
}//package com.nhn.core 
﻿package com.nhn.core.interfaces {

    public interface IReleaseMemory {

        function releaseMemory():void;

    }
}//package com.nhn.core.interfaces 
﻿package com.nhn.core.interfaces {

    public interface ICloneable {

        function clone();

    }
}//package com.nhn.core.interfaces 
﻿package com.nhn.errors {

    public class MusicErrorCode {

        public static const SUCCESS:String = "000";
        public static const SERVICE_IOERROR:String = "907";
        public static const INVALID_APPLICATION:String = "904";
        public static const STREAM_IOERROR:String = "906";
        public static const APPLICATION_SHOUTDOWN:String = "903";
        public static const CONNECTION_CLOSED:String = "902";
        public static const CONNECTION_FAIL:String = "901";
        public static const CONNECTION_CALL_FAILED:String = "905";
        public static const CONNECTION_REJECTED:String = "900";

    }
}//package com.nhn.errors 
﻿package com.nhn.nclicks {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.nclicks.nclicksClasses.*;
    import flash.net.*;
    import flash.system.*;
    import flash.external.*;

    public class NClicks {

        public static var log:String;
        public static var isInternal:Boolean = false;
        public static var serviceLocation:String = "http://cc.naver.com/cc?";
        public static var __flashID:String;
        public static var NSC:String = "decide.me";

        private static function getHTMLReffer():String{
            var reffer:* = null;
            var externalAble:* = ExternalInterface.available;
            if (((externalAble) && ((((Capabilities.playerType == "ActiveX")) || ((Capabilities.playerType == "PlugIn")))))){
                try {
                    reffer = ExternalInterface.call("function(){if (window.top != window.self){return window.top.document.URL;}else{return window.self.document.URL;}}");
                } catch(error:Error) {
                };
                if (reffer == null){
                    return ("");
                };
                return (encodeURIComponent(reffer));
            };
            return ("");
        }
        public static function sendSSCNClicksLog(_arg1:Event, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            if (!ExternalInterface.available){
                return;
            };
            var _local6:NClicksPositionVO = (getPointObject((_arg1.currentTarget as DisplayObject).stage.mouseX, (_arg1.currentTarget as DisplayObject).stage.mouseY) as NClicksPositionVO);
            var _local7:String = serviceLocation;
            _local7 = (_local7 + getSSCLogParameters());
            _local7 = (_local7 + ("&a=" + _arg2));
            if (_arg3 != ""){
                _local7 = (_local7 + ("&i=" + _arg3));
            };
            if (_arg4 != -1){
                _local7 = (_local7 + ("&r=" + _arg4));
            };
            _local7 = (_local7 + ("&m=" + getRedirectionCode()));
            _local7 = (_local7 + ("&px=" + _local6.absoluteX));
            _local7 = (_local7 + ("&py=" + _local6.absoluteY));
            _local7 = (_local7 + ("&sx=" + _local6.scrolledX));
            _local7 = (_local7 + ("&sy=" + _local6.scrolledY));
            _local7 = (_local7 + ("&bw=" + _local6.browserWidth));
            _local7 = (_local7 + ("&fw=" + (_arg1.currentTarget as DisplayObject).stage.stageWidth));
            _local7 = (_local7 + ("&fh=" + (_arg1.currentTarget as DisplayObject).stage.stageHeight));
            if (_arg5 != null){
                _local7 = (_local7 + ("&u=" + encodeURIComponent(_arg5)));
            };
            if (getHTMLReffer() != ""){
                _local7 = (_local7 + ("&fe=" + getHTMLReffer()));
            };
            var _local8:URLRequest = new URLRequest(_local7);
            var _local9:URLLoader = new URLLoader();
            _local9.load(_local8);
            log = _local7;
        }
        private static function getSWFLocation(_arg1:Event):String{
            return (_arg1.currentTarget.root.loaderInfo.url);
        }
        private static function getRedirectionCode():Number{
            var _local1:Number;
            if (isInternal){
                switch (Capabilities.playerType){
                    case "ActiveX":
                        _local1 = 0;
                        break;
                    case "PlugIn":
                    case "StandAlone":
                    case "Desktop":
                    case "External":
                        _local1 = 2;
                        break;
                };
            } else {
                _local1 = 2;
            };
            return (_local1);
        }
        private static function getSearchLogParameters():String{
            var externalAble:* = ExternalInterface.available;
            var searchParams:* = "";
            if (((((externalAble) && (isInternal))) && ((((Capabilities.playerType == "ActiveX")) || ((Capabilities.playerType == "PlugIn")))))){
                try {
                    searchParams = ExternalInterface.call("nxGetCommonCRParam");
                } catch(error:Error) {
                };
            };
            if (!searchParams){
                searchParams = "";
            };
            return (searchParams);
        }
        private static function getPointObject(_arg1:Number, _arg2:Number):NClicksPositionVO{
            var x:* = _arg1;
            var y:* = _arg2;
            var externalAble:* = ExternalInterface.available;
            var obj:* = new Object();
            var positionVO:* = new NClicksPositionVO();
            if (((((externalAble) && (isInternal))) && ((((Capabilities.playerType == "ActiveX")) || ((Capabilities.playerType == "PlugIn")))))){
                try {
                    obj = ExternalInterface.call("nhn.FlashObject.getPositionObj", __flashID);
                    positionVO.absoluteX = (obj.absoluteX + x);
                    positionVO.absoluteY = (obj.absoluteY + y);
                    positionVO.scrolledX = (obj.scrolledX + x);
                    positionVO.scrolledY = (obj.scrolledY + y);
                    positionVO.browserWidth = obj.browserWidth;
                } catch(error:Error) {
                };
            } else {
                positionVO.absoluteX = x;
                positionVO.absoluteY = y;
                positionVO.scrolledX = -1;
                positionVO.scrolledY = -1;
                positionVO.browserWidth = -1;
            };
            return (positionVO);
        }
        private static function getSSCLogParameters():String{
            var externalAble:* = ExternalInterface.available;
            var params:* = "";
            if (((((externalAble) && (isInternal))) && ((((Capabilities.playerType == "ActiveX")) || ((Capabilities.playerType == "PlugIn")))))){
                try {
                    params = ExternalInterface.call("nhn.FlashObject.getSSCLogParam");
                } catch(error:Error) {
                };
            };
            if (!params){
                params = "";
            };
            return (params);
        }
        public static function sendSearchLog(_arg1:Event, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            var event:* = _arg1;
            var area:String = _arg2;
            var cid:String = _arg3;
            var rank:int = _arg4;
            var linkURL:String = _arg5;
            if (!ExternalInterface.available){
                return;
            };
            var positionVO:* = (getPointObject((event.currentTarget as DisplayObject).stage.mouseX, (event.currentTarget as DisplayObject).stage.mouseY) as NClicksPositionVO);
            var url:* = serviceLocation;
            url = (url + getSearchLogParameters());
            url = (url + ("&a=" + area));
            if (cid != ""){
                url = (url + ("&i=" + cid));
            };
            if (rank != -1){
                url = (url + ("&r=" + rank));
            };
            url = (url + ("&m=" + getRedirectionCode()));
            url = (url + ("&px=" + positionVO.absoluteX));
            url = (url + ("&py=" + positionVO.absoluteY));
            url = (url + ("&sx=" + positionVO.scrolledX));
            url = (url + ("&sy=" + positionVO.scrolledY));
            url = (url + ("&bw=" + positionVO.browserWidth));
            url = (url + ("&fw=" + (event.currentTarget as DisplayObject).stage.stageWidth));
            url = (url + ("&fh=" + (event.currentTarget as DisplayObject).stage.stageHeight));
            if (linkURL != null){
                url = (url + ("&u=" + encodeURIComponent(linkURL)));
            };
            if (getHTMLReffer() != ""){
                url = (url + ("&fe=" + getHTMLReffer()));
            };
            var urlRequest:* = new URLRequest(url);
            var urlLoader:* = new URLLoader();
            urlLoader.addEventListener(IOErrorEvent.IO_ERROR, function (_arg1:IOErrorEvent):void{
            });
            urlLoader.load(urlRequest);
            log = url;
        }
        public static function sendLog(_arg1:Event, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            var _local6:NClicksPositionVO = (getPointObject((_arg1.currentTarget as DisplayObject).stage.mouseX, (_arg1.currentTarget as DisplayObject).stage.mouseY) as NClicksPositionVO);
            var _local7:String = serviceLocation;
            _local7 = (_local7 + ("nsc=" + NSC));
            _local7 = (_local7 + ("&a=" + _arg2));
            if (_arg3 != ""){
                _local7 = (_local7 + ("&i=" + _arg3));
            };
            if (_arg4 != -1){
                _local7 = (_local7 + ("&r=" + _arg4));
            };
            _local7 = (_local7 + ("&m=" + getRedirectionCode()));
            _local7 = (_local7 + ("&px=" + _local6.absoluteX));
            _local7 = (_local7 + ("&py=" + _local6.absoluteY));
            _local7 = (_local7 + ("&sx=" + _local6.scrolledX));
            _local7 = (_local7 + ("&sy=" + _local6.scrolledY));
            _local7 = (_local7 + ("&bw=" + _local6.browserWidth));
            _local7 = (_local7 + ("&fw=" + (_arg1.currentTarget as DisplayObject).stage.stageWidth));
            _local7 = (_local7 + ("&fh=" + (_arg1.currentTarget as DisplayObject).stage.stageHeight));
            if (_arg5 != null){
                _local7 = (_local7 + ("&u=" + encodeURIComponent(_arg5)));
            };
            if (getHTMLReffer() != ""){
                _local7 = (_local7 + ("&fe=" + getHTMLReffer()));
            };
            var _local8:URLRequest = new URLRequest(_local7);
            var _local9:URLLoader = new URLLoader();
            _local9.load(_local8);
            log = _local7;
        }

    }
}//package com.nhn.nclicks 
﻿package com.nhn.nclicks.nclicksClasses {

    public class NClicksPositionVO {

        private var _absoluteX:Number = -1;
        private var _absoluteY:Number = -1;
        private var _scrolledX:Number = -1;
        private var _scrolledY:Number = -1;
        private var _browserWidth:Number = -1;

        public function NClicksPositionVO(_arg1:Number=-1, _arg2:Number=-1, _arg3:Number=-1, _arg4:Number=-1, _arg5:Number=-1){
            this.absoluteX = _arg1;
            this.absoluteY = _arg2;
            this.scrolledX = _arg3;
            this.scrolledY = _arg4;
            this.browserWidth = _arg5;
        }
        public function get absoluteX():Number{
            return (_absoluteX);
        }
        public function get scrolledY():Number{
            return (_scrolledY);
        }
        public function set scrolledY(_arg1:Number):void{
            _scrolledY = _arg1;
        }
        public function set absoluteX(_arg1:Number):void{
            _absoluteX = _arg1;
        }
        public function set absoluteY(_arg1:Number):void{
            _absoluteY = _arg1;
        }
        public function get scrolledX():Number{
            return (_scrolledX);
        }
        public function get absoluteY():Number{
            return (_absoluteY);
        }
        public function set scrolledX(_arg1:Number):void{
            _scrolledX = _arg1;
        }
        public function set browserWidth(_arg1:Number):void{
            _browserWidth = _arg1;
        }
        public function get browserWidth():Number{
            return (_browserWidth);
        }

    }
}//package com.nhn.nclicks.nclicksClasses 
﻿package com.nhn.nclicks.nclicksClasses {

    public class NClicksDomain {

        public static const NAVER:String = "http://cc.naver.com/cc?";
        public static const HANGAME:String = "http://cc.hangame.com/cc?";
        public static const NAVER_SEARCH:String = "http://cr.naver.com/rd?";

    }
}//package com.nhn.nclicks.nclicksClasses 
﻿package com.nhn.application {

    public class NHNApplication {

        public static const RELEASE:uint = 2;
        public static const LOG_STATUS_WARNING:uint = 4097;
        public static const DEBUG:uint = 1;
        public static const LOG_STATUS_ERROR:uint = 4098;
        public static const VERSION:String = "Alpah 1.0";
        public static const LOG_STATUS_INFORMATION:uint = 0x1000;

        private static var _mode:uint = 1;

        public static function get mode():uint{
            return (_mode);
        }
        public static function set mode(_arg1:uint):void{
            switch (_arg1){
                case DEBUG:
                case RELEASE:
                    _mode = _arg1;
                    break;
                default:
                    throw (new Error("NHNApplication : mode is not valid."));
            };
        }
        public static function printLog(_arg1:uint, _arg2, _arg3:String, _arg4:Boolean=false):void{
            var _local5:String;
            if (((_arg4) || ((mode === DEBUG)))){
                _local5 = "";
                switch (_arg1){
                    case LOG_STATUS_INFORMATION:
                        _local5 = "infomation";
                        break;
                    case LOG_STATUS_WARNING:
                        _local5 = "warning";
                        break;
                    case LOG_STATUS_ERROR:
                        _local5 = "error";
                        break;
                };
                trace(((("\nNHNApplication : " + _arg2) + " : ") + _local5));
                trace(_arg3);
            };
        }

    }
}//package com.nhn.application 
﻿package com.nhn.application.modules.keyproxy.notifications {

    public class KeyProxyNotifications {

        public static const KEY_DOWN:String = "NOTI_KEY_PROXY_KEY_DOWN";
        public static const REGISTER_STAGE:String = "NOTI_KEY_PROXY_REGISTER_STAGE";
        public static const KEY_UP:String = "NOTI_KEY_PROXY_KEY_UP";

    }
}//package com.nhn.application.modules.keyproxy.notifications 
﻿package com.nhn.application.modules.keyproxy.patterns.command {
    import flash.display.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.keyproxy.patterns.mediator.*;

    public class RegisterStageCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:StageMediator = (facade.retrieveMediator(StageMediator.NAME) as StageMediator);
            _local2.registerStage((_arg1.getBody() as Stage));
        }

    }
}//package com.nhn.application.modules.keyproxy.patterns.command 
﻿package com.nhn.application.modules.keyproxy.patterns.command {
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.keyproxy.pipemessages.*;

    public class KeyDownCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:PipelineFacade = (this.facade as PipelineFacade);
            var _local3:Class = KeyProxyPipeMessages.KEY_DOWN.protocol;
            var _local4:IMessageProtocol = new _local3(KeyProxyPipeMessages.KEY_DOWN.name, basicFacade.key, _arg1.getBody(), 0);
            var _local5:QueryMessage = new QueryMessage(_local4);
            _local2.sendPipeMessage(_local5);
        }

    }
}//package com.nhn.application.modules.keyproxy.patterns.command 
﻿package com.nhn.application.modules.keyproxy.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.keyproxy.notifications.*;
    import com.nhn.application.modules.keyproxy.patterns.mediator.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            facade.registerMediator(new StageMediator());
            facade.registerCommand(KeyProxyNotifications.REGISTER_STAGE, RegisterStageCommand);
            facade.registerCommand(KeyProxyNotifications.KEY_DOWN, KeyDownCommand);
            facade.registerCommand(KeyProxyNotifications.KEY_UP, KeyUpCommand);
        }

    }
}//package com.nhn.application.modules.keyproxy.patterns.command 
﻿package com.nhn.application.modules.keyproxy.patterns.command {
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.keyproxy.pipemessages.*;

    public class KeyUpCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:PipelineFacade = (this.facade as PipelineFacade);
            var _local3:Class = KeyProxyPipeMessages.KEY_UP.protocol;
            var _local4:IMessageProtocol = new _local3(KeyProxyPipeMessages.KEY_UP.name, basicFacade.key, _arg1.getBody(), 0);
            var _local5:QueryMessage = new QueryMessage(_local4);
            _local2.sendPipeMessage(_local5);
        }

    }
}//package com.nhn.application.modules.keyproxy.patterns.command 
﻿package com.nhn.application.modules.keyproxy.patterns.mediator {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.keyproxy.notifications.*;

    public class StageMediator extends VisualComponentMediator {

        public static const NAME:String = "StageMediator";

        protected var keyUpEvent:KeyboardEvent;
        protected var keyDownEvent:KeyboardEvent;

        public function StageMediator(){
            super(name, null);
            keyDownEvent = null;
            keyUpEvent = null;
        }
        override public function onRegister():void{
            super.onRegister();
        }
        override public function onRemove():void{
            if (Boolean(stage)){
                if (stage.hasEventListener(KeyboardEvent.KEY_DOWN)){
                    stage.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyBoardEvent, true);
                    stage.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyBoardEvent, false);
                    stage.removeEventListener(KeyboardEvent.KEY_UP, handleKeyBoardEvent, true);
                    stage.removeEventListener(KeyboardEvent.KEY_UP, handleKeyBoardEvent, false);
                };
            };
            super.onRemove();
        }
        override public function get name():String{
            return (StageMediator.NAME);
        }
        override public function setViewComponent(_arg1:Object):void{
            if ((_arg1 is Stage)){
                if (Boolean(stage)){
                    if (stage.hasEventListener(KeyboardEvent.KEY_DOWN)){
                        stage.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyBoardEvent, true);
                        stage.removeEventListener(KeyboardEvent.KEY_DOWN, handleKeyBoardEvent, false);
                        stage.removeEventListener(KeyboardEvent.KEY_UP, handleKeyBoardEvent, true);
                        stage.removeEventListener(KeyboardEvent.KEY_UP, handleKeyBoardEvent, false);
                    };
                };
                this.viewComponent = _arg1;
                stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyBoardEvent, true, 100, false);
                stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyBoardEvent, false, 100, false);
                stage.addEventListener(KeyboardEvent.KEY_UP, handleKeyBoardEvent, true, 100, false);
                stage.addEventListener(KeyboardEvent.KEY_UP, handleKeyBoardEvent, false, 100, false);
            } else {
                throw (new Error(((("StageMediator(" + basicFacade.key) + ") : ") + "viewComponent should be type of Stage.")));
            };
        }
        protected function handleKeyBoardEvent(_arg1:KeyboardEvent):void{
            switch (_arg1.type){
                case KeyboardEvent.KEY_DOWN:
                    if (keyDownEvent !== _arg1){
                        keyDownEvent = _arg1;
                        facade.sendNotification(KeyProxyNotifications.KEY_DOWN, _arg1);
                    };
                    break;
                case KeyboardEvent.KEY_UP:
                    if (keyUpEvent !== _arg1){
                        keyUpEvent = _arg1;
                        facade.sendNotification(KeyProxyNotifications.KEY_UP, _arg1);
                    };
                    break;
            };
        }
        public function registerStage(_arg1:Stage):void{
            setViewComponent(_arg1);
        }
        protected function get stage():Stage{
            return ((viewComponent as Stage));
        }

    }
}//package com.nhn.application.modules.keyproxy.patterns.mediator 
﻿package com.nhn.application.modules.keyproxy.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class KeyProxyPipeMessages {

        public static const KEY_DOWN:MessageDefine = new MessageDefine("PIPEMSG_KEY_PROXY_KEY_DOWN", DataTransferProtocol);
        public static const REGISTER_STAGE:MessageDefine = new MessageDefine("PIPEMSG_KEY_PROXY_REGISTER_STAGE", DataTransferProtocol);
        public static const KEY_UP:MessageDefine = new MessageDefine("PIPEMSG_KEY_PROXY_KEY_UP", DataTransferProtocol);

    }
}//package com.nhn.application.modules.keyproxy.pipemessages 
﻿package com.nhn.application.modules.keyproxy {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.keyproxy.pipemessages.*;
    import com.nhn.application.modules.keyproxy.patterns.command.*;
    import com.nhn.application.modules.keyproxy.notifications.*;

    public class KeyProxyModule extends PipeInterchangeableModule {

        public static const NAME_BASE:String = "KeyProxyModule";

        public function KeyProxyModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        override protected function initialize(_arg1:ModuleInitializeData):void{
            super.initialize(null);
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getHeaderByIMessageHeader().name){
                case KeyProxyPipeMessages.REGISTER_STAGE.name:
                    facade.sendNotification(KeyProxyNotifications.REGISTER_STAGE, _arg1.getBody());
                    break;
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(KeyProxyPipeMessages.REGISTER_STAGE.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.keyproxy 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverMiniPlayerCellRenderer_checkbox_icon extends MovieClipAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverMiniPlayerCellRenderer_mp3_icon extends MovieClipAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverMiniPlayerCellRenderer_is_adult_icon extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverMiniPlayerCellRenderer_album_icon extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import fl.core.*;
    import fl.controls.listClasses.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;

    public class NaverMiniPlayerCellRenderer extends UIComponent implements ICellRenderer {

        public static const MP3_ICON:String = "mp3_icon";
        public static const ALBUM_ICON:String = "album_icon";
        public static const CHECKBOX_ICON:String = "checkbox_icon";

        private static var _selectBgColor:int = 0xF5F5F5;
        private static var album_icon:Class = NaverMiniPlayerCellRenderer_album_icon;
        private static var _defaultBgColor:int = 0xFFFFFF;
        public static var _defaultSongIndexFormatColor:int = 0x666666;
        private static var is_adult_icon:Class = NaverMiniPlayerCellRenderer_is_adult_icon;
        private static var _defaultSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _defaultSongTitleTextColor:int = 0x777777;
        private static var _defaultSongSingerTextColor:int = 0x777777;
        private static var horizontalGridLineColor:int = 0xF5F5F5;
        private static var mp3_icon:Class = NaverMiniPlayerCellRenderer_mp3_icon;
        private static var _activeSongIndexFormatColor:int = 0x32C100;
        private static var horizontalLastGridLineColor:int = 0xD7D7D7;
        private static var listen_icon:Class = NaverMiniPlayerCellRenderer_listen_icon;
        private static var checkbox_icon:Class = NaverMiniPlayerCellRenderer_checkbox_icon;

        private var _data:Object;
        private var mp3_icon_instance;
        private var leftDisableSprite:Sprite;
        private var rightDisableSprite:Sprite;
        private var horizontalGridLine:Shape;
        private var checkbox_icon_instance;
        private var listen_icon_instance;
        private var _isPlaying:Boolean = false;
        private var _selectAction:Boolean;
        private var songIndex:TextField;
        private var is_adult_icon_instance;
        private var songTitle:FlowTextField;
        public var _listData:ListData;
        private var album_icon_instance;
        private var _isFooterCell:Boolean = false;
        private var base:Sprite;
        private var _isMouseOver:Boolean = false;
        private var songSinger:FlowTextField;
        private var _setMouseState:String;
        private var _selected:Boolean = false;

        public function NaverMiniPlayerCellRenderer(){
            this.buttonMode = true;
            this.useHandCursor = true;
            removeAsset();
            registEventHandler();
            createBase();
            createChildren();
        }
        public static function set defaultSongTitleTextColor(_arg1:int):void{
            _defaultSongTitleTextColor = _arg1;
        }
        public static function get defaultSongDelimeterTextColor():int{
            return (_defaultSongDelimeterTextColor);
        }
        public static function set defaultSongSingerTextColor(_arg1:int):void{
            _defaultSongSingerTextColor = _arg1;
        }
        public static function get defaultSongSingerTextColor():int{
            return (_defaultSongSingerTextColor);
        }
        public static function get defaultSongTitleTextColor():int{
            return (_defaultSongTitleTextColor);
        }
        public static function get activeSongIndexFormatColor():int{
            return (_activeSongIndexFormatColor);
        }
        public static function get defaultBgColor():int{
            return (_defaultBgColor);
        }
        public static function get defaultSongIndexFormatColor():int{
            return (_defaultSongIndexFormatColor);
        }
        public static function set defaultSongIndexFormatColor(_arg1:int):void{
            _defaultSongIndexFormatColor = _arg1;
        }
        public static function set defaultSongDelimeterTextColor(_arg1:int):void{
            _defaultSongDelimeterTextColor = _arg1;
        }
        public static function set defaultBgColor(_arg1:int):void{
            _defaultBgColor = _arg1;
        }
        public static function updateRendererStyle(_arg1):void{
            horizontalGridLineColor = _arg1.HORIZONTAL_GRID_LINE_COLOR;
            horizontalLastGridLineColor = _arg1.HORIZONTAL_LAST_GRID_LINE_COLOR;
            _defaultSongDelimeterTextColor = _arg1.DEFAULT_SONG_DELIMETER_COLOR;
            _defaultSongSingerTextColor = _arg1.DEFAULT_SONG_SINGER_COLOR;
            _defaultSongIndexFormatColor = _arg1.DEFAULT_SONG_INDEX_COLOR;
            _defaultSongTitleTextColor = _arg1.DEFAULT_SONG_TITLE_COLOR;
            _activeSongIndexFormatColor = _arg1.OVERED_SONG_INDEX_COLOR;
            _defaultBgColor = _arg1.DEFAULT_BG_COLOR;
            _selectBgColor = _arg1.SELECT_BG_COLOR;
        }
        public static function updateAsset(_arg1):void{
            album_icon = _arg1.getDefinition("album_info");
            mp3_icon = _arg1.getDefinition("mp3_icon");
            listen_icon = _arg1.getDefinition("listen_icon");
            is_adult_icon = _arg1.getDefinition("is_adult_icon");
            checkbox_icon = _arg1.getDefinition("checkbox_icon");
        }
        public static function set activeSongIndexFormatColor(_arg1:int):void{
            _activeSongIndexFormatColor = _arg1;
        }
        public static function get selectBgColor():int{
            return (_selectBgColor);
        }
        public static function set selectBgColor(_arg1:int):void{
            _selectBgColor = _arg1;
        }

        public function get isMouseOver():Boolean{
            return (_isMouseOver);
        }
        private function drawHorizontoalGridLine():void{
            if (!Boolean(horizontalGridLine)){
                horizontalGridLine = new Shape();
                addChild(horizontalGridLine);
            };
            var _local2 = horizontalGridLine.graphics;
            with (_local2) {
                clear();
                lineStyle(1, gridLineColor, 1, false, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 3);
                moveTo(0, (NaverMusicPlayerListPanel.ROW_HEIGHT - 1));
                lineTo(NaverMusicPlayerListPanel.PLAYLIST_BODY_WIDTH, (NaverMusicPlayerListPanel.ROW_HEIGHT - 1));
            };
        }
        public function get selected():Boolean{
            return (_selected);
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get data():Object{
            return (_data);
        }
        public function set selectAction(_arg1:Boolean):void{
            _selectAction = _arg1;
        }
        public function set isMouseOver(_arg1:Boolean):void{
            _isMouseOver = _arg1;
            draw();
        }
        public function get gridLineColor():int{
            if (isFooterCell){
                return (NaverMiniPlayerCellRenderer.horizontalLastGridLineColor);
            };
            return (NaverMiniPlayerCellRenderer.horizontalGridLineColor);
        }
        public function initFlowText():void{
            if (Boolean(songTitle)){
                songTitle.init();
            };
            if (Boolean(songSinger)){
                songSinger.init();
            };
        }
        public function set selected(_arg1:Boolean):void{
            this._selected = _arg1;
            if (this._selected){
                if (!data.isChecked){
                    data.isChecked = true;
                };
            } else {
                data.isChecked = false;
            };
            (data as SongInfoServiceObject).isSelected = this._selected;
        }
        private function removeResourceHandler(_arg1:Event):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, removeResourceHandler);
            if (Boolean(songTitle)){
                base.removeChild(songTitle);
                songTitle = null;
            };
        }
        override protected function draw():void{
            var songInfo:* = null;
            var songIndexFormat:* = null;
            var userAuth:* = null;
            var mp3IconFrame:* = NaN;
            var checkboxIcon:* = null;
            var mp3Icon:* = null;
            var albumIcon:* = null;
            super.draw();
            if (data.isEmpty){
                return;
            };
            var currentBgColor:* = ((selected) ? selectBgColor : defaultBgColor);
            var _local2 = base.graphics;
            with (_local2) {
                clear();
                beginFill(defaultBgColor);
                drawRect(0, 0, PostingConfig.WIDTH, 43);
                endFill();
            };
            if (Boolean(listData)){
                songInfo = (data as SongInfoServiceObject);
                songIndex.text = (listData.row + 1).toString();
                (data as SongInfoServiceObject).soIndex = listData.index;
                songTitle.text = data.label;
                songSinger.text = data.singer;
                songIndexFormat = songIndex.getTextFormat();
                userAuth = UserAuthority.getInstance();
                checkboxIcon = (checkbox_icon_instance as MovieClip);
                if (Boolean(checkboxIcon)){
                    checkboxIcon.useHandCursor = false;
                    checkboxIcon.gotoAndStop(((songInfo.isChecked) ? 2 : 1));
                };
                if (((!(songInfo.isValid)) || (!(songInfo.isServiced)))){
                    mp3IconFrame = 2;
                    songTitle.alpha = 0.25;
                    songSinger.alpha = 0.25;
                    songIndex.alpha = 0.25;
                    songTitle.mouseEnabled = false;
                    songSinger.mouseEnabled = false;
                    songIndex.visible = true;
                    listen_icon_instance.visible = false;
                    songIndexFormat.color = defaultSongIndexFormatColor;
                    songIndexFormat.bold = false;
                    songTitle.fontColor = defaultSongTitleTextColor;
                    songTitle.bold = false;
                    songSinger.fontColor = defaultSongSingerTextColor;
                    songSinger.bold = false;
                } else {
                    songTitle.alpha = 1;
                    songSinger.alpha = 1;
                    songIndex.alpha = 1;
                    songTitle.mouseEnabled = true;
                    songSinger.mouseEnabled = true;
                    is_adult_icon_instance.visible = ((songInfo.isAdultSong()) ? true : false);
                    if (Boolean(checkboxIcon)){
                        checkboxIcon.alpha = 1;
                        checkboxIcon.mouseEnabled = true;
                    };
                    if (songInfo.isPlaying){
                        songIndexFormat.color = activeSongIndexFormatColor;
                        songIndexFormat.bold = true;
                        songTitle.fontColor = activeSongIndexFormatColor;
                        songTitle.bold = true;
                        songSinger.fontColor = activeSongIndexFormatColor;
                        songSinger.bold = true;
                        listen_icon_instance.visible = true;
                        songIndex.visible = false;
                    } else {
                        songIndex.visible = true;
                        listen_icon_instance.visible = false;
                        if (isMouseOver){
                            songIndexFormat.color = activeSongIndexFormatColor;
                            songTitle.fontColor = activeSongIndexFormatColor;
                            songSinger.fontColor = activeSongIndexFormatColor;
                        } else {
                            songIndexFormat.color = defaultSongIndexFormatColor;
                            songIndexFormat.bold = false;
                            songTitle.fontColor = defaultSongTitleTextColor;
                            songTitle.bold = false;
                            songSinger.fontColor = defaultSongSingerTextColor;
                            songSinger.bold = false;
                        };
                    };
                    if (songInfo.hasMp3File()){
                        mp3IconFrame = 1;
                        if (((songInfo.isAdultSong()) && (userAuth.isAdult))){
                            mp3IconFrame = 1;
                        } else {
                            if (((songInfo.isAdultSong()) && (!(userAuth.isAdult)))){
                                mp3IconFrame = 2;
                            };
                        };
                    } else {
                        mp3IconFrame = 2;
                    };
                    songIndex.setTextFormat(songIndexFormat, 0, songIndex.text.length);
                };
                mp3Icon = (mp3_icon_instance as MovieClip);
                mp3Icon.gotoAndStop(mp3IconFrame);
                if (mp3Icon.currentFrame == 1){
                    mp3Icon.buttonMode = true;
                    mp3Icon.useHandCursor = true;
                } else {
                    mp3Icon.buttonMode = false;
                    mp3Icon.useHandCursor = false;
                };
                mp3Icon.mouseEnabled = songInfo.isServiced;
                albumIcon = (album_icon_instance as MovieClip);
                albumIcon.mouseEnabled = songInfo.isServiced;
                is_adult_icon_instance.visible = ((songInfo.isAdultSong()) ? true : false);
                is_adult_icon_instance.x = Math.min(((songTitle.x + songTitle.width) + 1), 158);
                is_adult_icon_instance.y = (songTitle.y + 1);
            };
        }
        public function set isPlaying(_arg1:Boolean):void{
            this.data.isPlaying = _arg1;
            draw();
        }
        public function removeAsset():void{
            var _local1:MovieClip;
            if (Boolean(leftDisableSprite)){
                leftDisableSprite.graphics.clear();
                base.removeChild(leftDisableSprite);
                leftDisableSprite = null;
            };
            if (Boolean(rightDisableSprite)){
                rightDisableSprite.graphics.clear();
                base.removeChild(rightDisableSprite);
                rightDisableSprite = null;
            };
            if (Boolean(songIndex)){
                base.removeChild(songIndex);
                songIndex = null;
            };
            if (Boolean(songTitle)){
                base.removeChild(songTitle);
                songTitle.destroy();
                songTitle = null;
            };
            if (Boolean(songSinger)){
                base.removeChild(songSinger);
                songSinger.destroy();
                songSinger = null;
            };
            if (Boolean(album_icon_instance)){
                _local1 = (album_icon_instance as MovieClip);
                if (Boolean(_local1)){
                    _local1.removeEventListener(MouseEvent.MOUSE_OVER, handleAlbumIconMouseEvent, false);
                    _local1.removeEventListener(MouseEvent.MOUSE_OUT, handleAlbumIconMouseEvent, false);
                    base.removeChild(_local1);
                    album_icon_instance = null;
                };
            };
            if (Boolean(mp3_icon_instance)){
                base.removeChild(mp3_icon_instance);
                mp3_icon_instance = null;
            };
            if (Boolean(base)){
                removeChild(base);
                base = null;
            };
            if (Boolean(data)){
                (data as SongInfoServiceObject).release();
                data = null;
            };
            if (Boolean(_listData)){
                _listData = null;
            };
            if (Boolean(is_adult_icon_instance)){
                base.removeChild(is_adult_icon_instance);
                is_adult_icon_instance = null;
            };
            if (Boolean(checkbox_icon_instance)){
                base.removeChild(checkbox_icon_instance);
                checkbox_icon_instance = null;
            };
        }
        public function set isFooterCell(_arg1:Boolean):void{
            if (_isFooterCell === _arg1){
                return;
            };
            _isFooterCell = _arg1;
            drawHorizontoalGridLine();
        }
        public function set listData(_arg1:ListData):void{
            _listData = _arg1;
        }
        public function get selectAction():Boolean{
            return (_selectAction);
        }
        public function set data(_arg1:Object):void{
            _data = _arg1;
            if (!(data as SongInfoServiceObject).isEmpty){
                songTitle.text = data.label;
            };
        }
        public function drawCell():void{
            draw();
        }
        private function handleAlbumIconMouseEvent(_arg1:MouseEvent):void{
            if (_arg1.target != album_icon_instance){
                return;
            };
            var _local2:TooltipManager = TooltipManager.getInstance();
            switch (_arg1.type){
                case MouseEvent.MOUSE_OVER:
                    _local2.setOffsetPoint(-69, -25);
                    _local2.setLimitWidth(NaN);
                    _local2.setText("앨범정보보기");
                    _local2.setHorizontalAlign(HorizontalAlignment.RIGHT);
                    _local2.setVerticalAlign(VerticalAlignment.BOTTOM);
                    _local2.show();
                    break;
                case MouseEvent.MOUSE_OUT:
                    _local2.hide();
                    break;
            };
        }
        public function createChildren():void{
            var indexFormat:* = null;
            var albumIcon:* = null;
            var mp3Icon:* = null;
            var listenIcon:* = null;
            var isAdultIcon:* = null;
            var checkboxIcon:* = null;
            if (!Boolean(leftDisableSprite)){
                leftDisableSprite = new Sprite();
                leftDisableSprite.mouseEnabled = true;
                leftDisableSprite.useHandCursor = false;
                leftDisableSprite.x = 0;
                var _local2 = leftDisableSprite.graphics;
                with (_local2) {
                    clear();
                    beginFill(0, 0);
                    drawRect(0, 0, 24, 43);
                    endFill();
                };
                base.addChild(leftDisableSprite);
            };
            if (!Boolean(rightDisableSprite)){
                rightDisableSprite = new Sprite();
                rightDisableSprite.mouseEnabled = true;
                rightDisableSprite.useHandCursor = false;
                rightDisableSprite.x = 167;
                _local2 = rightDisableSprite.graphics;
                with (_local2) {
                    clear();
                    beginFill(0xFF0000, 0);
                    drawRect(0, 0, 63, 43);
                    endFill();
                };
                base.addChild(rightDisableSprite);
            };
            if (!Boolean(songIndex)){
                songIndex = new TextField();
                songIndex.blendMode = BlendMode.LAYER;
                songIndex.mouseEnabled = false;
                songIndex.selectable = false;
                songIndex.x = 15;
                songIndex.y = 11;
                songIndex.width = 28;
                indexFormat = new TextFormat();
                indexFormat.align = TextFormatAlign.CENTER;
                indexFormat.font = PostingConfig.getDefaultSystemFontFamliy();
                indexFormat.size = 12;
                indexFormat.color = defaultSongIndexFormatColor;
                songIndex.defaultTextFormat = indexFormat;
                base.addChild(songIndex);
            };
            if (!Boolean(songTitle)){
                songTitle = new FlowTextField();
                _local2 = songTitle;
                with (_local2) {
                    maskRect = new Rectangle(0, 0, 132, 24);
                    interval = 15;
                    availableWidth = 105;
                    useAlphaTransition = false;
                    fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                    fontSize = 12;
                    fontColor = defaultSongTitleTextColor;
                    mouseOverFontColor = activeSongIndexFormatColor;
                    x = (26 + 13);
                    y = 4;
                };
                base.addChild(songTitle);
            };
            if (!Boolean(songSinger)){
                songSinger = new FlowTextField();
                _local2 = songSinger;
                with (_local2) {
                    maskRect = new Rectangle(0, 0, 132, 24);
                    interval = 15;
                    availableWidth = 105;
                    useAlphaTransition = false;
                    fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                    fontSize = 12;
                    fontColor = defaultSongSingerTextColor;
                    mouseOverFontColor = activeSongIndexFormatColor;
                    x = songTitle.x;
                    y = (songTitle.y + 14);
                };
                base.addChild(songSinger);
            };
            if (!Boolean(album_icon_instance)){
                album_icon_instance = new album_icon();
                albumIcon = (album_icon_instance as MovieClip);
                if (Boolean(albumIcon)){
                    albumIcon.name = "album_icon";
                    albumIcon.buttonMode = true;
                    albumIcon.useHandCursor = true;
                    albumIcon.x = (173 - 1);
                    albumIcon.y = (15 - 4);
                    albumIcon.addEventListener(MouseEvent.MOUSE_OVER, handleAlbumIconMouseEvent, false, 0, true);
                    albumIcon.addEventListener(MouseEvent.MOUSE_OUT, handleAlbumIconMouseEvent, false, 0, true);
                };
                base.addChild(album_icon_instance);
            };
            if (!Boolean(mp3_icon_instance)){
                mp3_icon_instance = new mp3_icon();
                mp3Icon = (mp3_icon_instance as MovieClip);
                if (Boolean(mp3Icon)){
                    mp3Icon.name = "mp3_icon";
                    mp3Icon.buttonMode = true;
                    mp3Icon.useHandCursor = true;
                    mp3Icon.gotoAndStop(1);
                    mp3Icon.x = (191 - 1);
                    mp3Icon.y = (15 - 4);
                };
                base.addChild(mp3_icon_instance);
            };
            if (!Boolean(listen_icon_instance)){
                listen_icon_instance = new listen_icon();
                listenIcon = (listen_icon_instance as DisplayObject);
                if (Boolean(listenIcon)){
                    listenIcon.x = 22;
                    listenIcon.y = 13;
                    listenIcon.visible = false;
                };
                base.addChild(listen_icon_instance);
            };
            if (!Boolean(is_adult_icon_instance)){
                is_adult_icon_instance = new is_adult_icon();
                isAdultIcon = (is_adult_icon_instance as MovieClip);
                if (Boolean(isAdultIcon)){
                    isAdultIcon.mouseEnabled = false;
                    isAdultIcon.visible = false;
                };
                base.addChild(is_adult_icon_instance);
            };
            if (!Boolean(checkbox_icon_instance)){
                checkbox_icon_instance = new checkbox_icon();
                checkboxIcon = (checkbox_icon_instance as MovieClip);
                if (Boolean(checkboxIcon)){
                    checkboxIcon.name = "checkbox_icon";
                    checkboxIcon.gotoAndStop(1);
                    checkboxIcon.x = 10;
                    checkboxIcon.y = 14;
                };
                base.addChild(checkbox_icon_instance);
            };
        }
        private function registEventHandler():void{
        }
        public function get isFooterCell():Boolean{
            return (_isFooterCell);
        }
        public function get listData():ListData{
            return (_listData);
        }
        public function createBase():void{
            base = new Sprite();
            base.mouseEnabled = false;
            base.graphics.clear();
            base.graphics.beginFill(defaultBgColor);
            base.graphics.drawRect(0, 0, 230, 43);
            base.graphics.endFill();
            addChild(base);
            drawHorizontoalGridLine();
        }
        public function setMouseState(_arg1:String):void{
            _setMouseState = _arg1;
        }
        public function get isValidCell():Boolean{
            var _local1:SongInfoServiceObject;
            _local1 = (data as SongInfoServiceObject);
            if (Boolean(_local1)){
                if (((!(_local1.isValid)) || (!(_local1.isServiced)))){
                    return (false);
                };
            };
            return (true);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverMiniPlayerCellRenderer_listen_icon extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.webapis.ns.*;

    public class SongInfoServiceObject {

        private var _isSelected:Boolean;
        public var abstractedTitle:String;
        private var _isChecked:Boolean;
        private var _isPlaying:Boolean;
        public var originalLength:Number;
        private var _isValid:Boolean = true;
        private var _isServiced:Boolean = true;
        private var _songServiceObject:Song;
        public var isEmpty:Boolean = false;
        public var index:int = -1;
        public var soIndex:int = -1;
        public var _icon;
        public var isAbstract:Boolean;
        private var _label:String;

        public function SongInfoServiceObject(_arg1:Song=null, _arg2:Boolean=false){
            if (Boolean(_arg1)){
                songServiceObject = _arg1;
                label = _arg1.track.tracktitle;
                this.isEmpty = _arg2;
            };
        }
        public function release():void{
            _icon = null;
            _label = null;
            if (Boolean(_songServiceObject)){
                _songServiceObject.releaseMemory();
                _songServiceObject = null;
            };
        }
        public function get icon(){
            return (_icon);
        }
        public function hasMp3File():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.hasmp3){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function isInvalidServiceFlag():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.serviceflag){
                    case "N":
                        _local1 = true;
                        break;
                    case "Y":
                        _local1 = false;
                        break;
                };
            };
            return (_local1);
        }
        public function updateLyric(_arg1:Song):Boolean{
            var _local3:Boolean;
            var _local2:Song = songServiceObject;
            if (Boolean(_local2)){
                _local3 = true;
            };
            return (_local3);
        }
        public function getArtistid():String{
            var _local1:String;
            var _local2:Artist;
            if (Boolean(songServiceObject)){
                _local2 = (songServiceObject.artistlist.list[0] as Artist);
                if (Boolean(_local2)){
                    _local1 = _local2.artistid;
                };
            };
            return (_local1);
        }
        public function get isServiced():Boolean{
            return (_isServiced);
        }
        public function getAlbumid():String{
            var _local1:String;
            var _local2:Album;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.albumid;
            };
            return (_local1);
        }
        public function get isChecked():Boolean{
            return (_isChecked);
        }
        public function getAlbumTitle():String{
            var _local2:Album;
            var _local1:String;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty"));
                };
                _local1 = _local2.albumtitle;
                if (!Boolean(_local1)){
                    _local1 = "untitle";
                };
            };
            return (_local1);
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get adultProperty():String{
            if (!Boolean(songServiceObject)){
                throw (new Error("Song data is null!"));
            };
            return (songServiceObject.adult);
        }
        public function set isServiced(_arg1:Boolean):void{
            this._isServiced = _arg1;
        }
        public function get songServiceObject():Song{
            return (_songServiceObject);
        }
        public function set isChecked(_arg1:Boolean):void{
            this._isChecked = _arg1;
        }
        public function getAlbumJacketThumbURL():String{
            var _local1:String;
            var _local2:Album;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.imageurl;
            };
            return (_local1);
        }
        public function set isPlaying(_arg1:Boolean):void{
            this._isPlaying = _arg1;
        }
        public function set isSelected(_arg1:Boolean):void{
            this._isSelected = _arg1;
        }
        public function getTrackTitle():String{
            var _local1:String;
            var _local2:Track;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.track;
                if (!Boolean(_local2)){
                    throw (new Error("Track is empty!"));
                };
                _local1 = _local2.tracktitle;
            };
            return (_local1);
        }
        public function clone():SongInfoServiceObject{
            var _local1:Song = songServiceObject.clone();
            var _local2:SongInfoServiceObject = new SongInfoServiceObject(_local1);
            _local2.isPlaying = false;
            _local2.isEmpty = isEmpty;
            _local2.isChecked = false;
            return (_local2);
        }
        public function set isValid(_arg1:Boolean):void{
            this._isValid = _arg1;
        }
        public function get isSelected():Boolean{
            return (_isSelected);
        }
        public function set label(_arg1:String):void{
            this._label = _arg1;
        }
        public function canAcquireMP3File():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.free){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function getArtistName():String{
            var _local1:String;
            var _local2:Artist;
            if (Boolean(songServiceObject)){
                _local2 = (songServiceObject.artistlist.list[0] as Artist);
                if (Boolean(_local2)){
                    _local1 = _local2.artistname;
                };
            };
            return (_local1);
        }
        public function set updateServiceFlag(_arg1:String):void{
            songServiceObject.nhn_music_ns::serviceflag = _arg1;
        }
        public function set icon(_arg1):void{
            this._icon = _arg1;
        }
        public function get label():String{
            return (_label);
        }
        public function get isValid():Boolean{
            return (_isValid);
        }
        public function get singer():String{
            var _local1 = "";
            if (((((!(Boolean(songServiceObject.artistlist))) || (!(Boolean(songServiceObject.artistlist.list))))) || ((songServiceObject.artistlist.length == 0)))){
                return ("V.A ");
            };
            var _local2:Array = songServiceObject.artistlist.list;
            var _local3:int = _local2.length;
            var _local4:int;
            while (_local4 < _local3) {
                _local1 = (_local1 + _local2[_local4].artistname);
                if ((((_local3 > 1)) && (!((_local4 == (_local3 - 1)))))){
                    _local1 = (_local1 + ", ");
                };
                _local4++;
            };
            return (_local1);
        }
        public function isAdultSong():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.adult){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function set songServiceObject(_arg1:Song):void{
            if (Boolean(this._songServiceObject)){
                this._songServiceObject.releaseMemory();
                this._songServiceObject = null;
            };
            this._songServiceObject = _arg1;
        }
        public function getTrackID():String{
            var _local1:String;
            var _local2:Track;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.track;
                if (!Boolean(_local2)){
                    throw (new Error("Track is empty!"));
                };
                _local1 = _local2.trackid;
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject {

    public class UserInfo {

        public static const AUTH_WHOLE:uint = 0;
        public static const AUTH_ONE_MINUTE:uint = 1;
        public static const IS_ADULT:String = "Y";
        public static const AUTH_NONE:uint = 2;
        public static const HAS_TICKET:String = "Y";
        public static const IS_LOGIN:String = "Y";
        public static const IS_NOT_LOGIN:String = "N";
        public static const DOES_NOT_HAVE_TICKET:String = "N";
        public static const IS_NOT_ADULT:String = "N";

        private var _hasTicket:String;
        private var _isLogin:String;
        private var _isAdult:String;
        private var _isAuth:uint;

        public function set isAdult(_arg1:String):void{
            this._isAdult = _arg1;
        }
        public function set isAuth(_arg1:uint):void{
            this._isAuth = _arg1;
        }
        public function get hasTicket():String{
            return (_hasTicket);
        }
        public function set hasTicket(_arg1:String):void{
            this._hasTicket = _arg1;
        }
        public function get isAdult():String{
            return (_isAdult);
        }
        public function get isAuth():uint{
            return (_isAuth);
        }
        public function set isLogin(_arg1:String):void{
            this._isLogin = _arg1;
        }
        public function get isLogin():String{
            return (_isLogin);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.*;

    public class MusicPlayerBasicModel extends EventDispatcher {

        public static const REPEAT_ONE_SONG:String = "REPEAT_ONE_SONG";
        public static const REPEAT_ALL_SONG:String = "REPEAT_ALL_SONG";
        public static const NO_REPEAT:String = "NO_REPEAT";
        public static const VISIBLE_ROW_COUNT:int = 6;

        private static var instance:MusicPlayerBasicModel = null;

        private var _tmpNextNode:DListNode;
        private var _musicPlayList:DLinkedList;
        private var _activeMusicList:DLinkedList;
        private var _playingSongNode:DListNode;
        private var _activeNode:DListNode;
        private var _tmpPrevNode:DListNode;
        private var _repeatOption:String = "NO_REPEAT";
        private var _isShuffled:Boolean;
        private var _userInfo:UserInfo;

        public function MusicPlayerBasicModel(){
            if (Boolean(instance)){
                throw (new Error("MusicPlayerBasicModel is Singleton"));
            };
            _musicPlayList = new DLinkedList();
            _activeMusicList = new DLinkedList();
            _userInfo = new UserInfo();
        }
        public static function getInstance():MusicPlayerBasicModel{
            if (!Boolean(instance)){
                instance = new (MusicPlayerBasicModel)();
            };
            return ((instance as MusicPlayerBasicModel));
        }

        public function unShuffleActiveList():void{
            var _local1:Boolean;
            isShuffled = false;
            activeMusicList = musicPlayList.concat();
            if (Boolean(activeNode)){
                playingSongNode = searchVaildSongObjectFromPlayingList(activeNode.data);
            };
        }
        public function get playingSongNode():DListNode{
            return (_playingSongNode);
        }
        public function setNextSongAsCurrentActiveSong(_arg1:DLinkedList=null, _arg2:Boolean=false):Boolean{
            var _local4:DListNode;
            var _local3:Boolean;
            if (Boolean(playingSongNode)){
                if (_arg2){
                    _local4 = nextSongByMouseInteraction;
                } else {
                    _local4 = nextSong;
                };
                if (Boolean(_local4)){
                    _local3 = true;
                    playingSongNode = _local4;
                    activeNode = searchVaildSongObject(playingSongNode.data, _arg1);
                };
            };
            return (_local3);
        }
        public function get activeMusicListAsArray():Array{
            var _local1:Array = _activeMusicList.toArray();
            if (_local1.length == 0){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function shufflePlayList():void{
        }
        public function removeAllPlayList():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._musicPlayList)){
                _local1 = this._musicPlayList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3.release();
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
            };
        }
        public function get musicPlayListAsArray():Array{
            var _local1:Array = _musicPlayList.toArray();
            if (((!(Boolean(_local1))) || ((_local1.length == 0)))){
                return (new Array());
            };
            return (_local1);
        }
        public function set playingSongNode(_arg1:DListNode):void{
            this._playingSongNode = _arg1;
        }
        public function addSingleSongToPlayListAtFirst(_arg1):void{
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _musicPlayList.prepend(_arg1);
            };
        }
        public function get tmpPrevNode():DListNode{
            return (_tmpPrevNode);
        }
        public function set tmpPrevNode(_arg1:DListNode):void{
            this._tmpPrevNode = _arg1;
        }
        public function get userInfo():UserInfo{
            return (_userInfo);
        }
        public function shuffleActiveList():void{
            var _local4:SongInfoServiceObject;
            var _local6:DListIterator;
            var _local7:int;
            isShuffled = true;
            var _local1:Boolean;
            activeMusicList = propertList;
            if (Boolean(activeNode)){
                playingSongNode = searchVaildSongObjectFromPlayingList(activeNode.data);
                _local6 = activeMusicList.nodeOf(playingSongNode.data);
                if (Boolean(_local6)){
                    activeMusicList.remove(_local6);
                };
                _local1 = true;
            };
            var _local2:Array = activeMusicList.toArray();
            Math.random();
            var _local3:int;
            while (_local3 < _local2.length) {
                _local7 = (_local3 + (Math.random() * (_local2.length - _local3)));
                swap(_local2, _local3, _local7);
                _local3++;
            };
            this.activeMusicList.clear();
            var _local5:int;
            while (_local5 < _local2.length) {
                _local4 = _local2[_local5];
                activeMusicList.append(_local4);
                _local5++;
            };
            if (_local1){
                activeMusicList.prepend(playingSongNode.data);
                playingSongNode = searchVaildSongObjectFromPlayingList(playingSongNode.data);
                dispatchEvent(new Event("initializeView"));
            };
        }
        public function set tmpNextNode(_arg1:DListNode):void{
            this._tmpNextNode = _arg1;
        }
        public function searchVaildSongObject(_arg1:SongInfoServiceObject, _arg2:DLinkedList=null):DListNode{
            var _local3:DListIterator;
            if (!Boolean(_arg2)){
                _local3 = (musicPlayList.nodeOf(_arg1) as DListIterator);
            } else {
                _local3 = (_arg2.nodeOf(_arg1) as DListIterator);
            };
            var _local4:DListNode;
            if (Boolean(_local3)){
                _local4 = _local3.node;
            };
            return (_local4);
        }
        public function get activeNode():DListNode{
            return (_activeNode);
        }
        public function set isShuffled(_arg1:Boolean):void{
            this._isShuffled = _arg1;
        }
        private function swap(_arg1:Array, _arg2:int, _arg3:int):void{
            var _local4:Object = _arg1[_arg2];
            _arg1[_arg2] = _arg1[_arg3];
            _arg1[_arg3] = _local4;
        }
        public function searchVaildSongObjectBySongObject(_arg1:Song, _arg2:DLinkedList):DListNode{
            var _local3:DListNode;
            var _local5:SongInfoServiceObject;
            var _local4:DListIterator = _arg2.getListIterator();
            _local4.start();
            while (_local4.hasNext()) {
                _local5 = (_local4.node.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    if (_local5.songServiceObject.compare(_arg1)){
                        break;
                    };
                };
                _local4.next();
            };
            return (_local4.node);
        }
        public function get nextSong():DListNode{
            var _local1:DListNode;
            var _local2:MiniPlayerModel = MiniPlayerModel.getInstance();
            switch (repeatOption){
                case REPEAT_ONE_SONG:
                    _local1 = playingSongNode;
                    if (Boolean(_local1)){
                        if (Boolean(_local1.data)){
                            if (((_local1.data.isValid) && (_local1.data.isServiced))){
                                _local2.increaseRepeatCount();
                            } else {
                                _local1 = playingSongNode.next;
                                if (!Boolean(_local1)){
                                    _local1 = activeMusicList.head;
                                    _local2.initRepeatCount();
                                };
                            };
                        };
                    };
                    break;
                case NO_REPEAT:
                case REPEAT_ALL_SONG:
                    _local1 = playingSongNode.next;
                    if (!Boolean(_local1)){
                        _local1 = activeMusicList.head;
                        if (repeatOption == REPEAT_ALL_SONG){
                            _local2.increaseRepeatCount();
                        };
                    };
                    break;
            };
            return (_local1);
        }
        public function set userInfo(_arg1:UserInfo):void{
            this._userInfo = _arg1;
        }
        public function addSingleSongToPlayListAtIndex(_arg1, _arg2:int):void{
            var _local3:int;
            var _local4:DListIterator;
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _local3 = 1;
                _local4 = _musicPlayList.getListIterator();
                _local4.start();
                while (_local4.hasNext()) {
                    if (_arg2 === _local3){
                        break;
                    };
                    _local3++;
                    _local4.next();
                };
                musicPlayList.insertAfter(_local4, _arg1);
            };
        }
        public function get musicPlayList():DLinkedList{
            return (_musicPlayList);
        }
        public function allListAdultCheck():Boolean{
            var _local4:SongInfoServiceObject;
            var _local5:Song;
            var _local6:Boolean;
            var _local1:Boolean;
            var _local2:DLinkedList = activeMusicList;
            var _local3:DListIterator = _local2.getListIterator();
            if (_local3){
                _local6 = false;
                while (_local3.hasNext()) {
                    _local4 = (_local3.node.data as SongInfoServiceObject);
                    if (_local4){
                        if (((_local4.isValid) && (_local4.isServiced))){
                            _local6 = true;
                            break;
                        };
                        if (((((!(_local6)) && (((!(_local4.isValid)) || (!(_local4.isServiced)))))) && (((!(Boolean(_local3.node.next))) || ((_local3.node.next == _local2.head)))))){
                            _local1 = true;
                        };
                    };
                    _local3.next();
                };
            };
            return (_local1);
        }
        public function setPrevSongAsCurrentActiveSong(_arg1:DLinkedList=null):Boolean{
            var _local3:DListNode;
            var _local2:Boolean;
            if (Boolean(playingSongNode)){
                _local3 = prevSong;
                if (Boolean(_local3)){
                    playingSongNode = _local3;
                    activeNode = searchVaildSongObject(playingSongNode.data, _arg1);
                    _local2 = true;
                };
            };
            return (_local2);
        }
        public function get tmpNextNode():DListNode{
            return (_tmpNextNode);
        }
        public function set activeNode(_arg1:DListNode):void{
            this._activeNode = _arg1;
        }
        public function addSingleSongToTargetListAtLast(_arg1:DLinkedList, _arg2):void{
            if (((Boolean(_arg2)) && (Boolean(_arg1)))){
                _arg1.append(_arg2);
            };
        }
        public function get isShuffled():Boolean{
            return (_isShuffled);
        }
        public function removeAllActiveSongList():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._activeMusicList)){
                _local1 = this._activeMusicList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
                this._activeMusicList.clear();
            };
        }
        public function isValidNextPlayState():Boolean{
            if (repeatOption == NO_REPEAT){
                if (((Boolean(activeNode)) && (!(Boolean(activeNode.next))))){
                    return (false);
                };
            };
            return (true);
        }
        public function addSingleSongToTargetListAtFirst(_arg1:DLinkedList, _arg2):void{
            if (((Boolean(_arg2)) && (Boolean(_arg1)))){
                _arg1.prepend(_arg2);
            };
        }
        public function set repeatOption(_arg1:String):void{
            this._repeatOption = _arg1;
        }
        public function get propertList():DLinkedList{
            var _local1:DLinkedList;
            _local1 = musicPlayList.concat();
            return (_local1);
        }
        public function searchVaildSongObjectFromPlayingList(_arg1:SongInfoServiceObject):DListNode{
            var _local2:DListIterator = (activeMusicList.nodeOf(_arg1) as DListIterator);
            var _local3:DListNode;
            if (Boolean(_local2)){
                _local3 = _local2.node;
            };
            return (_local3);
        }
        public function releaseModel():void{
            removeAllPlayList();
            _musicPlayList = null;
        }
        public function get nextSongByMouseInteraction():DListNode{
            var _local1:DListNode;
            var _local2:MiniPlayerModel = MiniPlayerModel.getInstance();
            switch (repeatOption){
                case REPEAT_ONE_SONG:
                case NO_REPEAT:
                case REPEAT_ALL_SONG:
                    _local1 = playingSongNode.next;
                    if (!Boolean(_local1)){
                        _local1 = activeMusicList.head;
                        if (repeatOption == REPEAT_ALL_SONG){
                            _local2.increaseRepeatCount();
                        };
                    };
                    if (Boolean(_local1)){
                        if (repeatOption == REPEAT_ONE_SONG){
                            _local2.initRepeatCount();
                        };
                    };
                    break;
            };
            return (_local1);
        }
        public function changeSongIndex(_arg1:Object, _arg2:Array, _arg3:int=-1):void{
            var _local5:int;
            var _local6:int;
            var _local4:DListIterator = _musicPlayList.nodeOf(_arg1);
            if (Boolean(_local4)){
                _local5 = _arg2.length;
                _local6 = 0;
                while (_local6 < _local5) {
                    _musicPlayList.insertAfter(_local4, _arg2[_local6]);
                    _local6++;
                };
            };
        }
        public function set musicPlayList(_arg1:DLinkedList):void{
            removeAllPlayList();
            this._musicPlayList = _arg1;
        }
        public function get prevSong():DListNode{
            var _local1:DListNode;
            var _local2:MiniPlayerModel;
            switch (repeatOption){
                case REPEAT_ONE_SONG:
                    _local1 = playingSongNode.prev;
                    if (!Boolean(_local1)){
                        _local1 = activeMusicList.tail;
                    };
                    if (Boolean(_local1)){
                        _local2 = MiniPlayerModel.getInstance();
                        _local2.initRepeatCount();
                    };
                    break;
                case NO_REPEAT:
                case REPEAT_ALL_SONG:
                    _local1 = playingSongNode.prev;
                    if (!Boolean(_local1)){
                        _local1 = activeMusicList.tail;
                    };
                    break;
            };
            return (_local1);
        }
        public function get repeatOption():String{
            return (_repeatOption);
        }
        public function removeExistNode(_arg1):void{
            var _local2:DListIterator = _musicPlayList.nodeOf(_arg1);
            if (((Boolean(_local2)) && (Boolean(_local2.node)))){
                _local2.remove();
            };
        }
        public function addSingleSongToTargetListAtIndex(_arg1:DLinkedList, _arg2, _arg3:int):void{
            var _local4:int;
            var _local5:DListIterator;
            if (((Boolean(_arg1)) && (Boolean(_arg2)))){
                _local4 = 1;
                _local5 = _musicPlayList.getListIterator();
                _local5.start();
                while (_local5.hasNext()) {
                    if (_arg3 === _local4){
                        break;
                    };
                    _local4++;
                    _local5.next();
                };
                musicPlayList.insertAfter(_local5, _arg2);
            };
        }
        public function set activeMusicList(_arg1:DLinkedList):void{
            removeAllActiveSongList();
            this._activeMusicList = _arg1;
        }
        public function addSingleSongToPlayListAtLast(_arg1):void{
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _musicPlayList.append(_arg1);
            };
        }
        public function get activeMusicList():DLinkedList{
            return (_activeMusicList);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;

    public class TextMemo extends Sprite {

        protected static var properties:Array = ["text", "textFormat", "backgroundColor", "borderColor", "leftMargin", "topMargin"];

        private var _backgroundColor:uint = 16711399;
        private var _textFormat:TextFormat;
        private var _hAlign:String = "right";
        private var border:Shape;
        private var background:Shape;
        private var _leftMargin:Number = 3;
        private var _isInline:Boolean = true;
        protected var limitWidth:Number = NaN;
        private var _vAlign:String = "bottom";
        protected var textField:TextField;
        private var _borderColor:uint = 0;
        protected var actualHeight:Number = 0;
        protected var actualWidth:Number = 0;
        private var _topMargin:Number = 3;

        public function TextMemo(_arg1:String=null, _arg2:TextFormat=null, _arg3:uint=16711399, _arg4:uint=0, _arg5:Number=3, _arg6:Number=3, _arg7:String="right", _arg8:String="bottom", _arg9:Boolean=true){
            var _local10:TextFormat;
            super();
            initialize();
            this.text = _arg1;
            if (Boolean(_arg2)){
                this.textFormat = _arg2;
            } else {
                _local10 = new TextFormat("Dotum,돋움,AppleGothic,_sans", 12, 0, null, null, null, null, null, null, null, null, null, null);
                _local10.letterSpacing = -0.5;
                this.textFormat = _local10;
            };
            this.borderColor = _arg4;
            this.backgroundColor = _arg3;
            this.leftMargin = _arg5;
            this.topMargin = _arg6;
            this.hAlign = _arg7;
            this.vAlign = _arg8;
            this.isInline = _arg9;
        }
        public function get textFormat():TextFormat{
            if (Boolean(textField.getTextFormat().font)){
                _textFormat = textField.getTextFormat();
            };
            return (_textFormat);
        }
        public function set textFormat(_arg1:TextFormat):void{
            if (!Boolean(_arg1)){
                return;
            };
            _textFormat = _arg1;
            textField.defaultTextFormat = _arg1;
            textField.setTextFormat(_arg1);
        }
        protected function initialize():void{
            mouseChildren = false;
            mouseEnabled = false;
            background = new Shape();
            addChild(background);
            textField = new TextField();
            addChild(textField);
            border = new Shape();
            addChild(border);
            var _local2 = textField;
            with (_local2) {
                selectable = false;
                mouseEnabled = false;
                autoSize = TextFieldAutoSize.LEFT;
                blendMode = BlendMode.LAYER;
            };
        }
        protected function drawBackground():void{
            var _local2 = background.graphics;
            with (_local2) {
                clear();
                beginFill(backgroundColor);
                drawRect(0, 0, actualWidth, actualHeight);
            };
        }
        public function get leftMargin():Number{
            return (_leftMargin);
        }
        public function get borderColor():uint{
            return (_borderColor);
        }
        protected function drawBorder():void{
            var _local2 = border.graphics;
            with (_local2) {
                clear();
                lineStyle(1, borderColor, 1, false, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 3);
                drawRect(0, 0, (actualWidth - 1), (actualHeight - 1));
            };
        }
        override public function get height():Number{
            return (actualHeight);
        }
        public function get text():String{
            return (textField.text);
        }
        public function get vAlign():String{
            return (_vAlign);
        }
        public function set backgroundColor(_arg1:uint):void{
            if (_backgroundColor === _arg1){
                return;
            };
            _backgroundColor = _arg1;
            drawBackground();
        }
        public function set borderColor(_arg1:uint):void{
            if (_borderColor === _arg1){
                return;
            };
            _borderColor = _arg1;
            drawBorder();
        }
        public function set leftMargin(_arg1:Number):void{
            if (_leftMargin === _arg1){
                return;
            };
            _leftMargin = _arg1;
        }
        public function getType():String{
            var _local1:String = getQualifiedClassName(this);
            return (_local1.substring((_local1.lastIndexOf(":") + 1), _local1.length));
        }
        public function update():void{
            initActualSize();
            textField.wordWrap = false;
            textField.multiline = false;
            var _local1:Number = textField.width;
            if (!isInline){
                textField.wordWrap = true;
                textField.multiline = true;
                if (Boolean(limitWidth)){
                    textField.width = Math.min(_local1, limitWidth);
                };
            };
            actualWidth = Math.max(actualWidth, (textField.width + leftMargin));
            actualHeight = Math.max(actualHeight, (textField.height + topMargin));
            updateShape();
            textField.x = Math.floor(((actualWidth - textField.width) * 0.5));
            textField.y = Math.round(((actualHeight - textField.height) * 0.5));
            dispatchEvent(new Event(Event.CHANGE));
        }
        override public function get width():Number{
            return (actualWidth);
        }
        public function move(_arg1:Number, _arg2:Number):void{
            if (Boolean(_arg1)){
                this.x = _arg1;
            };
            if (Boolean(_arg2)){
                this.y = _arg2;
            };
        }
        public function get backgroundColor():uint{
            return (_backgroundColor);
        }
        public function set text(_arg1:String):void{
            if ((((_arg1 === "")) || (!(Boolean(_arg1))))){
                return;
            };
            textField.text = _arg1;
            update();
        }
        public function getTransformOriginY():Number{
            var _local1:Number;
            switch (vAlign){
                case VerticalAlignment.BOTTOM:
                    _local1 = 1;
                    break;
                case VerticalAlignment.TOP:
                    _local1 = 0;
                    break;
                default:
                    _local1 = 0.5;
            };
            return (_local1);
        }
        public function set topMargin(_arg1:Number):void{
            if (_topMargin === _arg1){
                return;
            };
            _topMargin = _arg1;
        }
        public function set vAlign(_arg1:String):void{
            if (_vAlign === _arg1){
                return;
            };
            _vAlign = _arg1;
            switch (vAlign){
                case VerticalAlignment.BOTTOM:
                    y = 0;
                    break;
                case VerticalAlignment.TOP:
                    y = -(height);
                    break;
                case VerticalAlignment.CENTER:
                    y = (-(height) * 0.5);
                    break;
                default:
                    throw (new ArgumentError("유효하지 않는 수직 정렬 값을 입력하였습니다."));
            };
        }
        protected function initActualSize():void{
            actualWidth = 0;
            actualHeight = 0;
        }
        public function get topMargin():Number{
            return (_topMargin);
        }
        public function getTransformOriginX():Number{
            var _local1:Number;
            switch (hAlign){
                case HorizontalAlignment.RIGHT:
                    _local1 = 1;
                    break;
                case HorizontalAlignment.LEFT:
                    _local1 = 0;
                    break;
                default:
                    _local1 = 0.5;
            };
            return (_local1);
        }
        override public function toString():String{
            var _local1:String;
            var _local2:String;
            var _local3:String;
            _local2 = getType();
            _local1 = (("{" + _local2) + " start}\n");
            for each (_local3 in properties) {
                _local1 = (_local1 + (((_local3 + " : ") + this[_local3]) + "\n"));
            };
            _local1 = (_local1 + (("{" + _local2) + " end}"));
            return (_local1);
        }
        public function setLimitWidth(_arg1:Number):void{
            this.limitWidth = _arg1;
            isInline = ((Boolean(_arg1)) ? false : true);
        }
        protected function updateShape():void{
            if ((((actualWidth == 0)) || ((actualHeight == 0)))){
                return;
            };
            drawBackground();
            drawBorder();
        }
        public function get isInline():Boolean{
            return (_isInline);
        }
        public function set isInline(_arg1:Boolean):void{
            _isInline = _arg1;
            if (Boolean(isInline)){
                limitWidth = NaN;
            };
        }
        public function set hAlign(_arg1:String):void{
            if (_hAlign === _arg1){
                return;
            };
            _hAlign = _arg1;
            switch (hAlign){
                case HorizontalAlignment.RIGHT:
                    x = 0;
                    break;
                case HorizontalAlignment.LEFT:
                    x = -(width);
                    break;
                case HorizontalAlignment.CENTER:
                    x = (-(width) * 0.5);
                    break;
                default:
                    throw (new ArgumentError("유효하지 않는 수평 정렬 값을 입력하였습니다."));
            };
        }
        public function get hAlign():String{
            return (_hAlign);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.flashdynamix.motion.*;
    import flash.text.*;
    import fl.motion.easing.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils.*;

    public class FlowTextField extends Sprite {

        protected static const BITMAP_MAX_WIDTH:int = 2880;

        public static var properties:Array = ["text", "originText", "textFormat", "fontFamily", "fontSize", "fontColor", "mouseOverFontColor", "bold", "letterSpacing", "width", "height", "textWidth", "textHeight", "availableWidth", "isReduced", "useFlowEffect", "useAlphaTransition"];

        private var flowCount:Number = 0;
        private var virtualTextField:TextField;
        private var _text:String = null;
        private var _delimiter:String = "...";
        protected var _originText:String = null;
        private var defaultFontColor:uint;
        private var isUseMouseOverFontColor:Boolean = false;
        private var _flowPixelUnit:Number = 1;
        private var _availableWidth:Number = NaN;
        private var displayTextField:TextField;
        private var isTextChanged:Boolean = false;
        private var _useFlowEffect:Boolean = true;
        private var _alphaTransitionDuration:Number = 0.4;
        private var _alphaTransitionDelay:Number = 0;
        private var _flowTextSpace:Number = 10;
        private var flowTextBitmapData:BitmapData;
        private var _orignTextVisible:Boolean = false;
        private var _maskRect:Rectangle;
        private var _mouseOverFontColor:uint;
        private var flowTextShape:Shape;
        private var _useAlphaTransition:Boolean = true;

        public function FlowTextField(_arg1:String=null, _arg2:Number=12, _arg3:uint=0, _arg4:Boolean=false, _arg5:Number=1, _arg6:Number=NaN, _arg7:String="..."){
            initialize();
            if (!isNaN(_arg6)){
                this.availableWidth = _arg6;
            };
            this.fontFamily = _arg1;
            this.fontSize = _arg2;
            this.fontColor = _arg3;
            this.bold = _arg4;
            this.letterSpacing = _arg5;
            this.delimiter = _arg7;
        }
        protected function initialize():void{
            virtualTextField = new TextField();
            var _local2 = virtualTextField;
            with (_local2) {
                text = "";
                mouseEnabled = false;
                selectable = false;
                autoSize = TextFieldAutoSize.LEFT;
            };
            displayTextField = new TextField();
            _local2 = displayTextField;
            with (_local2) {
                text = "";
                mouseEnabled = false;
                selectable = false;
                visible = false;
                autoSize = TextFieldAutoSize.LEFT;
                blendMode = BlendMode.LAYER;
            };
            addChild(displayTextField);
            addEventListener(MouseEvent.MOUSE_OVER, handleMouseEvent, false, 0, true);
            addEventListener(MouseEvent.MOUSE_OUT, handleMouseEvent, false, 0, true);
        }
        public function get bold():Boolean{
            return ((getTextFormatProperty("bold") as Boolean));
        }
        public function get delimiter():String{
            return (_delimiter);
        }
        public function set textFormat(_arg1:TextFormat):void{
            if (Boolean(displayTextField)){
                return (displayTextField.setTextFormat(_arg1));
            };
        }
        public function set bold(_arg1:Boolean):void{
            setTextFormatProperty("bold", _arg1);
        }
        public function get textFormat():TextFormat{
            if (Boolean(displayTextField)){
                return (displayTextField.getTextFormat());
            };
            return (null);
        }
        public function set delimiter(_arg1:String):void{
            if (_delimiter === _arg1){
                return;
            };
            _delimiter = _arg1;
        }
        public function set flowTextSpace(_arg1:Number):void{
            _flowTextSpace = _arg1;
        }
        public function get textWidth():Number{
            if (Boolean(displayTextField)){
                return (displayTextField.textWidth);
            };
            return (NaN);
        }
        public function get fontFamily():String{
            return ((getTextFormatProperty("font") as String));
        }
        public function set useFlowEffect(_arg1:Boolean):void{
            if (_useFlowEffect === _arg1){
                return;
            };
            _useFlowEffect = _arg1;
        }
        public function set availableWidth(_arg1:Number):void{
            if (_availableWidth === _arg1){
                return;
            };
            _availableWidth = _arg1;
        }
        protected function removeBitmapText():void{
            if (Boolean(flowTextBitmapData)){
                flowTextBitmapData.dispose();
                flowTextBitmapData = null;
            };
            if (Boolean(flowTextShape)){
                flowTextShape.graphics.clear();
                if (this.contains(flowTextShape)){
                    removeChild(flowTextShape);
                };
                flowTextShape = null;
            };
        }
        public function get alphaTransitionDuration():Number{
            return (_alphaTransitionDuration);
        }
        public function get text():String{
            return (_text);
        }
        public function set fontColor(_arg1:uint):void{
            defaultFontColor = _arg1;
            setTextFormatProperty("color", _arg1);
        }
        public function init():void{
            flowCount = 0;
            orignTextVisible = true;
            if (hasEventListener(Event.ENTER_FRAME)){
                removeEventListener(Event.ENTER_FRAME, render, false);
            };
        }
        public function get isReduced():Boolean{
            if (((!(Boolean(text))) || (!(Boolean(originText))))){
                return (false);
            };
            return (!((text === originText)));
        }
        public function set fontFamily(_arg1:String):void{
            setTextFormatProperty("font", _arg1);
        }
        public function get maskRect():Rectangle{
            return (_maskRect);
        }
        public function getType():String{
            var _local1:String = getQualifiedClassName(this);
            return (_local1.substring((_local1.lastIndexOf(":") + 1), _local1.length));
        }
        public function get textHeight():Number{
            if (Boolean(displayTextField)){
                return (displayTextField.textHeight);
            };
            return (NaN);
        }
        public function get letterSpacing():Number{
            return ((getTextFormatProperty("letterSpacing") as Number));
        }
        public function get flowPixelUnit():Number{
            return (_flowPixelUnit);
        }
        public function set flowPixelUnit(_arg1:Number):void{
            _flowPixelUnit = _arg1;
        }
        public function destroy():void{
            releaseMemory();
        }
        public function get mouseOverFontColor():uint{
            return (_mouseOverFontColor);
        }
        public function set useAlphaTransition(_arg1:Boolean):void{
            if (_useAlphaTransition === _arg1){
                return;
            };
            _useAlphaTransition = _arg1;
        }
        public function get useFlowEffect():Boolean{
            return (_useFlowEffect);
        }
        public function update():void{
            redrawText();
            if (isTextChanged){
                dispatchEvent(new Event(Event.CHANGE));
            };
        }
        public function get flowTextSpace():Number{
            return (_flowTextSpace);
        }
        override public function get width():Number{
            if (Boolean(displayTextField)){
                return (displayTextField.width);
            };
            return (super.width);
        }
        private function convertTextFieldToBitmapData(_arg1:TextField, _arg2:Number=0):BitmapData{
            var _local3:BitmapData;
            _local3 = new BitmapData(Math.min((_arg1.width + _arg2), BITMAP_MAX_WIDTH), _arg1.height, true, 0xFF0000);
            _local3.draw(_arg1);
            return (_local3.clone());
        }
        private function drawBackgroundForMouseHitArea(_arg1:Number, _arg2:Number):void{
            var w:* = _arg1;
            var h:* = _arg2;
            var _local4 = this.graphics;
            with (_local4) {
                clear();
                beginFill(0, 0);
                drawRect(0, 0, w, h);
                endFill();
            };
        }
        private function handleMouseEvent(_arg1:MouseEvent):void{
            switch (_arg1.type){
                case MouseEvent.MOUSE_OVER:
                    if (((isReduced) && (useFlowEffect))){
                        if (Boolean(flowTextBitmapData)){
                            addEventListener(Event.ENTER_FRAME, render, false, 0, true);
                            orignTextVisible = false;
                        };
                    } else {
                        if (isUseMouseOverFontColor){
                            setTextFormatProperty("color", mouseOverFontColor);
                        };
                    };
                    break;
                case MouseEvent.MOUSE_OUT:
                    if (((isReduced) && (useFlowEffect))){
                        if (Boolean(flowTextBitmapData)){
                            init();
                        };
                    } else {
                        if (isUseMouseOverFontColor){
                            setTextFormatProperty("color", defaultFontColor);
                        };
                    };
                    break;
            };
        }
        public function set text(_arg1:String):void{
            if ((((_text === _arg1)) || (!(Boolean(_arg1))))){
                return;
            };
            _text = _arg1;
            isTextChanged = ((originText)==text) ? false : true;
            _originText = _text;
            update();
        }
        public function get fontColor():uint{
            return ((getTextFormatProperty("color") as uint));
        }
        public function redrawText():void{
            var _local1:TextFormat;
            if ((((text === "")) || (!(Boolean(text))))){
                return;
            };
            if (!Boolean(displayTextField)){
                return;
            };
            init();
            removeBitmapText();
            displayTextField.text = this.text;
            if (!isNaN(availableWidth)){
                _text = TextFieldHelper.getReduceText(displayTextField, availableWidth, delimiter);
                displayTextField.text = _text;
            };
            drawBackgroundForMouseHitArea(this.width, this.height);
            if (isReduced){
                _local1 = displayTextField.getTextFormat();
                if (Boolean(mouseOverFontColor)){
                    _local1["color"] = mouseOverFontColor;
                };
                if (Boolean(virtualTextField)){
                    virtualTextField.defaultTextFormat = _local1;
                    virtualTextField.text = this.originText;
                    flowTextBitmapData = convertTextFieldToBitmapData(virtualTextField, flowTextSpace);
                    flowTextShape = new Shape();
                    addChild(flowTextShape);
                };
            };
            displayTextField.width = (displayTextField.textWidth + 2);
            startAlphaFadeInEffect();
        }
        public function set fontSize(_arg1:Number):void{
            setTextFormatProperty("size", _arg1);
        }
        public function set alphaTransitionDuration(_arg1:Number):void{
            _alphaTransitionDuration = _arg1;
        }
        public function get useAlphaTransition():Boolean{
            return (_useAlphaTransition);
        }
        public function set alphaTransitionDelay(_arg1:Number):void{
            _alphaTransitionDelay = _arg1;
        }
        public function releaseMemory():void{
            removeBitmapText();
            if (Boolean(displayTextField)){
                if (this.contains(displayTextField)){
                    removeChild(displayTextField);
                };
                displayTextField = null;
            };
            if (Boolean(virtualTextField)){
                virtualTextField = null;
            };
            if (Boolean(maskRect)){
                maskRect = null;
            };
            if (this.hasEventListener(Event.ENTER_FRAME)){
                removeEventListener(Event.ENTER_FRAME, render, false);
            };
            removeEventListener(MouseEvent.MOUSE_OVER, handleMouseEvent, false);
            removeEventListener(MouseEvent.MOUSE_OUT, handleMouseEvent, false);
            _text = null;
            _originText = null;
        }
        private function render(_arg1:Event):void{
            var _local2:Graphics;
            if (((!(isReduced)) || (!(Boolean(flowTextShape))))){
                return;
            };
            if (Boolean(flowTextBitmapData)){
                _local2 = flowTextShape.graphics;
                _local2.clear();
                _local2.beginBitmapFill(flowTextBitmapData, new Matrix(1, 0, 0, 1, flowCount, 0), true, false);
                _local2.drawRect(0, 0, flowTextBitmapData.width, flowTextBitmapData.height);
                _local2.endFill();
                flowCount = (flowCount - flowPixelUnit);
            };
        }
        override public function toString():String{
            var _local1:String;
            var _local2:String;
            var _local3:String;
            _local2 = getType();
            _local1 = (("{" + _local2) + " start}\n");
            for each (_local3 in properties) {
                _local1 = (_local1 + (((_local3 + " : ") + this[_local3]) + "\n"));
            };
            _local1 = (_local1 + (("{" + _local2) + " end}"));
            return (_local1);
        }
        private function startAlphaFadeInEffect():void{
            if (((useAlphaTransition) && (isTextChanged))){
                TweensyZero.fromTo(this, {alpha:0}, {alpha:1}, alphaTransitionDuration, Linear.easeOut, alphaTransitionDelay);
            };
        }
        public function set maskRect(_arg1:Rectangle):void{
            if (_maskRect === _arg1){
                return;
            };
            _maskRect = _arg1;
            this.scrollRect = _maskRect;
        }
        public function set orignTextVisible(_arg1:Boolean):void{
            _orignTextVisible = _arg1;
            if (Boolean(displayTextField)){
                displayTextField.visible = orignTextVisible;
                if (Boolean(flowTextShape)){
                    flowTextShape.visible = !(orignTextVisible);
                };
            };
        }
        public function get originText():String{
            return (_originText);
        }
        public function set mouseOverFontColor(_arg1:uint):void{
            if (_mouseOverFontColor === _arg1){
                return;
            };
            _mouseOverFontColor = _arg1;
            if (!isUseMouseOverFontColor){
                isUseMouseOverFontColor = true;
            };
        }
        public function get fontSize():Number{
            return ((getTextFormatProperty("size") as Number));
        }
        public function get orignTextVisible():Boolean{
            return (_orignTextVisible);
        }
        public function set letterSpacing(_arg1:Number):void{
            setTextFormatProperty("letterSpacing", _arg1);
        }
        private function setTextFormatProperty(_arg1:String, _arg2:Object):void{
            var _local3:TextFormat;
            if (Boolean(displayTextField)){
                _local3 = displayTextField.getTextFormat();
                _local3[_arg1] = _arg2;
                displayTextField.defaultTextFormat = _local3;
                displayTextField.setTextFormat(_local3);
            };
        }
        public function get availableWidth():Number{
            return (_availableWidth);
        }
        private function getTextFormatProperty(_arg1:String):Object{
            var _local2:TextFormat;
            if (Boolean(displayTextField)){
                _local2 = displayTextField.getTextFormat();
                if (Boolean(_local2[_arg1])){
                    return (_local2[_arg1]);
                };
            };
            return (null);
        }
        public function get alphaTransitionDelay():Number{
            return (_alphaTransitionDelay);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.flashdynamix.motion.*;
    import fl.motion.easing.*;
    import flash.external.*;

    public class CSlider extends MovieClip {

        public static const WHEEL_FLASH:String = "wheelFlash";
        public static const WHEEL_JS:String = "wheelJS";

        private const TRACK_SIZE_TWEEN_DURATION:Number = 0.2;

        private var _direction:String = "horizental";
        private var _wheelRatio:Number = 0.1;
        public var isLimited:Boolean = false;
        private var _minValue:Number;
        private var _sliderSize:Number;
        private var axis:String;
        private var newWheelRatio:Number;
        public var _currentTrack:Sprite;
        public var _currentTrackColor:int = 0x333333;
        private var _mask:Sprite;
        private var _maxValue:Number;
        private var _ease:Function = null;
        public var _thumb:MovieClip;
        private var _wheel:String = "";
        private var _trackEmpty:MovieClip;
        private var side:String;
        public var _thumbSpace:Number = 0;
        private var _value:Number;
        private var _duration:Number = 0.2;
        private var _thumbSize:Number = 0;
        private var _trackFull:MovieClip;

        public function CSlider(_arg1:MovieClip, _arg2:MovieClip, _arg3:MovieClip=null, _arg4:String="horizental", _arg5:Number=0, _arg6:Number=100, _arg7:Number=50){
            _thumb = _arg1;
            _trackEmpty = _arg2;
            _trackFull = _arg3;
            _direction = _arg4;
            switch (_arg4){
                case "vertical":
                    axis = "y";
                    side = "height";
                    break;
                case "horizental":
                default:
                    axis = "x";
                    side = "width";
            };
            _minValue = _arg5;
            _maxValue = _arg6;
            if (_arg7 > _arg6){
                value = _arg6;
            } else {
                if (_arg7 < _arg5){
                    value = _arg5;
                } else {
                    value = _arg7;
                };
            };
            initAssets();
            addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);
        }
        public function get sliderSize():Number{
            return (_sliderSize);
        }
        public function set sliderSize(_arg1:Number):void{
            _sliderSize = _arg1;
        }
        public function get direction():String{
            return (_direction);
        }
        private function thumbUpHandler(_arg1):void{
            dispatchEvent(new CSliderEvent(CSliderEvent.THUMB_DRAG_END));
            _thumb.stopDrag();
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbDraggingHandler);
            stage.removeEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
            viewUpdate();
        }
        private function drawCurrentTrackShape():void{
            if (Boolean(currentTrack)){
                var _local2 = currentTrack.graphics;
                with (_local2) {
                    clear();
                    beginFill(currentTrackColor);
                    drawRect(0, 0, 1, 2);
                    endFill();
                };
            };
        }
        private function trackEmptyUpHandler(_arg1:MouseEvent):void{
            dispatchEvent(new CSliderEvent(CSliderEvent.TRACK_CLICK_END));
        }
        public function get thumbSpot():Number{
            return (_thumb[axis]);
        }
        private function thumbDownHandler(_arg1=null):void{
            dispatchEvent(new CSliderEvent(CSliderEvent.THUMB_DRAG_START));
            _thumb.startDrag(false, getDragRect());
            stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbDraggingHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
        }
        private function externalWheelHandler(_arg1:Number, _arg2:Number, _arg3:Number):void{
            wheeler(_arg1);
        }
        public function get duration():Number{
            return (_duration);
        }
        public function set currentTrackColor(_arg1:int):void{
            if (_currentTrackColor === _arg1){
                return;
            };
            _currentTrackColor = _arg1;
            drawCurrentTrackShape();
        }
        private function initMask(_arg1:MovieClip):void{
            _mask = new Sprite();
            _mask.graphics.beginFill(0xFF0000);
            _mask.graphics.drawRect(_arg1.x, _arg1.y, _arg1.width, _arg1.height);
            addChild(_mask);
            _arg1.mask = _mask;
        }
        public function set thumbSpace(_arg1:Number):void{
            this._thumbSpace = _arg1;
        }
        private function initTrack():void{
            _trackEmpty.addEventListener(MouseEvent.MOUSE_DOWN, trackEmptyDownHandler);
            _trackEmpty.addEventListener(MouseEvent.MOUSE_UP, trackEmptyUpHandler);
            _trackEmpty.buttonMode = true;
            addChild(_trackEmpty);
            createCurrentTrack();
            if (_trackFull){
                _trackFull.mouseEnabled = false;
                initMask(_trackFull);
                addChild(_trackFull);
            };
        }
        public function set currentTrack(_arg1:Sprite):void{
            _currentTrack = _arg1;
        }
        private function initThumb():void{
            _thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDownHandler);
            _thumb.addEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
            _thumb.buttonMode = true;
            if (_thumbSize == 0){
                _thumbSize = _thumb[side];
            };
            var _local1:Number = ((value - minValue) / (maxValue - minValue));
            moveThumbFromValue(_local1);
            addChild(_thumb);
        }
        private function changeValueFromThumb():void{
            var _local1:Number = (thumbSpotRatio * (maxValue - minValue));
            value = _local1;
        }
        private function trackEmptyDownHandler(_arg1:MouseEvent):void{
            var _local3:Number;
            dispatchEvent(new CSliderEvent(CSliderEvent.TRACK_CLICK_START));
            var _local2:MovieClip = (_arg1.target as MovieClip);
            if (direction == "horizental"){
                _local3 = ((_local2.mouseX - (_thumbSize / 2)) / thumbSpace);
            } else {
                if (direction == "vertical"){
                    _local3 = ((_local2.mouseY - (_thumbSize / 2)) / thumbSpace);
                };
            };
            moveThumbFromValue(_local3);
        }
        public function set duration(_arg1:Number):void{
            _duration = _arg1;
        }
        private function mouseWheelHandler(_arg1:MouseEvent):void{
            wheeler(_arg1.delta);
        }
        public function set wheel(_arg1:String):void{
            _wheel = _arg1;
            registerWheel();
        }
        private function initAssets():void{
            initTrack();
            initThumb();
        }
        private function getDragRect():Rectangle{
            var _local1:Rectangle = new Rectangle();
            _local1[side] = thumbSpace;
            if (_thumbSpace != 0){
                _local1[side] = _thumbSpace;
            };
            return (_local1);
        }
        private function registerWheel():void{
            if (wheel == WHEEL_FLASH){
                if (stage){
                    if (wheel){
                        stage.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
                    } else {
                        stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
                    };
                };
            } else {
                if (wheel == WHEEL_JS){
                    if (ExternalInterface.available){
                        ExternalInterface.addCallback("onWheelHandler", externalWheelHandler);
                    };
                };
            };
        }
        public function get minValue():Number{
            return (_minValue);
        }
        public function get currentTrackColor():int{
            return (_currentTrackColor);
        }
        public function moveThumbFromValue(_arg1:Number):void{
            var _local3:Number;
            var _local2:Number = (_trackEmpty[axis] + (thumbSpace * _arg1));
            if (thumbSpace < _local2){
                _local2 = thumbSpace;
            } else {
                if (_local2 < _trackEmpty[axis]){
                    _local2 = minValue;
                };
            };
            if (isLimited){
                _local3 = _thumbSpace;
                if (_local2 >= _local3){
                    _local2 = _local3;
                };
            };
            if (ease != null){
                thumbSpot = _local2;
                viewUpdate();
            } else {
                thumbSpot = _local2;
                viewUpdate();
            };
        }
        public function wheeler(_arg1:Number):void{
            if (isNaN(newWheelRatio)){
                newWheelRatio = thumbSpotRatio;
            };
            if (_arg1 < 0){
                newWheelRatio = (newWheelRatio - wheelRatio);
                if (newWheelRatio < 0){
                    newWheelRatio = 0;
                };
                moveThumbFromValue(newWheelRatio);
            } else {
                if (_arg1 > 0){
                    newWheelRatio = (newWheelRatio + wheelRatio);
                    if (newWheelRatio > 1){
                        newWheelRatio = 1;
                    };
                    moveThumbFromValue(newWheelRatio);
                };
            };
        }
        private function removedFromStageHandler(_arg1:Event):void{
            if (stage.hasEventListener(MouseEvent.MOUSE_WHEEL)){
                stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
            };
            _trackEmpty.removeEventListener(MouseEvent.MOUSE_DOWN, trackEmptyDownHandler);
            _trackEmpty.removeEventListener(MouseEvent.MOUSE_UP, trackEmptyUpHandler, true);
            _thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDownHandler);
            _thumb.addEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
            removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);
        }
        private function motionFinished(_arg1):void{
            newWheelRatio = thumbSpotRatio;
            viewUpdate();
        }
        public function get thumbSpace():Number{
            return ((_trackEmpty[side] - _thumbSize));
        }
        public function get currentTrack():Sprite{
            return (_currentTrack);
        }
        public function thumbSizeOption(_arg1:Number):void{
            _thumbSize = _arg1;
        }
        private function addedToStageHandler(_arg1:Event):void{
            registerWheel();
            removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
        }
        private function viewUpdate(_arg1=null):void{
            changeValueFromThumb();
            if (_trackFull){
                _mask[axis] = (_thumb[axis] - _mask[side]);
            };
            dispatchEvent(new CSliderEvent(CSliderEvent.SLIDER_CHANGE));
        }
        public function updateCurrentTrackWidth(_arg1:Number):void{
            if (((isNaN(_arg1)) || ((_arg1 < 0)))){
                return;
            };
            if (Boolean(currentTrack)){
                currentTrack.visible = ((_arg1)===0) ? false : true;
                if (!currentTrack.visible){
                    currentTrack.width = 0;
                    return;
                };
                thumbSpace = (_arg1 + 1);
                TweensyZero.to(currentTrack, {width:_arg1}, TRACK_SIZE_TWEEN_DURATION, Cubic.easeOut, 0, null);
            };
        }
        public function get wheel():String{
            return (_wheel);
        }
        private function thumbDraggingHandler(_arg1:Event):void{
            viewUpdate();
        }
        public function set wheelRatio(_arg1:Number):void{
            _wheelRatio = _arg1;
        }
        public function set value(_arg1:Number):void{
            _value = _arg1;
        }
        public function set ease(_arg1:Function):void{
            _ease = _arg1;
        }
        public function get ease():Function{
            return (_ease);
        }
        public function set thumbSpot(_arg1:Number):void{
            _thumb[axis] = _arg1;
        }
        public function get value():Number{
            return (_value);
        }
        public function get maxValue():Number{
            return (_maxValue);
        }
        private function createCurrentTrack():void{
            if (!Boolean(currentTrack)){
                currentTrack = new Sprite();
                currentTrack.mouseEnabled = false;
                currentTrack.visible = false;
                addChild(currentTrack);
                drawCurrentTrackShape();
            };
        }
        public function get wheelRatio():Number{
            return (_wheelRatio);
        }
        public function get thumbSpotRatio():Number{
            return ((thumbSpot / thumbSpace));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls {
    import flash.events.*;

    public class CSliderEvent extends Event {

        public static var THUMB_DRAG_START:String = "thumbDragStart";
        public static var SLIDER_CHANGE:String = "sliderChange";
        public static var TRACK_CLICK_START:String = "trackClickStart";
        public static var TRACK_CLICK_END:String = "trackClickEnd";
        public static var THUMB_DRAG_END:String = "thumbDragEnd";

        private var _data:Object;

        public function CSliderEvent(_arg1:String, _arg2:Object=null):void{
            _data = new Object();
            _data = _arg2;
            super(_arg1);
        }
        public function get data():Object{
            return (_data);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class NaverMusicPlayerList_scroll_background_icon extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class NaverMusicPlayerListPanel_playlist_posting_popup_menu extends SpriteAsset {

        public var posting_menu_background:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class NaverMusicPlayerList_scroll_thumb_over_icon extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class NaverMusicPlayerList_scroll_thumb_icon extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class MiniPlayerPanel_background extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var pause_btn:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var track:DisplayObject;
        public var play_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class TicketPurchasingPanel_ticket_popup extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var popup_background:DisplayObject;
        public var popup_more_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var popup_purchase_btn_02:DisplayObject;
        public var popup_purchase_btn_03:DisplayObject;
        public var popup_purchase_btn_01:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var popup_footer_txt:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var popup_close_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var track:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;
    import fl.motion.easing.*;

    public class MiniPlayerPanel extends SpriteExtention implements IPanel {

        public static const POSTING_BACKGROUND_BTN:String = "posting_background_btn";
        public static const PLAYLIST_SHOW_BTN:String = "playlist_show_btn";
        public static const PURCHASEMP3_BTN:String = "purchasemp3_btn";
        public static const NAVER_MUSIC_LOGO_BTN:String = "naver_music_logo";
        public static const PLUS_BTN:String = "plus_btn";
        public static const POSTING_BLOG_BTN:String = "posting_blog_btn";
        public static const POSTING_CAFE_BTN:String = "posting_cafe_btn";
        public static const PURCHASE_BTN:String = "purchase_btn";
        public static const MUSIC_SEND_BTN:String = "music_send_btn";

        private static var defaultBackgroundColor:int = 0xFFFFFF;
        private static var instance:MiniPlayerPanel = null;
        private static var miniPlayer_panel:Class = MiniPlayerPanel_miniPlayer_panel;
        private static var background:Class = MiniPlayerPanel_background;
        private static var posting_popup_menu:Class = MiniPlayerPanel_posting_popup_menu;

        private const TOOLTIP_OVER_OUT_TWEEN_DURATION:Number = 0.2;
        private const NAVER_LOGO_TWEEN_DURATON:Number = 0.2;

        private var playlist_show_tooltip:MovieClip;
        private var posting_popup_menu_assets;
        private var naver_music_logo:MovieClip;
        private var posting_cafe_btn:SimpleButton;
        private var miniPlayer:MiniPlayer;
        private var info_text:MovieClip;
        private var background_asset;
        private var posting_blog_btn:SimpleButton;
        private var purchase_btn:SimpleButton;
        private var music_send_tooltip:MovieClip;
        private var _isActive:Boolean = false;
        private var plus_btn:MovieClip;
        private var userAuthority:UserAuthority;
        private var authState:int = 0;
        private var miniPlayer_panel_assets;
        private var isTooltipActive:Boolean = false;
        private var playlist_show_btn:SimpleButton;
        private var posting_background_btn:MovieClip;
        private var purchasemp3_btn:MovieClip;
        private var miniPlayerModel:MiniPlayerModel;
        private var buttonList:Array;
        private var music_send_btn:SimpleButton;

        public function MiniPlayerPanel(_arg1:Boolean=true){
            super(_arg1);
            miniPlayerModel = MiniPlayerModel.getInstance();
            miniPlayerModel.addEventListener(MiniPlayerModelEvent.PLAYING_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
        }
        public static function getInstance():MiniPlayerPanel{
            if (!Boolean(instance)){
                instance = new (MiniPlayerPanel)();
            };
            return ((instance as MiniPlayerPanel));
        }
        public static function updateAsset(_arg1):void{
            miniPlayer_panel = _arg1.getDefinition("miniPlayer_panel");
            posting_popup_menu = _arg1.getDefinition("posting_popup_menu");
            background = _arg1.getDefinition("background");
        }
        public static function updateStyle(_arg1):void{
            defaultBackgroundColor = _arg1.DEFAULT_PLAYER_BG_COLOR;
        }

        public function init():void{
            miniPlayerModel.init();
        }
        public function set isActive(_arg1:Boolean):void{
            if (_isActive === _arg1){
                return;
            };
            _isActive = _arg1;
        }
        override protected function initialize():void{
            createBackground();
            createAssets();
            createMiniPlayer();
            addChild(miniPlayer_panel_assets);
            addChild(posting_popup_menu_assets);
            initAsset();
            userAuthority = UserAuthority.getInstance();
            userAuthority.addEventListener(UserAuthChangedEvent.AUTH_CHANGE, handleUserAuthChangeEvent, false, 0, true);
            userAuthority.notifyAuthChanged();
        }
        public function initTooltipButtons():void{
            music_send_tooltip.alpha = 0;
            playlist_show_tooltip.alpha = 0;
        }
        private function createMiniPlayer():void{
            miniPlayer = new MiniPlayer();
            addChild(miniPlayer);
        }
        protected function initAsset():void{
            var btn:* = undefined;
            for each (btn in buttonList) {
                if ((btn is SimpleButton)){
                    SpriteExtention.setEventListeners(btn, [MouseEvent.CLICK], handleSimpleButtonMouseEvent);
                };
            };
            var _local2 = music_send_btn;
            with (_local2) {
                addEventListener(MouseEvent.MOUSE_OUT, handleTooltipButtonMouseOverOutEvent, false, 0, true);
                addEventListener(MouseEvent.MOUSE_OVER, handleTooltipButtonMouseOverOutEvent, false, 0, true);
            };
            _local2 = playlist_show_btn;
            with (_local2) {
                addEventListener(MouseEvent.MOUSE_OVER, handleTooltipButtonMouseOverOutEvent, false, 0, true);
                addEventListener(MouseEvent.MOUSE_OUT, handleTooltipButtonMouseOverOutEvent, false, 0, true);
            };
            purchasemp3_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
            plus_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
            plus_btn.addEventListener(MouseEvent.MOUSE_OVER, handlePlusButtonEventForTooltip, false, 0, true);
            plus_btn.addEventListener(MouseEvent.MOUSE_OUT, handlePlusButtonEventForTooltip, false, 0, true);
            naver_music_logo.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
            posting_background_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
        }
        protected function createAssets():void{
            miniPlayer_panel_assets = new miniPlayer_panel();
            purchasemp3_btn = miniPlayer_panel_assets.purchasemp3_btn;
            purchasemp3_btn.gotoAndStop(2);
            var _local2 = purchasemp3_btn;
            with (_local2) {
                x = 174;
                y = 16;
                buttonMode = true;
                mouseEnabled = false;
            };
            plus_btn = miniPlayer_panel_assets.plus_btn;
            _local2 = plus_btn;
            with (_local2) {
                x = 158;
                y = 17;
                buttonMode = true;
            };
            posting_popup_menu_assets = new posting_popup_menu();
            posting_blog_btn = posting_popup_menu_assets.posting_blog_btn;
            _local2 = posting_blog_btn;
            with (_local2) {
                x = 123;
                y = 178;
            };
            posting_cafe_btn = posting_popup_menu_assets.posting_cafe_btn;
            _local2 = posting_cafe_btn;
            with (_local2) {
                x = 123;
                y = 200;
            };
            _local2 = posting_popup_menu_assets.posting_menu_background;
            with (_local2) {
                x = 122;
                y = 177;
            };
            posting_background_btn = posting_popup_menu_assets.posting_background_btn;
            posting_popup_menu_assets.visible = false;
            naver_music_logo = miniPlayer_panel_assets.naver_music_logo;
            _local2 = naver_music_logo;
            with (_local2) {
                x = 7;
                y = 223;
                buttonMode = true;
                mouseChildren = false;
                mouseEnabled = false;
                visible = false;
                alpha = 0;
            };
            info_text = miniPlayer_panel_assets.info_text;
            (info_text as MovieClip).gotoAndStop(1);
            _local2 = info_text;
            with (_local2) {
                x = 6;
                y = 221;
                mouseChildren = false;
                mouseEnabled = false;
                visible = false;
                alpha = 0;
            };
            purchase_btn = miniPlayer_panel_assets.purchase_btn;
            _local2 = purchase_btn;
            with (_local2) {
                x = 133.5;
                y = 222;
                alpha = 0;
            };
            music_send_btn = miniPlayer_panel_assets.music_send_btn;
            _local2 = music_send_btn;
            with (_local2) {
                x = 202;
                y = 223;
            };
            music_send_tooltip = miniPlayer_panel_assets.music_send_tooltip;
            _local2 = music_send_tooltip;
            with (_local2) {
                x = 154;
                y = 200;
                mouseChildren = false;
                mouseEnabled = false;
                alpha = 0;
            };
            playlist_show_btn = miniPlayer_panel_assets.playlist_show_btn;
            _local2 = playlist_show_btn;
            with (_local2) {
                x = 215;
                y = 223;
            };
            playlist_show_tooltip = miniPlayer_panel_assets.playlist_show_tooltip;
            _local2 = playlist_show_tooltip;
            with (_local2) {
                x = 155;
                y = 200;
                mouseChildren = false;
                mouseEnabled = false;
                alpha = 0;
            };
            buttonList = [music_send_btn, purchase_btn, playlist_show_btn, posting_blog_btn, posting_cafe_btn];
        }
        private function handleCustomButtonMouseEvent(_arg1:MouseEvent):void{
            var _local2:MovieClip = (_arg1.target as MovieClip);
            var _local3:String = _local2.name;
            switch (_arg1.type){
                case MouseEvent.MOUSE_DOWN:
                    if (_local3 == POSTING_BACKGROUND_BTN){
                        posting_popup_menu_assets.visible = false;
                        return;
                    };
                    dispatchEvent(new PanelEvent(PanelEvent.PANEL_CUSTOM_BUTTON_CLICK, _local2.name));
                    break;
            };
        }
        private function createBackground():void{
            background_asset = new background();
            var _local2 = background_asset;
            with (_local2) {
                mouseEnabled = false;
                mouseChildren = false;
            };
            addChild(background_asset);
        }
        public function checkValidPurchasemp3():void{
            var _local1:Number;
            var _local2:MusicPlayerBasicModel;
            var _local3:SongInfoServiceObject;
            var _local4:UserAuthority;
            if (ValidationUtil.isNull(purchasemp3_btn)){
                return;
            };
            _local2 = MusicPlayerBasicModel.getInstance();
            if (Boolean(_local2.playingSongNode)){
                _local3 = (_local2.playingSongNode.data as SongInfoServiceObject);
                if (Boolean(_local3)){
                    if (_local3.hasMp3File()){
                        _local1 = 1;
                        _local4 = UserAuthority.getInstance();
                        if (((_local3.isAdultSong()) && (_local4.isAdult))){
                            _local1 = 1;
                        } else {
                            if (((_local3.isAdultSong()) && (!(_local4.isAdult)))){
                                _local1 = 2;
                            };
                        };
                    } else {
                        _local1 = 2;
                    };
                } else {
                    _local1 = 2;
                };
            };
            purchasemp3_btn.gotoAndStop(_local1);
            purchasemp3_btn.mouseEnabled = ((purchasemp3_btn.currentFrame)==1) ? true : false;
        }
        private function handleSimpleButtonMouseEvent(_arg1:MouseEvent):void{
            var _local2:SimpleButton = (_arg1.target as SimpleButton);
            var _local3:String = _local2.name;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    if (_local3 == MUSIC_SEND_BTN){
                        posting_popup_menu_assets.visible = true;
                        return;
                    };
                    if ((((_local3 == POSTING_BLOG_BTN)) || ((_local3 == POSTING_CAFE_BTN)))){
                        posting_popup_menu_assets.visible = false;
                    };
                    dispatchEvent(new PanelEvent(PanelEvent.PANEL_BUTTON_CLICK, _local2.name));
                    break;
            };
        }
        private function handlePlusButtonEventForTooltip(_arg1:MouseEvent):void{
            var _local2:MovieClip = (_arg1.target as MovieClip);
            var _local3:TooltipManager = TooltipManager.getInstance();
            if (PLUS_BTN !== _local2.name){
                return;
            };
            switch (_arg1.type){
                case MouseEvent.MOUSE_OVER:
                    _local3.setOffsetPoint(0, 20);
                    _local3.setLimitWidth(NaN);
                    _local3.setText("담기");
                    _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                    _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                    _local3.show();
                    break;
                case MouseEvent.MOUSE_OUT:
                    _local3.hide();
                    break;
            };
            _arg1.stopPropagation();
        }
        public function get isActive():Boolean{
            return (_isActive);
        }
        private function handleUserAuthChangeEvent(_arg1:UserAuthChangedEvent):void{
            authState = (_arg1.args as int);
            checkValidPurchasemp3();
            if (ValidationUtil.isNull(info_text)){
                return;
            };
            switch (authState){
                case UserAuthEnum.NOT_LOGIN_USER:
                    info_text.visible = true;
                    info_text.alpha = ((miniPlayerModel.isPlaying) ? 0 : 1);
                    (info_text as MovieClip).gotoAndStop(1);
                    purchase_btn.visible = true;
                    purchase_btn.alpha = ((miniPlayerModel.isPlaying) ? 0 : 1);
                    break;
                case UserAuthEnum.FREE_USER:
                    info_text.visible = true;
                    info_text.alpha = ((miniPlayerModel.isPlaying) ? 0 : 1);
                    (info_text as MovieClip).gotoAndStop(2);
                    purchase_btn.visible = true;
                    purchase_btn.alpha = ((miniPlayerModel.isPlaying) ? 0 : 1);
                    break;
                case UserAuthEnum.CHARGED_USER:
                    info_text.visible = false;
                    info_text.alpha = ((miniPlayerModel.isPlaying) ? 0 : 1);
                    purchase_btn.visible = false;
                    purchase_btn.alpha = ((miniPlayerModel.isPlaying) ? 0 : 1);
                    break;
            };
            naver_music_logo.visible = ((miniPlayerModel.isPlaying) ? true : false);
            if (authState == UserAuthEnum.CHARGED_USER){
                naver_music_logo.visible = true;
                naver_music_logo.mouseEnabled = true;
                naver_music_logo.alpha = 1;
            };
        }
        private function handleMiniPlayerModelEvent(_arg1:MiniPlayerModelEvent):void{
            var _local2:Boolean;
            switch (_arg1.type){
                case MiniPlayerModelEvent.PLAYING_STATE_CHANGE:
                    _local2 = (_arg1.args as Boolean);
                    if (_local2){
                        if (authState != UserAuthEnum.CHARGED_USER){
                            if (ValidationUtil.isNotNull(naver_music_logo)){
                                naver_music_logo.visible = true;
                                naver_music_logo.mouseEnabled = true;
                                TweensyZero.to(naver_music_logo, {alpha:1}, NAVER_LOGO_TWEEN_DURATON, Linear.easeOut, 0.2, null);
                            };
                            if (ValidationUtil.isNotNull(info_text)){
                                info_text.visible = true;
                                TweensyZero.to(info_text, {alpha:0}, NAVER_LOGO_TWEEN_DURATON, Linear.easeOut, 0, null);
                            };
                            if (ValidationUtil.isNotNull(purchase_btn)){
                                purchase_btn.visible = true;
                                purchase_btn.mouseEnabled = !(naver_music_logo.mouseEnabled);
                                TweensyZero.to(purchase_btn, {alpha:0}, NAVER_LOGO_TWEEN_DURATON, Linear.easeOut, 0, null);
                            };
                        };
                    } else {
                        if (authState != UserAuthEnum.CHARGED_USER){
                            if (ValidationUtil.isNotNull(naver_music_logo)){
                                naver_music_logo.visible = true;
                                naver_music_logo.mouseEnabled = false;
                                TweensyZero.to(naver_music_logo, {alpha:0}, NAVER_LOGO_TWEEN_DURATON, Linear.easeOut, 0, null);
                            };
                            if (ValidationUtil.isNotNull(info_text)){
                                info_text.visible = true;
                                TweensyZero.to(info_text, {alpha:1}, NAVER_LOGO_TWEEN_DURATON, Linear.easeOut, 0.2, null);
                            };
                            if (ValidationUtil.isNotNull(purchase_btn)){
                                purchase_btn.visible = true;
                                purchase_btn.mouseEnabled = !(naver_music_logo.mouseEnabled);
                                TweensyZero.to(purchase_btn, {alpha:1}, NAVER_LOGO_TWEEN_DURATON, Linear.easeOut, 0.2, null);
                            };
                        };
                    };
                    break;
            };
        }
        private function handleTooltipButtonMouseOverOutEvent(_arg1:MouseEvent):void{
            var _local5:TweensyTimelineZero;
            if (_arg1.target !== _arg1.currentTarget){
                return;
            };
            var _local2:String = _arg1.type;
            var _local3:SimpleButton = (_arg1.currentTarget as SimpleButton);
            var _local4:MovieClip = ((_local3.name)==MUSIC_SEND_BTN) ? music_send_tooltip : playlist_show_tooltip;
            switch (_local2){
                case MouseEvent.MOUSE_OVER:
                    isTooltipActive = true;
                    TweensyZero.fromTo(_local4, {
                        y:210,
                        alpha:0
                    }, {
                        y:200,
                        alpha:1
                    }, TOOLTIP_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                case MouseEvent.MOUSE_OUT:
                    if (isTooltipActive){
                        isTooltipActive = false;
                        return;
                    };
                    TweensyZero.to(_local4, {alpha:0}, TOOLTIP_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                    break;
            };
            _arg1.stopImmediatePropagation();
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class NaverMusicPlayerListPanel_playlist_panel extends SpriteAsset {

        public var select_all_checkbox:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class MiniPlayerPanel_miniPlayer_panel extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var pause_btn:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var track:DisplayObject;
        public var play_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.flashdynamix.motion.*;
    import fl.data.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;
    import fl.motion.easing.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.assets.*;

    public class NaverMusicPlayerListPanel extends Sprite implements IPanel {

        public static const PLAYLIST_HEADER_WIDTH:Number = 230;
        public static const ACTIVE_POSITON:int = 0;
        public static const DEACTIVE_POSITON:int = 242;
        public static const ADD_BTN:String = "add_btn";
        public static const MUSIC_SEND_BTN:String = "music_send_btn";
        public static const PLAYLIST_BODY_WIDTH:Number = 230;
        public static const ROW_HEIGHT:Number = 39;
        public static const POSTING_CAFE_BTN:String = "posting_cafe_btn";
        public static const POSTING_BLOG_BTN:String = "posting_blog_btn";
        public static const SELECT_ALL_CHECKBOX:String = "select_all_checkbox";
        public static const PLAYLIST_FOOTER_HEIGHT:Number = 20;
        public static const MP3_DOWN_BTN:String = "mp3_down_btn";
        public static const PLAYLIST_HEADER_HEIGHT:Number = 25;
        public static const PLAYLIST_BODY_HEIGHT:Number = 195;

        private static var playlistUserIdColor:int = 0x939393;
        private static var backgroundColor:int = 0xFFFFFF;
        private static var playlistTitleColor:int = 0;
        private static var playlist_panel:Class = NaverMusicPlayerListPanel_playlist_panel;
        private static var playlist_posting_popup_menu:Class = NaverMusicPlayerListPanel_playlist_posting_popup_menu;

        private const TOOLTIP_OVER_OUT_TWEEN_DURATION:Number = 0.2;
        private const ACTIVE_TWEEN_DURATION:Number = 0.2;

        private var posting_background_btn:MovieClip;
        private var select_all_checkbox:MovieClip;
        private var naverMusicPlayList:NaverMusicPlayerList;
        private var playlist_panel_asset;
        private var userIdText:FlowTextField;
        private var posting_cafe_btn:SimpleButton;
        private var posting_blog_btn:SimpleButton;
        private var byText:FlowTextField;
        private var music_send_tooltip:MovieClip;
        private var mp3_down_btn:MovieClip;
        private var _isActive:Boolean = false;
        private var userAuthority:UserAuthority;
        private var add_btn:MovieClip;
        private var borderShape:Shape;
        private var playlist_header_background_white:MovieClip;
        private var isTooltipActive:Boolean = false;
        private var playlist_posting_popup_menu_assets;
        private var playlistTitleText:FlowTextField;
        private var playlist_close_btn:SimpleButton;
        private var music_send_btn:SimpleButton;

        public function NaverMusicPlayerListPanel():void{
        }
        public static function updateAsset(_arg1):void{
            playlist_panel = _arg1.getDefinition("playlist_panel");
            playlist_posting_popup_menu = _arg1.getDefinition("playlist_posting_popup_menu");
        }
        public static function updateStyle(_arg1):void{
            playlistTitleColor = _arg1.PLAYLIST_TITLE_COLOR;
            playlistUserIdColor = _arg1.PLAYLIST_USER_ID_COLOR;
            backgroundColor = _arg1.DEFAULT_BG_COLOR;
        }

        private function handleSimpleButtonMouseEvent(_arg1:MouseEvent):void{
            if (_arg1.target !== _arg1.currentTarget){
                return;
            };
            var _local2:SimpleButton = (_arg1.target as SimpleButton);
            var _local3:String = _local2.name;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    if (_local3 == MUSIC_SEND_BTN){
                        playlist_posting_popup_menu_assets.visible = true;
                        return;
                    };
                    if ((((_local3 == POSTING_BLOG_BTN)) || ((_local3 == POSTING_CAFE_BTN)))){
                        playlist_posting_popup_menu_assets.visible = false;
                    };
                    dispatchEvent(new PanelEvent(PanelEvent.PANEL_BUTTON_CLICK, _local2.name));
                    break;
            };
        }
        private function activeTweenCompleteHandler():void{
            if (isActive){
                dispatchEvent(new PanelEvent(PanelEvent.PANEL_ACTIVED, this));
            };
        }
        private function drawBackground():void{
            var _local2 = graphics;
            with (_local2) {
                clear();
                beginFill(backgroundColor, 1);
                drawRect(0, 0, PostingConfig.WIDTH, PostingConfig.HEIGHT);
                endFill();
            };
        }
        public function validSongCheck():void{
            var _local1:DListIterator;
            var _local2:UserAuthority;
            var _local3:SongInfoServiceObject;
            var _local4:MusicPlayerBasicModel;
            _local4 = MusicPlayerBasicModel.getInstance();
            _local1 = _local4.musicPlayList.getListIterator();
            _local2 = UserAuthority.getInstance();
            if (Boolean(_local1)){
                while (_local1.hasNext()) {
                    _local3 = (_local1.node.data as SongInfoServiceObject);
                    if (!_local2.isLogin){
                        if (_local3.isAdultSong()){
                            _local3.isValid = false;
                        } else {
                            if (!_local3.isAdultSong()){
                                _local3.isValid = true;
                            };
                        };
                    } else {
                        if (((!(_local2.isAdult)) && (_local3.isAdultSong()))){
                            _local3.isValid = false;
                        } else {
                            if (((!(_local2.isAdult)) && (!(_local3.isAdultSong())))){
                                _local3.isValid = true;
                            } else {
                                _local3.isValid = true;
                            };
                        };
                    };
                    if (_local3.isInvalidServiceFlag()){
                        _local3.isServiced = false;
                    };
                    _local1.next();
                };
            };
            invalidateList();
        }
        private function createFlowTextField():void{
            var isShow:* = PostingConfig.getInstance().linkYn;
            if (!Boolean(playlistTitleText)){
                playlistTitleText = new FlowTextField();
            };
            var _local2 = playlistTitleText;
            with (_local2) {
                useFlowEffect = false;
                availableWidth = 123;
                fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                fontColor = playlistTitleColor;
                fontSize = 13;
                letterSpacing = -1;
                bold = true;
                x = 7;
                y = 3;
                addEventListener(MouseEvent.MOUSE_OVER, handleTextFieldMouseEvent, false, 0, true);
                addEventListener(MouseEvent.MOUSE_OUT, handleTextFieldMouseEvent, false, 0, true);
            };
            addChild(playlistTitleText);
            byText = new FlowTextField();
            _local2 = byText;
            with (_local2) {
                useFlowEffect = false;
                fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                fontSize = 11;
                fontColor = playlistUserIdColor;
                letterSpacing = -1;
                x = ((playlistTitleText.x + playlistTitleText.width) - 2);
                y = 5;
                text = "by";
                if (((Boolean(isShow)) && ((isShow == "Y")))){
                    byText.useHandCursor = true;
                    byText.buttonMode = true;
                };
                addEventListener(MouseEvent.MOUSE_DOWN, handleTextFieldDownMouseEvent, false, 0, true);
            };
            addChild(byText);
            userIdText = new FlowTextField();
            _local2 = userIdText;
            with (_local2) {
                useFlowEffect = false;
                availableWidth = 50;
                fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                fontColor = playlistUserIdColor;
                fontSize = 11;
                letterSpacing = -0.5;
                x = (byText.x + byText.width);
                y = 5;
                if (((Boolean(isShow)) && ((isShow == "Y")))){
                    userIdText.useHandCursor = true;
                    userIdText.buttonMode = true;
                };
                addEventListener(MouseEvent.MOUSE_OVER, handleTextFieldMouseEvent, false, 0, true);
                addEventListener(MouseEvent.MOUSE_OUT, handleTextFieldMouseEvent, false, 0, true);
                addEventListener(MouseEvent.MOUSE_DOWN, handleTextFieldDownMouseEvent, false, 0, true);
            };
            addChild(userIdText);
        }
        public function set isActive(_arg1:Boolean):void{
            if (_isActive === _arg1){
                return;
            };
            _isActive = _arg1;
            var _local2:Number = ((isActive) ? ACTIVE_POSITON : DEACTIVE_POSITON);
            TweensyZero.to(this, {y:_local2}, ACTIVE_TWEEN_DURATION, Cubic.easeOut, 0, null, activeTweenCompleteHandler);
        }
        public function changeRendererViewAsPlaying():void{
            naverMusicPlayList.changeRendererViewAsPlaying();
        }
        private function handleTextFieldDownMouseEvent(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:String;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local2:String = PostingConfig.getInstance().linkYn;
            if (!Boolean(_local2)){
                return;
            };
            switch (_local2){
                case "Y":
                    _local3 = PostingConfig.getInstance().userid;
                    _local4 = PostingConfig.getInstance().link;
                    _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_CREATOR_LINK_PAGE, true);
                    _local5.data = {link:_local4};
                    dispatchEvent(_local5);
                    break;
                case "N":
                    break;
            };
        }
        private function postingBackgroundButtonClickHandler(_arg1:MouseEvent):void{
            playlist_posting_popup_menu_assets.visible = false;
        }
        public function createList():void{
            drawBackground();
            naverMusicPlayList = new NaverMusicPlayerList();
            naverMusicPlayList.playerModel = MusicPlayerBasicModel.getInstance();
            naverMusicPlayList.setStyle("cellRenderer", NaverMiniPlayerCellRenderer);
            naverMusicPlayList.setStyle("skin", PlaylistBodyBackground);
            naverMusicPlayList.rowHeight = ROW_HEIGHT;
            naverMusicPlayList.move(0, PLAYLIST_HEADER_HEIGHT);
            naverMusicPlayList.setSize(PLAYLIST_BODY_WIDTH, PLAYLIST_BODY_HEIGHT);
            addChild(naverMusicPlayList);
            createAsset();
            createFlowTextField();
            var _local1:PostingConfig = PostingConfig.getInstance();
            if (((!((_local1.playlistTotal == 0))) && ((_local1.playlistTotal < 5)))){
                naverMusicPlayList.drawHorizontoalGridLine();
            };
            playlistTitleText.text = _local1.title;
            userIdText.text = _local1.userid;
            byText.x = (playlistTitleText.x + playlistTitleText.width);
            userIdText.x = (byText.x + byText.width);
            userAuthority = UserAuthority.getInstance();
            userAuthority.addEventListener(UserAuthChangedEvent.AUTH_CHANGE, handleUserAuthChangeEvent, false, 0, true);
            addEventListener(InternalUIHandlerEvent.IS_SELECTED_ALL, handleSelectAllCheckBoxButton, false, 0, true);
        }
        private function handleMusicSendButtonEvent(_arg1:MouseEvent):void{
            if (_arg1.target !== _arg1.currentTarget){
                return;
            };
            var _local2:String = _arg1.type;
            var _local3:SimpleButton = (_arg1.currentTarget as SimpleButton);
            switch (_local2){
                case MouseEvent.MOUSE_OVER:
                    isTooltipActive = true;
                    TweensyZero.fromTo(music_send_tooltip, {
                        y:210,
                        alpha:0
                    }, {
                        y:200,
                        alpha:1
                    }, TOOLTIP_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                case MouseEvent.MOUSE_OUT:
                    if (isTooltipActive){
                        isTooltipActive = false;
                        return;
                    };
                    TweensyZero.to(music_send_tooltip, {alpha:0}, (TOOLTIP_OVER_OUT_TWEEN_DURATION - 1), Linear.easeOut, 0, null);
                    break;
                case MouseEvent.CLICK:
                    addChild(playlist_posting_popup_menu_assets);
                    playlist_posting_popup_menu_assets.visible = true;
                    break;
            };
            _arg1.stopPropagation();
        }
        public function getPlaylist():NaverMusicPlayerList{
            if (Boolean(naverMusicPlayList)){
                return (naverMusicPlayList);
            };
            return (null);
        }
        public function getSelectedTrackIdsAsArray():Array{
            if (Boolean(naverMusicPlayList)){
                return (naverMusicPlayList.getSelectedTrackIdsAsArray());
            };
            return (new Array());
        }
        public function initExistPlayingRenderer():void{
            if (Boolean(naverMusicPlayList)){
                if (Boolean(naverMusicPlayList.playingSongRenderer)){
                    naverMusicPlayList.playingSongRenderer.isPlaying = false;
                };
                naverMusicPlayList.invalidateList();
            };
        }
        public function drawBorderForWhiteColor():void{
            var outlineColor:* = 0;
            var borderWidth:* = NaN;
            var borderHeight:* = NaN;
            var topPanelHeight:* = NaN;
            var postingConfig:* = PostingConfig.getInstance();
            if (postingConfig.hasRightOutline){
                if (PostingColorStyleEnum.NEW1_C09 === postingConfig.pcolor){
                    outlineColor = C09New1ColorStyle.PLAYLIST_RIGHT_OUTLINE;
                } else {
                    if (PostingColorStyleEnum.PURPLE_SILVER_C10 === postingConfig.pcolor){
                        outlineColor = C10PurpleSilverColorStyle.PLAYLIST_RIGHT_OUTLINE;
                    } else {
                        if (PostingColorStyleEnum.WHITE_C01 === postingConfig.pcolor){
                            outlineColor = C01WhiteColorStyle.PLAYLIST_RIGHT_OUTLINE;
                        } else {
                            return;
                        };
                    };
                };
                if (!Boolean(borderShape)){
                    borderShape = new Shape();
                    addChild(borderShape);
                };
                borderWidth = (PostingConfig.WIDTH - 1);
                borderHeight = (PostingConfig.HEIGHT - 1);
                topPanelHeight = 25;
                if (PostingColorStyleEnum.WHITE_C01 === postingConfig.pcolor){
                    var _local2 = borderShape.graphics;
                    with (_local2) {
                        clear();
                        lineStyle(1, outlineColor, 1, false, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 3);
                        drawRect(0, 0, borderWidth, borderHeight);
                    };
                } else {
                    _local2 = borderShape.graphics;
                    with (_local2) {
                        clear();
                        lineStyle(1, outlineColor, 1, false, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 3);
                        moveTo(0, topPanelHeight);
                        lineTo(0, borderHeight);
                        lineTo(borderWidth, borderHeight);
                        lineTo(borderWidth, topPanelHeight);
                    };
                };
            };
        }
        private function handleCustomButtonMouseEvent(_arg1:MouseEvent):void{
            var _local2:MovieClip = (_arg1.target as MovieClip);
            var _local3:String = _local2.name;
            switch (_arg1.type){
                case MouseEvent.MOUSE_DOWN:
                    if (_local3 == SELECT_ALL_CHECKBOX){
                        if (Boolean(naverMusicPlayList)){
                            naverMusicPlayList.selectAllItem();
                        };
                    };
                    dispatchEvent(new PanelEvent(PanelEvent.PANEL_CUSTOM_BUTTON_CLICK, _local2.name));
                    break;
            };
        }
        private function handleSelectAllCheckBoxButton(_arg1:InternalUIHandlerEvent):void{
            var _local2:Boolean = _arg1.data.isAll;
            select_all_checkbox.gotoAndStop(((_local2) ? 2 : 1));
        }
        protected function createAsset():void{
            playlist_panel_asset = new playlist_panel();
            addChild(playlist_panel_asset);
            music_send_btn = playlist_panel_asset.music_send_btn;
            playlist_close_btn = playlist_panel_asset.playlist_close_btn;
            select_all_checkbox = playlist_panel_asset.select_all_checkbox;
            select_all_checkbox.gotoAndStop(1);
            mp3_down_btn = playlist_panel_asset.mp3_down_btn;
            var _local2 = mp3_down_btn;
            with (_local2) {
                buttonMode = true;
            };
            add_btn = playlist_panel_asset.add_btn;
            _local2 = add_btn;
            with (_local2) {
                buttonMode = true;
            };
            music_send_tooltip = playlist_panel_asset.music_send_tooltip;
            _local2 = music_send_tooltip;
            with (_local2) {
                mouseChildren = false;
                mouseEnabled = false;
                alpha = 0;
            };
            playlist_posting_popup_menu_assets = new playlist_posting_popup_menu();
            playlist_posting_popup_menu_assets.visible = false;
            addChild(playlist_posting_popup_menu_assets);
            posting_blog_btn = playlist_posting_popup_menu_assets.posting_blog_btn;
            posting_cafe_btn = playlist_posting_popup_menu_assets.posting_cafe_btn;
            posting_background_btn = playlist_posting_popup_menu_assets.posting_background_btn;
            SpriteExtention.setEventListeners(music_send_btn, [MouseEvent.MOUSE_OUT, MouseEvent.MOUSE_OVER, MouseEvent.CLICK], handleMusicSendButtonEvent);
            SpriteExtention.setEventListeners(playlist_close_btn, [MouseEvent.CLICK], playlistCloseButtonClickHandler);
            posting_background_btn.addEventListener(MouseEvent.MOUSE_DOWN, postingBackgroundButtonClickHandler, false, 0, true);
            posting_blog_btn.addEventListener(MouseEvent.CLICK, handleSimpleButtonMouseEvent, false, 0, true);
            posting_cafe_btn.addEventListener(MouseEvent.CLICK, handleSimpleButtonMouseEvent, false, 0, true);
            music_send_btn.addEventListener(MouseEvent.CLICK, handleSimpleButtonMouseEvent, false, 0, true);
            select_all_checkbox.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
            mp3_down_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
            add_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleCustomButtonMouseEvent, false, 0, true);
        }
        private function playlistCloseButtonClickHandler(_arg1:MouseEvent):void{
            isActive = false;
            dispatchEvent(new PanelEvent(PanelEvent.PANEL_DEACTIVE, this));
        }
        public function validateData(_arg1:Object=null):Boolean{
            if (Boolean(naverMusicPlayList)){
                naverMusicPlayList.dataProvider.removeAll();
                naverMusicPlayList.dataProvider = new DataProvider(_arg1);
                naverMusicPlayList.drawNow();
                return (true);
            };
            return (false);
        }
        public function get isActive():Boolean{
            return (_isActive);
        }
        private function handleTextFieldMouseEvent(_arg1:MouseEvent):void{
            if (_arg1.target !== _arg1.currentTarget){
                return;
            };
            var _local2:String = _arg1.type;
            var _local3:FlowTextField = (_arg1.currentTarget as FlowTextField);
            var _local4:TooltipManager = TooltipManager.getInstance();
            var _local5:String = _local3.originText;
            if (!_local3.isReduced){
                return;
            };
            switch (_local2){
                case MouseEvent.MOUSE_OVER:
                    _local4.setOffsetPoint(0, 20);
                    _local4.setLimitWidth(200);
                    _local4.setText(_local5);
                    _local4.setHorizontalAlign(HorizontalAlignment.RIGHT);
                    _local4.setVerticalAlign(VerticalAlignment.BOTTOM);
                    _local4.show();
                    break;
                case MouseEvent.MOUSE_OUT:
                    _local4.hide();
                    break;
            };
            _arg1.stopPropagation();
        }
        private function handleUserAuthChangeEvent(_arg1:UserAuthChangedEvent):void{
            validSongCheck();
        }
        public function invalidateList():void{
            if (Boolean(naverMusicPlayList)){
                naverMusicPlayList.invalidateList();
            };
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.display.*;
    import mx.core.*;

    public class MiniPlayerPanel_posting_popup_menu extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var playlist_show_tooltip:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var pause_btn:DisplayObject;
        public var naver_music_logo:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var purchase_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var info_text:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var plus_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var track:DisplayObject;
        public var play_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_show_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var purchasemp3_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display.*;

    public class TicketPurchasingPanel extends SpriteExtention implements IPanel {

        public static const POPUP_PURCHASE_7000_BTN:String = "popup_purchase_btn_03";
        public static const POPUP_PURCHASE_5000_BTN:String = "popup_purchase_btn_02";
        public static const POPUP_PURCHASE_3000_BTN:String = "popup_purchase_btn_01";
        public static const POPUP_CLOSE_BTN:String = "popup_close_btn";
        public static const POPUP_MORE_BTN:String = "popup_more_btn";
        public static const DEACTIVE_POSITON:int = 242;
        public static const ACTIVE_POSITON:int = 0;

        private const ACTIVE_TWEEN_DURATION:Number = 0.2;

        private var popup_close_btn:SimpleButton;
        private var ticket_popup_assets;
        private var simpleButtonList:Array;
        private var popup_more_btn:SimpleButton;
        private var popup_background:MovieClip;
        private var popup_purchase_btn_01:SimpleButton;
        private var popup_purchase_btn_02:SimpleButton;
        private var popup_purchase_btn_03:SimpleButton;
        private var _isActive:Boolean = false;
        private var ticket_popup:Class;

        public function TicketPurchasingPanel(_arg1:Boolean=true){
            ticket_popup = TicketPurchasingPanel_ticket_popup;
            super(_arg1);
        }
        protected function initAsset():void{
            var _local1:SimpleButton;
            for each (_local1 in simpleButtonList) {
                SpriteExtention.setEventListeners(_local1, [MouseEvent.CLICK], handleSimpleButtonMouseEvent);
            };
        }
        private function handleSimpleButtonMouseEvent(_arg1:MouseEvent):void{
            var _local2:SimpleButton = (_arg1.target as SimpleButton);
            switch (_local2.name){
                case POPUP_CLOSE_BTN:
                    isActive = false;
                    break;
                case POPUP_MORE_BTN:
                    dispatchEvent(new PanelEvent(PanelEvent.PANEL_BUTTON_CLICK, POPUP_MORE_BTN));
                    break;
                default:
                    dispatchEvent(new PanelEvent(PanelEvent.PANEL_BUTTON_CLICK, _local2.name));
            };
        }
        public function get isActive():Boolean{
            return (_isActive);
        }
        protected function createAssets():void{
            ticket_popup_assets = new ticket_popup();
            addChild(ticket_popup_assets);
            popup_background = ticket_popup_assets.popup_background;
            popup_purchase_btn_01 = ticket_popup_assets.popup_purchase_btn_01;
            popup_purchase_btn_01.x = 166;
            popup_purchase_btn_01.y = 74;
            popup_purchase_btn_02 = ticket_popup_assets.popup_purchase_btn_02;
            popup_purchase_btn_02.x = popup_purchase_btn_01.x;
            popup_purchase_btn_02.y = 122;
            popup_purchase_btn_03 = ticket_popup_assets.popup_purchase_btn_03;
            popup_purchase_btn_03.x = popup_purchase_btn_01.x;
            popup_purchase_btn_03.y = 175;
            popup_more_btn = ticket_popup_assets.popup_more_btn;
            popup_more_btn.x = 186;
            popup_more_btn.y = 211;
            popup_close_btn = ticket_popup_assets.popup_close_btn;
            popup_close_btn.x = 215;
            popup_close_btn.y = 7;
            simpleButtonList = [popup_purchase_btn_01, popup_purchase_btn_02, popup_purchase_btn_03, popup_more_btn, popup_close_btn];
        }
        public function set isActive(_arg1:Boolean):void{
            if (_isActive === _arg1){
                return;
            };
            _isActive = _arg1;
            if (isActive){
                visible = true;
                y = ACTIVE_POSITON;
            } else {
                visible = false;
                y = DEACTIVE_POSITON;
            };
        }
        override protected function initialize():void{
            createAssets();
            initAsset();
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels {
    import flash.events.*;
    import de.polygonal.ds.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import fl.data.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.controls.listClasses.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.*;

    public class NaverMusicPlayerList extends MiniList {

        public static const ALBUM_ICON_TARGET:String = "album_icon";
        public static const MP3_ICON_TARGET:String = "mp3_icon";
        public static const NAME:String = "NAVERMUSICPLAYERLIST";

        private static var gridLineColor:int = 0xF5F5F5;
        protected static var scroll_thumb_over_icon:Class = NaverMusicPlayerList_scroll_thumb_over_icon;
        protected static var scroll_thumb_icon:Class = NaverMusicPlayerList_scroll_thumb_icon;
        protected static var scroll_background_icon:Class = NaverMusicPlayerList_scroll_background_icon;

        protected var _playingSongRenderer:SongInfoServiceObject;
        protected var _playerModel:MusicPlayerBasicModel;
        private var horizontalGridLine:Shape;
        private var _dragInit:Boolean;
        private var _isDragging:Boolean;
        protected var _isSelectAll:Boolean;
        private var mouseDragScrollingInterval:Number = 0;
        private var _tryDragging:Boolean;
        private var _dragEnable:Boolean;

        public function NaverMusicPlayerList(){
            allowMultipleSelection = true;
            verticalLineScrollSize = rowHeight;
            verticalPageScrollSize = rowHeight;
            StyleManager.setStyle("scrollBarWidth", 7);
            setStyle("thumbOverSkin", scroll_thumb_over_icon);
            setStyle("thumbUpSkin", scroll_thumb_icon);
            setStyle("thumbDownSkin", scroll_thumb_over_icon);
            setStyle("thumbIcon", null);
            setStyle("thumbDisabledSkin", scroll_thumb_icon);
            setStyle("trackDownSkin", scroll_background_icon);
            setStyle("trackOverSkin", scroll_background_icon);
            setStyle("trackUpSkin", scroll_background_icon);
            setStyle("trackDisabledSkin", scroll_background_icon);
            addEventListener(Event.REMOVED_FROM_STAGE, removeResource, false, 0, true);
        }
        public static function updateRendererStyle(_arg1):void{
            gridLineColor = _arg1.HORIZONTAL_LAST_GRID_LINE_COLOR;
        }
        public static function updateAsset(_arg1):void{
            scroll_background_icon = _arg1.getDefinition("scroll_background_icon");
            scroll_thumb_icon = _arg1.getDefinition("scroll_thumb_icon");
            scroll_thumb_over_icon = _arg1.getDefinition("scroll_thumb_over_icon");
        }

        override protected function drawList():void{
            var _local5:uint;
            var _local6:Object;
            var _local7:ICellRenderer;
            var _local10:Boolean;
            var _local11:Number;
            var _local12:NaverMiniPlayerCellRenderer;
            var _local13:String;
            var _local14:Object;
            var _local15:Sprite;
            var _local16:String;
            var _local1:int = getTimer();
            listHolder.x = (listHolder.y = contentPadding);
            var _local2:Rectangle = listHolder.scrollRect;
            _local2.x = _horizontalScrollPosition;
            _local2.y = 0;
            _local2.height = 195;
            listHolder.scrollRect = _local2;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var _local3:uint = Math.floor((_verticalScrollPosition / rowHeight));
            var _local4:uint = Math.min(length, (_local3 + rowCount));
            var _local8:Dictionary = (renderedItems = new Dictionary(true));
            _local5 = _local3;
            while (_local5 < _local4) {
                _local8[_dataProvider.getItemAt(_local5)] = true;
                _local5++;
            };
            var _local9:Dictionary = new Dictionary(true);
            while (activeCellRenderers.length > 0) {
                _local7 = (activeCellRenderers.pop() as ICellRenderer);
                _local6 = _local7.data;
                if ((((_local8[_local6] == null)) || ((invalidItems[_local6] == true)))){
                    availableCellRenderers.push(_local7);
                } else {
                    _local9[_local6] = _local7;
                    invalidItems[_local6] = true;
                };
                list.removeChild((_local7 as DisplayObject));
            };
            invalidItems = new Dictionary(true);
            _local5 = _local3;
            while (_local5 < _local4) {
                _local10 = false;
                _local6 = _dataProvider.getItemAt(_local5);
                if (_local9[_local6] != null){
                    _local10 = true;
                    _local7 = _local9[_local6];
                    delete _local9[_local6];
                } else {
                    if (availableCellRenderers.length > 0){
                        _local7 = (availableCellRenderers.pop() as ICellRenderer);
                    } else {
                        _local7 = (getDisplayObjectInstance(getStyleValue("cellRenderer")) as ICellRenderer);
                        _local15 = (_local7 as Sprite);
                        if (_local15 != null){
                            if (!_local15.hasEventListener(MouseEvent.CLICK)){
                                _local15.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                            };
                            if (!_local15.hasEventListener(MouseEvent.ROLL_OVER)){
                                _local15.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                            };
                            if (!_local15.hasEventListener(MouseEvent.ROLL_OUT)){
                                _local15.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                            };
                            if (!_local15.hasEventListener(Event.CHANGE)){
                                _local15.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                            };
                            if (_local15.hasOwnProperty("setStyle")){
                                for (_local16 in rendererStyles) {
                                    var _local19 = _local15;
                                    _local19["setStyle"](_local16, rendererStyles[_local16]);
                                };
                            };
                        };
                    };
                };
                list.addChild((_local7 as Sprite));
                activeCellRenderers.push(_local7);
                _local11 = (rowHeight * (_local5 - _local3));
                _local7.y = _local11;
                _local7.setSize((availableWidth + _maxHorizontalScrollPosition), rowHeight);
                _local12 = (_local7 as NaverMiniPlayerCellRenderer);
                if (Boolean(_local12)){
                    _local12.isFooterCell = (_local11 >= ((rowCount - 1) * rowHeight));
                };
                _local13 = itemToLabel(_local6);
                _local14 = null;
                if (_iconFunction != null){
                    _local14 = _iconFunction(_local6);
                } else {
                    if (_iconField != null){
                        _local14 = _local6[_iconField];
                    };
                };
                if (!_local10){
                    _local7.data = _local6;
                };
                _local7.listData = new ListData(_local13, _local14, this, _local5, _local5, 0);
                _local7.selected = !((_selectedIndices.indexOf(_local5) == -1));
                if ((_local7 is UIComponent)){
                    (_local7 as UIComponent).drawNow();
                };
                _local5++;
            };
        }
        public function get isSelectAll():Boolean{
            return (_isSelectAll);
        }
        public function set playingSongRenderer(_arg1:SongInfoServiceObject):void{
            this._playingSongRenderer = _arg1;
        }
        private function get properList():Array{
            var _local1:Array;
            _local1 = playerModel.musicPlayListAsArray;
            return (_local1);
        }
        public function set playerModel(_arg1:MusicPlayerBasicModel):void{
            if (Boolean(this._playerModel)){
                this._playerModel.removeEventListener("updateListOfMusic", updateListHandler);
                this._playerModel.removeEventListener("initializeView", initializeView);
                this._playerModel.releaseModel();
                this._playerModel = null;
            };
            this._playerModel = _arg1;
            if (Boolean(this._playerModel)){
                this._playerModel.addEventListener("updateListOfMusic", updateListHandler);
                this._playerModel.addEventListener("initializeView", initializeView);
            };
        }
        public function updateScrollPositionToSomeRenderer(_arg1:SongInfoServiceObject):void{
            var _local2:int;
            if (Boolean(_arg1)){
                _local2 = dataProvider.getItemIndex(_arg1);
                if ((verticalScrollPosition / verticalLineScrollSize) < _local2){
                    scrollToIndex((_local2 + 2));
                } else {
                    scrollToIndex(_local2);
                };
            };
        }
        override protected function handleWheel(_arg1:MouseEvent):void{
            super.handleWheel(_arg1);
        }
        public function drawHorizontoalGridLine():void{
            if (!Boolean(horizontalGridLine)){
                horizontalGridLine = new Shape();
                addChild(horizontalGridLine);
            };
            var lineY:* = (NaverMusicPlayerListPanel.PLAYLIST_BODY_HEIGHT - 1);
            var _local2 = horizontalGridLine.graphics;
            with (_local2) {
                clear();
                lineStyle(1, gridLineColor, 1, false, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 3);
                moveTo(0, lineY);
                lineTo(NaverMusicPlayerListPanel.PLAYLIST_BODY_WIDTH, lineY);
            };
        }
        public function get isDragging():Boolean{
            return (_isDragging);
        }
        override protected function drawLayout():void{
            super.drawLayout();
        }
        override protected function handleCellRendererChange(_arg1:Event):void{
            super.handleCellRendererChange(_arg1);
        }
        public function get tryDragging():Boolean{
            return (_tryDragging);
        }
        public function changeRendererViewAsPlaying():void{
            var _local2:SongInfoServiceObject;
            var _local3:Array;
            var _local4:int;
            var _local1:DListNode = playerModel.activeNode;
            if (Boolean(_local1)){
                _local2 = (_local1.data as SongInfoServiceObject);
                _local3 = properList;
                if (Boolean(_local2)){
                    if (Boolean(playingSongRenderer)){
                        playingSongRenderer.isPlaying = false;
                    };
                    _local2.isPlaying = true;
                    _local4 = _local3.indexOf(_local2);
                    if (_local4 > -1){
                        playingSongRenderer = _local2;
                        invalidateList();
                        updateScrollPosition();
                    };
                };
            };
        }
        public function set dragEnable(_arg1:Boolean):void{
            this._dragEnable = _arg1;
        }
        public function set isDragging(_arg1:Boolean):void{
            this._isDragging = _arg1;
        }
        public function selectAllItem():void{
            var _local2:int;
            var _local3:Array;
            var _local4:SongInfoServiceObject;
            var _local5:Boolean;
            var _local6:int;
            if (!isSelectAll){
                _local2 = dataProvider.length;
                _local3 = new Array();
                _local4 = null;
                _local5 = true;
                _local6 = 0;
                while (_local6 < _local2) {
                    _local4 = (dataProvider.getItemAt(_local6) as SongInfoServiceObject);
                    _local4.soIndex = _local6;
                    if (Boolean(_local4)){
                        _local4.isChecked = true;
                        _local3.push(_local4);
                    };
                    _local6++;
                };
                isSelectAll = true;
            } else {
                selectedItems = new Array();
                isSelectAll = false;
            };
            selectedItems = _local3;
            if (selectedItems.length == 0){
                isSelectAll = false;
            };
            var _local1:InternalUIHandlerEvent = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL, true);
            _local1.data = {isAll:isSelectAll};
            dispatchEvent(_local1);
        }
        protected function removeResource(_arg1:Event=null):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, removeResource);
        }
        public function updateScrollPosition():void{
            var _local1:SongInfoServiceObject;
            var _local2:int;
            if (Boolean(playerModel.playingSongNode)){
                _local1 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                if (Boolean(_local1)){
                    _local2 = dataProvider.getItemIndex(_local1);
                    if ((verticalScrollPosition / verticalLineScrollSize) < _local2){
                        scrollToIndex((_local2 + 2));
                    } else {
                        scrollToIndex(_local2);
                    };
                };
            };
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == (rowHeight * length)));
            contentHeight = (rowHeight * length);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (_cellRenderer != getStyleValue("cellRenderer")){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                };
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        public function get playingSongRenderer():SongInfoServiceObject{
            return (_playingSongRenderer);
        }
        public function get playerModel():MusicPlayerBasicModel{
            return (_playerModel);
        }
        public function getSelectedTrackIdsAsArray():Array{
            var _local1:Array = new Array();
            var _local2:Array = sortSelectedItems();
            var _local3:int = _local2.length;
            var _local4:SongInfoServiceObject;
            var _local5:int;
            while (_local5 < _local3) {
                _local4 = (_local2[_local5] as SongInfoServiceObject);
                if (Boolean(_local4)){
                    _local1.push(_local4.getTrackID());
                };
                _local5++;
            };
            return (_local1);
        }
        protected function updateListHandler(_arg1:Event):void{
            dataProvider = new DataProvider(playerModel.musicPlayListAsArray);
        }
        public function removeAsset():void{
            removeResource();
        }
        public function set dragInit(_arg1:Boolean):void{
            this._dragInit = _arg1;
        }
        public function initMouseDrag():void{
            clearInterval(mouseDragScrollingInterval);
            mouseDragScrollingInterval = 0;
        }
        public function set tryDragging(_arg1:Boolean):void{
            this._tryDragging = _arg1;
        }
        private function initializeView(_arg1:Event):void{
        }
        public function get dragEnable():Boolean{
            return (_dragEnable);
        }
        override protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            var _local2:NaverMiniPlayerCellRenderer = (_arg1.target as NaverMiniPlayerCellRenderer);
            if (!Boolean(_local2)){
                return;
            };
            switch (_arg1.type){
                case MouseEvent.ROLL_OVER:
                    _local2.isMouseOver = true;
                    break;
                case MouseEvent.ROLL_OUT:
                    _local2.isMouseOver = false;
                    break;
            };
        }
        public function get dragInit():Boolean{
            return (_dragInit);
        }
        public function sortSelectedItems(_arg1:Boolean=false):Array{
            var _local2:Array = selectedItems.concat();
            _local2.sortOn("soIndex", Array.NUMERIC);
            var _local3:int = _local2.length;
            var _local4:SongInfoServiceObject;
            var _local5:int;
            while (_local5 < _local3) {
                _local4 = _local2[_local5];
                if (!_arg1){
                    _local2[_local5] = _local4.clone();
                } else {
                    _local2[_local5] = _local4;
                };
                _local5++;
            };
            return (_local2);
        }
        override protected function handleCellRendererDoubleClick(_arg1:MouseEvent):void{
            super.handleCellRendererDoubleClick(_arg1);
        }
        public function changeCurrentActiveRenderer(_arg1:NaverMiniPlayerCellRenderer, _arg2:String):void{
            var _local3:NaverMiniPlayerCellRenderer;
            var _local5:SongInfoServiceObject;
            var _local6:NaverMusicPlayerListEvent;
            _local3 = (_arg1 as NaverMiniPlayerCellRenderer);
            if (!_local3.isValidCell){
            };
            if (Boolean(playingSongRenderer)){
                playingSongRenderer.isPlaying = false;
            };
            if (Boolean(_local3)){
                _local3.isPlaying = true;
            };
            var _local4:DLinkedList = playerModel.musicPlayList;
            playerModel.activeNode = playerModel.searchVaildSongObject((_local3.data as SongInfoServiceObject), _local4);
            playerModel.activeMusicList = _local4.concat();
            if (playerModel.isShuffled){
                playerModel.shuffleActiveList();
            };
            if (Boolean(playerModel.activeNode)){
                _local5 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(_local5);
                    playingSongRenderer = (_local3.data as SongInfoServiceObject);
                    _local6 = new NaverMusicPlayerListEvent(NaverMusicPlayerListEvent.PLAYLIST_PLAY_CURRENT_SONG, _local5, true);
                    dispatchEvent(_local6);
                };
            };
        }
        override protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local6:FlowTextField;
            var _local7:NaverMusicPlayerListEvent;
            var _local8:SongInfoServiceObject;
            var _local9:Boolean;
            var _local10:UserAuthority;
            var _local11:NaverMiniPlayerCellRenderer;
            var _local12:int;
            var _local13:InternalUIHandlerEvent;
            var _local14:Array;
            var _local15:Array;
            var _local16:MouseEvent;
            var _local2:MusicPlayerBasicModel = MusicPlayerBasicModel.getInstance();
            if (!Boolean(_local2)){
                return;
            };
            var _local3:NaverMiniPlayerCellRenderer = (_arg1.currentTarget as NaverMiniPlayerCellRenderer);
            if (!Boolean(_local3)){
                return;
            };
            _local3.initFlowText();
            var _local4:MiniPlayerModel = MiniPlayerModel.getInstance();
            if (Boolean(_local4)){
                if (!_local4.introPlayed){
                    _local4.introPlayed = true;
                };
            };
            var _local5:DisplayObject = (_arg1.target as DisplayObject);
            if (!Boolean(_local5)){
                return;
            };
            if ((_local5 is NaverMiniPlayerCellRenderer)){
                changeCurrentActiveRenderer(_local3, NAME);
            } else {
                if ((_local5 is FlowTextField)){
                    _local6 = (_arg1.target as FlowTextField);
                    _local6.init();
                    changeCurrentActiveRenderer(_local3, NAME);
                } else {
                    _local8 = (_local3.data as SongInfoServiceObject);
                    if (Boolean(_local8)){
                        switch (_local5.name){
                            case NaverMiniPlayerCellRenderer.ALBUM_ICON:
                                if (((Boolean(_local8.getAlbumid())) && (_local8.isServiced))){
                                    _local7 = new NaverMusicPlayerListEvent(NaverMusicPlayerListEvent.PLAYLIST_ALBUM_ICON_CLICK, _local8.getAlbumid(), true);
                                    dispatchEvent(_local7);
                                };
                                break;
                            case NaverMiniPlayerCellRenderer.MP3_ICON:
                                if (_local8.hasMp3File()){
                                    _local9 = false;
                                    if (_local8.adultProperty === "Y"){
                                        _local10 = UserAuthority.getInstance();
                                        if (_local10.isAdult){
                                            _local9 = true;
                                        } else {
                                            _local9 = false;
                                        };
                                    } else {
                                        _local9 = true;
                                    };
                                    if (!_local8.isServiced){
                                        _local9 = false;
                                    };
                                    if (((_local9) && (Boolean(_local8.getTrackID())))){
                                        _local7 = new NaverMusicPlayerListEvent(NaverMusicPlayerListEvent.PLAYLIST_MP3_ICON_CLICK, [_local8.getTrackID()], true);
                                        dispatchEvent(_local7);
                                    };
                                };
                                break;
                            case NaverMiniPlayerCellRenderer.CHECKBOX_ICON:
                                _local11 = (_local5.parent.parent as NaverMiniPlayerCellRenderer);
                                if (!_local11.data.isChecked){
                                    _local11.selected = false;
                                    _local14 = selectedItems;
                                    _local14.push(_local11.data);
                                    selectedItems = _local14;
                                } else {
                                    _local15 = selectedItems;
                                    if (Boolean(_local15)){
                                        _local11.selected = true;
                                        _local16 = _arg1;
                                        _arg1.ctrlKey = true;
                                        super.handleCellRendererClick(_local16);
                                    };
                                };
                                _local12 = dataProvider.length;
                                _local13 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL, true);
                                if (selectedItems.length === _local12){
                                    isSelectAll = true;
                                } else {
                                    isSelectAll = false;
                                };
                                _local13.data = {isAll:isSelectAll};
                                dispatchEvent(_local13);
                                break;
                        };
                    };
                };
            };
        }
        public function set isSelectAll(_arg1:Boolean):void{
            this._isSelectAll = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.assets {
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels.*;

    public class PlaylistBodyBackground extends Sprite {

        private static var backgroundColor:int = 0xFFFFFF;

        public function PlaylistBodyBackground(){
            mouseEnabled = false;
            mouseChildren = false;
            drawBackground();
        }
        public static function updateSkinStyle(_arg1):void{
            backgroundColor = _arg1.DEFAULT_BG_COLOR;
        }

        private function drawBackground():void{
            var _local2 = graphics;
            with (_local2) {
                clear();
                beginFill(backgroundColor, 1);
                drawRect(0, 0, NaverMusicPlayerListPanel.PLAYLIST_BODY_WIDTH, NaverMusicPlayerListPanel.PLAYLIST_BODY_HEIGHT);
                endFill();
            };
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.viewBase {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;

    public class NaverMiniPlayerBaseView extends NaverMusicPlayerView {

        public static const PUSH_DATA_TIMER_DELAY:Number = 300;

        private var listPanel:NaverMusicPlayerListPanel;
        private var tooltipLayer:Sprite;
        private var isAllListIsAdult:Boolean;
        private var musicPlayerBasicModel:MusicPlayerBasicModel;
        private var pushDataChecker:Timer;
        private var miniPlayerPanel:MiniPlayerPanel;
        private var miniPlayerModel:MiniPlayerModel;
        private var ticketPurchasingPanel:TicketPurchasingPanel;

        public function NaverMiniPlayerBaseView(){
            musicPlayerBasicModel = MusicPlayerBasicModel.getInstance();
            miniPlayerModel = MiniPlayerModel.getInstance();
            addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
        }
        private function buildUI():void{
            createMiniPlayerPanel();
            createListPanel();
            createTicketPurchasingPanel();
            createTooltipLayer();
            var _local2 = this;
            with (_local2) {
                addEventListener(MiniPlayerEvent.PLAY, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.PAUSE, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.FORWARD, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.REWIND, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.REPEAT_CHANGE, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.SHUFFLE_CHANGE, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.VOLUME_CHANGE, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.SEEK_CHANGE, handleMiniPlayerEvent, false, 0, true);
                addEventListener(MiniPlayerEvent.TEXT_CLICK, handleMiniPlayerEvent, false, 0, true);
                addEventListener(NaverMusicPlayerListEvent.PLAYLIST_PLAY_CURRENT_SONG, handleNaverMusicPlayerListEvent, false, 0, true);
                addEventListener(NaverMusicPlayerListEvent.PLAYLIST_MP3_ICON_CLICK, handleNaverMusicPlayerListEvent, false, 0, true);
                addEventListener(NaverMusicPlayerListEvent.PLAYLIST_ALBUM_ICON_CLICK, handleNaverMusicPlayerListEvent, false, 0, true);
            };
            var miniPlayerModel:* = MiniPlayerModel.getInstance();
            miniPlayerModel.addEventListener(MiniPlayerModelEvent.REPEAT_LIMIT_COUNT_VIOLATION, handleMiniPlayerModelEvent, false, 0, true);
            var completeAddingViewEvent:* = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER);
            dispatchEvent(completeAddingViewEvent);
        }
        private function notifyPlayCurrentSongEventBySongInfo(_arg1:SongInfoServiceObject, _arg2:Boolean):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local3:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
            _local3.data = {
                trackId:_arg1.getTrackID(),
                auto:_arg2
            };
            dispatchEvent(_local3);
            miniPlayerModel.isPlaying = true;
            miniPlayerModel.isProgressiveBlocking = false;
            miniPlayerModel.updateAlbumInfoBySongInfo(_arg1);
        }
        private function notifyResumeCurrentSongEvent(_arg1:Boolean):void{
            var _local2:SongInfoServiceObject;
            var _local3:NaverMusicPlayerBasicEvent;
            _local2 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
            if (Boolean(_local2)){
                musicPlayerBasicModel.playingSongNode = musicPlayerBasicModel.searchVaildSongObjectFromPlayingList(_local2);
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
                _local3.data = {
                    trackId:_local2.getTrackID(),
                    auto:_arg1
                };
                dispatchEvent(_local3);
                miniPlayerModel.isPlaying = true;
                miniPlayerModel.updateAlbumInfoBySongInfo(_local2);
                if (Boolean(listPanel)){
                    listPanel.changeRendererViewAsPlaying();
                };
            };
        }
        private function notifyRequestAlbumInfoEvent(_arg1:String):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
            _local2.data = {albumid:_arg1};
            dispatchEvent(_local2);
        }
        private function initialize():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.START_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local1);
            setMask(this, new Rectangle(0, 0, PostingConfig.WIDTH, PostingConfig.HEIGHT));
            var _local2:PostingConfig = PostingConfig.getInstance();
            var _local3:String = _local2.getAbsoluteAssetURL();
            var _local4:Class = _local2.getColorStyle();
            loadAsset(_local3, _local4);
        }
        private function notifyPurchaseSpecificTicketEvent(_arg1:String):void{
            var _local3:NaverMusicPlayerBasicEvent;
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local2:UserAuthority = UserAuthority.getInstance();
            if (((_local2.isTeam) && (!((NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE == _arg1))))){
                notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002);
            } else {
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET, true);
                _local3.data = {ticketKind:_arg1};
                dispatchEvent(_local3);
            };
        }
        private function finishForce(_arg1:Boolean=true):void{
            if (Boolean(listPanel)){
                listPanel.initExistPlayingRenderer();
                if (_arg1){
                    musicPlayerBasicModel.activeNode = null;
                };
            };
            miniPlayerModel.isPlaying = false;
            miniPlayerModel.totalPlayingTime = 0;
            miniPlayerModel.currentPlayingTime = 0;
            notifyForceFinishEvent();
        }
        private function handleMiniPlayerEvent(_arg1:MiniPlayerEvent):void{
            var _local2:Boolean;
            var _local3:Boolean;
            var _local4:String;
            var _local5:String;
            var _local6:SongInfoServiceObject;
            if (ValidationUtil.isNull(musicPlayerBasicModel)){
                throw (new NullReferenceError("musicPlayerBasicModel is null"));
            };
            switch (_arg1.type){
                case MiniPlayerEvent.PLAY:
                    playMusic(true, false);
                    break;
                case MiniPlayerEvent.PAUSE:
                    playMusic(false, false);
                    break;
                case MiniPlayerEvent.FORWARD:
                    _local2 = musicPlayerBasicModel.setNextSongAsCurrentActiveSong(null, true);
                    if (_local2){
                        notifyPlayCurrentSongEvent(false);
                    };
                    break;
                case MiniPlayerEvent.REWIND:
                    _local3 = musicPlayerBasicModel.setPrevSongAsCurrentActiveSong();
                    if (_local3){
                        notifyPlayCurrentSongEvent(false);
                    };
                    break;
                case MiniPlayerEvent.REPEAT_CHANGE:
                    musicPlayerBasicModel.repeatOption = (_arg1.args as String);
                    miniPlayerModel.repeatState = musicPlayerBasicModel.repeatOption;
                    break;
                case MiniPlayerEvent.SHUFFLE_CHANGE:
                    if (!musicPlayerBasicModel.isShuffled){
                        musicPlayerBasicModel.shuffleActiveList();
                    } else {
                        musicPlayerBasicModel.unShuffleActiveList();
                    };
                    _local4 = ((musicPlayerBasicModel.isShuffled) ? ShuffleEnum.RANDOM : ShuffleEnum.SEQUENCE);
                    miniPlayerModel.shuffleState = _local4;
                    break;
                case MiniPlayerEvent.VOLUME_CHANGE:
                    notifyVolumnChangeEvent((_arg1.args as Number));
                    break;
                case MiniPlayerEvent.SEEK_CHANGE:
                    notifySeekChangeEvent((_arg1.args as int), false);
                    break;
                case MiniPlayerEvent.TEXT_CLICK:
                    _local5 = (_arg1.args as String);
                    if (Boolean(musicPlayerBasicModel.playingSongNode)){
                        _local6 = (musicPlayerBasicModel.playingSongNode.data as SongInfoServiceObject);
                        if (Boolean(_local6)){
                            if (_local5 == MiniPlayer.TRACK_TITLE_TXT){
                                notifyRequestAlbumInfoEvent(_local6.getAlbumid());
                            } else {
                                notifyRequestArtistInfoEvent(_local6.getArtistid());
                            };
                        };
                    };
                    break;
            };
        }
        private function checkValidState(_arg1:TimerEvent):void{
            if (isLoadComplete){
                if (listPanel.validateData(musicPlayerBasicModel.musicPlayListAsArray)){
                    playReady();
                    if (Boolean(pushDataChecker)){
                        pushDataChecker.stop();
                        pushDataChecker.removeEventListener(TimerEvent.TIMER, checkValidState);
                        pushDataChecker = null;
                    };
                };
            };
        }
        private function notifyRequestNaverMusicHomeEvent():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_HOME, true);
            dispatchEvent(_local1);
        }
        private function notifyPutInMyAlbumEvent(_arg1:Array):void{
            if (((ValidationUtil.isNull(_arg1)) || ((_arg1.length == 0)))){
                notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2006);
                return;
            };
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, true);
            _local2.data = {trackIds:_arg1};
            dispatchEvent(_local2);
        }
        private function notifySendPostingSettingConfigurationEvent(_arg1:String):void{
            var _local5:int;
            var _local6:int;
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local2:NaverMusicPlayerList = listPanel.getPlaylist();
            if (Boolean(_local2)){
                _local5 = _local2.selectedItems.length;
                _local6 = _local2.dataProvider.length;
                if ((((_local5 > 0)) && ((_local5 < _local6)))){
                    notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2007);
                };
            };
            var _local3:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEND_POSTING_SETTING_CONFIGURATION, true);
            var _local4:PostingConfig = PostingConfig.getInstance();
            _local3.data = {
                pcolor:_local4.pcolor,
                title:_local4.title,
                ptype:_local4.ptype,
                trackId:getSelectedItemArr(),
                site:_arg1
            };
            dispatchEvent(_local3);
        }
        private function notifyRequestArtistInfoEvent(_arg1:String):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, true);
            _local2.data = {artistid:_arg1};
            dispatchEvent(_local2);
        }
        override public function notifyCurrentSongWasCompleted():void{
            var _local1:Boolean = UserAuthority.getInstance().isAdult;
            if (((!(_local1)) && (isAllListIsAdult))){
                finishForce();
                return;
            };
            var _local2:MiniPlayerModel = MiniPlayerModel.getInstance();
            if (!musicPlayerBasicModel.isValidNextPlayState()){
                finishForce();
                return;
            };
            if (musicPlayerBasicModel.setNextSongAsCurrentActiveSong(musicPlayerBasicModel.musicPlayList)){
                playMusic(true, true);
                listPanel.changeRendererViewAsPlaying();
            };
        }
        private function notifySeekChangeEvent(_arg1:Number, _arg2:Boolean):void{
            var _local3:SongInfoServiceObject;
            var _local4:NaverMusicPlayerBasicEvent;
            if (ValidationUtil.isNull(_arg1)){
                return;
            };
            if (Boolean(musicPlayerBasicModel.activeNode)){
                _local3 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local3)){
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, true);
                    _local4.data = {
                        trackId:_local3.getTrackID(),
                        seek:_arg1,
                        auto:_arg2
                    };
                    dispatchEvent(_local4);
                };
            };
        }
        private function createTooltipLayer():void{
            tooltipLayer = new Sprite();
            var _local2 = tooltipLayer;
            with (_local2) {
                mouseChildren = false;
                mouseEnabled = false;
            };
            addChild(tooltipLayer);
            var tooltipMananger:* = TooltipManager.getInstance();
            tooltipMananger.init(tooltipLayer);
            tooltipMananger.bounds = new Rectangle(2, 2, (PostingConfig.WIDTH - 2), (PostingConfig.HEIGHT - 2));
            tooltipMananger.setOffsetPoint(0, 2);
        }
        private function createMiniPlayerPanel():void{
            miniPlayerPanel = new MiniPlayerPanel();
            var _local2 = miniPlayerPanel;
            with (_local2) {
                addEventListener(PanelEvent.PANEL_BUTTON_CLICK, handleMiniPlayerPanelButtonEvent, false, 0, true);
                addEventListener(PanelEvent.PANEL_CUSTOM_BUTTON_CLICK, handleMiniPlayerPanelButtonEvent, false, 0, true);
            };
            addChild(miniPlayerPanel);
        }
        override public function updateCurrentPlayTime(_arg1:Number):void{
            miniPlayerModel.currentPlayingTime = _arg1;
        }
        private function handleOption(_arg1:int):void{
            switch ((_arg1 & 0xFF)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_NONE_TRACK:
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_FRONT_TRACK:
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK:
                    break;
                default:
                    throw (new Error("invalid adding Options!"));
            };
            switch ((_arg1 & 0xFF00)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_OLD_FIRST_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK:
                    break;
                default:
                    throw (new Error("invalid playing option!"));
            };
        }
        private function handleNaverMusicPlayerListEvent(_arg1:NaverMusicPlayerListEvent):void{
            if (ValidationUtil.isNull(musicPlayerBasicModel)){
                throw (new NullReferenceError("musicPlayerBasicModel is null"));
            };
            switch (_arg1.type){
                case NaverMusicPlayerListEvent.PLAYLIST_PLAY_CURRENT_SONG:
                    notifyPlayCurrentSongEventBySongInfo((_arg1.args as SongInfoServiceObject), false);
                    break;
                case NaverMusicPlayerListEvent.PLAYLIST_MP3_ICON_CLICK:
                    notifyPurchaseCurrentMp3Event((_arg1.args as Array));
                    break;
                case NaverMusicPlayerListEvent.PLAYLIST_ALBUM_ICON_CLICK:
                    notifyRequestAlbumInfoEvent((_arg1.args as String));
                    break;
            };
        }
        private function addedToStageHandler(_arg1:Event):void{
            removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            stage.frameRate = PostingConfig.FRAME_RATE;
            this.tabChildren = false;
            this.tabEnabled = false;
            var _local2:PostingConfig = PostingConfig.getInstance();
            var _local3 = (("http://" + loaderInfo.loaderURL.split("/")[2]) + "/");
            _local2.setServerURL(_local3);
            _local2.isReleaseMode = true;
            DebugUtil.setEnabled(!(_local2.isReleaseMode));
            if (!_local2.isReleaseMode){
                _local2.pcolor = PostingColorStyleEnum.WHITE_C01;
                initialize();
            } else {
                DebugUtil.setEnabled(false);
            };
        }
        private function notifyForceFinishEvent(_arg1:Boolean=true):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
            _local2.data = {auto:_arg1};
            dispatchEvent(_local2);
            miniPlayerModel.isProgressiveBlocking = true;
        }
        private function handleNaverMusicPlayerListPanelButtonEvent(_arg1:PanelEvent):void{
            var _local4:SongInfoServiceObject;
            var _local5:NaverMusicPlayerList;
            var _local6:Array;
            var _local7:int;
            var _local8:SongInfoServiceObject;
            var _local9:Boolean;
            var _local10:int;
            var _local11:Array;
            var _local12:UserAuthority;
            var _local13:int;
            var _local14:Boolean;
            var _local15:String;
            var _local16:Array;
            var _local2:IPanel = (_arg1.currentTarget as IPanel);
            if (ValidationUtil.isNull(_local2)){
                return;
            };
            var _local3:String = (_arg1.args as String);
            switch (_local3){
                case NaverMusicPlayerListPanel.MP3_DOWN_BTN:
                case NaverMusicPlayerListPanel.ADD_BTN:
                    if (Boolean(musicPlayerBasicModel.playingSongNode)){
                        _local4 = (musicPlayerBasicModel.playingSongNode.data as SongInfoServiceObject);
                        if (Boolean(_local4)){
                            if (Boolean(listPanel)){
                                if (_local3 == NaverMusicPlayerListPanel.MP3_DOWN_BTN){
                                    _local5 = (listPanel.getPlaylist() as NaverMusicPlayerList);
                                    _local6 = _local5.sortSelectedItems();
                                    _local7 = _local6.length;
                                    _local9 = true;
                                    _local10 = 0;
                                    _local11 = new Array();
                                    _local12 = UserAuthority.getInstance();
                                    _local13 = 0;
                                    while (_local13 < _local7) {
                                        _local14 = false;
                                        _local8 = (_local6[_local13] as SongInfoServiceObject);
                                        if (Boolean(_local8)){
                                            _local15 = _local8.getTrackID();
                                            if (((_local15) && ((_local15.length > 0)))){
                                                if (!_local8.hasMp3File()){
                                                    _local9 = false;
                                                    _local10++;
                                                } else {
                                                    if (_local8.adultProperty === "Y"){
                                                        if (_local12.isAdult){
                                                            _local11.push(_local15);
                                                        } else {
                                                            _local14 = true;
                                                            _local9 = false;
                                                            _local10++;
                                                        };
                                                    } else {
                                                        if (_local8.adultProperty != "Y"){
                                                            _local11.push(_local15);
                                                        };
                                                    };
                                                    if (((!(_local14)) && (!(_local8.isServiced)))){
                                                        _local9 = false;
                                                        _local10++;
                                                    } else {
                                                        if (((!(_local14)) && (_local8.isServiced))){
                                                            _local11.push(_local15);
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                        _local13++;
                                    };
                                    if (((!(_local9)) && ((_local10 == _local7)))){
                                        notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2004);
                                        return;
                                    };
                                    if (((!(_local9)) && (!((_local10 == _local7))))){
                                        notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2005);
                                    };
                                    notifyPurchaseCurrentMp3Event(_local11);
                                } else {
                                    _local16 = listPanel.getSelectedTrackIdsAsArray();
                                    notifyPutInMyAlbumEvent(_local16);
                                };
                            };
                        };
                    };
                    break;
                case NaverMusicPlayerListPanel.POSTING_BLOG_BTN:
                    notifySendPostingSettingConfigurationEvent("B");
                    break;
                case NaverMusicPlayerListPanel.POSTING_CAFE_BTN:
                    notifySendPostingSettingConfigurationEvent("C");
                    break;
            };
        }
        private function notifyPlayCurrentSongEvent(_arg1:Boolean):void{
            var _local2:SongInfoServiceObject;
            var _local3:NaverMusicPlayerBasicEvent;
            if (Boolean(musicPlayerBasicModel.activeNode)){
                _local2 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local2)){
                    musicPlayerBasicModel.playingSongNode = musicPlayerBasicModel.searchVaildSongObjectFromPlayingList(_local2);
                    _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                    _local3.data = {
                        trackId:_local2.getTrackID(),
                        auto:_arg1
                    };
                    dispatchEvent(_local3);
                    miniPlayerModel.isPlaying = true;
                    miniPlayerModel.isProgressiveBlocking = false;
                    miniPlayerModel.updateAlbumInfoBySongInfo(_local2);
                    if (Boolean(listPanel)){
                        listPanel.changeRendererViewAsPlaying();
                    };
                };
            } else {
                playReady();
                notifyPlayCurrentSongEvent(true);
            };
        }
        private function playReady():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            var _local4:UserAuthority;
            if (Boolean(musicPlayerBasicModel.musicPlayList)){
                _local1 = musicPlayerBasicModel.musicPlayList.getListIterator();
                _local1.start();
                _local2 = _local1.node;
                musicPlayerBasicModel.activeNode = _local2;
                if (Boolean(musicPlayerBasicModel.activeNode)){
                    musicPlayerBasicModel.activeMusicList = musicPlayerBasicModel.musicPlayList.concat();
                    isAllListIsAdult = musicPlayerBasicModel.allListAdultCheck();
                    _local3 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
                    musicPlayerBasicModel.playingSongNode = musicPlayerBasicModel.searchVaildSongObjectFromPlayingList(_local3);
                    if (Boolean(miniPlayerPanel)){
                        miniPlayerPanel.init();
                        miniPlayerPanel.checkValidPurchasemp3();
                    };
                    miniPlayerModel.updateAlbumInfoBySongInfo(_local3);
                    if (Boolean(listPanel)){
                        listPanel.drawBorderForWhiteColor();
                    };
                    _local4 = UserAuthority.getInstance();
                    _local4.notifyAuthChanged();
                };
            };
        }
        private function playlistPanelDeActiveEventHandler(_arg1:PanelEvent):void{
            if (ValidationUtil.isNotNull(miniPlayerPanel)){
                miniPlayerPanel.visible = true;
            };
        }
        public function playMusic(_arg1:Boolean, _arg2:Boolean):void{
            miniPlayerModel.isProgressiveBlocking = false;
            if (Boolean(musicPlayerBasicModel.activeNode)){
                if (_arg1){
                    notifyResumeCurrentSongEvent(_arg2);
                } else {
                    notifyPauseCurrentSongEvent(_arg2);
                };
            } else {
                playReady();
                playMusic(true, true);
            };
        }
        override public function configPostingPlayerInformation(_arg1:Article):void{
            var _local2:PostingConfig = PostingConfig.getInstance();
            _local2.pcolor = _arg1.pcolor;
            _local2.title = _arg1.title;
            _local2.ptype = _arg1.ptype;
            _local2.mylist_seq = _arg1.mylist_seq;
            _local2.userid = _arg1.userid;
            _local2.linkYn = _arg1.linkyn;
            _local2.link = _arg1.link;
            initialize();
        }
        override public function initializeAuth(_arg1:Authorization):void{
            var _local2:UserAuthority = UserAuthority.getInstance();
            _local2.isLogin = ((_arg1.islogin)=="Y") ? true : false;
            _local2.hasTicket = ((_arg1.hasticket)=="Y") ? true : false;
            _local2.isAdult = ((_arg1.isadult)=="Y") ? true : false;
            _local2.isTeam = ((_arg1.isteam)=="Y") ? true : false;
            _local2.notifyAuthChanged();
        }
        private function notifyPauseCurrentSongEvent(_arg1:Boolean):void{
            var _local2:SongInfoServiceObject;
            var _local3:NaverMusicPlayerBasicEvent;
            _local2 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
            if (Boolean(_local2)){
                musicPlayerBasicModel.playingSongNode = musicPlayerBasicModel.searchVaildSongObjectFromPlayingList(_local2);
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, true);
                _local3.data = {
                    trackId:_local2.getTrackID(),
                    auto:_arg1
                };
                dispatchEvent(_local3);
                miniPlayerModel.isPlaying = false;
                miniPlayerModel.updateAlbumInfoBySongInfo(_local2);
            };
        }
        private function notifyViolationOccuredEvent(_arg1:String):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        private function playlistPanelActivedEventHandler(_arg1:PanelEvent):void{
            if (ValidationUtil.isNotNull(miniPlayerPanel)){
                miniPlayerPanel.visible = false;
            };
        }
        private function notifyRequestNaverMusicPlayerHelpEvent():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_PLAYER_HELP, true);
            dispatchEvent(_local1);
        }
        private function createTicketPurchasingPanel():void{
            ticketPurchasingPanel = new TicketPurchasingPanel();
            var _local2 = ticketPurchasingPanel;
            with (_local2) {
                visible = false;
                y = TicketPurchasingPanel.DEACTIVE_POSITON;
                addEventListener(PanelEvent.PANEL_BUTTON_CLICK, handleTicketPurchasingPanelButtonEvent, false, 0, true);
            };
            addChild(ticketPurchasingPanel);
        }
        private function notifyPurchaseCurrentMp3Event(_arg1:Array):void{
            var _local3:NaverMusicPlayerBasicEvent;
            if (((ValidationUtil.isNull(_arg1)) || ((_arg1.length == 0)))){
                notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2003);
                return;
            };
            var _local2:UserAuthority = UserAuthority.getInstance();
            if (_local2.isTeam){
                notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002);
            } else {
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                _local3.data = {trackIds:_arg1};
                dispatchEvent(_local3);
            };
        }
        override protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLETE_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local2);
            isLoadComplete = true;
            buildUI();
            if (Boolean(listPanel)){
                listPanel.validSongCheck();
            };
        }
        private function handleMiniPlayerPanelButtonEvent(_arg1:PanelEvent):void{
            var _local4:SongInfoServiceObject;
            var _local5:SongInfoServiceObject;
            var _local2:IPanel = (_arg1.currentTarget as IPanel);
            if (ValidationUtil.isNull(_local2)){
                return;
            };
            var _local3:String = (_arg1.args as String);
            switch (_local3){
                case MiniPlayerPanel.PLAYLIST_SHOW_BTN:
                    if (ValidationUtil.isNotNull(listPanel)){
                        listPanel.isActive = true;
                        if (ValidationUtil.isNotNull(miniPlayerPanel)){
                            miniPlayerPanel.initTooltipButtons();
                        };
                    };
                    break;
                case MiniPlayerPanel.PURCHASE_BTN:
                    if (ValidationUtil.isNotNull(ticketPurchasingPanel)){
                        ticketPurchasingPanel.isActive = true;
                    };
                    break;
                case MiniPlayerPanel.PURCHASEMP3_BTN:
                    if (Boolean(musicPlayerBasicModel.playingSongNode)){
                        _local4 = (musicPlayerBasicModel.playingSongNode.data as SongInfoServiceObject);
                        if (Boolean(_local4)){
                            notifyPurchaseCurrentMp3Event([_local4.getTrackID()]);
                        };
                    };
                    break;
                case MiniPlayerPanel.NAVER_MUSIC_LOGO_BTN:
                    notifyRequestNaverMusicHomeEvent();
                    break;
                case MiniPlayerPanel.POSTING_BLOG_BTN:
                    notifySendPostingSettingConfigurationEvent("B");
                    break;
                case MiniPlayerPanel.POSTING_CAFE_BTN:
                    notifySendPostingSettingConfigurationEvent("C");
                    break;
                case MiniPlayerPanel.PLUS_BTN:
                    if (Boolean(musicPlayerBasicModel.playingSongNode)){
                        _local5 = (musicPlayerBasicModel.playingSongNode.data as SongInfoServiceObject);
                        if (Boolean(_local5)){
                            notifyPutInMyAlbumEvent([_local5.getTrackID()]);
                        };
                    };
                    break;
            };
        }
        private function notifyVolumnChangeEvent(_arg1:Number):void{
            var _local2:SongInfoServiceObject;
            var _local3:NaverMusicPlayerBasicEvent;
            if (ValidationUtil.isNull(_arg1)){
                return;
            };
            if (Boolean(musicPlayerBasicModel.activeNode)){
                _local2 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local2)){
                    _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
                    _local3.data = {
                        trackId:_local2.getTrackID(),
                        volume:_arg1
                    };
                    dispatchEvent(_local3);
                };
            };
        }
        private function createListPanel():void{
            listPanel = new NaverMusicPlayerListPanel();
            var _local2 = listPanel;
            with (_local2) {
                createList();
                y = NaverMusicPlayerListPanel.DEACTIVE_POSITON;
                addEventListener(PanelEvent.PANEL_BUTTON_CLICK, handleNaverMusicPlayerListPanelButtonEvent, false, 0, true);
                addEventListener(PanelEvent.PANEL_CUSTOM_BUTTON_CLICK, handleNaverMusicPlayerListPanelButtonEvent, false, 0, true);
                addEventListener(PanelEvent.PANEL_ACTIVED, playlistPanelActivedEventHandler, false, 0, true);
                addEventListener(PanelEvent.PANEL_DEACTIVE, playlistPanelDeActiveEventHandler, false, 0, true);
            };
            addChild(listPanel);
        }
        override public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            var _local4:Boolean;
            var _local5:SongInfoServiceObject;
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:UserAuthority = UserAuthority.getInstance();
            _local2.isLogin = ((_arg1.isLogin)=="Y") ? true : false;
            _local2.hasTicket = ((_arg1.hasTicket)=="Y") ? true : false;
            _local2.isAdult = ((_arg1.isAdult)=="Y") ? true : false;
            _local2.isTeam = ((_arg1.isTeam)=="Y") ? true : false;
            _local2.isAuth = _arg1.isAuth;
            var _local3:MiniPlayerModel = MiniPlayerModel.getInstance();
            if (_arg1.trackFree === "Y"){
                _local3.isFreeSong = true;
            } else {
                _local3.isFreeSong = false;
            };
            _local3.totalPlayingTime = _arg1.length;
            if (Boolean(miniPlayerPanel)){
                miniPlayerPanel.checkValidPurchasemp3();
            };
            if (Boolean(musicPlayerBasicModel.activeNode)){
                _local4 = _local2.isAdult;
                if (((!(_local4)) && (isAllListIsAdult))){
                    return (null);
                };
                _local5 = (musicPlayerBasicModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    if (((!(_local4)) && ((_arg1.trackAdult == "Y")))){
                        _local5.isValid = false;
                        if (Boolean(listPanel)){
                            listPanel.initExistPlayingRenderer();
                        };
                    } else {
                        if (((_local4) && ((_arg1.trackAdult == "Y")))){
                            if (((_local5) && (!(_local5.isValid)))){
                                _local5.isValid = true;
                                if (Boolean(listPanel)){
                                    listPanel.invalidateList();
                                };
                            };
                        };
                    };
                    if (_arg1.serviceflag == "N"){
                        _local5.updateServiceFlag = _arg1.serviceflag;
                        _local5.isServiced = false;
                        if (Boolean(listPanel)){
                            listPanel.invalidateList();
                        };
                    };
                    if (_local3.isInValidCurrentRepeatCount){
                        finishForce();
                    };
                };
            };
            return (null);
        }
        private function setMask(_arg1:DisplayObjectContainer, _arg2:Rectangle):void{
            if (ValidationUtil.isNull(_arg1)){
                throw (new ArgumentError("markTarget"));
            };
            _arg1.scrollRect = _arg2;
        }
        override public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
            var _local7:SongInfoServiceObject;
            var _local3:Array = _arg1.list;
            var _local4:int = _arg1.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local7 = new SongInfoServiceObject(_local3[_local5]);
                _local7.index = _local5;
                musicPlayerBasicModel.addSingleSongToPlayListAtLast(_local7);
                _local5++;
            };
            var _local6:PostingConfig = PostingConfig.getInstance();
            _local6.playlistTotal = _local4;
            if (isLoadComplete){
                if (listPanel.validateData(musicPlayerBasicModel.musicPlayListAsArray)){
                    playReady();
                } else {
                    getPushDataChecker().start();
                };
            } else {
                getPushDataChecker().start();
            };
        }
        private function handleTicketPurchasingPanelButtonEvent(_arg1:PanelEvent):void{
            var _local2:IPanel = (_arg1.currentTarget as IPanel);
            if (ValidationUtil.isNull(_local2)){
                return;
            };
            var _local3:String = (_arg1.args as String);
            switch (_local3){
                case TicketPurchasingPanel.POPUP_PURCHASE_3000_BTN:
                    notifyPurchaseSpecificTicketEvent(NaverMusicPlayerBasicEvent.NONE_MP3_LISTENING_ALL_3000);
                    break;
                case TicketPurchasingPanel.POPUP_PURCHASE_5000_BTN:
                    notifyPurchaseSpecificTicketEvent(NaverMusicPlayerBasicEvent.MP3_40_NOT_LISTENING_5000);
                    break;
                case TicketPurchasingPanel.POPUP_PURCHASE_7000_BTN:
                    notifyPurchaseSpecificTicketEvent(NaverMusicPlayerBasicEvent.MP3_40_LISTENING_ALL_7000);
                    break;
                case TicketPurchasingPanel.POPUP_MORE_BTN:
                    notifyPurchaseSpecificTicketEvent(NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE);
                    break;
            };
        }
        private function handleMiniPlayerModelEvent(_arg1:MiniPlayerModelEvent):void{
            if (ValidationUtil.isNull(musicPlayerBasicModel)){
                throw (new NullReferenceError("musicPlayerBasicModel is null"));
            };
            switch (_arg1.type){
                case MiniPlayerModelEvent.REPEAT_LIMIT_COUNT_VIOLATION:
                    notifyViolationOccuredEvent(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2001);
                    break;
            };
        }
        private function getPushDataChecker():Timer{
            if (!Boolean(pushDataChecker)){
                pushDataChecker = new Timer(PUSH_DATA_TIMER_DELAY);
                pushDataChecker.addEventListener(TimerEvent.TIMER, checkValidState);
            };
            return (pushDataChecker);
        }
        private function getSelectedItemArr():Array{
            var _local4:SongInfoServiceObject;
            var _local1:Array = new Array();
            var _local2:MusicPlayerBasicModel = MusicPlayerBasicModel.getInstance();
            var _local3:DListIterator = _local2.musicPlayList.getListIterator();
            if (Boolean(_local3)){
                _local3.start();
                while (_local3.hasNext()) {
                    if (Boolean(_local3.node)){
                        _local4 = (_local3.node.data as SongInfoServiceObject);
                        _local1.push(_local4.getTrackID());
                    };
                    _local3.next();
                };
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.viewBase 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.viewBase {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers.*;

    public class NaverMusicPlayerView extends Sprite implements IMusicPlayListManager {

        protected var isLoadComplete:Boolean;

        public function NaverMusicPlayerView(){
            var _local1:AssetLoadManager = AssetLoadManager.getInstance();
            _local1.assetInterpreter = new NaverMiniPlayerInterpreter();
            _local1.addEventListener(AssetControlEvent.COMPLETE_LOAD_ASSET, completeHandler);
            _local1.addEventListener(AssetControlEvent.FAIL_LOAD_ASSET, errorHandler);
            _local1.addEventListener(AssetControlEvent.COMPETE_ASSIGN_NEW_ASSET, assetAssignCompleteHandler);
        }
        protected function registAssetInterpreter(_arg1:IAssetInterpreter):void{
            AssetLoadManager.getInstance().assetInterpreter = _arg1;
        }
        public function removeAllView():void{
        }
        public function updateLylicsOfCurrentPlayingSong(_arg1:Song):void{
        }
        public function updateStateAndPlaySong():void{
        }
        public function configPostingPlayerInformation(_arg1:Article):void{
        }
        protected function errorHandler(_arg1:AssetControlEvent):void{
        }
        public function configPlayerShuffleOption(_arg1:int):void{
        }
        public function initializeView():void{
        }
        public function initializeAuth(_arg1:Authorization):void{
        }
        public function configPlayerSongListPlayOption(_arg1:String):void{
        }
        public function configPlayerSkin(_arg1:String):void{
        }
        protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            isLoadComplete = true;
        }
        public function configPlayerRepeatOption(_arg1:int):void{
        }
        public function addSongTrackIdsAndLaunchOption(_arg1:String, _arg2:int):void{
        }
        public function updateTop100UpdatedDate(_arg1:String):void{
        }
        public function configPlayerSongListSaveOption(_arg1:String):void{
        }
        public function drawProperGuideFooter(_arg1:String):void{
        }
        public function loadAsset(_arg1:String, _arg2:Class=null, _arg3:Boolean=false):void{
            isLoadComplete = false;
            AssetLoadManager.getInstance().loadAsset(_arg1, _arg2, _arg3);
        }
        public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
        }
        public function notifyCurrentSongWasCompleted():void{
        }
        public function updateCurrentPlayTime(_arg1:Number):void{
        }
        public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            return (null);
        }
        public function configPlayerVolumeValue(_arg1:Number):void{
        }
        public function registerAdditionalCallBack():void{
        }
        public function updateTop100SongList(_arg1:SongList):void{
        }
        public function configPlayerSongQualityOption(_arg1:String):void{
        }
        protected function completeHandler(_arg1:AssetControlEvent):void{
        }
        public function initPlayingSongView():void{
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.viewBase 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core {
    import flash.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;

    public class MiniPlayerModel extends EventDispatcher implements INotifyPropertyChanged {

        public static const VOLUME_INIT_VALUE:Number = 0.5;
        public static const REPEAT_LIMIT_COUNT:int = 5;

        private static var instance:MiniPlayerModel = null;

        private var _currentPlayingTime:Number;
        private var _isFreeSong:Boolean = false;
        private var _totalPlayingTime:Number;
        private var _currentRepeatCount:int;
        private var _introPlayed:Boolean = false;
        private var _isMuted:Boolean;
        private var _isPlaying:Boolean;
        private var _albumInfo:AlbumInfo;
        private var _isProgressiveBlocking:Boolean;
        public var volumnSliderValue:Number = 0.5;
        private var _displayTime:Number;
        private var _shuffleState:String;
        public var volumnSliderBtnFrame:int = 2;
        private var _repeatState:String;

        public function MiniPlayerModel(){
            if (Boolean(instance)){
                throw (new Error("MiniPlayerModel is Singleton"));
            };
            initialize();
        }
        public static function getInstance():MiniPlayerModel{
            if (!Boolean(instance)){
                instance = new (MiniPlayerModel)();
            };
            return ((instance as MiniPlayerModel));
        }

        public function get repeatStateText():String{
            var _local1:String;
            switch (repeatState){
                case RepeatEnum.REPEAT_ALL_SONG:
                    _local1 = RepeatEnum.REPEAT_ALL_SONG_TEXT;
                    break;
                case RepeatEnum.REPEAT_ONE_SONG:
                    _local1 = RepeatEnum.REPEAT_ONE_SONG_TEXT;
                    break;
                default:
                    _local1 = RepeatEnum.NO_REPEAT_TEXT;
            };
            return (_local1);
        }
        public function initRepeatCount():void{
            currentRepeatCount = 0;
        }
        public function updateAlbumInfoBySongInfo(_arg1:SongInfoServiceObject):void{
            if (ValidationUtil.isNull(_arg1)){
                return;
            };
            var _local2:AlbumInfo = new AlbumInfo();
            _local2.trackId = _arg1.getTrackID();
            _local2.trackTitle = _arg1.getTrackTitle();
            _local2.artistName = _arg1.singer;
            _local2.albumTitle = _arg1.getAlbumTitle();
            _local2.albumThumbURL = _arg1.getAlbumJacketThumbURL();
            _local2.index = _arg1.index;
            this.albumInfo = _local2;
        }
        public function init():void{
            notifyPropertyChanged(MiniPlayerModelEvent.INIT, null);
        }
        public function increaseRepeatCount():void{
            currentRepeatCount++;
        }
        private function initialize():void{
            _albumInfo = new AlbumInfo();
            _repeatState = RepeatEnum.NO_REPEAT;
            _shuffleState = ShuffleEnum.SEQUENCE;
            _isPlaying = false;
            _isProgressiveBlocking = true;
            _currentPlayingTime = 0;
            _totalPlayingTime = 0;
            volumnSliderValue = VOLUME_INIT_VALUE;
            volumnSliderBtnFrame = 3;
        }
        public function get shuffleState():String{
            return (_shuffleState);
        }
        public function notifyPropertyChanged(_arg1:String, _arg2:Object=null):void{
            dispatchEvent(new MiniPlayerModelEvent(_arg1, _arg2));
        }
        public function get listenType():int{
            var _local2:UserAuthority;
            var _local3:uint;
            var _local1 = -1;
            if (isFreeSong){
                _local1 = ListenTypeEnum.FULL_TIME;
            } else {
                _local2 = UserAuthority.getInstance();
                _local3 = _local2.isAuth;
                switch (_local3){
                    case 0:
                        _local1 = ListenTypeEnum.FULL_TIME;
                        break;
                    case 1:
                        _local1 = ListenTypeEnum.MINUTE_TIME;
                        break;
                };
            };
            return (_local1);
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get isInValidCurrentRepeatCount():Boolean{
            if (repeatState == RepeatEnum.NO_REPEAT){
                return (false);
            };
            if (_currentRepeatCount >= REPEAT_LIMIT_COUNT){
                notifyPropertyChanged(MiniPlayerModelEvent.REPEAT_LIMIT_COUNT_VIOLATION, _currentRepeatCount);
                initRepeatCount();
                return (true);
            };
            return (false);
        }
        public function set isProgressiveBlocking(_arg1:Boolean):void{
            _isProgressiveBlocking = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.PROGRESSIVE_BLOCKING_STATE_CHANGE, _isProgressiveBlocking);
        }
        public function get displayTime():Number{
            return (_displayTime);
        }
        public function set shuffleState(_arg1:String):void{
            if (_shuffleState === _arg1){
                return;
            };
            _shuffleState = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.SHUFFLE_STATE_CHANGE, _shuffleState);
        }
        public function get shuffleStateTextText():String{
            var _local1:String;
            _local1 = ((ShuffleEnum.RANDOM)==shuffleState) ? ShuffleEnum.RANDOM_TEXT : ShuffleEnum.SEQUENCE_TEXT;
            return (_local1);
        }
        public function get repeatState():String{
            return (_repeatState);
        }
        public function get totalPlayingTime():Number{
            return (_totalPlayingTime);
        }
        public function get albumInfo():AlbumInfo{
            return (_albumInfo);
        }
        public function set isMuted(_arg1:Boolean):void{
            if (_isMuted === _arg1){
                return;
            };
            _isMuted = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.MUTE_STATE_CHANGE, _isMuted);
        }
        public function set currentPlayingTime(_arg1:Number):void{
            if (_currentPlayingTime === _arg1){
                return;
            };
            _currentPlayingTime = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.CURRENT_PLAYING_TIME_CHANGE, _currentPlayingTime);
        }
        public function set introPlayed(_arg1:Boolean):void{
            _introPlayed = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.INTRO_STATE_CHANGE, _introPlayed);
        }
        public function set isPlaying(_arg1:Boolean):void{
            _isPlaying = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.PLAYING_STATE_CHANGE, _isPlaying);
        }
        public function get isProgressiveBlocking():Boolean{
            return (_isProgressiveBlocking);
        }
        public function set isFreeSong(_arg1:Boolean):void{
            _isFreeSong = _arg1;
        }
        public function set displayTime(_arg1:Number):void{
            if (_displayTime === _arg1){
                return;
            };
            _displayTime = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.DISPLAY_TIME_CHANGE, _displayTime);
        }
        public function get introPlayed():Boolean{
            return (_introPlayed);
        }
        public function get isMuted():Boolean{
            return (_isMuted);
        }
        public function get currentPlayingTime():Number{
            return (_currentPlayingTime);
        }
        public function get isFreeSong():Boolean{
            return (_isFreeSong);
        }
        public function set repeatState(_arg1:String):void{
            if (_repeatState === _arg1){
                return;
            };
            _repeatState = _arg1;
            initRepeatCount();
            notifyPropertyChanged(MiniPlayerModelEvent.REPEAT_STATE_CHANGE, _repeatState);
        }
        public function set totalPlayingTime(_arg1:Number):void{
            if (_totalPlayingTime === _arg1){
                return;
            };
            _totalPlayingTime = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.TOTAL_PLAYING_TIME_CHANGE, _totalPlayingTime);
        }
        public function set currentRepeatCount(_arg1:int):void{
            if (_currentRepeatCount === _arg1){
                return;
            };
            _currentRepeatCount = _arg1;
        }
        public function set albumInfo(_arg1:AlbumInfo):void{
            if (_albumInfo.equals(_arg1)){
                return;
            };
            _albumInfo = _arg1;
            notifyPropertyChanged(MiniPlayerModelEvent.ALBUM_INFO_CHANGE, _albumInfo);
        }
        public function get currentRepeatCount():int{
            return (_currentRepeatCount);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core {
    import flash.display.*;
    import mx.core.*;

    public class MiniPlayer_controller_panel extends SpriteAsset {

        public var volumn_btn:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var disableArea_mc:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album {
    import flash.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;

    public class AlbumInfo {

        private var _trackId:String = null;
        private var _albumTitle:String = null;
        private var _albumThumbURL:String = null;
        private var _artistName:String = null;
        private var _index:int = -1;
        private var _trackTitle:String = null;

        public function AlbumInfo(_arg1:String=null, _arg2:String=null, _arg3:String=null, _arg4:String=null, _arg5:String=null, _arg6:int=-1){
            this.trackId = _arg1;
            this.trackTitle = _arg2;
            this.artistName = _arg3;
            this.albumTitle = _arg4;
            this.albumThumbURL = _arg5;
            this.index = _arg6;
        }
        public function get trackId():String{
            return (_trackId);
        }
        public function set trackId(_arg1:String):void{
            _trackId = _arg1;
        }
        public function get trackTitle():String{
            return (_trackTitle);
        }
        public function get albumThumbURL():String{
            return (_albumThumbURL);
        }
        public function set albumThumbURL(_arg1:String):void{
            _albumThumbURL = _arg1;
        }
        public function get index():int{
            return (_index);
        }
        public function set trackTitle(_arg1:String):void{
            _trackTitle = _arg1;
        }
        public function set albumTitle(_arg1:String):void{
            _albumTitle = _arg1;
        }
        public function set artistName(_arg1:String):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                _artistName = "unknown artist";
            } else {
                _artistName = _arg1;
            };
        }
        public function get albumTitle():String{
            return (_albumTitle);
        }
        public function set index(_arg1:int):void{
            _index = _arg1;
        }
        public function getType():String{
            var _local1:String = getQualifiedClassName(this);
            return (_local1.substring((_local1.lastIndexOf(":") + 1), _local1.length));
        }
        public function get artistName():String{
            return (_artistName);
        }
        public function toString():String{
            var _local1:String;
            var _local2:String;
            _local2 = getType();
            _local1 = (("{" + _local2) + " start}\n");
            _local1 = (_local1 + (("trackId : " + trackId) + "\n"));
            _local1 = (_local1 + (("trackTitle : " + trackTitle) + "\n"));
            _local1 = (_local1 + (("artistName : " + artistName) + "\n"));
            _local1 = (_local1 + (("albumTitle : " + albumTitle) + "\n"));
            _local1 = (_local1 + (("albumThumbURL : " + albumThumbURL) + "\n"));
            _local1 = (_local1 + (("index : " + index) + "\n"));
            _local1 = (_local1 + (("{" + _local2) + " end}"));
            return (_local1);
        }
        public function equals(_arg1:AlbumInfo):Boolean{
            if (trackId != _arg1.trackId){
                return (false);
            };
            if (trackTitle != _arg1.trackTitle){
                return (false);
            };
            if (artistName != _arg1.artistName){
                return (false);
            };
            if (albumTitle != _arg1.albumTitle){
                return (false);
            };
            if (albumThumbURL != _arg1.albumThumbURL){
                return (false);
            };
            if (index != _arg1.index){
                return (false);
            };
            return (true);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album {
    import flash.display.*;
    import mx.core.*;

    public class AlbumThumbnail_jacket_cover extends SpriteAsset {

        public var select_all_checkbox:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.flashdynamix.motion.*;
    import flash.net.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.net.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import fl.motion.easing.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils.*;

    public class AlbumThumbnail extends Sprite implements IDestroy {

        public static const HEIGHT:Number = 130;
        public static const WIDTH:Number = 130;

        private static var jacket_cover:Class = AlbumThumbnail_jacket_cover;
        private static var jacket_noImage:Class = AlbumThumbnail_jacket_noImage;

        private var container:Sprite;
        private var _alphaTransitionDuration:Number = 0.3;
        private var isLoadImageCall:Boolean = false;
        private var _thumb:Bitmap = null;
        private var jacket_noImage_asset;
        private var _useAlphaTransition:Boolean = false;
        private var _url:String = null;
        private var jacket_cover_asset;
        private var smartLoader:SmartLoader;

        public function AlbumThumbnail(){
            initialize();
        }
        public static function updateStyle(_arg1):void{
        }
        public static function updateAsset(_arg1):void{
            jacket_cover = _arg1.getDefinition("jacket_cover");
            jacket_noImage = _arg1.getDefinition("jacket_noImage");
        }

        public function get alphaTransitionDuration():Number{
            return (_alphaTransitionDuration);
        }
        public function get useAlphaTransition():Boolean{
            return (_useAlphaTransition);
        }
        public function set alphaTransitionDuration(_arg1:Number):void{
            _alphaTransitionDuration = _arg1;
        }
        public function get isLoaded():Boolean{
            if (!Boolean(thumb)){
                return (false);
            };
            return (true);
        }
        public function loadImage():void{
            if (((ValidationUtil.isEmptyOrNull(url)) || (!(Boolean(container))))){
                return;
            };
            if (isLoadImageCall){
                smartLoader.close(url);
                isLoadImageCall = false;
            };
            isLoadImageCall = true;
            smartLoader.load(new URLRequest(url), {
                onComplete:onCompleteHandler,
                onIoError:onIoErrorHandler
            });
        }
        public function get thumb():Bitmap{
            return (_thumb);
        }
        public function set useAlphaTransition(_arg1:Boolean):void{
            if (_useAlphaTransition === _arg1){
                return;
            };
            _useAlphaTransition = _arg1;
        }
        private function drawBackground():void{
            var _local2 = graphics;
            with (_local2) {
                beginFill(0xFFFFFF, 1);
                drawRect(6, 6, WIDTH, HEIGHT);
                endFill();
            };
        }
        public function set url(_arg1:String):void{
            _url = _arg1;
        }
        protected function initialize():void{
            smartLoader = SmartLoader.getIntance();
            smartLoader.useCache = false;
            createAssets();
        }
        protected function initAsset():void{
        }
        protected function createAssets():void{
            drawBackground();
            jacket_noImage_asset = new jacket_noImage();
            jacket_noImage_asset.x = 6;
            jacket_noImage_asset.y = 6;
            addChild(jacket_noImage_asset);
            container = new Sprite();
            container.x = 6;
            container.y = 6;
            addChild(container);
            jacket_cover_asset = new jacket_cover();
            addChild(jacket_cover_asset);
        }
        private function onIoErrorHandler(_arg1:IOErrorEvent):void{
        }
        public function releaseMemory():void{
            DestroyHelper.removeContainer(this);
        }
        public function set thumb(_arg1:Bitmap):void{
            _thumb = _arg1;
        }
        public function get url():String{
            return (_url);
        }
        private function onCompleteHandler(_arg1:SmartLoaderEvent):void{
            if (!Boolean(container)){
                return;
            };
            DestroyHelper.removeContainer(container);
            var _local2:Bitmap = (_arg1.content as Bitmap);
            if (Boolean(_local2)){
                thumb = BitmapHelper.bitmapResize(_local2, AlbumThumbnail.WIDTH, AlbumThumbnail.HEIGHT);
                thumb.x = ((AlbumThumbnail.WIDTH * 0.5) - (thumb.width * 0.5));
                thumb.y = ((AlbumThumbnail.HEIGHT * 0.5) - (thumb.height * 0.5));
                container.addChild(thumb);
                jacket_noImage_asset.visible = false;
                if (useAlphaTransition){
                    TweensyZero.fromTo(thumb, {alpha:0}, {alpha:1}, alphaTransitionDuration, Linear.easeOut, 0, null);
                };
            } else {
                jacket_noImage_asset.visible = true;
            };
        }
        public function destroy():void{
            releaseMemory();
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album {
    import flash.events.*;
    import de.polygonal.ds.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObject.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display.*;
    import fl.motion.easing.*;

    public class AlbumJacketViewer extends SpriteExtention implements IDestroy {

        public static const SIDE_MARGIN:Number = 44;

        private static var album_lp:Class = AlbumJacketViewer_album_lp;

        private const LP_TIMVER_DURATION:Number = 50;
        private const THUMB_TWEEN_MIN_DELAY:Number = 0;
        private const ALBUM_JACKET_OPEN_TWEEN_DURATION:Number = 0.3;
        private const LP_MAX_SPEED_RATIO:Number = 9;
        private const ALBUM_JACKET_CLOSE_TWEEN_DURATION:Number = 0.3;
        private const THUMB_TWEEN_DURATION:Number = 0.3;
        private const THUMB_TWEEN_MAX_DELAY:Number = 0.3;
        private const THUMB_TWEEN_MIDDLE_DELAY:Number;
        private const THUMB_CONTAINER_INIT_X:Number = 44;

        private var jacket_cover:MovieClip;
        private var oldTime:Number;
        private var lpTimer:Timer;
        private var thumbArr:Array;
        private var album_lp_disk:MovieClip;
        private var _isOpen:Boolean = false;
        private var isFirstLoad:Boolean = true;
        private var album_lp_asset;
        private var maxThumbX:Number;
        private var thumbContainer:Sprite;
        private var thumbs:Dictionary;
        private var album_lp_light:MovieClip;
        private var activeIndex:int = -1;
        private var currentSpeedRatio:Number = 0;

        public function AlbumJacketViewer(_arg1:Boolean=false){
            THUMB_TWEEN_MIDDLE_DELAY = Math.ceil((THUMB_TWEEN_MAX_DELAY / 2));
            super(_arg1);
            initialize();
        }
        public static function updateAsset(_arg1):void{
            album_lp = _arg1.getDefinition("album_lp");
        }
        public static function updateStyle(_arg1):void{
        }

        public function destroy():void{
            releaseMemory();
        }
        private function closeAlbumJacket():void{
            var _local1:TweensyTimelineZero;
            TweensyZero.to(this, {x:0}, ALBUM_JACKET_CLOSE_TWEEN_DURATION, Cubic.easeOut, 0, null);
            _local1 = TweensyZero.to(album_lp_asset, {
                x:100,
                alpha:0
            }, ALBUM_JACKET_CLOSE_TWEEN_DURATION, Cubic.easeOut, 0, null);
            stopRecordPlayer();
        }
        public function loadThumbByIndex(_arg1:int):void{
            var _local2:AlbumThumbnail;
            var _local3:Number;
            var _local4:Number;
            if (_arg1 < 0){
                return;
            };
            activeIndex = _arg1;
            _local2 = (thumbs[_arg1] as AlbumThumbnail);
            if (Boolean(_local2)){
                if (!_local2.isLoaded){
                    _local2.loadImage();
                };
                _local3 = getTimer();
                _local4 = ((_local3 - oldTime) / 1000);
                if (_local4 > THUMB_TWEEN_MAX_DELAY){
                    _local4 = THUMB_TWEEN_MAX_DELAY;
                } else {
                    if (_local4 < THUMB_TWEEN_MIDDLE_DELAY){
                        _local4 = THUMB_TWEEN_MIN_DELAY;
                    };
                };
                closeAlbumJacket();
                moveThumbContainerToNextXByThumb(_local2, _local4);
                oldTime = _local3;
            };
        }
        override protected function initialize():void{
            mouseEnabled = false;
            mouseChildren = false;
            createAssets();
            thumbs = new Dictionary(true);
            lpTimer = new Timer(LP_TIMVER_DURATION);
            lpTimer.addEventListener(TimerEvent.TIMER, lpTimerEventHandler);
        }
        private function lpTimerEventHandler(_arg1:TimerEvent):void{
            if (LP_MAX_SPEED_RATIO >= currentSpeedRatio){
                currentSpeedRatio = LP_MAX_SPEED_RATIO;
            } else {
                currentSpeedRatio = (currentSpeedRatio + 1);
            };
            if (Boolean(album_lp_disk)){
                album_lp_disk.rotation = (album_lp_disk.rotation + currentSpeedRatio);
            };
        }
        public function get isOpen():Boolean{
            return (_isOpen);
        }
        protected function createAssets():void{
            album_lp_asset = new album_lp();
            album_lp_asset.x = 116;
            album_lp_asset.y = 142;
            album_lp_asset.alpha = 0;
            addChild(album_lp_asset);
            if (Boolean(album_lp_asset.album_lp_light)){
                album_lp_light = album_lp_asset.album_lp_light;
            };
            if (Boolean(album_lp_asset.album_lp_disk)){
                album_lp_disk = album_lp_asset.album_lp_disk;
                album_lp_disk.stop();
            };
            thumbContainer = new Sprite();
            thumbContainer.x = 44;
            thumbContainer.y = 70;
            addChild(thumbContainer);
        }
        private function startRecordPlayer():void{
            if (Boolean(lpTimer)){
                lpTimer.start();
            };
            if (Boolean(album_lp_light)){
                album_lp_light.gotoAndPlay(album_lp_light.currentFrame);
            };
        }
        private function thumbTweenUpdateHandler():void{
            if (Boolean(album_lp_asset)){
                album_lp_asset.alpha = 0;
            };
        }
        public function initThumbs():void{
            var _local2:DListIterator;
            var _local3:SongInfoServiceObject;
            var _local4:String;
            var _local5:String;
            var _local6:int;
            var _local7:AlbumThumbnail;
            var _local1:MusicPlayerBasicModel = MusicPlayerBasicModel.getInstance();
            if (Boolean(_local1.activeMusicList)){
                _local2 = _local1.activeMusicList.getListIterator();
                _local2.start();
                while (_local2.valid()) {
                    _local4 = (_local2.node.data as SongInfoServiceObject).getTrackID();
                    _local5 = (_local2.node.data as SongInfoServiceObject).getAlbumJacketThumbURL();
                    _local6 = (_local2.node.data as SongInfoServiceObject).index;
                    _local7 = new AlbumThumbnail();
                    _local7.url = _local5;
                    thumbs[_local6] = _local7;
                    _local7.x = ((AlbumThumbnail.WIDTH + (SIDE_MARGIN * 2)) * _local6);
                    thumbContainer.addChild(_local7);
                    _local2.forth();
                };
                _local3 = (_local1.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local3)){
                    loadThumbByIndex(_local3.index);
                };
            };
        }
        public function set isOpen(_arg1:Boolean):void{
            if (_isOpen === _arg1){
                return;
            };
            _isOpen = _arg1;
            if (isOpen){
                openAlbumJacket();
            } else {
                closeAlbumJacket();
            };
        }
        private function stopRecordPlayer():void{
            if (Boolean(lpTimer)){
                lpTimer.stop();
            };
            if (Boolean(album_lp_light)){
                album_lp_light.stop();
            };
            currentSpeedRatio = 0;
        }
        protected function initAsset():void{
        }
        public function thumbTweenCompleteHandler():void{
            if (isOpen){
                openAlbumJacket();
            } else {
                closeAlbumJacket();
            };
        }
        public function releaseMemory():void{
        }
        private function moveThumbContainerToNextXByThumb(_arg1:AlbumThumbnail, _arg2:Number=0):void{
            var _local3:Number;
            if (Boolean(thumbContainer)){
                _local3 = ((_arg1.x * -1) + THUMB_CONTAINER_INIT_X);
                TweensyZero.to(thumbContainer, {x:_local3}, THUMB_TWEEN_DURATION, Cubic.easeOut, _arg2, thumbTweenUpdateHandler, thumbTweenCompleteHandler);
            };
        }
        private function openAlbumJacket():void{
            TweensyZero.to(this, {x:-21}, ALBUM_JACKET_OPEN_TWEEN_DURATION, Cubic.easeOut, 0.1, null);
            TweensyZero.to(album_lp_asset, {
                x:175,
                alpha:1
            }, ALBUM_JACKET_OPEN_TWEEN_DURATION, Cubic.easeOut, 0.1, null);
            startRecordPlayer();
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album {
    import flash.display.*;
    import mx.core.*;

    public class AlbumJacketViewer_album_lp extends SpriteAsset {

        public var disableArea_mc:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var pause_btn:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var album_lp_disk:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var volumn_btn:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var track:DisplayObject;
        public var play_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var album_lp_light:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album {
    import flash.display.*;
    import mx.core.*;

    public class AlbumThumbnail_jacket_noImage extends SpriteAsset {

        public var select_all_checkbox:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core {
    import flash.display.*;
    import mx.core.*;

    public class MiniPlayer_progressive_slider extends SpriteAsset {

        public var volumn_btn:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var track:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var disableArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core {
    import flash.display.*;
    import mx.core.*;

    public class MiniPlayer_volumn_slider extends SpriteAsset {

        public var volumn_btn:DisplayObject;
        public var trackEmpty:DisplayObject;
        public var intro_play_btn:DisplayObject;
        public var add_btn:DisplayObject;
        public var track:DisplayObject;
        public var posting_menu_background:DisplayObject;
        public var select_all_checkbox:DisplayObject;
        public var rewind_btn:DisplayObject;
        public var repeat_btn:DisplayObject;
        public var forward_btn:DisplayObject;
        public var posting_blog_btn:DisplayObject;
        public var shuffle_btn:DisplayObject;
        public var posting_cafe_btn:DisplayObject;
        public var play_btn:DisplayObject;
        public var thumb:DisplayObject;
        public var mp3_down_btn:DisplayObject;
        public var playlist_close_btn:DisplayObject;
        public var pause_btn:DisplayObject;
        public var music_send_tooltip:DisplayObject;
        public var posting_background_btn:DisplayObject;
        public var playlist_header_background:DisplayObject;
        public var hitArea_mc:DisplayObject;
        public var disableArea_mc:DisplayObject;
        public var music_send_btn:DisplayObject;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config {
    import flash.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;

    public class UserAuthority extends EventDispatcher implements INotifyPropertyChanged {

        private static var instance:UserAuthority = null;

        private var _hasTicket:Boolean = false;
        private var _isTeam:Boolean = false;
        private var _isAuth:uint;
        private var _isLogin:Boolean = false;
        private var _isAdult:Boolean = false;
        private var setChanged:Boolean = false;

        public function UserAuthority(_arg1:Boolean=false, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:Boolean=false){
            this.isLogin = _arg1;
            this.hasTicket = _arg2;
            this.isAdult = _arg3;
            this.isTeam = _arg4;
        }
        public static function getInstance():UserAuthority{
            if (!Boolean(instance)){
                instance = new (UserAuthority)();
            };
            return ((instance as UserAuthority));
        }

        public function get hasTicket():Boolean{
            return (_hasTicket);
        }
        public function getCurrentAuth():int{
            if (!isLogin){
                return (UserAuthEnum.NOT_LOGIN_USER);
            };
            return (((hasTicket) ? UserAuthEnum.CHARGED_USER : UserAuthEnum.FREE_USER));
        }
        public function set hasTicket(_arg1:Boolean):void{
            _hasTicket = _arg1;
            setChanged = true;
        }
        public function set isTeam(_arg1:Boolean):void{
            _isTeam = _arg1;
            setChanged = true;
        }
        public function notifyPropertyChanged(_arg1:String, _arg2:Object=null):void{
            if (setChanged){
                dispatchEvent(new UserAuthChangedEvent(_arg1, _arg2));
            };
        }
        public function get isLogin():Boolean{
            return (_isLogin);
        }
        public function notifyAuthChanged():void{
            notifyPropertyChanged(UserAuthChangedEvent.AUTH_CHANGE, this.getCurrentAuth());
        }
        public function get isTeam():Boolean{
            return (_isTeam);
        }
        public function set isAuth(_arg1:uint):void{
            this._isAuth = _arg1;
        }
        public function set isAdult(_arg1:Boolean):void{
            _isAdult = _arg1;
            setChanged = true;
        }
        public function get isAdult():Boolean{
            return (_isAdult);
        }
        public function get isAuth():uint{
            return (_isAuth);
        }
        public function set isLogin(_arg1:Boolean):void{
            _isLogin = _arg1;
            setChanged = true;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles.*;

    public class PostingConfig {

        public static const WIDTH:Number = 230;
        public static const HEIGHT:Number = 240;
        public static const FRAME_RATE:Number = 60;
        public static const PLAYLIST_DISPLAY_NUM:int = 5;

        public static var colorStyles:Array = [C01WhiteColorStyle, C02GrayColorStyle, C03BabyBlueColorStyle, C04BlueGrayColorStyle, C05PinkBlackColorStyle, C06GreenColorStyle, C07BlueBlackColorStyle, C08BlackColorStyle, C09New1ColorStyle, C10PurpleSilverColorStyle];
        private static var instance:PostingConfig = null;

        private const HTML_PATTERN:RegExp;

        private var _isReleaseMode:Boolean = true;
        private var _userid:String = null;
        private var _mylist_seq:String = null;
        private var colorStyle;
        private var _pcolor:String = null;
        private var _linkYn:String;
        private var _title:String = null;
        private var _link:String;
        private var _ptype:String = null;
        private var serverURL:String = null;
        private var assetFileName:String = null;
        public var playlistTotal:int = 0;

        public function PostingConfig(){
            HTML_PATTERN = /<[^>]*>/g;
            super();
            if (Boolean(instance)){
                throw (new Error("PostingConfig is Singleton"));
            };
        }
        public static function getInstance():PostingConfig{
            if (!Boolean(instance)){
                instance = new (PostingConfig)();
            };
            return ((instance as PostingConfig));
        }
        public static function getDefaultSystemFontFamliy():String{
            return ("돋움,Dotum,AppleGothic,_sans");
        }

        public function get hasRightOutline():Boolean{
            if ((((((PostingColorStyleEnum.WHITE_C01 == pcolor)) || ((PostingColorStyleEnum.NEW1_C09 == pcolor)))) || ((PostingColorStyleEnum.PURPLE_SILVER_C10 == pcolor)))){
                if (playlistTotal <= PLAYLIST_DISPLAY_NUM){
                    return (true);
                };
            };
            return (false);
        }
        public function getAssetSubPath():String{
            if (isReleaseMode){
                return ("flash/assets/");
            };
            return ("assets/");
        }
        public function getAbsoluteAssetURL():String{
            var _local1:String = ((isReleaseMode) ? serverURL : "");
            var _local2:String = getAssetSubPath();
            var _local3:String = getAssetFileName();
            var _local4:String = ((_local1 + _local2) + _local3);
            return (_local4);
        }
        public function get isReleaseMode():Boolean{
            return (_isReleaseMode);
        }
        public function getAssetFileName():String{
            return (assetFileName);
        }
        public function set userid(_arg1:String):void{
            _userid = _arg1;
        }
        public function set isReleaseMode(_arg1:Boolean):void{
            _isReleaseMode = _arg1;
        }
        public function getColorStyle():Class{
            return ((colorStyle as Class));
        }
        public function set ptype(_arg1:String):void{
            _ptype = _arg1;
        }
        public function setServerURL(_arg1:String):void{
            serverURL = _arg1;
        }
        public function set mylist_seq(_arg1:String):void{
            _mylist_seq = _arg1;
        }
        public function set linkYn(_arg1:String):void{
            this._linkYn = _arg1;
        }
        public function get title():String{
            return (_title);
        }
        public function get userid():String{
            return (_userid);
        }
        public function get ptype():String{
            return (_ptype);
        }
        public function set pcolor(_arg1:String):void{
            if (_arg1.length != 3){
                throw (new ArgumentError("invalid pcolor"));
            };
            _pcolor = _arg1;
            var _local2:int = pcolor.length;
            var _local3:String = pcolor.substr((_local2 - 2), _local2);
            DebugUtil.TRACE(this, ("asset = " + Number(_local3).toString()));
            this.assetFileName = (("mini_music_icon_asset_" + Number(_local3).toString()) + ".swf");
            var _local4:int = (parseInt(_local3) - 1);
            if ((((_local4 < 0)) || ((_local4 >= colorStyles.length)))){
                return;
            };
            colorStyle = colorStyles[_local4];
        }
        public function get linkYn():String{
            return (_linkYn);
        }
        public function set title(_arg1:String):void{
            _title = _arg1;
        }
        public function get mylist_seq():String{
            return (_mylist_seq);
        }
        public function get pcolor():String{
            return (_pcolor);
        }
        public function getServerURL():String{
            return (serverURL);
        }
        public function get link():String{
            return (_link);
        }
        public function set link(_arg1:String):void{
            this._link = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class ListenTypeEnum {

        public static const MINUTE_TIME:int = 0;
        public static const FULL_TIME:int = 1;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class RepeatEnum {

        public static const REPEAT_ONE_SONG:String = "REPEAT_ONE_SONG";
        public static const NO_REPEAT_TEXT:String = "반복듣기 해제";
        public static const REPEAT_ALL_SONG_TEXT:String = "전곡 반복듣기";
        public static const REPEAT_ALL_SONG:String = "REPEAT_ALL_SONG";
        public static const NO_REPEAT:String = "NO_REPEAT";
        public static const REPEAT_ONE_SONG_TEXT:String = "1곡 반복듣기";

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class HorizontalAlignment {

        public static const CENTER:String = "center";
        public static const LEFT:String = "left";
        public static const RIGHT:String = "right";

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class ShuffleEnum {

        public static const RANDOM_TEXT:String = "랜덤재생";
        public static const SEQUENCE:String = "sequence";
        public static const RANDOM:String = "random";
        public static const SEQUENCE_TEXT:String = "순차재생";

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class PostingColorStyleEnum {

        public static const BLUE_BLACK_C07:String = "C07";
        public static const GRAY_C02:String = "C02";
        public static const BABY_BLUE_C03:String = "C03";
        public static const BLACK_C08:String = "C08";
        public static const GREEN_C06:String = "C06";
        public static const WHITE_C01:String = "C01";
        public static const BLUE_GRAY_C04:String = "C04";
        public static const PURPLE_SILVER_C10:String = "C10";
        public static const NEW1_C09:String = "C09";
        public static const PINK_BLACK_C05:String = "C05";

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class VerticalAlignment {

        public static const CENTER:String = "center";
        public static const BOTTOM:String = "bottom";
        public static const TOP:String = "top";

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums {

    public class UserAuthEnum {

        public static const CHARGED_USER:int = 2;
        public static const NOT_LOGIN_USER:int = 0;
        public static const FREE_USER:int = 1;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors {

    public class NotImplementedError extends Error {

        public function NotImplementedError(_arg1:String="", _arg2:int=0){
            super(_arg1, _arg2);
        }
    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors {

    public class NullReferenceError extends ReferenceError {

        public function NullReferenceError(_arg1:String=""){
            super(_arg1);
        }
    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors.*;

    public class SpriteExtention extends Sprite {

        private var _initialized:Boolean = false;

        public function SpriteExtention(_arg1:Boolean=true){
            if (_arg1){
                addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            };
        }
        public static function setHitTestVisible(_arg1:DisplayObjectContainer, _arg2:Boolean, _arg3:Boolean=true):void{
            if (ValidationUtil.isNull(_arg1)){
                throw (new NullReferenceError("target"));
            };
            _arg1.mouseEnabled = _arg2;
            if (_arg3){
                _arg1.mouseChildren = _arg2;
            };
        }
        public static function setEventListeners(_arg1:Object, _arg2:Array, _arg3:Function, _arg4:Boolean=true):void{
            if (ValidationUtil.isNull(_arg1)){
                throw (new NullReferenceError("target"));
            };
            var _local5:int;
            var _local6:int = _arg2.length;
            while (_local5 < _local6) {
                if (_arg4){
                    _arg1.addEventListener(_arg2[_local5], _arg3, false, 0, true);
                } else {
                    _arg1.removeEventListener(_arg2[_local5], _arg3, false);
                };
                _local5++;
            };
        }

        public function getType():String{
            var _local1:String = getQualifiedClassName(this);
            return (_local1.substring((_local1.lastIndexOf(":") + 1), _local1.length));
        }
        public function get initialized():Boolean{
            return (_initialized);
        }
        protected function initialize():void{
            throw (new NotImplementedError("initialize"));
        }
        public function set initialized(_arg1:Boolean):void{
            _initialized = _arg1;
        }
        protected function addedToStageHandler(_arg1:Event):void{
            removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            initialize();
            initialized = true;
            dispatchEvent(new Event(Event.INIT));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.interfaces {

    public interface INotifyPropertyChanged {

        function notifyPropertyChanged(_arg1:String, _arg2:Object=null):void;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.interfaces 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events {
    import flash.events.*;

    public class MiniPlayerModelEvent extends Event {

        public static const DISPLAY_TIME_CHANGE:String = "displayTimeChange";
        public static const REPEAT_LIMIT_COUNT_VIOLATION:String = "repeateLimitCountViolation";
        public static const REPEAT_STATE_CHANGE:String = "repeatStateChange";
        public static const CURRENT_PLAYING_TIME_CHANGE:String = "currentPlayingTimeChange";
        public static const INIT:String = "init";
        public static const ALBUM_INFO_CHANGE:String = "AlbumInfoChange";
        public static const SHUFFLE_STATE_CHANGE:String = "shuffleStateChange";
        public static const PROGRESSIVE_BLOCKING_STATE_CHANGE:String = "progressiveBlockingVisibleChange";
        public static const INTRO_STATE_CHANGE:String = "introStateChange";
        public static const MUTE_STATE_CHANGE:String = "muteStateChange";
        public static const TOTAL_PLAYING_TIME_CHANGE:String = "totalPlayingTimeChange";
        public static const PLAYING_STATE_CHANGE:String = "playingStateChange";

        private var _args:Object;

        public function MiniPlayerModelEvent(_arg1:String, _arg2:Object=null, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            _args = _arg2;
        }
        override public function clone():Event{
            return (new MiniPlayerEvent(type, args, bubbles, cancelable));
        }
        public function set args(_arg1:Object):void{
            _args = _arg1;
        }
        override public function toString():String{
            return (formatToString("type", "bubbles", "cancelable", "args"));
        }
        public function get args():Object{
            return (_args);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events {
    import flash.events.*;

    public class SmartLoaderEvent extends Event {

        public static const COMPLETE:String = "SmartLoaderEventComplete";

        public var content;
        private var _cancelable:Boolean;
        private var _bubbles:Boolean;
        private var _type:String;
        public var url:String;

        public function SmartLoaderEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4=null, _arg5:String=null){
            super(_arg1, _arg2, _arg3);
            _type = _arg1;
            _bubbles = _arg2;
            _cancelable = _arg3;
            content = _arg4;
            url = _arg5;
        }
        override public function clone():Event{
            return (new SmartLoaderEvent(_type, _bubbles, _cancelable, content, url));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events {
    import flash.events.*;

    public class UserAuthChangedEvent extends Event {

        public static const AUTH_CHANGE:String = "userAuthChanged";

        private var _args:Object;

        public function UserAuthChangedEvent(_arg1:String, _arg2:Object=null, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            _args = _arg2;
        }
        override public function clone():Event{
            return (new UserAuthChangedEvent(type, args, bubbles, cancelable));
        }
        public function set args(_arg1:Object):void{
            _args = _arg1;
        }
        override public function toString():String{
            return (formatToString("type", "bubbles", "cancelable", "args"));
        }
        public function get args():Object{
            return (_args);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events {
    import flash.events.*;

    public class MiniPlayerEvent extends Event {

        public static const FORWARD:String = "jacketMusicForward";
        public static const SHUFFLE_CHANGE:String = "jacketMusicShuffleChange";
        public static const REWIND:String = "jacketMusicRewind";
        public static const REPEAT_CHANGE:String = "jacketMusicRepeatChange";
        public static const VOLUME_CHANGE:String = "jacketMusicVolumeChange";
        public static const PAUSE:String = "jacketMusicPause";
        public static const SEEK_CHANGE:String = "jacketMusicSeekChange";
        public static const TEXT_CLICK:String = "jacketMusicTextClick";
        public static const PLAY:String = "jacketMusicPlay";

        private var _args:Object;

        public function MiniPlayerEvent(_arg1:String, _arg2:Object=null, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            _args = _arg2;
        }
        override public function clone():Event{
            return (new MiniPlayerEvent(type, args, bubbles, cancelable));
        }
        public function set args(_arg1:Object):void{
            _args = _arg1;
        }
        override public function toString():String{
            return (formatToString("type", "bubbles", "cancelable", "args"));
        }
        public function get args():Object{
            return (_args);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils {
    import flash.text.*;

    public class TextFieldHelper {

        public static function getReduceText(_arg1:TextField, _arg2:Number, _arg3:String="..."):String{
            var _local4:String;
            var _local5:Number;
            var _local6:int;
            var _local7:int;
            if (!Boolean(_arg1)){
                throw (new ArgumentError("targetTextField is null"));
            };
            if (Boolean(_arg1.text)){
                _local4 = "";
                _local5 = 0;
                _local6 = _arg1.text.length;
                _local7 = 0;
                while (_local7 < _local6) {
                    _local5 = (_local5 + _arg1.getCharBoundaries(_local7).width);
                    if (_local5 >= _arg2){
                        _local4 = (_arg1.text.slice(0, _local7) + _arg3);
                        return (_local4);
                    };
                    _local7++;
                };
                return (_arg1.text);
            };
            return (null);
        }
        public static function convertToAddZeroString(_arg1:Number):String{
            return (((_arg1)<10) ? ("0" + _arg1.toString()) : _arg1.toString());
        }
        public static function convertToMinSecString(_arg1:Number):String{
            _arg1 = Math.ceil(_arg1);
            var _local2:Number = Math.floor((_arg1 / 60));
            var _local3:Number = (_arg1 % 60);
            var _local4:String = ((convertToAddZeroString(_local2) + ":") + convertToAddZeroString(_local3));
            return (_local4);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils {
    import flash.display.*;
    import flash.geom.*;

    public class BitmapHelper {

        public static function bitmapResize(_arg1:Bitmap, _arg2:Number, _arg3:Number, _arg4:Boolean=false):Bitmap{
            if (!Boolean(_arg1.bitmapData)){
                return (_arg1);
            };
            _arg1.smoothing = true;
            _arg1.width = _arg1.bitmapData.width;
            _arg1.height = _arg1.bitmapData.height;
            if ((((((_arg1.width < _arg2)) && ((_arg1.width > _arg1.height)))) && (_arg4))){
                _arg1.height = (_arg1.height * (_arg2 / _arg1.width));
                _arg1.width = _arg2;
            };
            if ((((((_arg1.height < _arg3)) && ((_arg1.width < _arg1.height)))) && (_arg4))){
                _arg1.width = (_arg1.width * (_arg3 / _arg1.height));
                _arg1.height = _arg3;
            };
            if (_arg1.width > _arg2){
                _arg1.height = (_arg1.height * (_arg2 / _arg1.width));
                _arg1.width = _arg2;
            };
            if (_arg1.height > _arg3){
                _arg1.width = (_arg1.width * (_arg3 / _arg1.height));
                _arg1.height = _arg3;
            };
            return (_arg1);
        }
        public static function bitmapResizetoSquare(_arg1:Bitmap, _arg2:Number, _arg3:Boolean=false, _arg4:Boolean=true, _arg5:uint=0):Bitmap{
            var baseSize:* = NaN;
            var bmd:* = null;
            var x:* = NaN;
            var y:* = NaN;
            var w:* = NaN;
            var h:* = NaN;
            var bitmap:* = _arg1;
            var limitSize:* = _arg2;
            var force:Boolean = _arg3;
            var transparent:Boolean = _arg4;
            var fillcolor:int = _arg5;
            if (!bitmap){
                return (new Bitmap());
            };
            bitmap.smoothing = true;
            try {
                if ((((bitmap.bitmapData.width <= limitSize)) && ((bitmap.bitmapData.height <= limitSize)))){
                    return (bitmap);
                };
                if (bitmap.bitmapData.width != bitmap.bitmapData.height){
                    if ((((bitmap.bitmapData.width > limitSize)) && ((bitmap.bitmapData.height > limitSize)))){
                        baseSize = (((bitmap.bitmapData.width > bitmap.bitmapData.height)) ? bitmap.bitmapData.height : bitmap.bitmapData.width);
                        bmd = new BitmapData(baseSize, baseSize, transparent, fillcolor);
                        bmd.copyPixels(bitmap.bitmapData, new Rectangle(((bitmap.bitmapData.width - baseSize) / 2), ((bitmap.bitmapData.height - baseSize) / 2), baseSize, baseSize), new Point(0, 0));
                        bitmap.bitmapData = bmd;
                    } else {
                        x = 0;
                        y = 0;
                        w = limitSize;
                        h = limitSize;
                        if (bitmap.bitmapData.width > limitSize){
                            x = ((bitmap.bitmapData.width - limitSize) / 2);
                        } else {
                            w = bitmap.bitmapData.width;
                        };
                        if (bitmap.bitmapData.height > limitSize){
                            y = ((bitmap.bitmapData.height - limitSize) / 2);
                        } else {
                            h = bitmap.bitmapData.height;
                        };
                        bitmap = bitmapCrop(bitmap, new Rectangle(x, y, w, h));
                    };
                };
                bitmap = bitmapResize(bitmap, limitSize, limitSize, force);
            } catch(e:Error) {
            };
            return (bitmap);
        }
        public static function bitmapCrop(_arg1:Bitmap, _arg2:Rectangle, _arg3:Boolean=true, _arg4:uint=0, _arg5:Boolean=false):Bitmap{
            if ((((((_arg1.bitmapData.width < _arg2.width)) && ((_arg1.bitmapData.height < _arg2.height)))) && (!(_arg5)))){
                return (_arg1);
            };
            if (_arg2.width > _arg1.bitmapData.width){
                _arg2.x = ((_arg1.bitmapData.width - _arg2.width) / 2);
            };
            if (_arg2.height > _arg1.bitmapData.height){
                _arg2.y = ((_arg1.bitmapData.height - _arg2.height) / 2);
            };
            var _local6:BitmapData = new BitmapData(_arg2.width, _arg2.height, _arg3, _arg4);
            _local6.copyPixels(_arg1.bitmapData, _arg2, new Point(0, 0));
            return (new Bitmap(_local6));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.datas.serviceObjectList.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.config.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.errors.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.enums.*;
    import fl.motion.easing.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.utils.*;

    public class MiniPlayer extends SpriteExtention implements IDestroy {

        public static const INTRO_PLAY_BTN:String = "intro_play_btn";
        public static const PAUSE_BTN:String = "pause_btn";
        public static const ARTIST_NAME_AND_ALBUM_TITLE_TXT:String = "artist_name_and_album_title_txt";
        public static const SHUFFLE_BTN:String = "shuffle_btn";
        public static const REPEAT_BTN:String = "repeat_btn";
        public static const VOLUMN_BTN:String = "volumn_btn";
        public static const INTRO_DISABLE_AREA_OPACITY:Number = 0.5;
        public static const FORWARD_BTN:String = "forward_btn";
        public static const PLAY_BTN:String = "play_btn";
        public static const TRACK_TITLE_TXT:String = "track_title_txt";
        public static const REWIND_BTN:String = "rewind_btn";
        public static const MUSIC_SEND_BTN:String = "music_send_btn";

        private static var disableAreaColor:int = 0xFFFFFF;
        private static var playingTimeColor:int = 3258625;
        private static var progressiveSliderCurrentTrackColor:int = 12501700;
        private static var overedSongColor:int = 0x32C100;
        private static var progressive_slider:Class = MiniPlayer_progressive_slider;
        private static var controller_panel:Class = MiniPlayer_controller_panel;
        private static var songTitleColor:int = 0;
        private static var songSingerColor:int = 0x999999;
        private static var disableAreaOpacity:Number = 0.85;
        private static var totalPlayingTimeColor:int = 0xC0C0C0;
        private static var albumJacketIntroOpacity:Number = 0.5;
        private static var volumn_slider:Class = MiniPlayer_volumn_slider;

        private const DEFAULT_VOLUMN_VALUE_FOR_MUTE:Number = 0.25;
        private const PROGRESSIVE_SLIDER_WIDTH:Number = 202;
        private const VOLUMN_SLIDER_WIDTH:Number = 66;
        private const MOUSE_OVER_OUT_TWEEN_DURATION:Number = 0.2;

        private var introDisableArea_mc:Sprite;
        private var shuffle_btn:MovieClip;
        private var progressiveAreaBlocker:Sprite;
        private var tooltipManager:TooltipManager;
        private var currentPlayingTimeTxt:TextField;
        private var _isActive:Boolean = false;
        private var volumn_thumb_hitarea:Rectangle;
        private var volumn_btn:MovieClip;
        private var intro_play_btn:SimpleButton;
        private var progressiveSlider:CSlider;
        private var trackTitleTxt:FlowTextField;
        private var mouseOverHitArea:Rectangle;
        private var hitArea_mc:MovieClip;
        private var disableArea_mc:MovieClip;
        private var volumn_slider_assets;
        private var albumJacketViewer:AlbumJacketViewer;
        private var pause_btn:SimpleButton;
        private var artistNameTxt:FlowTextField;
        private var musicPlayerBasicModel:MusicPlayerBasicModel;
        private var progress_thumb_hitarea:Rectangle;
        private var isAutoProgressUpdate:Boolean = true;
        private var repeat_btn:MovieClip;
        private var totalPlayingTimeTxt:TextField;
        private var isVolumnThmbOvered:Boolean = false;
        private var isDirectVolumnControl:Boolean = false;
        private var play_btn:SimpleButton;
        private var controller_panel_asset;
        private var rewind_btn:SimpleButton;
        private var volumnSlider:CSlider;
        private var forward_btn:SimpleButton;
        private var progressive_slider_assets;
        private var buttonList:Array;
        private var miniPlayerModel:MiniPlayerModel;
        private var isProgressThumbOvered:Boolean = false;
        private var music_send_btn:SimpleButton;

        public function MiniPlayer(_arg1:Boolean=true){
            progress_thumb_hitarea = new Rectangle(2, 30, 226, 38);
            volumn_thumb_hitarea = new Rectangle(45, 155, 100, 29);
            super(_arg1);
        }
        public static function updateStyle(_arg1):void{
            disableAreaColor = _arg1.DEFAULT_PLAYER_BG_COLOR;
            disableAreaOpacity = _arg1.MINI_PLAYER_DISABLE_AREA_OPACITY;
            songTitleColor = _arg1.MINI_PLAYER_SONG_TITLE_COLOR;
            songSingerColor = _arg1.MINI_PLAYER_SONG_SINGER_COLOR;
            overedSongColor = _arg1.MINI_PLAYER_OVERED_SONG_COLOR;
            playingTimeColor = _arg1.MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR;
            totalPlayingTimeColor = _arg1.MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR;
            progressiveSliderCurrentTrackColor = _arg1.MINI_PLAYER_CURRENT_TRACK_COLOR;
        }
        public static function updateAsset(_arg1):void{
            controller_panel = _arg1.getDefinition("controller_panel");
            progressive_slider = _arg1.getDefinition("progressive_slider");
            volumn_slider = _arg1.getDefinition("volumn_slider");
        }

        private function updateVolumnBtnState(_arg1:Boolean):void{
            var _local2:int;
            if (volumn_btn.currentFrame == 1){
                if (miniPlayerModel.volumnSliderValue == 0){
                    miniPlayerModel.volumnSliderValue = DEFAULT_VOLUMN_VALUE_FOR_MUTE;
                    _local2 = 2;
                } else {
                    _local2 = miniPlayerModel.volumnSliderBtnFrame;
                };
                volumnSlider.moveThumbFromValue(miniPlayerModel.volumnSliderValue);
            } else {
                miniPlayerModel.volumnSliderBtnFrame = volumn_btn.currentFrame;
                miniPlayerModel.volumnSliderValue = volumnSlider.value;
                _local2 = 1;
                volumnSlider.moveThumbFromValue(0);
            };
            volumn_btn.gotoAndStop(_local2);
        }
        private function createVolumnSlider(_arg1):void{
            var container:* = _arg1;
            volumnSlider = getCustomSlider(volumn_slider_assets, 0, 1, MiniPlayerModel.VOLUME_INIT_VALUE);
            var _local3 = volumnSlider;
            with (_local3) {
                _thumb.alpha = 0;
                thumbSizeOption(0);
                ease = Exponential.easeInOut;
                duration = 0.2;
                wheelRatio = 0.1;
                isLimited = false;
                x = 71;
                y = 163;
                addEventListener(CSliderEvent.SLIDER_CHANGE, handleVolumnSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.THUMB_DRAG_START, handleVolumnSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.TRACK_CLICK_START, handleVolumnSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.THUMB_DRAG_END, handleVolumnSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.TRACK_CLICK_END, handleVolumnSliderEvent, false, 0, true);
            };
            container.addChild(volumnSlider);
            volumnSlider.moveThumbFromValue(MiniPlayerModel.VOLUME_INIT_VALUE);
        }
        public function destroy():void{
            releaseMemory();
        }
        private function getRepeatStateByCurrentFrame(_arg1:Number):String{
            var _local2:String = RepeatEnum.NO_REPEAT;
            if (_arg1 == 1){
                _local2 = RepeatEnum.REPEAT_ALL_SONG;
            } else {
                if (_arg1 == 2){
                    _local2 = RepeatEnum.REPEAT_ONE_SONG;
                } else {
                    if (_arg1 == 3){
                        _local2 = RepeatEnum.NO_REPEAT;
                    };
                };
            };
            return (_local2);
        }
        private function createTimeTextFields():void{
            currentPlayingTimeTxt = new TextField();
            var _local2 = currentPlayingTimeTxt;
            with (_local2) {
                selectable = false;
                mouseEnabled = true;
                defaultTextFormat = getPlayingTimeTextFormat(playingTimeColor);
                x = 12;
                y = 50;
                width = 100;
                height = 30;
            };
            addChild(currentPlayingTimeTxt);
            totalPlayingTimeTxt = new TextField();
            _local2 = totalPlayingTimeTxt;
            with (_local2) {
                selectable = false;
                mouseEnabled = true;
                defaultTextFormat = getPlayingTimeTextFormat(totalPlayingTimeColor);
                x = 191;
                y = 50;
                width = 100;
                height = 30;
            };
            addChild(totalPlayingTimeTxt);
        }
        private function updateTotalPlayingTime(_arg1:Number):void{
            var _local2:Number;
            var _local3:Number;
            if (((isNaN(_arg1)) || ((_arg1 < 0)))){
                return;
            };
            totalPlayingTimeTxt.text = TextFieldHelper.convertToMinSecString(_arg1);
            if (ListenTypeEnum.FULL_TIME === miniPlayerModel.listenType){
                if (miniPlayerModel.totalPlayingTime === 0){
                    _local3 = miniPlayerModel.totalPlayingTime;
                } else {
                    _local3 = PROGRESSIVE_SLIDER_WIDTH;
                };
            } else {
                if (miniPlayerModel.totalPlayingTime === 0){
                    _local3 = miniPlayerModel.totalPlayingTime;
                } else {
                    if (miniPlayerModel.totalPlayingTime <= 60){
                        _local3 = PROGRESSIVE_SLIDER_WIDTH;
                    } else {
                        _local2 = (((100 * 60) / miniPlayerModel.totalPlayingTime) / 100);
                        _local3 = Math.min((PROGRESSIVE_SLIDER_WIDTH * _local2), PROGRESSIVE_SLIDER_WIDTH);
                    };
                };
            };
            progressiveSlider.updateCurrentTrackWidth(_local3);
        }
        private function getCustomSlider(_arg1, _arg2:Number=0, _arg3:Number=1, _arg4:Number=0):CSlider{
            var _local5:MovieClip = _arg1.thumb;
            var _local6:MovieClip = _arg1.track;
            var _local7:MovieClip = _arg1.trackEmpty;
            return (new CSlider(_local5, _local7, _local6, "horizental", _arg2, _arg3, _arg4));
        }
        private function updateDisplayTime(_arg1:Number):void{
            if (((isNaN(_arg1)) || ((_arg1 < 0)))){
                return;
            };
        }
        private function updateRepeatState(_arg1:String):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            switch (_arg1){
                case RepeatEnum.NO_REPEAT:
                    repeat_btn.gotoAndStop(1);
                    break;
                case RepeatEnum.REPEAT_ALL_SONG:
                    repeat_btn.gotoAndStop(2);
                    break;
                case RepeatEnum.REPEAT_ONE_SONG:
                    repeat_btn.gotoAndStop(3);
                    break;
            };
        }
        private function updateIntroState(_arg1:Boolean):void{
            if (((Boolean(controller_panel_asset)) && (Boolean(intro_play_btn)))){
                controller_panel_asset.visible = _arg1;
                intro_play_btn.visible = !(_arg1);
                if (_arg1){
                    removeIntroVisual();
                };
            };
        }
        private function createProgressiveAreaBlocker():void{
            progressiveAreaBlocker = new Sprite();
            var _local2 = progressiveAreaBlocker.graphics;
            with (_local2) {
                clear();
                beginFill(0, 0);
                drawRect(0, 40, PostingConfig.WIDTH, 30);
                endFill();
            };
            addChild(progressiveAreaBlocker);
        }
        private function notifyShuffleChangeEvent():void{
            var _local1:MiniPlayerEvent;
            _local1 = new MiniPlayerEvent(MiniPlayerEvent.SHUFFLE_CHANGE, null, true);
            dispatchEvent(_local1);
        }
        private function updateVolumnBtnFrameByCurrentVolumn():void{
            var _local3:int;
            var _local1:MovieClip = (volumn_btn as MovieClip);
            var _local2:Number = volumnSlider.value;
            if (_local2 == 0){
                _local3 = 1;
            } else {
                if ((((_local2 > 0)) && ((_local2 <= 0.33)))){
                    _local3 = 2;
                } else {
                    if ((((_local2 > 0.33)) && ((_local2 <= 0.66)))){
                        _local3 = 3;
                    } else {
                        if (_local2 > 0.66){
                            _local3 = 4;
                        };
                    };
                };
            };
            _local1.gotoAndStop(_local3);
        }
        private function getPlayingTimeTextFormat(_arg1:uint):TextFormat{
            var _local2:TextFormat = new TextFormat();
            _local2.font = "Tahoma,AppleGothic";
            _local2.size = 9;
            _local2.color = _arg1;
            return (_local2);
        }
        private function handleTextFieldMouseEvent(_arg1:MouseEvent):void{
            var _local2:FlowTextField = (_arg1.currentTarget as FlowTextField);
            notifyTextClickEvent(_local2.name);
            _arg1.stopPropagation();
        }
        private function handleIntroPlayButtonMouseEvent(_arg1:MouseEvent):void{
            if (Boolean(introDisableArea_mc)){
                switch (_arg1.type){
                    case MouseEvent.MOUSE_OVER:
                        TweensyZero.to(introDisableArea_mc, {alpha:INTRO_DISABLE_AREA_OPACITY}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                        break;
                    case MouseEvent.MOUSE_OUT:
                        TweensyZero.to(introDisableArea_mc, {alpha:0}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                        break;
                    case MouseEvent.CLICK:
                        notifyPlayEvent();
                        miniPlayerModel.introPlayed = true;
                        break;
                };
            };
            _arg1.stopImmediatePropagation();
        }
        private function createTextFields():void{
            trackTitleTxt = new FlowTextField();
            var _local2 = trackTitleTxt;
            with (_local2) {
                name = TRACK_TITLE_TXT;
                buttonMode = true;
                maskRect = new Rectangle(1, 0, 142, 25);
                interval = 15;
                availableWidth = 135;
                fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                fontColor = songTitleColor;
                mouseOverFontColor = overedSongColor;
                fontSize = 13;
                letterSpacing = -0.5;
                bold = true;
                x = 11;
                y = 8;
                addEventListener(MouseEvent.MOUSE_DOWN, handleTextFieldMouseEvent, false, 0, true);
            };
            addChild(trackTitleTxt);
            artistNameTxt = new FlowTextField();
            _local2 = artistNameTxt;
            with (_local2) {
                name = ARTIST_NAME_AND_ALBUM_TITLE_TXT;
                buttonMode = true;
                maskRect = new Rectangle(1, 0, 142, 23);
                interval = 15;
                availableWidth = 135;
                fontFamily = PostingConfig.getDefaultSystemFontFamliy();
                fontColor = songSingerColor;
                mouseOverFontColor = overedSongColor;
                fontSize = 11;
                letterSpacing = -0.5;
                x = 12;
                y = (trackTitleTxt.y + 16);
                addEventListener(MouseEvent.MOUSE_DOWN, handleTextFieldMouseEvent, false, 0, true);
            };
            addChild(artistNameTxt);
        }
        private function handleCustomButtonEventForTooltip(_arg1:MouseEvent):void{
            var _local3:String;
            if (ValidationUtil.isNull(musicPlayerBasicModel)){
                throw (new NullReferenceError("musicPlayerBasicModel is null"));
            };
            if (ValidationUtil.isNull(miniPlayerModel)){
                throw (new NullReferenceError("miniPlayerModel is null"));
            };
            var _local2:MovieClip = (_arg1.currentTarget as MovieClip);
            if ((((REPEAT_BTN == _local2.name)) || ((SHUFFLE_BTN == _local2.name)))){
                switch (_arg1.type){
                    case MouseEvent.MOUSE_OVER:
                        if (REPEAT_BTN == _local2.name){
                            _local3 = miniPlayerModel.repeatStateText;
                        } else {
                            if (SHUFFLE_BTN == _local2.name){
                                _local3 = miniPlayerModel.shuffleStateTextText;
                            };
                        };
                        if (!ValidationUtil.isEmptyOrNull(_local3)){
                            tooltipManager.setOffsetPoint(0, 20);
                            tooltipManager.setLimitWidth(200);
                            tooltipManager.setText(_local3);
                            tooltipManager.setHorizontalAlign(HorizontalAlignment.RIGHT);
                            tooltipManager.setVerticalAlign(VerticalAlignment.BOTTOM);
                            tooltipManager.show();
                        };
                        break;
                    case MouseEvent.MOUSE_OUT:
                        tooltipManager.hide();
                        break;
                };
            };
            _arg1.stopPropagation();
        }
        private function handleBasicButtonEventForTooltip(_arg1:MouseEvent):void{
            var _local3:String;
            var _local2:SimpleButton = (_arg1.target as SimpleButton);
            if ((((FORWARD_BTN == _local2.name)) || ((REWIND_BTN == _local2.name)))){
                switch (_arg1.type){
                    case MouseEvent.MOUSE_OVER:
                        if (FORWARD_BTN == _local2.name){
                            _local3 = "다음곡";
                            tooltipManager.setOffsetPoint(0, 20);
                        } else {
                            if (REWIND_BTN == _local2.name){
                                _local3 = "이전곡";
                                tooltipManager.setOffsetPoint(-32, 20);
                            };
                        };
                        if (!ValidationUtil.isEmptyOrNull(_local3)){
                            tooltipManager.setLimitWidth(NaN);
                            tooltipManager.setText(_local3);
                            tooltipManager.setHorizontalAlign(HorizontalAlignment.RIGHT);
                            tooltipManager.setVerticalAlign(VerticalAlignment.BOTTOM);
                            tooltipManager.show();
                        };
                        break;
                    case MouseEvent.MOUSE_OUT:
                        tooltipManager.hide();
                        break;
                };
            };
            _arg1.stopPropagation();
        }
        private function updatePlayingState(_arg1:Boolean):void{
            play_btn.visible = !(_arg1);
            pause_btn.visible = _arg1;
            if (ValidationUtil.isNull(albumJacketViewer)){
                return;
            };
            albumJacketViewer.isOpen = _arg1;
        }
        private function notifyPauseEvent():void{
            var _local1:MiniPlayerEvent;
            _local1 = new MiniPlayerEvent(MiniPlayerEvent.PAUSE, null, true);
            dispatchEvent(_local1);
        }
        private function handleMiniPlayerModelEvent(_arg1:MiniPlayerModelEvent):void{
            switch (_arg1.type){
                case MiniPlayerModelEvent.ALBUM_INFO_CHANGE:
                    updateAlbumInfo((_arg1.args as AlbumInfo));
                    break;
                case MiniPlayerModelEvent.CURRENT_PLAYING_TIME_CHANGE:
                    updateCurrentPlayingTime((_arg1.args as Number));
                    break;
                case MiniPlayerModelEvent.TOTAL_PLAYING_TIME_CHANGE:
                    updateTotalPlayingTime((_arg1.args as Number));
                    break;
                case MiniPlayerModelEvent.DISPLAY_TIME_CHANGE:
                    updateDisplayTime((_arg1.args as Number));
                    break;
                case MiniPlayerModelEvent.REPEAT_STATE_CHANGE:
                    updateRepeatState((_arg1.args as String));
                    break;
                case MiniPlayerModelEvent.SHUFFLE_STATE_CHANGE:
                    updateShuffleState((_arg1.args as String));
                    break;
                case MiniPlayerModelEvent.MUTE_STATE_CHANGE:
                    updateVolumnBtnState((_arg1.args as Boolean));
                    break;
                case MiniPlayerModelEvent.PLAYING_STATE_CHANGE:
                    updatePlayingState((_arg1.args as Boolean));
                    break;
                case MiniPlayerModelEvent.INTRO_STATE_CHANGE:
                    updateIntroState((_arg1.args as Boolean));
                    break;
                case MiniPlayerModelEvent.PROGRESSIVE_BLOCKING_STATE_CHANGE:
                    updateProgressiveBlockingState((_arg1.args as Boolean));
                    break;
                case MiniPlayerModelEvent.INIT:
                    playReady();
                    break;
            };
        }
        private function notifyVolumnChangeEvent(_arg1:Number):void{
            var _local2:MiniPlayerEvent;
            if (isNaN(_arg1)){
                return;
            };
            _local2 = new MiniPlayerEvent(MiniPlayerEvent.VOLUME_CHANGE, _arg1, true);
            dispatchEvent(_local2);
        }
        private function updateProgressiveBlockingState(_arg1:Boolean):void{
            if (Boolean(progressiveAreaBlocker)){
                progressiveAreaBlocker.visible = _arg1;
            };
        }
        private function notifyPlayEvent():void{
            var _local1:MiniPlayerEvent;
            _local1 = new MiniPlayerEvent(MiniPlayerEvent.PLAY, null, true);
            dispatchEvent(_local1);
        }
        private function updateShuffleState(_arg1:String):void{
            if (ValidationUtil.isEmptyOrNull(_arg1)){
                return;
            };
            var _local2:int = ((ShuffleEnum.RANDOM)==_arg1) ? 2 : 1;
            shuffle_btn.gotoAndStop(_local2);
        }
        private function handleStageEvent(_arg1):void{
            switch (_arg1.type){
                case Event.MOUSE_LEAVE:
                    if (Boolean(controller_panel_asset)){
                        TweensyZero.to(controller_panel_asset, {alpha:0}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                    };
                    isActive = false;
                    break;
                case MouseEvent.MOUSE_MOVE:
                    if ((((mouseX < 0)) || ((mouseY < 0)))){
                        return;
                    };
                    if (Boolean(miniPlayerModel)){
                        if (!miniPlayerModel.introPlayed){
                            return;
                        };
                    };
                    if (ValidationUtil.isNotNull(progress_thumb_hitarea)){
                        if (progress_thumb_hitarea.contains(mouseX, mouseY)){
                            if (((!(isProgressThumbOvered)) && (!(MiniPlayerModel.getInstance().isProgressiveBlocking)))){
                                TweensyZero.to(progressiveSlider._thumb, {alpha:1}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                                isProgressThumbOvered = true;
                            };
                        } else {
                            if (isProgressThumbOvered){
                                TweensyZero.to(progressiveSlider._thumb, {alpha:0}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                                isProgressThumbOvered = false;
                            };
                        };
                    };
                    if (ValidationUtil.isNotNull(volumn_thumb_hitarea)){
                        if (volumn_thumb_hitarea.contains(mouseX, mouseY)){
                            if (!isVolumnThmbOvered){
                                TweensyZero.to(volumnSlider._thumb, {alpha:1}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                                isVolumnThmbOvered = true;
                            };
                        } else {
                            if (isVolumnThmbOvered){
                                TweensyZero.to(volumnSlider._thumb, {alpha:0}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                                isVolumnThmbOvered = false;
                            };
                        };
                    };
                    if (ValidationUtil.isNotNull(mouseOverHitArea)){
                        if (mouseOverHitArea.contains(mouseX, mouseY)){
                            if (!isActive){
                                TweensyZero.to(controller_panel_asset, {alpha:1}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                                isActive = true;
                            };
                        } else {
                            if (isActive){
                                TweensyZero.to(controller_panel_asset, {alpha:0}, MOUSE_OVER_OUT_TWEEN_DURATION, Linear.easeOut, 0, null);
                                isActive = false;
                            };
                        };
                    };
                    _arg1.updateAfterEvent();
                    break;
            };
            _arg1.stopPropagation();
        }
        private function updateCurrentPlayingTime(_arg1:Number):void{
            if (((!(isAutoProgressUpdate)) || (isNaN(_arg1)))){
                return;
            };
            currentPlayingTimeTxt.text = TextFieldHelper.convertToMinSecString(_arg1);
            var _local2:Number = ((progressiveSlider.maxValue * _arg1) / miniPlayerModel.totalPlayingTime);
            progressiveSlider.value = _local2;
            var _local3:Number = (_local2 / progressiveSlider.maxValue);
            progressiveSlider.moveThumbFromValue(_local3);
        }
        override protected function initialize():void{
            musicPlayerBasicModel = MusicPlayerBasicModel.getInstance();
            tooltipManager = TooltipManager.getInstance();
            miniPlayerModel = MiniPlayerModel.getInstance();
            createAlbumJacketViewer();
            createAssets();
            createTextFields();
            createTimeTextFields();
            createProgressiveSlider();
            createVolumnSlider(controller_panel_asset);
            createProgressiveAreaBlocker();
            initAsset();
            updateCurrentPlayingTime(miniPlayerModel.currentPlayingTime);
            updateTotalPlayingTime(miniPlayerModel.totalPlayingTime);
            var _local2 = miniPlayerModel;
            with (_local2) {
                addEventListener(MiniPlayerModelEvent.INIT, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.ALBUM_INFO_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.CURRENT_PLAYING_TIME_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.TOTAL_PLAYING_TIME_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.DISPLAY_TIME_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.REPEAT_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.SHUFFLE_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.MUTE_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.PLAYING_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.REPEAT_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.PROGRESSIVE_BLOCKING_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
                addEventListener(MiniPlayerModelEvent.INTRO_STATE_CHANGE, handleMiniPlayerModelEvent, false, 0, true);
            };
        }
        private function notifyRewindEvent():void{
            var _local1:MiniPlayerEvent;
            _local1 = new MiniPlayerEvent(MiniPlayerEvent.REWIND, null, true);
            dispatchEvent(_local1);
        }
        private function handleProgressSliderEvent(_arg1:CSliderEvent):void{
            var _local2:CSlider = (_arg1.currentTarget as CSlider);
            var _local3:int = int(((_local2.value * miniPlayerModel.totalPlayingTime) / _local2.maxValue));
            switch (_arg1.type){
                case CSliderEvent.TRACK_CLICK_START:
                case CSliderEvent.THUMB_DRAG_START:
                    isAutoProgressUpdate = false;
                    break;
                case CSliderEvent.TRACK_CLICK_END:
                case CSliderEvent.THUMB_DRAG_END:
                    isAutoProgressUpdate = true;
                    notifySeekChangeEvent(_local3);
                    break;
            };
            _arg1.stopPropagation();
        }
        protected function createAssets():void{
            controller_panel_asset = new controller_panel();
            controller_panel_asset.visible = false;
            addChild(controller_panel_asset);
            introDisableArea_mc = new Sprite();
            addChild(introDisableArea_mc);
            intro_play_btn = controller_panel_asset.intro_play_btn;
            intro_play_btn.x = 94;
            intro_play_btn.y = 119;
            addChild(intro_play_btn);
            hitArea_mc = controller_panel_asset.hitArea_mc;
            hitArea_mc.x = 24;
            hitArea_mc.y = 70;
            disableArea_mc = controller_panel_asset.disableArea_mc;
            disableArea_mc.x = 0;
            disableArea_mc.y = 72;
            var _local2 = disableArea_mc.graphics;
            with (_local2) {
                clear();
                beginFill(disableAreaColor, disableAreaOpacity);
                drawRect(0, 0, PostingConfig.WIDTH, (PostingConfig.HEIGHT - 72));
                endFill();
            };
            introDisableArea_mc.x = disableArea_mc.x;
            introDisableArea_mc.y = disableArea_mc.y;
            introDisableArea_mc.alpha = 0;
            _local2 = introDisableArea_mc.graphics;
            with (_local2) {
                clear();
                beginFill(disableAreaColor, 1);
                drawRect(0, 0, PostingConfig.WIDTH, (PostingConfig.HEIGHT - 72));
                endFill();
            };
            rewind_btn = controller_panel_asset.rewind_btn;
            rewind_btn.x = 53;
            rewind_btn.y = 113;
            pause_btn = controller_panel_asset.pause_btn;
            pause_btn.x = 94;
            pause_btn.y = 110;
            play_btn = controller_panel_asset.play_btn;
            play_btn.x = 94;
            play_btn.y = 110;
            forward_btn = controller_panel_asset.forward_btn;
            forward_btn.x = 141;
            forward_btn.y = 113;
            repeat_btn = controller_panel_asset.repeat_btn;
            repeat_btn.x = 149;
            repeat_btn.y = 159;
            shuffle_btn = controller_panel_asset.shuffle_btn;
            shuffle_btn.x = 167;
            shuffle_btn.y = 159;
            volumn_btn = controller_panel_asset.volumn_btn;
            volumn_btn.x = 52;
            volumn_btn.y = 158;
            buttonList = [forward_btn, pause_btn, play_btn, rewind_btn, repeat_btn, shuffle_btn, volumn_btn];
            progressive_slider_assets = new progressive_slider();
            volumn_slider_assets = new volumn_slider();
            if (Boolean(miniPlayerModel)){
                miniPlayerModel.introPlayed = false;
            };
        }
        public function set isActive(_arg1:Boolean):void{
            if (_isActive === _arg1){
                return;
            };
            _isActive = _arg1;
        }
        private function handleBasicButtonMouseClickEvent(_arg1:MouseEvent):void{
            var _local2:SimpleButton = (_arg1.target as SimpleButton);
            switch (_local2.name){
                case PLAY_BTN:
                    notifyPlayEvent();
                    break;
                case PAUSE_BTN:
                    notifyPauseEvent();
                    break;
                case REWIND_BTN:
                    notifyRewindEvent();
                    break;
                case FORWARD_BTN:
                    notifyForwardEvent();
                    break;
            };
            _arg1.stopImmediatePropagation();
        }
        private function removeIntroVisual():void{
            if (Boolean(intro_play_btn)){
                SpriteExtention.setEventListeners(intro_play_btn, [MouseEvent.MOUSE_OVER, MouseEvent.MOUSE_OUT, MouseEvent.CLICK], handleIntroPlayButtonMouseEvent, false);
                if (this.contains(intro_play_btn)){
                    removeChild(intro_play_btn);
                };
            };
            if (Boolean(introDisableArea_mc)){
                introDisableArea_mc.graphics.clear();
                if (this.contains(introDisableArea_mc)){
                    removeChild(introDisableArea_mc);
                };
            };
        }
        private function notifySeekChangeEvent(_arg1:Number):void{
            var _local2:MiniPlayerEvent;
            if (isNaN(_arg1)){
                return;
            };
            _local2 = new MiniPlayerEvent(MiniPlayerEvent.SEEK_CHANGE, _arg1, true);
            dispatchEvent(_local2);
        }
        private function handleCustomButtonMouseClickEvent(_arg1:MouseEvent):void{
            var _local3:String;
            if (ValidationUtil.isNull(musicPlayerBasicModel)){
                throw (new NullReferenceError("musicPlayerBasicModel is null"));
            };
            if (_arg1.target !== _arg1.currentTarget){
                return;
            };
            var _local2:MovieClip = (_arg1.currentTarget as MovieClip);
            switch (_local2.name){
                case REPEAT_BTN:
                    _local3 = getRepeatStateByCurrentFrame(_local2.currentFrame);
                    notifyRepeatChangeEvent(_local3);
                    _local2.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                    break;
                case SHUFFLE_BTN:
                    notifyShuffleChangeEvent();
                    _local2.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER));
                    break;
                case VOLUMN_BTN:
                    miniPlayerModel.isMuted = !(miniPlayerModel.isMuted);
                    break;
            };
            _arg1.stopPropagation();
        }
        private function createProgressiveSlider():void{
            progressiveSlider = getCustomSlider(progressive_slider_assets, 0, 100, 0);
            var _local2 = progressiveSlider;
            with (_local2) {
                _thumb.alpha = 0;
                thumbSizeOption(0);
                ease = Exponential.easeInOut;
                duration = 0.2;
                wheelRatio = 0.1;
                buttonMode = true;
                useHandCursor = true;
                isLimited = true;
                currentTrackColor = progressiveSliderCurrentTrackColor;
                x = 14;
                y = 49;
                addEventListener(CSliderEvent.THUMB_DRAG_START, handleProgressSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.TRACK_CLICK_START, handleProgressSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.THUMB_DRAG_END, handleProgressSliderEvent, false, 0, true);
                addEventListener(CSliderEvent.TRACK_CLICK_END, handleProgressSliderEvent, false, 0, true);
            };
            addChild(progressiveSlider);
        }
        private function notifyForwardEvent():void{
            var _local1:MiniPlayerEvent;
            _local1 = new MiniPlayerEvent(MiniPlayerEvent.FORWARD, null, true);
            dispatchEvent(_local1);
        }
        protected function initAsset():void{
            var _local1:*;
            var _local2:Function;
            var _local3:Function;
            SpriteExtention.setHitTestVisible(disableArea_mc, false);
            mouseOverHitArea = new Rectangle(hitArea_mc.x, hitArea_mc.y, hitArea_mc.width, hitArea_mc.height);
            SpriteExtention.setHitTestVisible(hitArea_mc, false);
            hitArea_mc.visible = false;
            pause_btn.visible = false;
            repeat_btn.gotoAndStop(1);
            shuffle_btn.gotoAndStop(1);
            volumn_btn.gotoAndStop(3);
            if (Boolean(stage)){
                SpriteExtention.setEventListeners(stage, [Event.MOUSE_LEAVE, MouseEvent.MOUSE_MOVE], handleStageEvent);
            };
            for each (_local1 in buttonList) {
                if ((_local1 is MovieClip)){
                    (_local1 as MovieClip).buttonMode = true;
                    _local2 = handleCustomButtonEventForTooltip;
                    _local3 = handleCustomButtonMouseClickEvent;
                } else {
                    if ((_local1 is SimpleButton)){
                        _local2 = handleBasicButtonEventForTooltip;
                        _local3 = handleBasicButtonMouseClickEvent;
                    };
                };
                SpriteExtention.setEventListeners(_local1, [MouseEvent.MOUSE_OVER, MouseEvent.MOUSE_OUT], _local2);
                SpriteExtention.setEventListeners(_local1, [MouseEvent.CLICK], _local3);
            };
            SpriteExtention.setEventListeners(intro_play_btn, [MouseEvent.MOUSE_OVER, MouseEvent.MOUSE_OUT, MouseEvent.CLICK], handleIntroPlayButtonMouseEvent);
        }
        public function get isActive():Boolean{
            return (_isActive);
        }
        private function notifyTextClickEvent(_arg1:String):void{
            var _local2:MiniPlayerEvent;
            _local2 = new MiniPlayerEvent(MiniPlayerEvent.TEXT_CLICK, _arg1, true);
            dispatchEvent(_local2);
        }
        private function playReady():void{
            if (ValidationUtil.isNull(albumJacketViewer)){
                return;
            };
            albumJacketViewer.initThumbs();
        }
        private function handleVolumnSliderEvent(_arg1:CSliderEvent):void{
            var _local3:Number;
            var _local2:CSlider = (_arg1.currentTarget as CSlider);
            switch (_arg1.type){
                case CSliderEvent.TRACK_CLICK_START:
                case CSliderEvent.THUMB_DRAG_START:
                    isDirectVolumnControl = true;
                    break;
                case CSliderEvent.TRACK_CLICK_END:
                case CSliderEvent.THUMB_DRAG_END:
                    isDirectVolumnControl = false;
                    break;
                case CSliderEvent.SLIDER_CHANGE:
                    _local3 = _arg1.target.value;
                    updateVolumnBtnFrameByCurrentVolumn();
                    if (isDirectVolumnControl){
                        miniPlayerModel.volumnSliderValue = _local3;
                    };
                    notifyVolumnChangeEvent(_local3);
                    break;
            };
            _arg1.stopPropagation();
        }
        private function notifyRepeatChangeEvent(_arg1:String):void{
            var _local2:MiniPlayerEvent;
            _local2 = new MiniPlayerEvent(MiniPlayerEvent.REPEAT_CHANGE, _arg1, true);
            dispatchEvent(_local2);
        }
        public function releaseMemory():void{
        }
        private function createAlbumJacketViewer():void{
            albumJacketViewer = new AlbumJacketViewer();
            addChild(albumJacketViewer);
        }
        private function updateAlbumInfo(_arg1:AlbumInfo):void{
            if (Boolean(_arg1)){
                trackTitleTxt.text = _arg1.trackTitle;
                artistNameTxt.text = _arg1.artistName;
                if (Boolean(albumJacketViewer)){
                    albumJacketViewer.loadThumbByIndex(_arg1.index);
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.net {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
    import flash.net.*;
    import flash.system.*;

    public class SmartLoader {

        private static var _cache:Object = {};
        private static var _loaderTmp:Dictionary = new Dictionary();
        private static var _cacheCount:uint = 0;
        private static var _loaderPool:Array = [];
        private static var _cacheRank:uint = 0;
        private static var _instance:SmartLoader = null;
        private static var _streamTmp:Dictionary = new Dictionary();

        private const LOADER_DELAY_WEIGHT:uint = 1000;
        private const LOADER_LIMIT_CNT:uint = 5;

        private var _gcTimer:Timer;
        private var _date:Date;
        private var _useCache:Boolean = false;
        private var _seq:uint = 1000;
        private var _cacheLimitCount:uint = 400;

        public function SmartLoader(_arg1:Lock){
            if (_arg1 == null){
                throw (new Error("SmartLoader::인스턴스를 생성할수 없습니다", 500));
            };
            init();
        }
        public static function getIntance():SmartLoader{
            if (_instance == null){
                _instance = new SmartLoader(new Lock());
            };
            return (_instance);
        }

        protected function gcTimerHandler(_arg1:TimerEvent):void{
            invalidateCache();
        }
        public function getBitmapByUrl(_arg1:String):Bitmap{
            return (((getBitmapFromCache(_arg1)) || (null)));
        }
        private function clearObject(_arg1:Object):void{
            var _local2:String;
            for (_local2 in _arg1) {
                if ((_arg1[_local2] is Object)){
                    clearObject(_arg1[_local2]);
                };
                _arg1[_local2] = null;
            };
            _arg1 = null;
        }
        private function saveCache(_arg1:String, _arg2:BitmapData):void{
            if (_cache[_arg1] == null){
                _cache[_arg1] = {
                    uri:_arg1,
                    bitmapData:_arg2,
                    rank:_cacheRank
                };
                _cacheCount++;
            };
            _cacheRank++;
            startGC();
        }
        private function onCompleteHandler(_arg1:Event):void{
            var ldr:* = null;
            var e:* = _arg1;
            var bytes:* = new ByteArray();
            try {
                URLStream(e.target).readBytes(bytes, bytes.length);
                ldr = getLoader();
                _loaderTmp[ldr.contentLoaderInfo] = {
                    id:_streamTmp[e.target].id,
                    url:_streamTmp[e.target].url.toString(),
                    loader:ldr,
                    params:_streamTmp[e.target].params,
                    url:_streamTmp[e.target].url
                };
                ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, ldrCompletetHanler, false, 0, true);
                ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadFail, false, 0, true);
                ldr.loadBytes(bytes);
            } catch(error:Error) {
                if (((!((_streamTmp[e.target].params == null))) && (Boolean(_streamTmp[e.target].params.onFailure)))){
                    _streamTmp[e.target].params.onFailure();
                    removeCacheByUrl(_streamTmp[e.target].url);
                };
            } finally {
                e.target.removeEventListener(Event.COMPLETE, onCompleteHandler);
                e.target.removeEventListener(Event.OPEN, onOpenHandler);
                e.target.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHttpStatusHandler);
                e.target.removeEventListener(ProgressEvent.PROGRESS, onProgressHandler);
                e.target.removeEventListener(IOErrorEvent.IO_ERROR, loadFail);
                e.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorHandler);
                _streamTmp[e.target] = null;
                if (_streamTmp[e.target]){
                    delete _streamTmp[e.target];
                };
            };
        }
        protected function hasCache(_arg1:URLRequest, _arg2:Object=null):Boolean{
            var _local5:SmartLoaderEvent;
            var _local6:SmartLoaderTimer;
            if (!_useCache){
                return (false);
            };
            var _local3:String = _arg1.url;
            var _local4:Bitmap = getBitmapFromCache(_local3);
            if (_local4 != null){
                if (((!((_arg2 == null))) && (!((_arg2.container == null))))){
                    _arg2.container.addChild(_local4);
                };
                if (((!((_arg2 == null))) && (!((_arg2.onComplete == null))))){
                    _local5 = new SmartLoaderEvent(SmartLoaderEvent.COMPLETE);
                    _local5.content = _local4;
                    if (_arg2.delay){
                        _local6 = new SmartLoaderTimer((_arg2.delay * LOADER_DELAY_WEIGHT), 1);
                        _local6.data = _arg2;
                        _local6.event = _local5;
                        _local6.addEventListener(TimerEvent.TIMER, delayTimerCompleteForHasCache);
                        _local6.start();
                    } else {
                        _arg2.onComplete.apply(null, [_local5]);
                    };
                };
                _cache[_local3].rank = _cacheRank;
                startGC();
                return (true);
            };
            return (false);
        }
        protected function getLoader():Loader{
            var _local1:Loader;
            if (_loaderPool.length > 0){
                _local1 = _loaderPool[0];
                _loaderPool.splice(0, 1);
                return (_local1);
            };
            return (new Loader());
        }
        private function ldrCompletetHanler(_arg1:Event):void{
            var _local4:SmartLoaderEvent;
            var _local2:Object = _loaderTmp[_arg1.target].params;
            var _local3:Bitmap;
            if (((!((_local2 == null))) && (_loaderTmp[_arg1.target].params.cache))){
                saveCache(_loaderTmp[_arg1.target].url, Bitmap(_arg1.target.content).bitmapData.clone());
                _local3 = getBitmapFromCache(_loaderTmp[_arg1.target].url);
            } else {
                _local3 = new Bitmap((LoaderInfo(_arg1.target).content as Bitmap).bitmapData.clone());
            };
            if (((!((_local2 == null))) && (!((_local2.container == null))))){
                (_local2.container as DisplayObjectContainer).addChild(_local3);
            };
            if (((!((_local2 == null))) && (!((_local2.onComplete == null))))){
                _local4 = new SmartLoaderEvent(SmartLoaderEvent.COMPLETE);
                _local4.content = _local3;
                _local4.url = _loaderTmp[_arg1.target].url;
                _loaderTmp[_arg1.target].params.onComplete.apply(null, [_local4]);
            };
            (_arg1.target as LoaderInfo).removeEventListener(Event.COMPLETE, ldrCompletetHanler);
            (_loaderTmp[_arg1.target].loader as Loader).unload();
            _loaderPool.push(_loaderTmp[_arg1.target].loader);
            delete _loaderTmp[_arg1.target];
            startGC();
        }
        public function clearAllCache():void{
            var _local1:String;
            for (_local1 in _cache) {
                removeCacheByUrl(_local1);
            };
            _cacheCount = 0;
        }
        protected function init():void{
            _gcTimer = new Timer(10000, 1);
            configureEvents();
        }
        private function getBitmapFromCache(_arg1:String):Bitmap{
            return (((_cache[_arg1]) ? new Bitmap(_cache[_arg1].bitmapData) : null));
        }
        protected function delayTimerCompleteForHasCache(_arg1:TimerEvent):void{
            _arg1.target.data.onComplete(_arg1.target.event);
        }
        public function closeAll():void{
            var _local1:Object;
            var _local2:Object;
            for (_local1 in _streamTmp) {
                if (((((Boolean(_streamTmp[_local1])) && (Boolean(_local1)))) && (_local1.connected))){
                    _local1.close();
                    if (_streamTmp[_local1].params){
                        clearObject(_streamTmp[_local1].params);
                    };
                };
            };
            for (_local2 in _loaderTmp) {
                if (((((Boolean(_loaderTmp[_local2])) && (Boolean(_local2)))) && (_loaderTmp[_local2].params))){
                    clearObject(_loaderTmp[_local2].params);
                };
            };
        }
        protected function onOpenHandler(_arg1:Event):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onOpen == null))))){
                _streamTmp[_arg1.target].params.onOpen.call(null, _arg1);
            };
        }
        protected function delayTimerComplete(_arg1:TimerEvent):void{
            var _local2:URLStream = URLStream(_arg1.target.stream);
            _local2.load(new URLRequest(_streamTmp[_local2].url));
            _local2.removeEventListener(TimerEvent.TIMER, delayTimerComplete);
        }
        public function clearAllCacheReference():void{
            var _local1:String;
            for (_local1 in _cache) {
                BitmapData(_cache[_local1].bitmapData).dispose();
                removeCacheByUrl(_local1);
            };
            _cacheCount = 0;
        }
        protected function onHttpStatusHandler(_arg1:HTTPStatusEvent):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onHttpStatus == null))))){
                _streamTmp[_arg1.target].params.onHttpStatus.call(null, _arg1);
            };
        }
        private function configureEvents():void{
            _gcTimer.addEventListener(TimerEvent.TIMER, gcTimerHandler, false, 0, true);
        }
        protected function onSecurityErrorHandler(_arg1:SecurityErrorEvent):void{
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onSecurityError == null))))){
                _streamTmp[_arg1.target].params.onSecurityError(_arg1);
            };
        }
        private function assignLoaderId():String{
            _date = new Date();
            var _local1:String = uint((_date.getTime() + _seq)).toString(16);
            _seq++;
            return (_local1);
        }
        public function load(_arg1:URLRequest, _arg2:Object=null):void{
            var _local5:SmartLoaderTimer;
            if (hasCache(_arg1, _arg2)){
                return;
            };
            _arg2.cache = (((_arg2.cache == null)) ? _useCache : _arg2.cache);
            var _local3:String = assignLoaderId();
            var _local4:URLStream = new URLStream();
            _local4.addEventListener(Event.COMPLETE, onCompleteHandler);
            _local4.addEventListener(Event.OPEN, onOpenHandler);
            _local4.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHttpStatusHandler);
            _local4.addEventListener(ProgressEvent.PROGRESS, onProgressHandler);
            _local4.addEventListener(IOErrorEvent.IO_ERROR, onIoErrorHandler);
            _local4.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorHandler);
            _streamTmp[_local4] = {
                id:_local3,
                url:_arg1.url.toString(),
                params:_arg2,
                uri:_arg1.url
            };
            if (_arg2.delay){
                _local5 = new SmartLoaderTimer((_arg2.delay * LOADER_DELAY_WEIGHT), 1);
                _local5.stream = _local4;
                _local5.addEventListener(TimerEvent.TIMER, delayTimerComplete);
                _local5.start();
            } else {
                _local4.load(_arg1);
            };
        }
        protected function onIoErrorHandler(_arg1:IOErrorEvent):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onIoError == null))))){
                _streamTmp[_arg1.target].params.onIoError.call(null, _arg1);
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onFailure == null))))){
                _streamTmp[_arg1.target].params.onFailure();
                return;
            };
        }
        public function removeCacheByUrl(_arg1:String):void{
            if (((!(useCache)) && (getBitmapByUrl(_arg1)))){
                getBitmapByUrl(_arg1).bitmapData.dispose();
            };
            _cache[_arg1] = null;
            _cacheCount--;
            startGC();
        }
        protected function invalidateCache():void{
            var removableUrl:* = null;
            var max:* = 0;
            var url:* = null;
            if (_cacheLimitCount <= _cacheCount){
                removableUrl = null;
                max = 0;
                for (url in _cache) {
                    if (((_cache[url]) && ((_cache[url].rank < max)))){
                        max = _cache[url].rank;
                        removableUrl = url;
                    };
                };
                removeCacheByUrl(removableUrl);
            };
            if (_loaderPool.length > LOADER_LIMIT_CNT){
                _loaderPool.forEach(invalidateLoaderPool);
                _loaderPool.splice(LOADER_LIMIT_CNT, (_loaderPool.length - LOADER_LIMIT_CNT));
            };
            try {
                System.gc();
                new LocalConnection().connect("foo");
                new LocalConnection().connect("foo");
            } catch(e:Error) {
            };
            _gcTimer.reset();
        }
        protected function onProgressHandler(_arg1:ProgressEvent):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onProgress == null))))){
                _streamTmp[_arg1.target].params.onProgress.call(null, _arg1);
            };
        }
        public function toString():String{
            var _local1:String = ("SmartLoader::" + _cache.toString());
            return (null);
        }
        private function invalidateLoaderPool(_arg1:Loader, _arg2:uint, _arg3:Array):void{
            if (_arg2 > LOADER_LIMIT_CNT){
                _arg1.unload();
                _arg1 = null;
            };
        }
        public function set cacheLimitCount(_arg1:uint):void{
            _cacheLimitCount = _arg1;
        }
        public function set useCache(_arg1:Boolean):void{
            _useCache = _arg1;
        }
        public function close(_arg1:String):void{
            var _local2:Object;
            var _local3:Object;
            for (_local2 in _streamTmp) {
                if (((((((Boolean(_streamTmp[_local2])) && (Boolean(_local2)))) && (_local2.connected))) && ((_streamTmp[_local2].url == _arg1)))){
                    _local2.close();
                    if (_streamTmp[_local2].params){
                        clearObject(_streamTmp[_local2].params);
                    };
                };
            };
            for (_local3 in _loaderTmp) {
                if (((((((Boolean(_loaderTmp[_local3])) && (Boolean(_local3)))) && (_loaderTmp[_local3].params))) && ((_loaderTmp[_local3].url == _arg1)))){
                    clearObject(_loaderTmp[_local3].params);
                };
            };
        }
        public function get useCache():Boolean{
            return (_useCache);
        }
        protected function loadFail(_arg1:IOErrorEvent):void{
            if (_loaderTmp[_arg1.target]){
                _loaderTmp[_arg1.target].params.onFailure();
            };
        }
        public function get cacheLimitCount():uint{
            return (_cacheLimitCount);
        }
        private function startGC():void{
            _gcTimer.stop();
            _gcTimer.reset();
            _gcTimer.start();
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.net 

import flash.utils.*;
import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.events.*;
import flash.net.*;

class Lock {

    public function Lock(){
    }
}
class SmartLoaderTimer extends Timer {

    public var stream:URLStream;
    public var data:Object;
    public var event:SmartLoaderEvent;

    public function SmartLoaderTimer(_arg1:Number, _arg2:int=0):void{
        super(_arg1, _arg2);
    }
}
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.controls.*;
    import fl.motion.easing.*;

    public class TooltipManager {

        private static var instance:TooltipManager = null;

        private var _enabled:Boolean;
        private var _tooltip:TextMemo;
        private var offset:Point = null;
        private var _bounds:Rectangle;
        public var fadeInStartX:Number = 0;
        public var fadeInStartY:Number = 0;
        private var placeHolder:DisplayObjectContainer = null;
        private var initialized:Boolean = false;
        public var fadeInDuration:Number = 0.3;
        private var tooltipContainer:Sprite = null;

        public function TooltipManager(){
            if (Boolean(instance)){
                throw (new Error("TooltipManager is Singleton"));
            };
        }
        public static function getInstance():TooltipManager{
            if (!Boolean(instance)){
                instance = new (TooltipManager)();
            };
            return ((instance as TooltipManager));
        }

        public function get enabled():Boolean{
            return (_enabled);
        }
        public function get tooltip():TextMemo{
            return (_tooltip);
        }
        public function set enabled(_arg1:Boolean):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            _enabled = _arg1;
            if (Boolean(placeHolder.stage)){
                if (enabled){
                    placeHolder.stage.addEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMoveEvent, false, 0, true);
                } else {
                    placeHolder.stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMoveEvent, false);
                };
                placeHolder.visible = enabled;
            };
        }
        public function setLimitWidth(_arg1:Number):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            tooltip.setLimitWidth(_arg1);
        }
        public function init(_arg1:DisplayObjectContainer=null, _arg2:Number=0.3):void{
            var stageWidth:* = NaN;
            var stageHeight:* = NaN;
            var target = _arg1;
            var fadeInDuration:Number = _arg2;
            if (!Boolean(_tooltip)){
                _tooltip = new TextMemo();
            };
            if (Boolean(target)){
                tooltipContainer = new Sprite();
                var _local4 = tooltipContainer;
                with (_local4) {
                    mouseEnabled = false;
                    mouseChildren = false;
                };
                this.placeHolder = target;
                this.placeHolder.mouseChildren = false;
                this.placeHolder.mouseEnabled = false;
                this.placeHolder.addChildAt(tooltipContainer, 0);
                tooltipContainer.addChildAt(_tooltip, 0);
            };
            if (Boolean(fadeInDuration)){
                this.fadeInDuration = fadeInDuration;
            };
            initialized = true;
            hide();
            setOffsetPoint(0, 0);
            if (Boolean(placeHolder.stage)){
                stageWidth = placeHolder.stage.stageWidth;
                stageHeight = placeHolder.stage.stageHeight;
                bounds = new Rectangle(0, 0, stageWidth, stageHeight);
            } else {
                bounds = new Rectangle(0, 0, 230, 240);
            };
            enabled = true;
        }
        public function hide():void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            enabled = false;
            tooltip.alpha = 0;
        }
        public function set bounds(_arg1:Rectangle):void{
            if (_bounds === _arg1){
                return;
            };
            _bounds = _arg1;
        }
        public function setVerticalAlign(_arg1:String):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            if (!Boolean(tooltip.text)){
                throw (new ReferenceError("text is empty or null"));
            };
            tooltip.vAlign = _arg1;
        }
        public function setText(_arg1:String):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            tooltip.text = _arg1;
        }
        private function updateDisplayList():void{
            var _local1:Number = (placeHolder.mouseX + offset.x);
            var _local2:Number = (placeHolder.mouseY + offset.y);
            var _local3:Number = tooltip.getTransformOriginX();
            var _local4:Number = (bounds.x + (tooltip.width * (1 - _local3)));
            var _local5:Number = ((bounds.x + bounds.width) - (tooltip.width * _local3));
            _local1 = Math.min(Math.max(_local1, _local4), _local5);
            var _local6:Number = tooltip.getTransformOriginY();
            var _local7:Number = (bounds.y + (tooltip.height * (1 - _local6)));
            var _local8:Number = ((bounds.y + bounds.height) - (tooltip.height * _local6));
            _local2 = Math.min(Math.max(_local2, _local7), _local8);
            tooltipContainer.x = _local1;
            tooltipContainer.y = _local2;
        }
        private function handleStageMouseMoveEvent(_arg1:MouseEvent):void{
            updateDisplayList();
            _arg1.updateAfterEvent();
        }
        public function setOffsetPoint(_arg1:Number, _arg2:Number):void{
            offset = new Point(_arg1, _arg2);
        }
        public function get bounds():Rectangle{
            return (_bounds);
        }
        public function show():void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            updateDisplayList();
            enabled = true;
            TweensyZero.fromTo(tooltip, {alpha:0}, {alpha:1}, fadeInDuration, Linear.easeOut, 0, null);
        }
        public function setHorizontalAlign(_arg1:String):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            if (!Boolean(tooltip.text)){
                throw (new ReferenceError("text is empty or null"));
            };
            tooltip.hAlign = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.album.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.panels.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.core.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.assets.*;

    public class NaverMiniPlayerInterpreter implements IAssetInterpreter {

        public function updateAsset(_arg1, _arg2):void{
            AlbumThumbnail.updateAsset(_arg1);
            AlbumJacketViewer.updateAsset(_arg1);
            MiniPlayer.updateAsset(_arg1);
            MiniPlayer.updateStyle(_arg2);
            MiniPlayerPanel.updateAsset(_arg1);
            MiniPlayerPanel.updateStyle(_arg2);
            PlaylistBodyBackground.updateSkinStyle(_arg2);
            NaverMusicPlayerList.updateAsset(_arg1);
            NaverMusicPlayerList.updateRendererStyle(_arg2);
            NaverMiniPlayerCellRenderer.updateAsset(_arg1);
            NaverMiniPlayerCellRenderer.updateRendererStyle(_arg2);
            NaverMusicPlayerListPanel.updateAsset(_arg1);
            NaverMusicPlayerListPanel.updateStyle(_arg2);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events.*;
    import flash.net.*;
    import flash.system.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles.*;

    public class AssetLoadManager extends EventDispatcher {

        private static var _instance:AssetLoadManager;

        private var signiture:Class;
        private var _assetInterpreter:IAssetInterpreter;
        private var _loader:Loader;

        public function AssetLoadManager(){
            signiture = C01WhiteColorStyle;
            super();
            _loader = new Loader();
            _loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeAssetLoadHandler);
            _loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorAssetLoadHandler);
            _loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressAssetLoadHandler);
        }
        public static function getInstance():AssetLoadManager{
            if (!Boolean(_instance)){
                _instance = new (AssetLoadManager)();
            };
            return (_instance);
        }

        private function progressAssetLoadHandler(_arg1:ProgressEvent):void{
        }
        public function get assetInterpreter():IAssetInterpreter{
            return (_assetInterpreter);
        }
        public function sendNewAssetListToComponent(_arg1, _arg2:Class=null):void{
            var _local3:AssetControlEvent;
            if (Boolean(assetInterpreter)){
                assetInterpreter.updateAsset(_arg1, _arg2);
                _local3 = new AssetControlEvent(AssetControlEvent.COMPETE_ASSIGN_NEW_ASSET);
                dispatchEvent(_local3);
            };
        }
        private function completeAssetLoadHandler(_arg1:Event):void{
            var _local3:AssetControlEvent;
            var _local2:* = _loader.contentLoaderInfo.applicationDomain;
            _local3 = new AssetControlEvent(AssetControlEvent.COMPLETE_LOAD_ASSET, true);
            _local3.data = _local2;
            dispatchEvent(_local3);
            sendNewAssetListToComponent(_local2, signiture);
        }
        public function loadAsset(_arg1:String, _arg2:Class=null, _arg3:Boolean=false):void{
            _arg1 = (_arg1 + ("?ver=" + WebPlayerCoreProperties.WEB_PLAYER_VER));
            var _local4:URLRequest = new URLRequest(encodeURI(_arg1));
            _loader.load(_local4, new LoaderContext(true));
            if (Boolean(_arg2)){
                signiture = _arg2;
            };
        }
        public function set assetInterpreter(_arg1:IAssetInterpreter):void{
            this._assetInterpreter = _arg1;
        }
        public function drawNewAsset():void{
        }
        private function errorAssetLoadHandler(_arg1:IOErrorEvent):void{
        }
        public function removeExistAsset():void{
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.managers 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces {

    public interface IAssetInterpreter {

        function updateAsset(_arg1, _arg2):void;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces {

    public interface IPanel {

        function get isActive():Boolean;
        function set isActive(_arg1:Boolean):void;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces {
    import com.nhn.core.interfaces.*;

    public interface IDestroy extends IReleaseMemory {

        function destroy():void;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces {

    public interface IColorStyle {

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class InternalUIHandlerEvent extends Event {

        public static const IS_SELECTED_ALL:String = "IS_SELECT_ALL";

        private var _data:Object;

        public function InternalUIHandlerEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class AssetControlEvent extends Event {

        public static const FAIL_LOAD_ASSET:String = "FAIL_LOAD_ASSET";
        public static const COMPETE_ASSIGN_NEW_ASSET:String = "COMPETE_ASSIGN_NEW_ASSET";
        public static const COMPLETE_LOAD_ASSET:String = "COMPLETE_LOAD_ASSET";

        private var _data:Object;

        public function AssetControlEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class PanelEvent extends Event {

        public static const PANEL_DEACTIVE:String = "panelDeactive";
        public static const PANEL_ACTIVED:String = "panelActived";
        public static const PANEL_BUTTON_CLICK:String = "panelButtonClick";
        public static const PANEL_INIT:String = "panelInit";
        public static const PANEL_CUSTOM_BUTTON_CLICK:String = "panelCustomButtonClick";

        private var _args:Object;

        public function PanelEvent(_arg1:String, _arg2:Object=null, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            _args = _arg2;
        }
        public function get args():Object{
            return (_args);
        }
        override public function toString():String{
            return (formatToString("type", "bubbles", "cancelable", "args"));
        }
        override public function clone():Event{
            return (new PanelEvent(type, args, bubbles, cancelable));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class NaverMusicPlayerListEvent extends Event {

        public static const PLAYLIST_PLAY_CURRENT_SONG:String = "playlistPlayCurrentSong";
        public static const PLAYLIST_MP3_ICON_CLICK:String = "playlistMp3IconClick";
        public static const PLAYLIST_ALBUM_ICON_CLICK:String = "playlistAlbumIconClick";

        private var _args:Object;

        public function NaverMusicPlayerListEvent(_arg1:String, _arg2:Object=null, _arg3:Boolean=false, _arg4:Boolean=false){
            super(_arg1, _arg3, _arg4);
            _args = _arg2;
        }
        public function get args():Object{
            return (_args);
        }
        override public function toString():String{
            return (formatToString("type", "bubbles", "cancelable", "args"));
        }
        override public function clone():Event{
            return (new NaverMusicPlayerListEvent(type, args, bubbles, cancelable));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils {
    import flash.display.*;

    public class DestroyHelper {

        public static function removeContainer(_arg1:DisplayObjectContainer):Boolean{
            var obj:* = undefined;
            var container:* = _arg1;
            if (ValidationUtil.isNull(container)){
                return (false);
            };
            var len:* = (container.numChildren - 1);
            if (len <= -1){
                return (false);
            };
            var i:* = len;
            while (i >= 0) {
                obj = container.getChildAt(i);
                if ((obj is Bitmap)){
                    try {
                        if (ValidationUtil.isNotNull(obj.bitmapData)){
                            obj.bitmapData.dispose();
                        };
                    } catch(e:Error) {
                    };
                } else {
                    if ((obj is Shape)){
                        obj.graphics.clear();
                    };
                };
                container.removeChildAt(i);
                i = (i - 1);
            };
            return (true);
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils {
    import flash.utils.*;

    public class DebugUtil {

        private static var enabled:Boolean = true;

        public static function getClassName(_arg1:Object):String{
            var _local2:String = getQualifiedClassName(_arg1);
            return (_local2.substring((_local2.lastIndexOf(":") + 1), _local2.length));
        }
        public static function TRACE(_arg1:Object, ... _args):void{
            if (!enabled){
                return;
            };
            var _local3:String = getClassName(_arg1);
            var _local4 = (("[TRACE] : CLASS = " + _local3) + " ");
            trace(_local4, ">>>", _args);
        }
        public static function setEnabled(_arg1:Boolean):void{
            DebugUtil.enabled = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils {

    public class ValidationUtil {

        public static function isNotNull(_arg1):Boolean{
            return (!(isNull(_arg1)));
        }
        public static function isNull(_arg1):Boolean{
            return ((_arg1 === null));
        }
        public static function isEmptyOrNull(_arg1):Boolean{
            return ((((_arg1 === "")) || (isNull(_arg1))));
        }
        public static function isUndefined(_arg1):Boolean{
            return ((_arg1 === undefined));
        }

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.utils 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C06GreenColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.8;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0x222222;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 7521358;
        public static const NAME:String = "C06GreenColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0xDDDDDD;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 5409336;
        public static const OVERED_SONG_INDEX_COLOR:int = 1038592;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 5474873;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 0x2A2A2A;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 4878904;
        public static const PLAYLIST_USER_ID_COLOR:int = 0x8A8A8A;
        public static const OVERED_SONG_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 0x3F3F3F;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C07BlueBlackColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.8;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0x222222;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 7323069;
        public static const NAME:String = "C07BlueBlackColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0xDDDDDD;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 4821651;
        public static const OVERED_SONG_INDEX_COLOR:int = 3400932;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 5277575;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 0x2A2A2A;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 4878705;
        public static const PLAYLIST_USER_ID_COLOR:int = 0x8A8A8A;
        public static const OVERED_SONG_TITLE_COLOR:int = 3400932;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 0x3F3F3F;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C08BlackColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.8;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 0x393939;
        public static const NAME:String = "C08BlackColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0xDDDDDD;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 0x5B5B5B;
        public static const OVERED_SONG_INDEX_COLOR:int = 1038592;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 0x757575;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 0x2A2A2A;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 1038592;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 0x818181;
        public static const PLAYLIST_USER_ID_COLOR:int = 0x8A8A8A;
        public static const OVERED_SONG_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 0x3F3F3F;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C01WhiteColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.9;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0x222222;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 0xFFFFFF;
        public static const NAME:String = "C01WhiteColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0x333333;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 12501700;
        public static const OVERED_SONG_INDEX_COLOR:int = 0x32C100;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 0xC0C0C0;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 0xD7D7D7;
        public static const DEFAULT_BG_COLOR:int = 0xFFFFFF;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x666666;
        public static const SELECT_BG_COLOR:int = 0xF5F5F5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 1038592;
        public static const PLAYLIST_RIGHT_OUTLINE:int = 0xDDDDDD;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 0x909090;
        public static const PLAYLIST_USER_ID_COLOR:int = 0x939393;
        public static const OVERED_SONG_TITLE_COLOR:int = 0x32C100;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 0xF5F5F5;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 3258625;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C05PinkBlackColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.85;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0x222222;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 16760277;
        public static const NAME:String = "C05PinkBlackColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0xDDDDDD;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 14386337;
        public static const OVERED_SONG_INDEX_COLOR:int = 16688582;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 13861533;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 0x2A2A2A;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 9465723;
        public static const PLAYLIST_USER_ID_COLOR:int = 0x8A8A8A;
        public static const OVERED_SONG_TITLE_COLOR:int = 16688582;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 0x3F3F3F;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C02GrayColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.85;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0x222222;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 12040123;
        public static const NAME:String = "C02GrayColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 5395027;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 8224133;
        public static const OVERED_SONG_INDEX_COLOR:int = 16138753;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 8947854;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 12237505;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const DEFAULT_BG_COLOR:int = 14277084;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x666666;
        public static const SELECT_BG_COLOR:int = 13421777;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 7171439;
        public static const PLAYLIST_USER_ID_COLOR:int = 8355714;
        public static const OVERED_SONG_TITLE_COLOR:int = 16138753;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 13487568;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C03BabyBlueColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.85;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0x222222;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 12048352;
        public static const NAME:String = "C03BabyBlueColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0x333333;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 8826295;
        public static const OVERED_SONG_INDEX_COLOR:int = 16138753;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 8826295;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 11387850;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const DEFAULT_BG_COLOR:int = 14478320;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 13421777;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 7175297;
        public static const PLAYLIST_USER_ID_COLOR:int = 0x666666;
        public static const OVERED_SONG_TITLE_COLOR:int = 16138753;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 13688546;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C04BlueGrayColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.8;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 4935512;
        public static const NAME:String = "C04BlueGrayColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 14408926;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 9672350;
        public static const OVERED_SONG_INDEX_COLOR:int = 1038592;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 8685195;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 5198427;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 10264227;
        public static const DEFAULT_BG_COLOR:int = 6053992;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 11448500;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 1038592;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 10987948;
        public static const PLAYLIST_USER_ID_COLOR:int = 10922156;
        public static const OVERED_SONG_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 6645872;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C10PurpleSilverColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.85;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 7106703;
        public static const NAME:String = "C10PurpleSilverColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 10067644;
        public static const OVERED_SONG_INDEX_COLOR:int = 6053058;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 10067644;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 13158867;
        public static const DEFAULT_BG_COLOR:int = 15790324;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 9606309;
        public static const SELECT_BG_COLOR:int = 0xF5F5F5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 9606309;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 1038592;
        public static const PLAYLIST_RIGHT_OUTLINE:int = 12763845;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 12172497;
        public static const PLAYLIST_USER_ID_COLOR:int = 11711683;
        public static const OVERED_SONG_TITLE_COLOR:int = 6053058;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 5921647;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 13487831;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles {
    import com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.interfaces.*;

    public class C09New1ColorStyle implements IColorStyle {

        public static const MINI_PLAYER_DISABLE_AREA_OPACITY:Number = 0.85;
        public static const MINI_PLAYER_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const DEFAULT_PLAYER_BG_COLOR:int = 2500143;
        public static const NAME:String = "C09New1ColorStyle";
        public static const PLAYLIST_TITLE_COLOR:int = 0xFFFFFF;
        public static const MINI_PLAYER_CURRENT_TRACK_COLOR:int = 5328993;
        public static const OVERED_SONG_INDEX_COLOR:int = 46109;
        public static const MINI_PLAYER_TOTAL_PLAYING_TIME_COLOR:int = 0x727272;
        public static const HORIZONTAL_LAST_GRID_LINE_COLOR:int = 13422029;
        public static const DEFAULT_BG_COLOR:int = 0xFFFFFF;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 11053740;
        public static const SELECT_BG_COLOR:int = 0xF5F5F5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const MINI_PLAYER_OVERED_SONG_COLOR:int = 46109;
        public static const PLAYLIST_RIGHT_OUTLINE:int = 0xB9B9B9;
        public static const MINI_PLAYER_SONG_SINGER_COLOR:int = 0x818181;
        public static const PLAYLIST_USER_ID_COLOR:int = 6842478;
        public static const OVERED_SONG_TITLE_COLOR:int = 46109;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const HORIZONTAL_GRID_LINE_COLOR:int = 0xF4F4F4;
        public static const MINI_PLAYER_CURRENT_PLAYING_TIME_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayermini.patterns.mediator.viewcomponent.styles 
﻿package com.nhn.application.modules.webplayerpromotion.notifications {

    public class WebPlayerPromotionNotifications {

        public static const WPP_HWCPM_RESPOND_COMMON_IO_ERROR:String = "NOTI_WEBPLAYERPROMOTION_WPP_HWCPM_RESPOND_COMMON_IO_ERROR";
        public static const REQUEST_GET_PROMOTION_CANVAS_UI:String = "NOTI_WEBPLAYERPROMOTION_REQUEST_GET_PROMOTION_CANVAS_UI";
        public static const WPP_HWCPM_REQUEST_PROMOTION_GET_PROMOTION:String = "NOTI_WEBPLAYERPROMOTION_WPP_HWCPM_REQUEST_PROMOTION_GET_PROMOTION";
        public static const START_PROMOTION:String = "NOTI_WEBPLAYERPROMOTION_START_PROMOTION";
        public static const START_NONMEMBER_PROMOTION:String = "NOTI_WEBPLAYERPROMOTION_START_NONMEMBER_PROMOTION";
        public static const RESPOND_GET_PROMOTION_CANVAS_UI:String = "NOTI_WEBPLAYERPROMOTION_RESPOND_GET_PROMOTION_CANVAS_UI";
        public static const WPP_HWCPM_RESPOND_COMMON_SECURITY_ERROR:String = "NOTI_WEBPLAYERPROMOTION_WPP_HWCPM_RESPOND_COMMON_SECURITY_ERROR";
        public static const WPP_HWCPM_RESPOND_PROMOTION_GET_PROMOTION:String = "NOTI_WEBPLAYERPROMOTION_WPP_HWCPM_RESPOND_PROMOTION_GET_PROMOTION";
        public static const WPP_HWCPM_REQUEST_COMMON_CANCEL_REQUEST:String = "NOTI_WEBPLAYERPROMOTION_WPP_HWCPM_REQUEST_COMMON_CANCEL_REQUEST";

    }
}//package com.nhn.application.modules.webplayerpromotion.notifications 
﻿package com.nhn.application.modules.webplayerpromotion {
    import com.nhn.application.modules.webplayercore.*;

    public class WebPlayerPromotionProperties {

        public static const PROMOTION_CANVAS_UI_WIDTH_BASIC_PROMO:uint = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO;
        public static const PROMOTION_CANVAS_UI_HEIGHT_BASIC_PROMO:uint = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO;
        public static const PROMOTION_NAME:String = "PROMOTION_101220";
        public static const PROMOTION_CANVAS_UI_BACKGROUND_ALPHA_MINI:Number = 0;
        public static const PROMOTION_CANVAS_UI_HEIGHT_MINI:uint = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
        public static const PROMOTION_COOKIE_CONSISTANT_ONE_DAY:int = 1;
        public static const PROMOTION_CANVAS_UI_BACKGROUND_ALPHA_BASIC_PROMO:Number = 0;
        public static const PROMOTION_CANVAS_UI_WIDTH_BASIC:uint = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC;
        public static const PROMOTION_CANVAS_UI_HEIGHT_BASIC:uint = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC;
        public static const PROMOTION_CANVAS_UI_BACKGROUND_COLOR_BASIC_PROMO:uint = 0;
        public static const PROMOTION_CANVAS_UI_BACKGROUND_ALPHA_BASIC:Number = 0;
        public static const PROMOTION_CANVAS_UI_BACKGROUND_COLOR_BASIC:uint = 0;
        public static const PROMOTION_CANVAS_UI_BACKGROUND_COLOR_MINI:uint = 0;
        public static const PROMOTION_CANVAS_UI_WIDTH_MINI:uint = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
        public static const PROMOTION_COOKIE_CHECK_OUT:String = "PROMOTION_COOKIE_CHECK_OUT";

        public static function get promotionCanvasUIEnabled():Boolean{
            var _local1:Boolean;
            if ((((WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP)) || ((WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING)))){
                _local1 = true;
            };
            return (_local1);
        }
        public static function get nonmemberPromotionUIEnabled():Boolean{
            var _local1:Boolean;
            if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP){
                _local1 = true;
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion 
﻿package com.nhn.application.modules.webplayerpromotion {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.webplayerpromotion.pipemessages.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.command.*;
    import com.nhn.application.modules.webplayerpromotion.notifications.*;

    public class WebPlayerPromotionModule extends PipeInterchangeableModule {

        public static const NAME_BASE:String = "WebPlayerPromotionModule";

        public function WebPlayerPromotionModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getType()){
                case DataTransferProtocol.TYPE:
                    switch (_arg1.getHeaderByIMessageHeader().name){
                        case WebPlayerPromotionPipeMessages.START_PROMOTION.name:
                            facade.sendNotification(WebPlayerPromotionNotifications.START_PROMOTION, _arg1.getBody(), null);
                            break;
                        case WebPlayerPromotionPipeMessages.START_NONMEMBER_PROMOTION.name:
                            facade.sendNotification(WebPlayerPromotionNotifications.START_NONMEMBER_PROMOTION, _arg1.getBody(), null);
                            break;
                        case WebPlayerPromotionPipeMessages.REQUEST_GET_PROMOTION_CANVAS_UI.name:
                            facade.sendNotification(WebPlayerPromotionNotifications.REQUEST_GET_PROMOTION_CANVAS_UI, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name:
                            facade.sendNotification(WebPlayerPromotionNotifications.WPP_HWCPM_RESPOND_COMMON_IO_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name:
                            facade.sendNotification(WebPlayerPromotionNotifications.WPP_HWCPM_RESPOND_COMMON_SECURITY_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_PROMOTION_GET_PROMOTION.name:
                            facade.sendNotification(WebPlayerPromotionNotifications.WPP_HWCPM_RESPOND_PROMOTION_GET_PROMOTION, _arg1.getBody(), null);
                            break;
                        default:
                            throw (new Error(("WebPlayerPromotionModule : " + "message.getHeaderByIMessageHeader().name is not valid.")));
                    };
                    break;
                default:
                    super.handlePipeMessage(_arg1);
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(WebPlayerPromotionPipeMessages.START_PROMOTION.name);
            _local1.push(WebPlayerPromotionPipeMessages.START_NONMEMBER_PROMOTION.name);
            _local1.push(WebPlayerPromotionPipeMessages.REQUEST_GET_PROMOTION_CANVAS_UI.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_PROMOTION_GET_PROMOTION.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPP_HWCPM_RequestCommonCancelRequestCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("WPP_HWCPM_RequestCommonCancelRequestCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_COMMON_CANCEL_REQUEST, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.webplayerpromotion.notifications.*;

    public class WPP_HWCPM_RequestPromotionGetPromotionCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:RequestID = RequestID.getRequestID(_arg1.getName());
            var _local3:Array = requestIDTableProxy.retrieveRequestIDsByBaseID(RequestID.getBaseID(_local2));
            if (Boolean(_local3)){
                if (_local3.length > 1){
                    throw (new Error(("WPP_HWCPM_RequestPromotionGetPromotionCommand : " + "requestIDTable.length is not valid.")));
                };
                sendNotification(WebPlayerPromotionNotifications.WPP_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local3[0] as RequestID)});
                requestIDTableProxy.removeRequestID((_local3[0] as RequestID));
            };
            requestIDTableProxy.registerRequestID(_local2);
            var _local4:Object = {};
            _local4.requestID = _local2;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_PROMOTION_GET_PROMOTION, _local4, 0);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.webplayerpromotion.*;
    import com.nhn.application.modules.webplayerpromotion.notifications.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            facade.registerProxy(new RequestIDTableProxy());
            if (WebPlayerPromotionProperties.promotionCanvasUIEnabled){
                facade.registerMediator(new PromotionCanvasUIMediator());
            };
            facade.registerCommand(WebPlayerPromotionNotifications.REQUEST_GET_PROMOTION_CANVAS_UI, HWPPPM_RequestGetPromotionCanvasUICommand);
            facade.registerCommand(WebPlayerPromotionNotifications.RESPOND_GET_PROMOTION_CANVAS_UI, HWPPPM_RespondGetPromotionCanvasUICommand);
            facade.registerCommand(WebPlayerPromotionNotifications.START_PROMOTION, HWPPPM_StartPromotionCommand);
            facade.registerCommand(WebPlayerPromotionNotifications.START_NONMEMBER_PROMOTION, HWPPPM_StartNonmemberPromotionCommand);
            facade.registerCommand(WebPlayerPromotionNotifications.WPP_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, WPP_HWCPM_RequestCommonCancelRequestCommand);
            facade.registerCommand(WebPlayerPromotionNotifications.WPP_HWCPM_RESPOND_COMMON_IO_ERROR, WPP_HWCPM_RespondCommonIOErrorCommand);
            facade.registerCommand(WebPlayerPromotionNotifications.WPP_HWCPM_RESPOND_COMMON_SECURITY_ERROR, WPP_HWCPM_RespondCommonSecurityErrorCommand);
            facade.registerCommand(WebPlayerPromotionNotifications.WPP_HWCPM_REQUEST_PROMOTION_GET_PROMOTION, WPP_HWCPM_RequestPromotionGetPromotionCommand);
            facade.registerCommand(WebPlayerPromotionNotifications.WPP_HWCPM_RESPOND_PROMOTION_GET_PROMOTION, WPP_HWCPM_RespondPromotionGetPromotionCommand);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.notifications.*;

    public class HWPPPM_StartPromotionCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendNotification(WebPlayerPromotionNotifications.WPP_HWCPM_REQUEST_PROMOTION_GET_PROMOTION, null, null);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.*;
    import com.nhn.application.modules.webplayerpromotion.notifications.*;

    public class HWPPPM_RequestGetPromotionCanvasUICommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            if (WebPlayerPromotionProperties.promotionCanvasUIEnabled){
                sendNotification(WebPlayerPromotionNotifications.RESPOND_GET_PROMOTION_CANVAS_UI, null, null);
            } else {
                throw (new Error(("HWPEHPM_RequestGetPromotionCanvasUICommand : " + "WebPlayerPromotionProperties.promotionCanvasUIEnabled is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.pipemessages.*;
    import com.nhn.application.modules.webplayerpromotion.*;

    public class HWPPPM_RespondGetPromotionCanvasUICommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            if (WebPlayerPromotionProperties.promotionCanvasUIEnabled){
                sendPipeMessage(WebPlayerPromotionPipeMessages.RESPOND_GET_PROMOTION_CANVAS_UI, {promotionCanvasUI:promotionCanvasUI}, 0);
            } else {
                throw (new Error(("HWPEHPM_RequestGetPromotionCanvasUICommand : " + "WebPlayerPromotionProperties.promotionCanvasUIEnabled is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPP_HWCPM_RespondCommonIOErrorCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("WPP_HWCPM_RespondCommonIOErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.*;
    import de.aggro.utils.*;
    import com.nhn.application.modules.webplayerpromotion.*;

    public class WPP_HWCPM_RespondPromotionGetPromotionCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local3:Object;
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.promotion as Promotion))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPP_HWCPM_RespondPromotionGetPromotionCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
            if (_local2.success){
                if ((_local2.promotion as Promotion).ispromotion === "Y"){
                    _local3 = CookieUtil.getCookie((WebPlayerPromotionProperties.PROMOTION_NAME + WebPlayerPromotionProperties.PROMOTION_COOKIE_CHECK_OUT));
                    if (((!(Boolean(_local3))) || (!((_local3.toString() === "true"))))){
                        promotionCanvasUIMediator.showPromotionUI(PromotionUI.PROMOTION_TYPE);
                    };
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;

    public class WPPMBaseCommand extends BasicSimpleCommand {

        protected function get promotionCanvasUIMediator():PromotionCanvasUIMediator{
            var _local1:IMediator = facade.retrieveMediator(PromotionCanvasUIMediator.NAME);
            return ((_local1 as PromotionCanvasUIMediator));
        }
        protected function get requestIDTableProxy():RequestIDTableProxy{
            var _local1:IProxy = facade.retrieveProxy(RequestIDTableProxy.NAME);
            return ((_local1 as RequestIDTableProxy));
        }
        protected function get promotionCanvasUI():PromotionCanvasUI{
            var _local1:PromotionCanvasUI;
            if (!Boolean(promotionCanvasUIMediator)){
                _local1 = null;
            } else {
                _local1 = promotionCanvasUIMediator.getPromotionCanvasUI();
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayerpromotion.*;

    public class HWPPPM_StartNonmemberPromotionCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            if (WebPlayerPromotionProperties.nonmemberPromotionUIEnabled){
                promotionCanvasUIMediator.showPromotionUI(NonmemberPromotionUI.PROMOTION_TYPE);
            };
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPP_HWCPM_RespondCommonSecurityErrorCommand extends WPPMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("WPP_HWCPM_RespondCommonSecurityErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.command 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import flash.display.*;
    import flash.net.*;
    import flash.system.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.events.*;
    import com.nhn.core.interfaces.*;

    public class PromotionUI extends Sprite implements IReleaseMemory {

        public static const PROMOTION_TYPE:String = "PROMOTION";

        protected var promotionImageContainer:Sprite;
        protected var promotionLinkers:Array;
        protected var closeButton:Sprite;
        protected var persistenceCloseButton:Sprite;
        protected var imageLoader:Loader;
        protected var promotionImage:BitmapData;
        private var _promotionType:String;

        public function PromotionUI(_arg1:String){
            _promotionType = _arg1;
        }
        protected function draw():void{
            var _local2:PromotionUIEvent;
            var _local1:Promotion = Promotion.getInstance();
            _local2 = new PromotionUIEvent(PromotionUIEvent.INITIALIZED, promotionType, null);
            promotionImageContainer = new Sprite();
            promotionImageContainer.mouseEnabled = false;
            promotionImageContainer.graphics.beginBitmapFill(promotionImage, null, false, true);
            promotionImageContainer.graphics.drawRect(0, 0, promotionImage.width, promotionImage.height);
            promotionImageContainer.graphics.endFill();
            addChild(promotionImageContainer);
            promotionLinkers = [];
            var _local3:Sprite;
            var _local4:uint = _local1.promotionlinklist.length;
            var _local5:PromotionLink;
            var _local6:int;
            while (_local6 < _local4) {
                _local5 = (_local1.promotionlinklist.retrieveItemAt(0) as PromotionLink);
                _local3 = new Sprite();
                _local3.buttonMode = true;
                _local3.useHandCursor = true;
                _local3.graphics.beginFill(0xFF0000, 0);
                _local3.graphics.drawRect(0, 0, _local5.linkbounds.width, _local5.linkbounds.height);
                _local3.graphics.endFill();
                _local3.x = _local5.linkbounds.x;
                _local3.y = _local5.linkbounds.y;
                _local3.addEventListener(MouseEvent.CLICK, promotionLinkers_handleMouseEvent, false, 0, true);
                promotionLinkers.push(_local3);
                addChild(_local3);
                _local6++;
            };
            closeButton = new Sprite();
            closeButton.buttonMode = true;
            closeButton.useHandCursor = true;
            closeButton.graphics.beginFill(0xFF00, 0);
            closeButton.graphics.drawRect(0, 0, _local1.closebuttonbounds.width, _local1.closebuttonbounds.height);
            closeButton.graphics.endFill();
            closeButton.x = _local1.closebuttonbounds.x;
            closeButton.y = _local1.closebuttonbounds.y;
            closeButton.addEventListener(MouseEvent.CLICK, closeButton_handleMouseEvent, false, 0, true);
            addChild(closeButton);
            persistenceCloseButton = new Sprite();
            persistenceCloseButton.buttonMode = true;
            persistenceCloseButton.useHandCursor = true;
            persistenceCloseButton.graphics.beginFill(0xFF, 0);
            persistenceCloseButton.graphics.drawRect(0, 0, _local1.persistenceclosebuttonbounds.width, _local1.persistenceclosebuttonbounds.height);
            persistenceCloseButton.graphics.endFill();
            persistenceCloseButton.x = _local1.persistenceclosebuttonbounds.x;
            persistenceCloseButton.y = _local1.persistenceclosebuttonbounds.y;
            persistenceCloseButton.addEventListener(MouseEvent.CLICK, persistenceCloseButton_handleMouseEvent, false, 0, true);
            addChild(persistenceCloseButton);
            dispatchEvent(_local2);
        }
        protected function closeButton_handleMouseEvent(_arg1:MouseEvent):void{
            var _local2:PromotionUIEvent;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    _local2 = new PromotionUIEvent(PromotionUIEvent.CLOSE, _promotionType, null);
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
        }
        public function releaseMemory():void{
            if (Boolean(persistenceCloseButton)){
                try {
                    removeChild(persistenceCloseButton);
                } catch(e:Error) {
                };
                persistenceCloseButton.removeEventListener(MouseEvent.CLICK, persistenceCloseButton_handleMouseEvent, false);
                persistenceCloseButton = null;
            };
            if (Boolean(closeButton)){
                try {
                    removeChild(closeButton);
                } catch(e:Error) {
                };
                closeButton.removeEventListener(MouseEvent.CLICK, closeButton_handleMouseEvent, false);
                closeButton = null;
            };
            var promotionLinker:* = null;
            while (1) {
                promotionLinker = (promotionLinkers.pop() as Sprite);
                if (Boolean(promotionLinker)){
                    try {
                        removeChild(promotionLinker);
                    } catch(e:Error) {
                    };
                    promotionLinker.removeEventListener(MouseEvent.CLICK, promotionLinkers_handleMouseEvent, false);
                    promotionLinker = null;
                } else {
                    break;
                };
            };
            promotionLinkers = null;
            if (Boolean(promotionImageContainer)){
                try {
                    removeChild(promotionImageContainer);
                } catch(e:Error) {
                };
                promotionImageContainer = null;
            };
            promotionImage.dispose();
            promotionImage = null;
        }
        protected function persistenceCloseButton_handleMouseEvent(_arg1:MouseEvent):void{
            var _local2:PromotionUIEvent;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    _local2 = new PromotionUIEvent(PromotionUIEvent.CHECK, _promotionType, {isChecked:true});
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
        }
        protected function promotionLinkers_handleMouseEvent(_arg1:MouseEvent):void{
            var _local4:Object;
            var _local2:Promotion = Promotion.getInstance();
            var _local3:PromotionUIEvent;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    _local4 = {};
                    _local4.url = (_local2.promotionlinklist.retrieveItemAt(0) as PromotionLink).linkurl;
                    _local3 = new PromotionUIEvent(PromotionUIEvent.CONFIRM, _promotionType, _local4);
                    break;
            };
            if (Boolean(_local3)){
                dispatchEvent(_local3);
            };
        }
        protected function imageLoader_handleEvent(_arg1:Event):void{
            switch (_arg1.type){
                case Event.COMPLETE:
                    promotionImage = (imageLoader.content as Bitmap).bitmapData.clone();
                    imageLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, imageLoader_handleEvent, false);
                    imageLoader.unload();
                    imageLoader = null;
                    draw();
                    break;
            };
        }
        public function get promotionType():String{
            return (_promotionType);
        }
        public function startInitialize():void{
            var _local1:Promotion = Promotion.getInstance();
            var _local2:URLRequest = new URLRequest(_local1.imageurl);
            imageLoader = new Loader();
            imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoader_handleEvent, false, 0, true);
            imageLoader.load(_local2, new LoaderContext(true));
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class NonmemberPromotionUIAsset extends Bitmap {

        public function NonmemberPromotionUIAsset(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.assets.*;

    public class NonmemberPromotionUI extends PromotionUI {

        public static const PROMOTION_BUTTON_BOUNDS:Rectangle = new Rectangle(79, 102, 102, 39);
        public static const CLOSE_BUTTON_BOUNDS:Rectangle = new Rectangle(232, 5, 23, 23);
        public static const PROMOTION_TYPE:String = "NONMEMBER_PROMOTION";

        public function NonmemberPromotionUI(){
            super(NonmemberPromotionUI.PROMOTION_TYPE);
        }
        override protected function persistenceCloseButton_handleMouseEvent(_arg1:MouseEvent):void{
        }
        override public function startInitialize():void{
            draw();
        }
        override protected function promotionLinkers_handleMouseEvent(_arg1:MouseEvent):void{
            var _local3:Object;
            var _local2:PromotionUIEvent;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    _local3 = {url:WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET)};
                    _local2 = new PromotionUIEvent(PromotionUIEvent.CONFIRM, promotionType, _local3);
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
        }
        override protected function draw():void{
            var _local1:PromotionUIEvent = new PromotionUIEvent(PromotionUIEvent.INITIALIZED, promotionType, null);
            promotionImage = new NonmemberPromotionUIAsset().bitmapData.clone();
            promotionImageContainer = new Sprite();
            promotionImageContainer.mouseEnabled = false;
            promotionImageContainer.graphics.beginBitmapFill(promotionImage, null, false, true);
            promotionImageContainer.graphics.drawRect(0, 0, promotionImage.width, promotionImage.height);
            promotionImageContainer.graphics.endFill();
            addChild(promotionImageContainer);
            promotionLinkers = [];
            var _local2:Sprite = new Sprite();
            _local2.buttonMode = true;
            _local2.useHandCursor = true;
            _local2.graphics.beginFill(0xFF0000, 0);
            _local2.graphics.drawRect(0, 0, NonmemberPromotionUI.PROMOTION_BUTTON_BOUNDS.width, NonmemberPromotionUI.PROMOTION_BUTTON_BOUNDS.height);
            _local2.graphics.endFill();
            _local2.x = NonmemberPromotionUI.PROMOTION_BUTTON_BOUNDS.x;
            _local2.y = NonmemberPromotionUI.PROMOTION_BUTTON_BOUNDS.y;
            _local2.addEventListener(MouseEvent.CLICK, promotionLinkers_handleMouseEvent, false, 0, true);
            addChild(_local2);
            promotionLinkers.push(_local2);
            closeButton = new Sprite();
            closeButton.buttonMode = true;
            closeButton.useHandCursor = true;
            closeButton.graphics.beginFill(0xFF00, 0);
            closeButton.graphics.drawRect(0, 0, NonmemberPromotionUI.CLOSE_BUTTON_BOUNDS.width, NonmemberPromotionUI.CLOSE_BUTTON_BOUNDS.height);
            closeButton.graphics.endFill();
            closeButton.x = NonmemberPromotionUI.CLOSE_BUTTON_BOUNDS.x;
            closeButton.y = NonmemberPromotionUI.CLOSE_BUTTON_BOUNDS.y;
            closeButton.addEventListener(MouseEvent.CLICK, closeButton_handleMouseEvent, false, 0, true);
            addChild(closeButton);
            dispatchEvent(_local1);
        }
        override protected function imageLoader_handleEvent(_arg1:Event):void{
        }
        override protected function closeButton_handleMouseEvent(_arg1:MouseEvent):void{
            var _local2:PromotionUIEvent;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    _local2 = new PromotionUIEvent(PromotionUIEvent.CLOSE, promotionType, null);
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class PromotionUIEvent extends Event {

        public static const INITIALIZED:String = "PROMOTIONUIEVENT_INITIALIZED";
        public static const CONFIRM:String = "PROMOTIONUIEVENT_CORFIRM";
        public static const CHECK:String = "PROMOTIONUIEVENT_CHECK";
        public static const CLOSE:String = "PROMOTIONUIEVENT_CLOSE";

        private var _data:Object;
        private var _promotionType:String;

        public function PromotionUIEvent(_arg1:String, _arg2:String, _arg3:Object, _arg4:Boolean=false, _arg5:Boolean=false){
            super(PromotionUIEvent.validateType(_arg1), _arg4, _arg5);
            _promotionType = _arg2;
            _data = _arg3;
        }
        protected static function validateType(_arg1:String):String{
            switch (_arg1){
                case PromotionUIEvent.INITIALIZED:
                case PromotionUIEvent.CONFIRM:
                case PromotionUIEvent.CLOSE:
                case PromotionUIEvent.CHECK:
                    break;
                default:
                    throw (new Error("PromotionUIEvent : type is not valid."));
            };
            return (_arg1);
        }

        override public function toString():String{
            return (formatToString("PromotionUIEvent", "type", "bubbles", "cancelable", "promotionType", "data"));
        }
        override public function clone():Event{
            return (new PromotionUIEvent(type, promotionType, data, bubbles, cancelable));
        }
        public function get data():Object{
            return (_data);
        }
        public function get promotionType():String{
            return (_promotionType);
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent {
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.events.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.*;

    public class PromotionCanvasUI extends Sprite implements IReleaseMemory {

        private static var instance:PromotionCanvasUI;

        private var eventsMap:EventsMap;
        private var promotionUITable:Dictionary;
        private var canvas:Sprite;
        private var _backgroundEnabled:Boolean;
        private var background:Sprite;

        public function PromotionCanvasUI(_arg1:PromotionCanvasUISingletonEnforcer){
            var _local2:uint;
            var _local3:uint;
            var _local4:uint;
            var _local5:Number;
            super();
            if (!Boolean(_arg1)){
                throw (new Error(("PromotionCanvasUI : PromotionCanvasUI is singleton-class, " + "so you should run PromotionCanvasUI.getInstance().")));
            };
            switch (WebPlayerCoreProperties.playerType){
                case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    _local2 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_WIDTH_BASIC;
                    _local3 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_HEIGHT_BASIC;
                    _local4 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_BACKGROUND_COLOR_BASIC;
                    _local5 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_BACKGROUND_ALPHA_BASIC;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    _local2 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_WIDTH_MINI;
                    _local3 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_HEIGHT_MINI;
                    _local4 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_BACKGROUND_COLOR_MINI;
                    _local5 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_BACKGROUND_ALPHA_MINI;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                    _local2 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_WIDTH_BASIC_PROMO;
                    _local3 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_HEIGHT_BASIC_PROMO;
                    _local4 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_BACKGROUND_COLOR_BASIC_PROMO;
                    _local5 = WebPlayerPromotionProperties.PROMOTION_CANVAS_UI_BACKGROUND_ALPHA_BASIC_PROMO;
                    break;
                default:
                    throw (new Error(("PromotionCanvasUI : " + "WebPlayerCoreProperties.playerType is not valid.")));
            };
            background = new Sprite();
            background.graphics.beginFill(_local4, _local5);
            background.graphics.drawRect(0, 0, _local2, _local3);
            background.graphics.endFill();
            backgroundEnabled = false;
            super.addChild(background);
            canvas = new Sprite();
            super.addChild(canvas);
            promotionUITable = new Dictionary(false);
        }
        public static function getInstance():PromotionCanvasUI{
            if (!Boolean(instance)){
                instance = new PromotionCanvasUI(new PromotionCanvasUISingletonEnforcer());
            };
            return (instance);
        }
        public static function releaseInstance():void{
            if (Boolean(instance)){
                instance.releaseMemory();
                instance = null;
            };
        }

        private function promotionUI_handlePromotionUIEvent(_arg1:PromotionUIEvent):void{
            switch (_arg1.type){
                case PromotionUIEvent.INITIALIZED:
                    drawPromotionUI(_arg1.promotionType);
                    break;
                default:
                    dispatchEvent((_arg1.clone() as PromotionUIEvent));
            };
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            var _local4:EventsMapItem;
            if (Boolean(eventsMap)){
                _local4 = new EventsMapItem(_arg1, _arg2, _arg3);
                eventsMap.removeEventsMapItem(_local4);
                if (eventsMap.eventsMapItemNum === 0){
                    eventsMap.releaseMemory();
                    eventsMap = null;
                };
            };
            super.removeEventListener(_arg1, _arg2, _arg3);
        }
        public function removePromotionUI(_arg1:String):void{
            var _local2:PromotionUI;
            if (Boolean(promotionUITable[_arg1])){
                _local2 = (promotionUITable[_arg1] as PromotionUI);
                canvas.removeChild(_local2);
                _local2.releaseMemory();
                _local2 = null;
                promotionUITable[_arg1] = null;
                delete promotionUITable[_arg1];
            };
            if (canvas.numChildren === 0){
                backgroundEnabled = false;
            };
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (!Boolean(eventsMap)){
                eventsMap = new EventsMap();
            };
            var _local6:EventsMapItem = new EventsMapItem(_arg1, _arg2, _arg3);
            eventsMap.addEventsMapItem(_local6);
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        private function drawPromotionUI(_arg1:String):void{
            var _local2:PromotionUI;
            if (Boolean(promotionUITable[_arg1])){
                _local2 = (promotionUITable[_arg1] as PromotionUI);
                _local2.x = int(((width - _local2.width) * 0.5));
                _local2.y = int(((height - _local2.height) * 0.5));
                _local2.visible = true;
            };
        }
        public function removeTopmostPromotionUI():void{
            var _local1:String = retrievePromotionTypeOfTopmostPromotionUI();
            if (Boolean(_local1)){
                removePromotionUI(_local1);
            };
        }
        private function set backgroundEnabled(_arg1:Boolean):void{
            _backgroundEnabled = _arg1;
            background.mouseEnabled = _arg1;
            background.mouseChildren = _arg1;
            background.visible = _arg1;
            visible = _arg1;
        }
        private function get backgroundEnabled():Boolean{
            return (_backgroundEnabled);
        }
        public function releaseMemory():void{
            var _local1:String;
            var _local2:DisplayObject;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            for (_local1 in promotionUITable) {
                removePromotionUI(_local1);
            };
            promotionUITable = null;
            if (canvas.numChildren !== 0){
                _local3 = 0;
                _local4 = 0;
                _local5 = canvas.numChildren;
                while (_local5 === _local4) {
                    _local2 = canvas.getChildAt(_local3);
                    if (Boolean(_local2)){
                        _local4++;
                        if ((_local2 is PromotionUI)){
                            (_local2 as PromotionUI).releaseMemory();
                        };
                        canvas.removeChild(_local2);
                    };
                    _local3++;
                };
            };
            super.removeChild(canvas);
            canvas = null;
            super.removeChild(background);
            background.graphics.clear();
            background = null;
            removeEventListenersAll();
        }
        public function removeEventListenersAll():void{
            var _local1:EventsMapItem;
            var _local2:Array;
            var _local3:uint;
            var _local4:uint;
            if (Boolean(eventsMap)){
                _local2 = eventsMap.retrieveEventsMapItemsAll();
                if (Boolean(_local2)){
                    _local3 = _local2.length;
                    _local4 = 0;
                    while (_local4 < _local3) {
                        _local1 = (_local2[_local4] as EventsMapItem);
                        removeEventListener(_local1.type, _local1.listener, _local1.useCapture);
                        _local4++;
                    };
                };
            };
        }
        public function showPromotionUI(_arg1:String):void{
            var _local2:PromotionUI;
            if (Boolean(promotionUITable[_arg1])){
                _local2 = (promotionUITable[_arg1] as PromotionUI);
                canvas.addChild(_local2);
            } else {
                switch (_arg1){
                    case PromotionUI.PROMOTION_TYPE:
                        _local2 = new PromotionUI(_arg1);
                        break;
                    case NonmemberPromotionUI.PROMOTION_TYPE:
                        _local2 = new NonmemberPromotionUI();
                        break;
                };
                _local2.visible = false;
                _local2.addEventListener(PromotionUIEvent.INITIALIZED, promotionUI_handlePromotionUIEvent, false, 0, false);
                _local2.addEventListener(PromotionUIEvent.CONFIRM, promotionUI_handlePromotionUIEvent, false, 0, false);
                _local2.addEventListener(PromotionUIEvent.CLOSE, promotionUI_handlePromotionUIEvent, false, 0, false);
                _local2.addEventListener(PromotionUIEvent.CHECK, promotionUI_handlePromotionUIEvent, false, 0, false);
                promotionUITable[_arg1] = _local2;
                canvas.addChild(_local2);
                _local2.startInitialize();
            };
            backgroundEnabled = true;
        }
        override public function addChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("PromotionCanvasUI : can not use addChild method."));
        }
        public function retrievePromotionTypeOfTopmostPromotionUI():String{
            var _local1:String;
            var _local2:PromotionUI = (canvas.getChildAt((canvas.numChildren - 1)) as PromotionUI);
            if (Boolean(_local2)){
                _local1 = _local2.promotionType;
            };
            return (_local1);
        }
        override public function removeChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("PromotionCanvasUI : can not use removeChild method."));
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent 

class PromotionCanvasUISingletonEnforcer {

    public function PromotionCanvasUISingletonEnforcer(){
    }
}
﻿package com.nhn.application.modules.webplayerpromotion.patterns.mediator {
    import com.nhn.application.modules.core.patterns.mediator.*;
    import flash.net.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import de.aggro.utils.*;
    import com.nhn.application.modules.webplayerpromotion.*;

    public class PromotionCanvasUIMediator extends VisualComponentMediator {

        public static const NAME:String = "PromotionCanvasUIMediator";

        public function PromotionCanvasUIMediator(){
            super(name, null);
            if (WebPlayerPromotionProperties.promotionCanvasUIEnabled){
                viewComponent = PromotionCanvasUI.getInstance();
            } else {
                throw (new Error(("PromotionCanvasUIMediator : " + "WebPlayerPromotionProperties.promotionCanvasUIEnable is not valid.")));
            };
        }
        public function showPromotionUI(_arg1:String):void{
            if (WebPlayerPromotionProperties.promotionCanvasUIEnabled){
                switch (WebPlayerCoreProperties.playerType){
                    case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                    case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                        break;
                    default:
                        throw (new Error(("PromotionCanvasUIMediator : " + "WebPlayerCoreProperties.playerType is not valid.")));
                };
                promotionCanvasUI.showPromotionUI(_arg1);
            } else {
                throw (new Error(("PromotionCanvasUIMediator : " + "WebPlayerPromotionProperties.promotionCanvasUIEnable is not valid.")));
            };
        }
        protected function removePromotionUIOfPromotionCanvasUI(_arg1:String):void{
            promotionCanvasUI.removePromotionUI(_arg1);
        }
        override public function onRegister():void{
            super.onRegister();
            promotionCanvasUI.addEventListener(PromotionUIEvent.CONFIRM, promotionCanvasUI_handlePromotionUIEvent, false, 0, false);
            promotionCanvasUI.addEventListener(PromotionUIEvent.CLOSE, promotionCanvasUI_handlePromotionUIEvent, false, 0, false);
            promotionCanvasUI.addEventListener(PromotionUIEvent.CHECK, promotionCanvasUI_handlePromotionUIEvent, false, 0, false);
        }
        override public function onRemove():void{
            promotionCanvasUI.releaseMemory();
            super.onRemove();
        }
        override public function get name():String{
            return (NAME);
        }
        protected function get promotionCanvasUI():PromotionCanvasUI{
            return ((viewComponent as PromotionCanvasUI));
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }
        public function getPromotionCanvasUI():PromotionCanvasUI{
            return (promotionCanvasUI);
        }
        protected function promotionCanvasUI_handlePromotionUIEvent(_arg1:PromotionUIEvent):void{
            var _local2:String;
            switch (_arg1.type){
                case PromotionUIEvent.CONFIRM:
                    navigateToURL(new URLRequest(_arg1.data.url), "_blank");
                    removePromotionUIOfPromotionCanvasUI(_arg1.promotionType);
                    break;
                case PromotionUIEvent.CLOSE:
                    removePromotionUIOfPromotionCanvasUI(_arg1.promotionType);
                    break;
                case PromotionUIEvent.CHECK:
                    _local2 = "";
                    if (_arg1.data.isChecked){
                        _local2 = "true";
                    } else {
                        _local2 = "false";
                    };
                    CookieUtil.setCookie((WebPlayerPromotionProperties.PROMOTION_NAME + WebPlayerPromotionProperties.PROMOTION_COOKIE_CHECK_OUT), _local2, WebPlayerPromotionProperties.PROMOTION_COOKIE_CONSISTANT_ONE_DAY);
                    removePromotionUIOfPromotionCanvasUI(_arg1.promotionType);
                    break;
            };
        }

    }
}//package com.nhn.application.modules.webplayerpromotion.patterns.mediator 
﻿package com.nhn.application.modules.webplayerpromotion.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class WebPlayerPromotionPipeMessages {

        public static const START_PROMOTION:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERPROMOTION_START_PROMOTION", DataTransferProtocol);
        public static const RESPOND_GET_PROMOTION_CANVAS_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERPROMOTION_RESPOND_GET_PROMOTION_CANVAS_UI", DataTransferProtocol);
        public static const REQUEST_GET_PROMOTION_CANVAS_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERPROMOTION_REQUEST_GET_PROMOTION_CANVAS_UI", DataTransferProtocol);
        public static const START_NONMEMBER_PROMOTION:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERPROMOTION_START_NONMEMBER_PROMOTION", DataTransferProtocol);

    }
}//package com.nhn.application.modules.webplayerpromotion.pipemessages 
﻿package com.nhn.application.modules.webplayercontainer.notifications {

    public class WebPlayerContainerNotifications {

        public static const WPC_HWPWPM_REQUEST_GET_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPWPM_REQUEST_GET_WEB_PLAYER_WORKSPACE_UI";
        public static const WPC_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE";
        public static const WPC_HWPWPM_RESPOND_GET_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPWPM_RESPOND_GET_WEB_PLAYER_WORKSPACE_UI";
        public static const ORGANIZE_MODULE:String = "NOTI_WEBPLAYERCONTAINER_ORGANIZE_MODULE";
        public static const WPC_HWCPM_REQUEST_MUSIC_INFO_GET_ARTICLE:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_REQUEST_MUSIC_INFO_GET_ARTICLE";
        public static const WPC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST";
        public static const WPC_HWPWPM_REGISTER_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPWPM_REGISTER_WEB_PLAYER_WORKSPACE_UI";
        public static const WPC_HWCPM_RESPOND_COMMON_SECURITY_ERROR:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_RESPOND_COMMON_SECURITY_ERROR";
        public static const WPC_HFCPM_STREAM_SERVICE_STOP:String = "NOTI_WEBPLAYERCONTAINER_WPC_HFCPM_STREAM_SERVICE_STOP";
        public static const WPC_HWPEHPM_REQUEST_GET_ALERT_CANVAS_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPEHPM_REQUEST_GET_ALERT_CANVAS_UI";
        public static const WPC_HWCPM_RESPOND_AUTHORIZATION_CHECK_VALIDATION:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_RESPOND_AUTHORIZATION_CHECK_VALIDATION";
        public static const WPC_HWPWPM_PREPARED_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPWPM_PREPARED_WEB_PLAYER_WORKSPACE_UI";
        public static const WPC_HWPWPM_ADD_EMPTY_SONG_LIST:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPWPM_ADD_EMPTY_SONG_LIST";
        public static const WPC_HWCPM_REQUEST_AUTHORIZATION_CHECK_VALIDATION:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_REQUEST_AUTHORIZATION_CHECK_VALIDATION";
        public static const WPC_HWPPPM_RESPOND_GET_PROMOTION_CANVAS_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPPPM_RESPOND_GET_PROMOTION_CANVAS_UI";
        public static const WPC_HWPPPM_REQUEST_GET_PROMOTION_CANVAS_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPPPM_REQUEST_GET_PROMOTION_CANVAS_UI";
        public static const WPC_HWPEHPM_RESPOND_GET_ALERT_CANVAS_UI:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPEHPM_RESPOND_GET_ALERT_CANVAS_UI";
        public static const WPC_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST";
        public static const WPC_HWPPPM_START_PROMOTION:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPPPM_START_PROMOTION";
        public static const WPC_HWCPM_REQUEST_MUSIC_INFO_GET_SONG_LIST:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_REQUEST_MUSIC_INFO_GET_SONG_LIST";
        public static const WPC_HWPWPM_ADD_TRACKIDS_AND_LAUNCH_OPTION:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWPWPM_ADD_TRACKIDS_AND_LAUNCH_OPTION";
        public static const WPC_HWCPM_RESPOND_COMMON_IO_ERROR:String = "NOTI_WEBPLAYERCONTAINER_WPC_HWCPM_RESPOND_COMMON_IO_ERROR";

    }
}//package com.nhn.application.modules.webplayercontainer.notifications 
﻿package com.nhn.application.modules.webplayercontainer {
    import flash.display.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.webplayercontainer.patterns.mediator.*;
    import com.nhn.application.modules.application.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;
    import com.nhn.application.modules.webplayercontainer.notifications.*;
    import com.nhn.application.modules.webplayercontainer.patterns.command.*;
    import com.nhn.application.modules.webplayerpromotion.pipemessages.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WebPlayerContainerModule extends ApplicationModule {

        public static const NAME_BASE:String = "WebPlayerContainerModule";

        protected var _webPlayerWorkspaceUI:IMusicPlayListManager;

        public function WebPlayerContainerModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        protected function get webPlayerContainerUI():Sprite{
            return ((getVisualComponent() as Sprite));
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getType()){
                case DataTransferProtocol.TYPE:
                    switch (_arg1.getHeaderByIMessageHeader().name){
                        case WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_COMMON_IO_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_COMMON_SECURITY_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_CHECK_VALIDATION.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_AUTHORIZATION_CHECK_VALIDATION, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_SONG_LIST.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_ARTICLE.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE, _arg1.getBody(), null);
                            break;
                        case WebPlayerWorkspacePipeMessages.RESPOND_GET_WEB_PLAYER_WORKSPACE_UI.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWPWPM_RESPOND_GET_WEB_PLAYER_WORKSPACE_UI, _arg1.getBody(), null);
                            break;
                        case WebPlayerWorkspacePipeMessages.PREPARED_WEB_PLAYER_WORKSPACE_UI.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWPWPM_PREPARED_WEB_PLAYER_WORKSPACE_UI, null, null);
                            break;
                        case WebPlayerErrorHandlingPipeMessages.RESPOND_GET_ALERT_CANVAS_UI.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWPEHPM_RESPOND_GET_ALERT_CANVAS_UI, _arg1.getBody(), null);
                            break;
                        case WebPlayerPromotionPipeMessages.RESPOND_GET_PROMOTION_CANVAS_UI.name:
                            facade.sendNotification(WebPlayerContainerNotifications.WPC_HWPPPM_RESPOND_GET_PROMOTION_CANVAS_UI, _arg1.getBody(), null);
                            break;
                        default:
                            throw (new Error(("WebPlayerContainerModule : " + "message.getHeaderByIMessageHeader().name is not valid.")));
                    };
                    break;
                default:
                    super.handlePipeMessage(_arg1);
            };
        }
        public function get webPlayerWorkspaceUI():IMusicPlayListManager{
            return (_webPlayerWorkspaceUI);
        }
        override protected function initialize(_arg1:ModuleInitializeData):void{
            super.initialize(_arg1);
            _webPlayerWorkspaceUI = (_arg1.data["webPlayerWorkspaceUI"] as IMusicPlayListManager);
        }
        override protected function registerMainVisualComponentMediator():void{
            facade.registerMainVisualComponentMediator(new WebPlayerContainerUIMediator());
            super.registerMainVisualComponentMediator();
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_CHECK_VALIDATION.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_SONG_LIST.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_ARTICLE.name);
            _local1.push(WebPlayerWorkspacePipeMessages.RESPOND_GET_WEB_PLAYER_WORKSPACE_UI.name);
            _local1.push(WebPlayerWorkspacePipeMessages.PREPARED_WEB_PLAYER_WORKSPACE_UI.name);
            _local1.push(WebPlayerErrorHandlingPipeMessages.RESPOND_GET_ALERT_CANVAS_UI.name);
            _local1.push(WebPlayerPromotionPipeMessages.RESPOND_GET_PROMOTION_CANVAS_UI.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayercontainer 
﻿package com.nhn.application.modules.webplayercontainer {

    public class WebPlayerContainerProperties {

        public static const CLCM_NAME:String = "ContainerLocalConnectionMediator";

        private static var _isPlayerInitAddedTrack:Boolean = false;

        public static function get isPlayerInitAddedTrackPlay():Boolean{
            var _local1:Boolean = WebPlayerContainerProperties._isPlayerInitAddedTrack;
            WebPlayerContainerProperties._isPlayerInitAddedTrack = false;
            return (_local1);
        }
        public static function set isPlayerInitAddedTrackPlay(_arg1:Boolean):void{
            WebPlayerContainerProperties._isPlayerInitAddedTrack = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayercontainer 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import flash.display.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayercontainer.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;

    public class WPCMBaseCommand extends BasicSimpleCommand {

        protected function get webPlayerContainerUI():Sprite{
            return (webPlayerContainerUIMediator.getWebPlayerContainerUI());
        }
        protected function get requestIDTableProxy():RequestIDTableProxy{
            var _local1:IProxy = facade.retrieveProxy(RequestIDTableProxy.NAME);
            return ((_local1 as RequestIDTableProxy));
        }
        protected function get webPlayerContainerUIMediator():WebPlayerContainerUIMediator{
            var _local1:IMediator = facade.retrieveMediator(WebPlayerContainerUIMediator.NAME);
            return ((_local1 as WebPlayerContainerUIMediator));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;

    public class WPC_HWPWPM_RequestGetWebPlayerWorkspaceUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerWorkspacePipeMessages.REQUEST_GET_WEB_PLAYER_WORKSPACE_UI, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.pipemessages.*;

    public class WPC_HWPPPM_StartPromotionCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerPromotionPipeMessages.START_PROMOTION, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPC_HWCPM_RequestMusicInfoGetSongListCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.commaSeparatedTrackIDs as String)))))) || (!(_local2.hasOwnProperty("launchOption"))))){
                throw (new Error(("WPC_HWCPM_RequestMusicInfoGetSongListCommand : " + "body is not valid.")));
            };
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_SONG_LIST, _local2);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayercontainer.patterns.mediator.*;
    import com.nhn.application.modules.webplayercontainer.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.webplayercontainer.notifications.*;
    import com.nhn.application.modules.webplayerpromotion.*;
    import com.nhn.application.modules.wascommunication.*;
    import com.nhn.application.modules.webplayerworkspace.*;
    import com.nhn.application.modules.fmscommunication.*;

    public class OrganizeModuleCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:WebPlayerContainerModule = (basicFacade.retrieveOwnModuleMediator().getModule() as WebPlayerContainerModule);
            var _local3:WebPlayerErrorHandlingModule = new WebPlayerErrorHandlingModule(ModuleNameFactory.generateModuleName(WebPlayerErrorHandlingModule.NAME_BASE));
            basicFacade.registerModule(_local3);
            _local3.start();
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                sendNotification(WebPlayerContainerNotifications.WPC_HWPEHPM_REQUEST_GET_ALERT_CANVAS_UI, null, null);
            };
            var _local4:WASCommunicationModule = new WASCommunicationModule(ModuleNameFactory.generateModuleName(WASCommunicationModule.NAME_BASE));
            basicFacade.registerModule(_local4);
            _local4.start();
            var _local5:FMSCommunicationModule = new FMSCommunicationModule(ModuleNameFactory.generateModuleName(FMSCommunicationModule.NAME_BASE));
            basicFacade.registerModule(_local5);
            _local5.start();
            var _local6:WebPlayerWorkspaceModule = new WebPlayerWorkspaceModule(ModuleNameFactory.generateModuleName(WebPlayerWorkspaceModule.NAME_BASE), new ModuleInitializeData({webPlayerWorkspaceUI:_local2.webPlayerWorkspaceUI}));
            basicFacade.registerModule(_local6);
            _local6.start();
            sendNotification(WebPlayerContainerNotifications.WPC_HWPWPM_REQUEST_GET_WEB_PLAYER_WORKSPACE_UI, null, null);
            var _local7:WebPlayerPromotionModule = new WebPlayerPromotionModule(ModuleNameFactory.generateModuleName(WebPlayerPromotionModule.NAME_BASE));
            basicFacade.registerModule(_local7);
            _local7.start();
            if (WebPlayerPromotionProperties.promotionCanvasUIEnabled){
                sendNotification(WebPlayerContainerNotifications.WPC_HWPPPM_REQUEST_GET_PROMOTION_CANVAS_UI, null, null);
            };
            facade.registerMediator(new WebPlayerLaunchUnitHandlerMediator());
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import flash.display.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;

    public class WPC_HWPWPM_RespondGetWebPlayerWorkspaceUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.webPlayerWorkspaceUI as IMusicPlayListManager)))))){
                throw (new Error(("WPC_HWPWPM_RespondGetWebPlayerWorkspaceUICommand : " + "body is not valid.")));
            };
            var _local3:DisplayObject = (_local2.webPlayerWorkspaceUI as DisplayObject);
            if (!Boolean(_local3)){
                throw (new Error(("WPC_HWPWPM_RespondGetWebPlayerWorkspaceUICommand : " + "webPlayerWorkspaceUI is not valid.")));
            };
            webPlayerContainerUIMediator.addToWorkspaceUILayer(_local3);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayercontainer.patterns.mediator.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayercontainer.notifications.*;

    public class WPC_HWPWPM_PreparedWebPlayerWorkspaceUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object;
            var _local3:WebPlayerLaunchUnitHandlerMediator = (facade.retrieveMediator(WebPlayerLaunchUnitHandlerMediator.NAME) as WebPlayerLaunchUnitHandlerMediator);
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    _local3.addSequenceOfCLCM();
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                    break;
            };
            facade.removeCommand(WebPlayerContainerNotifications.WPC_HWPWPM_PREPARED_WEB_PLAYER_WORKSPACE_UI);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import flash.display.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.patterns.mediator.viewcomponent.*;

    public class WPC_HWPPPM_RespondGetPromotionCanvasUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.promotionCanvasUI as PromotionCanvasUI)))))){
                throw (new Error(("WPC_HWPPPM_RespondGetPromotionCanvasUICommand : " + "body is not valid.")));
            };
            var _local3:DisplayObject = (_local2.promotionCanvasUI as DisplayObject);
            if (!Boolean(_local3)){
                throw (new Error(("WPC_HWPPPM_RespondGetPromotionCanvasUICommand : " + "promotionCanvasUI is not valid.")));
            };
            webPlayerContainerUIMediator.addToPromotionUILayer(_local3);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;

    public class WPC_HWPWPM_AddTrackIdsAndLaunchOptionCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerWorkspacePipeMessages.ADD_TRACKIDS_AND_LAUNCH_OPTION, _arg1.getBody(), 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPC_HWCPM_RequestCommonCancelRequestCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("WPC_HWCPM_RequestCommonCancelRequestCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_COMMON_CANCEL_REQUEST, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;

    public class WPC_HWPWPM_AddEmptySongListCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerWorkspacePipeMessages.ADD_EMPTY_SONG_LIST, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPC_HFCPM_StreamServiceStopCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_STOP, _arg1.getBody(), 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayercontainer.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.webplayercontainer.notifications.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:WebPlayerContainerModule = (basicFacade.retrieveOwnModuleMediator().getModule() as WebPlayerContainerModule);
            facade.registerProxy(new RequestIDTableProxy());
            facade.registerCommand(WebPlayerContainerNotifications.ORGANIZE_MODULE, OrganizeModuleCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, WPC_HWCPM_RequestCommonCancelRequestCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_COMMON_IO_ERROR, WPC_HWCPM_RespondCommonIOErrorCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_COMMON_SECURITY_ERROR, WPC_HWCPM_RespondCommonSecurityErrorCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_REQUEST_AUTHORIZATION_CHECK_VALIDATION, WPC_HWCPM_RequestAuthorizationCheckValidationCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_AUTHORIZATION_CHECK_VALIDATION, WPC_HWCPM_RespondAuthorizationCheckValidationCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_REQUEST_MUSIC_INFO_GET_SONG_LIST, WPC_HWCPM_RequestMusicInfoGetSongListCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST, WPC_HWCPM_RespondMusicInfoGetSongListCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_REQUEST_MUSIC_INFO_GET_ARTICLE, WPC_HWCPM_RequestMusicInfoGetArticleCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE, WPC_HWCPM_RespondMusicInfoGetArticleCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HFCPM_STREAM_SERVICE_STOP, WPC_HFCPM_StreamServiceStopCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPWPM_ADD_TRACKIDS_AND_LAUNCH_OPTION, WPC_HWPWPM_AddTrackIdsAndLaunchOptionCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPWPM_REGISTER_WEB_PLAYER_WORKSPACE_UI, WPC_HWPWPM_RegisterWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPWPM_REQUEST_GET_WEB_PLAYER_WORKSPACE_UI, WPC_HWPWPM_RequestGetWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPWPM_RESPOND_GET_WEB_PLAYER_WORKSPACE_UI, WPC_HWPWPM_RespondGetWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPWPM_PREPARED_WEB_PLAYER_WORKSPACE_UI, WPC_HWPWPM_PreparedWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPWPM_ADD_EMPTY_SONG_LIST, WPC_HWPWPM_AddEmptySongListCommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPEHPM_REQUEST_GET_ALERT_CANVAS_UI, WPC_HWPEHPM_RequestGetAlertCanvasUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPEHPM_RESPOND_GET_ALERT_CANVAS_UI, WPC_HWPEHPM_RespondGetAlertCanvasUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPPPM_REQUEST_GET_PROMOTION_CANVAS_UI, WPC_HWPPPM_RequestGetPromotionCanvasUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPPPM_RESPOND_GET_PROMOTION_CANVAS_UI, WPC_HWPPPM_RespondGetPromotionCanvasUICommand);
            facade.registerCommand(WebPlayerContainerNotifications.WPC_HWPPPM_START_PROMOTION, WPC_HWPPPM_StartPromotionCommand);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;

    public class WPC_HWPEHPM_RequestGetAlertCanvasUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerErrorHandlingPipeMessages.REQUEST_GET_ALERT_CANVAS_UI, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPC_HWCPM_RequestAuthorizationCheckValidationCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = {};
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_CHECK_VALIDATION, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPC_HWCPM_RespondMusicInfoGetSongListCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.songList as SongList))) : false)))) || (!(_local2.hasOwnProperty("launchOption"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPC_HWCPM_RespondMusicInfoGetSongListCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.pipemessages.*;

    public class WPC_HWPPPM_RequestGetPromotionCanvasUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerPromotionPipeMessages.REQUEST_GET_PROMOTION_CANVAS_UI, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPC_HWCPM_RequestMusicInfoGetArticleCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.myListSeq as String)))))) || (!(_local2.hasOwnProperty("launchOption"))))) || (((Boolean((_local2.args as Array))) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)))){
                throw (new Error(("WPC_HWCPM_RequestMusicInfoGetArticleCommand : " + "body is not valid.")));
            };
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_ARTICLE, _local2);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPC_HWCPM_RespondCommonSecurityErrorCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("WPC_HWCPM_RespondCommonSecurityErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPC_HWCPM_RespondMusicInfoGetArticleCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.article as Article))) : false)))) || (!(_local2.hasOwnProperty("launchOption"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPC_HWCPM_RespondMusicInfoGetArticleCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import flash.display.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.*;

    public class WPC_HWPEHPM_RespondGetAlertCanvasUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.alertCanvasUI as AlertCanvasUI)))))){
                throw (new Error(("WPC_HWPEHPM_RespondGetAlertCanvasUICommand : " + "body is not valid.")));
            };
            var _local3:DisplayObject = (_local2.alertCanvasUI as DisplayObject);
            if (!Boolean(_local3)){
                throw (new Error(("WPC_HWPEHPM_RespondGetAlertCanvasUICommand : " + "alertCanvasUI is not valid.")));
            };
            webPlayerContainerUIMediator.addToAlertUILayer(_local3);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPC_HWCPM_RespondCommonIOErrorCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("WPC_HWCPM_RespondCommonIOErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class WPC_HWPWPM_RegisterWebPlayerWorkspaceUICommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPC_HWCPM_RespondAuthorizationCheckValidationCommand extends WPCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPC_HWCPM_RespondAuthorizationCheckValidationCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.command 
﻿package com.nhn.application.modules.webplayercontainer.patterns.mediator {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.webplayercontainer.notifications.*;

    public class WebPlayerContainerUIMediator extends VisualComponentMediator {

        public static const NAME:String = "WebPlayerContainerUIMediator";

        private var alertUILayer:Sprite;
        private var workspaceUILayer:Sprite;
        private var promotionUILayer:Sprite;

        public function WebPlayerContainerUIMediator(){
            super(name, new Sprite());
        }
        protected function get webPlayerContainerUI():Sprite{
            return ((viewComponent as Sprite));
        }
        override public function onRemove():void{
            webPlayerContainerUI.removeChild(workspaceUILayer);
            webPlayerContainerUI.removeChild(promotionUILayer);
            webPlayerContainerUI.removeChild(alertUILayer);
            workspaceUILayer = null;
            promotionUILayer = null;
            alertUILayer = null;
            webPlayerContainerUI.removeEventListener(Event.ADDED_TO_STAGE, webPlayerContainerUI_handleEvent, false);
            super.onRemove();
        }
        public function addToWorkspaceUILayer(_arg1:DisplayObject):void{
            if (((!(Boolean(workspaceUILayer))) || ((workspaceUILayer.numChildren > 1)))){
                throw (new Error(("WebPlayerContainerUIMediator : " + "workspaceUILayer is not valid.")));
            };
            workspaceUILayer.addChild(_arg1);
        }
        public function addToPromotionUILayer(_arg1:DisplayObject):void{
            if (((!(Boolean(promotionUILayer))) || ((promotionUILayer.numChildren > 1)))){
                throw (new Error(("WebPlayerContainerUIMediator : " + "promotionUILayer is not valid.")));
            };
            promotionUILayer.addChild(_arg1);
        }
        override public function onRegister():void{
            super.onRegister();
            workspaceUILayer = new Sprite();
            promotionUILayer = new Sprite();
            alertUILayer = new Sprite();
            webPlayerContainerUI.addChild(workspaceUILayer);
            webPlayerContainerUI.addChild(promotionUILayer);
            webPlayerContainerUI.addChild(alertUILayer);
            webPlayerContainerUI.addEventListener(Event.ADDED_TO_STAGE, webPlayerContainerUI_handleEvent, false, int.MIN_VALUE, false);
        }
        override public function get name():String{
            return (NAME);
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        private function webPlayerContainerUI_handleEvent(_arg1:Event):void{
            switch (_arg1.type){
                case Event.ADDED_TO_STAGE:
                    webPlayerContainerUI.removeEventListener(Event.ADDED_TO_STAGE, webPlayerContainerUI_handleEvent, false);
                    facade.sendNotification(WebPlayerContainerNotifications.ORGANIZE_MODULE);
                    break;
                default:
                    throw (new Error(("WebPlayerContainerUIMediator : " + "e.type is not valid.")));
            };
        }
        public function getWebPlayerContainerUI():Sprite{
            return (webPlayerContainerUI);
        }
        public function addToAlertUILayer(_arg1:DisplayObject):void{
            if (((!(Boolean(alertUILayer))) || ((alertUILayer.numChildren > 1)))){
                throw (new Error(("WebPlayerContainerUIMediator : " + "alertUILayer is not valid.")));
            };
            alertUILayer.addChild(_arg1);
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.mediator 
﻿package com.nhn.application.modules.webplayercontainer.patterns.mediator {
    import flash.events.*;
    import flash.utils.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import flash.system.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayercontainer.*;
    import com.nhn.application.modules.core.notifications.*;
    import com.nhn.application.modules.webplayercontainer.notifications.*;
    import com.nhn.application.ns.*;
    import flash.external.*;

    public class WebPlayerLaunchUnitHandlerMediator extends BasicMediator {

        public static const NAME:String = "WebPlayerLaunchUnitHandlerMediator";

        private var isAddedPostInformation:Boolean;
        private var localConnectionTimer:Timer;
        private var isAddedSavedTrackIDs:Boolean;

        public function WebPlayerLaunchUnitHandlerMediator(){
            super(name, null);
            isAddedPostInformation = false;
            isAddedSavedTrackIDs = false;
            Security.allowDomain("*");
        }
        private function stopPreviewTrackID():void{
            if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW){
                sendNotification(WebPlayerContainerNotifications.WPC_HFCPM_STREAM_SERVICE_STOP, {automaticRequest:false}, null);
            };
        }
        override public function onRegister():void{
            var _local1:Object;
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    _local1 = {};
                    _local1.myListSeq = WebPlayerCoreProperties.postingListSequence;
                    _local1.launchOption = (WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK | WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK);
                    sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_REQUEST_MUSIC_INFO_GET_ARTICLE, _local1, null);
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                    ExternalInterface.addCallback(WebPlayerCoreProperties.METHOD_NAME_PREVIEW_TRACK_ID, previewTrackID);
                    ExternalInterface.addCallback(WebPlayerCoreProperties.METHOD_NAME_STOP_PREVIEW_TRACK_ID, stopPreviewTrackID);
                    break;
                default:
                    throw (new Error(("WebPlayerLaunchUnitHandlerMediator : " + "WebPlayerCoreProperties.containerType is not valid.")));
            };
        }
        private function previewTrackID(_arg1:String):void{
            var _local2:Object;
            if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW){
                trace((">>>>> preview came!" + _arg1));
                if (WebPlayerCoreProperties.validateTrackID(_arg1)){
                    _local2 = {};
                    _local2.commaSeparatedTrackIDs = _arg1;
                    _local2.launchOption = (WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK | WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK);
                    sendNotification(WebPlayerContainerNotifications.WPC_HWCPM_REQUEST_MUSIC_INFO_GET_SONG_LIST, _local2, null);
                };
                //unresolved jump
            };
        }
        private function localConnectionTimer_handleTimerEvent(_arg1:TimerEvent):void{
            switch (_arg1.type){
                case TimerEvent.TIMER:
                    localConnectionTimer.removeEventListener(TimerEvent.TIMER, localConnectionTimer_handleTimerEvent, false);
                    localConnectionTimer.stop();
                    localConnectionTimer.reset();
                    localConnectionTimer = null;
                    addSequenceOfCLCM_internal();
                    break;
                default:
                    throw (new Error(("WebPlayerLaunchUnitHandlerMediator : " + "e.type is not valid.")));
            };
        }
        public function launchNaverMusicPlayer(_arg1:Array, _arg2:int):void{
            var isAddedTrackIDs:* = false;
            var body:* = null;
            var savedTrackIDs:* = null;
            var trackIDs:* = _arg1;
            var launchOption:* = _arg2;
            if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP){
                isAddedTrackIDs = false;
                if (!isAddedSavedTrackIDs){
                    savedTrackIDs = WebPlayerCoreProperties.nhn_webplayer_ns::readPlayListFromCookie();
                    if (((Boolean(savedTrackIDs)) && ((savedTrackIDs.length > 0)))){
                        isAddedTrackIDs = true;
                        body = {};
                        body.commaSeparatedTrackIDs = savedTrackIDs.join(",");
                        body.launchOption = (WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK | WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK);
                        WebPlayerContainerProperties.isPlayerInitAddedTrackPlay = !((trackIDs === null));
                    };
                };
                switch ((launchOption & 0xFF)){
                    case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_NONE_TRACK:
                        trackIDs = null;
                        break;
                    case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_FRONT_TRACK:
                    case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK:
                        if (((!(Boolean(trackIDs))) || ((trackIDs.length <= 0)))){
                            trackIDs = null;
                        };
                        break;
                    default:
                        launchOption = ((launchOption & 0xFF00) | WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK);
                        if (((!(Boolean(trackIDs))) || ((trackIDs.length <= 0)))){
                            trackIDs = null;
                        };
                };
                switch ((launchOption & 0xFF00)){
                    case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK:
                    case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_OLD_FIRST_TRACK:
                        WebPlayerContainerProperties.isPlayerInitAddedTrackPlay = false;
                        break;
                    case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK:
                        break;
                    default:
                        launchOption = ((launchOption & 0xFF) | WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK);
                };
                if (((Boolean(trackIDs)) && ((trackIDs.length > 0)))){
                    isAddedTrackIDs = true;
                    body = {};
                    body.commaSeparatedTrackIDs = trackIDs.join(",");
                    body.launchOption = launchOption;
                    sendNotification(WebPlayerContainerNotifications.WPC_HWPWPM_ADD_TRACKIDS_AND_LAUNCH_OPTION, body);
                };
                if (!isAddedSavedTrackIDs){
                    if (!isAddedTrackIDs){
                        sendNotification(WebPlayerContainerNotifications.WPC_HWPWPM_ADD_EMPTY_SONG_LIST, null, null);
                    };
                };
                isAddedSavedTrackIDs = true;
                try {
                    ExternalInterface.call("self.focus");
                } catch(e:Error) {
                };
            } else {
                throw (new Error(("WebPlayerLaunchUnitHandlerMediator : " + "type is not valid.")));
            };
        }
        override public function onRemove():void{
            super.onRemove();
        }
        override public function get name():String{
            return (NAME);
        }
        public function addTrackIDs(_arg1:Array):void{
            var _local2 = (WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK | WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK);
            launchNaverMusicPlayer(_arg1, _local2);
        }
        private function removeSequenceOfCLCM():void{
            var _local1:Object;
            var _local2:Boolean;
            if (facade.hasMediator(WebPlayerContainerProperties.CLCM_NAME)){
                _local1 = {};
                _local1.mediatorName = WebPlayerContainerProperties.CLCM_NAME;
                sendNotification(CoreNotifications.LCM_CLOSE, _local1, null);
                _local2 = _local1.connected;
                if (_local2){
                    throw (new Error(("WebPlayerLaunchUnitHandlerMediator : " + "CLCM does not disconnected.\n")));
                };
                facade.removeMediator(WebPlayerContainerProperties.CLCM_NAME);
            };
        }
        private function addSequenceOfCLCM_internal():void{
            var _local1:LocalConnectionMediator;
            var _local2:Array;
            var _local3:Boolean;
            var _local4:Object;
            _local1 = new LocalConnectionMediator(WebPlayerContainerProperties.CLCM_NAME, WebPlayerCoreProperties.CONNECTION_NAME_WEB_PLAYER_CONTAINER_POPUP);
            facade.registerMediator(_local1);
            _local2 = [];
            _local2.push("*");
            sendNotification(CoreNotifications.LCM_ALLOW_DOMAIN, {
                mediatorName:WebPlayerContainerProperties.CLCM_NAME,
                domains:_local2
            }, null);
            sendNotification(CoreNotifications.LCM_SET_CLIENT, {
                mediatorName:WebPlayerContainerProperties.CLCM_NAME,
                client:this
            }, null);
            _local4 = {};
            _local4.mediatorName = WebPlayerContainerProperties.CLCM_NAME;
            sendNotification(CoreNotifications.LCM_CONNECT, _local4, null);
            _local3 = _local4.connected;
            if (_local3){
            };
            ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_CONTAINER_IS_READY);
            if (!_local3){
                removeSequenceOfCLCM();
                WebPlayerCoreProperties.closeWindow();
            };
        }
        public function addSequenceOfCLCM():void{
            localConnectionTimer = new Timer(WebPlayerCoreProperties.TIMER_DELAY_LOCAL_CONNECTION, 1);
            localConnectionTimer.addEventListener(TimerEvent.TIMER, localConnectionTimer_handleTimerEvent, false, 0, false);
            localConnectionTimer.start();
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }

    }
}//package com.nhn.application.modules.webplayercontainer.patterns.mediator 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.controls.listClasses.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;

    public class NaverBasicPlayerCellRenderer extends UIComponent implements ICellRenderer {

        private static const TEXT_GAP:int = 50;
        private static const INTERVAL_GAP:int = 15;

        private static var _defaultSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _selectedSongSingerTextColor:int = 0x777777;
        private static var _selectBgColor:int = 0xF5F5F5;
        private static var is_adult_icon:Class = NaverBasicPlayerCellRenderer_is_adult_icon;
        private static var indicatorColor:int = 0x555555;
        private static var checkBox_icon:Class = NaverBasicPlayerCellRenderer_checkBox_icon;
        private static var selected_icon:Class = NaverBasicPlayerCellRenderer_selected_icon;
        private static var _overedSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _activeSongTitleTextColor:int = 0;
        private static var _defaultBgColor:int = 0xFFFFFF;
        private static var _selectedSongTitleTextColor:int = 0;
        public static var _defaultSongIndexFormatColor:int = 0x666666;
        private static var _overedSongSingerTextColor:int = 0x777777;
        private static var album_icon:Class = NaverBasicPlayerCellRenderer_album_icon;
        private static var _defaultSongTitleTextColor:int = 0;
        private static var _activeSongSingerTextColor:int = 0x777777;
        private static var _overedSongIndexFormatColor:int = 0x32C100;
        private static var _overedSongTitleTextColor:int = 0;
        private static var mp3_icon:Class = NaverBasicPlayerCellRenderer_mp3_icon;
        private static var _selectedSongIndexFormatColor:int = 0x32C100;
        private static var _activeSongDelimeterTextColor:int = 0xCCCCCC;
        private static var listen_icon:Class = NaverBasicPlayerCellRenderer_listen_icon;
        private static var _defaultSongSingerTextColor:int = 0x777777;
        private static var _activeSongIndexFormatColor:int = 0x32C100;
        private static var _selectedSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _optionalBGColor:int = 0xFFFFFF;

        private var flowCount:Number = 0;
        private var mp3_icon_instance;
        private var _data:Object;
        private var flowPixelUnit:Number = 1;
        private var listen_icon_instance;
        private var _isPlaying:Boolean = false;
        private var _selected:Boolean = false;
        private var checkBox:CheckBox;
        private var songIndex:TextField;
        private var intervalId:Number;
        private var is_adult_icon_instance;
        private var songTitle:TextField;
        public var _listData:ListData;
        private var _selectAction:Boolean;
        private var album_icon_instance;
        private var base:Sprite;
        private var flowTextSpace:Number = 10;
        private var previewMask:Shape;
        private var abstractPreview:Sprite;
        private var _isMouseOver:Boolean = false;
        private var abstractBitmap:Bitmap;
        private var songDelimeter:TextField;
        private var songSinger:TextField;
        private var mouseEventRect:Sprite;
        private var _setMouseState:String;

        public function NaverBasicPlayerCellRenderer(){
            createBase();
            createChildren();
        }
        public static function get defaultSongDelimeterTextColor():int{
            return (_defaultSongDelimeterTextColor);
        }
        public static function set overedSongIndexFormatColor(_arg1:int):void{
        }
        public static function get overedSongTitleTextColor():int{
            return (_overedSongTitleTextColor);
        }
        public static function set defaultSongSingerTextColor(_arg1:int):void{
        }
        public static function set defaultSongDelimeterTextColor(_arg1:int):void{
        }
        public static function set overedSongTitleTextColor(_arg1:int):void{
        }
        public static function get activeSongDelimeterTextColor():int{
            return (_activeSongDelimeterTextColor);
        }
        public static function get defaultSongIndexFormatColor():int{
            return (_defaultSongIndexFormatColor);
        }
        public static function get selectBgColor():int{
            return (_selectBgColor);
        }
        public static function set activeSongDelimeterTextColor(_arg1:int):void{
        }
        public static function set selectBgColor(_arg1:int):void{
        }
        public static function set defaultSongIndexFormatColor(_arg1:int):void{
        }
        public static function updateAsset(_arg1):void{
            album_icon = _arg1.getDefinition("album_info");
            mp3_icon = _arg1.getDefinition("mp3_icon");
            listen_icon = _arg1.getDefinition("listen_icon");
            checkBox_icon = _arg1.getDefinition("checkBox_icon");
            selected_icon = _arg1.getDefinition("selected_icon");
            is_adult_icon = _arg1.getDefinition("is_adult_icon");
        }
        public static function set defaultSongTitleTextColor(_arg1:int):void{
        }
        public static function set activeSongIndexFormatColor(_arg1:int):void{
        }
        public static function get defaultBgColor():int{
            return (_defaultBgColor);
        }
        public static function get selectedSongTitleTextColor():int{
            return (_selectedSongTitleTextColor);
        }
        public static function set activeSongTitleTextColor(_arg1:int):void{
        }
        public static function get overedSongDelimeterTextColor():int{
            return (_overedSongDelimeterTextColor);
        }
        public static function set selectedSongDelimeterTextColor(_arg1:int):void{
        }
        public static function set activeSongSingerTextColor(_arg1:int):void{
        }
        public static function set defaultBgColor(_arg1:int):void{
        }
        public static function get overedSongIndexFormatColor():int{
            return (_overedSongIndexFormatColor);
        }
        public static function get defaultSongSingerTextColor():int{
            return (_defaultSongSingerTextColor);
        }
        public static function get selectedSongSingerTextColor():int{
            return (_selectedSongSingerTextColor);
        }
        public static function get overedSongSingerTextColor():int{
            return (_overedSongSingerTextColor);
        }
        public static function set selectedSongIndexFormatColor(_arg1:int):void{
        }
        public static function get activeSongIndexFormatColor():int{
            return (_activeSongIndexFormatColor);
        }
        public static function get activeSongTitleTextColor():int{
            return (_activeSongTitleTextColor);
        }
        public static function get defaultSongTitleTextColor():int{
            return (_defaultSongTitleTextColor);
        }
        public static function set overedSongSingerTextColor(_arg1:int):void{
        }
        public static function get activeSongSingerTextColor():int{
            return (_activeSongSingerTextColor);
        }
        public static function set selectedSongTitleTextColor(_arg1:int):void{
        }
        public static function set overedSongDelimeterTextColor(_arg1:int):void{
        }
        public static function get selectedSongIndexFormatColor():int{
            return (_selectedSongIndexFormatColor);
        }
        public static function get selectedSongDelimeterTextColor():int{
            return (_selectedSongDelimeterTextColor);
        }
        public static function set selectedSongSingerTextColor(_arg1:int):void{
        }
        public static function updateRendererStyle(_arg1):void{
            _defaultSongDelimeterTextColor = _arg1.DEFAULT_SONG_DELIMETER_COLOR;
            _overedSongDelimeterTextColor = _arg1.OVERED_SONG_DELIMETER_COLOR;
            _activeSongDelimeterTextColor = _arg1.ACTIVE_SONG_DELIMETER_COLOR;
            _selectedSongDelimeterTextColor = _arg1.SELECTED_SONG_DELIMETER_COLOR;
            _defaultSongSingerTextColor = _arg1.DEFAULT_SONG_SINGER_COLOR;
            _overedSongSingerTextColor = _arg1.OVERED_SONG_SINGER_COLOR;
            _activeSongSingerTextColor = _arg1.ACTIVE_SONG_SINGER_COLOR;
            _selectedSongSingerTextColor = _arg1.SELECTED_SONG_SINGER_COLOR;
            _defaultSongIndexFormatColor = _arg1.DEFAULT_SONG_INDEX_COLOR;
            _overedSongIndexFormatColor = _arg1.OVERED_SONG_SINGER_COLOR;
            _selectedSongIndexFormatColor = _arg1.SELECTED_SONG_SINGER_COLOR;
            _activeSongIndexFormatColor = _arg1.ACTIVE_SONG_INDEX_COLOR;
            _defaultSongTitleTextColor = _arg1.DEFAULT_SONG_TITLE_COLOR;
            _overedSongTitleTextColor = _arg1.OVERED_SONG_SINGER_COLOR;
            _selectedSongTitleTextColor = _arg1.SELECTED_SONG_SINGER_COLOR;
            _activeSongTitleTextColor = _arg1.ACTIVE_SONG_SINGER_COLOR;
            _defaultBgColor = _arg1.DEFAULT_BG_COLOR;
            _selectBgColor = _arg1.SELECT_BG_COLOR;
            _optionalBGColor = _arg1.OPTIONAL_BG_COLOR;
            indicatorColor = _arg1.INDICATOR_COLOR;
        }

        public function get isMouseOver():Boolean{
            return (_isMouseOver);
        }
        public function get isDragOver():Boolean{
            return (data.isDragOver);
        }
        private function checkBoxChangeHandler(_arg1:Event):void{
            data.isChecked = checkBox.selected;
            _arg1.preventDefault();
            _arg1.stopImmediatePropagation();
        }
        public function get selected():Boolean{
            return (_selected);
        }
        public function set isMouseOver(_arg1:Boolean):void{
            this._isMouseOver = _arg1;
            draw();
        }
        public function createChildren():void{
            var _local1:TextFormat;
            var _local2:TextFormat;
            var _local3:TextFormat;
            var _local4:TextFormat;
            if (!Boolean(checkBox)){
                checkBox = new CheckBox();
                checkBox.setSize(10, 10);
                checkBox.alpha = 1;
                checkBox.setStyle("downIcon", checkBox_icon);
                checkBox.setStyle("upIcon", checkBox_icon);
                checkBox.setStyle("overIcon", checkBox_icon);
                checkBox.setStyle("selectedDownIcon", selected_icon);
                checkBox.setStyle("selectedOverIcon", selected_icon);
                checkBox.setStyle("selectedUpIcon", selected_icon);
                checkBox.addEventListener(Event.CHANGE, checkBoxChangeHandler, false, 0, true);
                checkBox.label = "";
                base.addChild(checkBox);
            };
            if (!Boolean(songTitle)){
                songTitle = new TextField();
                songTitle.blendMode = BlendMode.LAYER;
                songTitle.mouseEnabled = false;
                songTitle.x = 52;
                songTitle.y = 0;
                songTitle.selectable = false;
                _local1 = new TextFormat();
                _local1.font = "돋움,AppleGothic";
                _local1.size = "12";
                _local1.color = defaultSongTitleTextColor;
                songTitle.defaultTextFormat = _local1;
                base.addChild(songTitle);
            };
            if (!Boolean(songIndex)){
                songIndex = new TextField();
                songIndex.blendMode = BlendMode.LAYER;
                songIndex.mouseEnabled = false;
                songIndex.x = 22;
                songIndex.width = 28;
                songIndex.height = 16;
                songIndex.selectable = false;
                _local2 = new TextFormat();
                _local2.align = TextFormatAlign.CENTER;
                _local2.font = "돋움,AppleGothic";
                _local2.size = 12;
                _local2.color = defaultSongIndexFormatColor;
                songIndex.defaultTextFormat = _local2;
                base.addChild(songIndex);
            };
            if (!Boolean(songDelimeter)){
                songDelimeter = new TextField();
                songDelimeter.blendMode = BlendMode.LAYER;
                songDelimeter.mouseEnabled = false;
                songDelimeter.x = (songTitle.x + 10);
                _local3 = new TextFormat();
                _local3.font = "돋움,AppleGothic";
                _local3.size = 12;
                _local3.color = defaultSongDelimeterTextColor;
                songDelimeter.defaultTextFormat = _local3;
                songDelimeter.text = "/";
                base.addChild(songDelimeter);
            };
            if (!Boolean(songSinger)){
                songSinger = new TextField();
                songSinger.blendMode = BlendMode.LAYER;
                songSinger.mouseEnabled = false;
                songSinger.x = (songDelimeter.x + songDelimeter.width);
                _local4 = new TextFormat();
                _local4.font = "돋움,AppleGothic";
                _local4.size = 12;
                _local4.color = defaultSongSingerTextColor;
                songSinger.defaultTextFormat = _local4;
                base.addChild(songSinger);
            };
            if (!Boolean(album_icon_instance)){
                album_icon_instance = new album_icon();
                album_icon_instance.addEventListener(MouseEvent.MOUSE_OVER, showTooltipGuide, false, 0, true);
                album_icon_instance.addEventListener(MouseEvent.MOUSE_OUT, hideTooltipGuide, false, 0, true);
                (album_icon_instance as DisplayObject).name = "album_icon";
                album_icon_instance.buttonMode = true;
                album_icon_instance.useHandCursor = true;
                (album_icon_instance as DisplayObject).x = 277;
                (album_icon_instance as DisplayObject).y = 11;
                base.addChild(album_icon_instance);
            };
            if (!Boolean(mp3_icon_instance)){
                mp3_icon_instance = new mp3_icon();
                (mp3_icon_instance as MovieClip).gotoAndStop(1);
                (mp3_icon_instance as DisplayObject).name = "mp3_icon";
                mp3_icon_instance.buttonMode = true;
                mp3_icon_instance.useHandCursor = true;
                (mp3_icon_instance as DisplayObject).x = 302;
                (mp3_icon_instance as DisplayObject).y = 11;
                base.addChild(mp3_icon_instance);
            };
            if (!Boolean(listen_icon_instance)){
                listen_icon_instance = new listen_icon();
                (listen_icon_instance as DisplayObject).x = (songIndex.x + (songIndex.width / 2));
                (listen_icon_instance as DisplayObject).y = 12;
                base.addChild(listen_icon_instance);
                listen_icon_instance.visible = false;
            };
            if (!Boolean(is_adult_icon_instance)){
                is_adult_icon_instance = new is_adult_icon();
                base.addChild(is_adult_icon_instance);
                is_adult_icon_instance.visible = false;
            };
            if (!Boolean(abstractPreview)){
                abstractPreview = new Sprite();
                abstractPreview.x = 51;
                abstractPreview.mouseEnabled = false;
                abstractPreview.mouseChildren = false;
                abstractPreview.visible = false;
                base.addChild(abstractPreview);
            };
            if (!Boolean(abstractBitmap)){
                abstractBitmap = new Bitmap();
            };
            if (!Boolean(previewMask)){
                previewMask = new Shape();
                previewMask.graphics.beginFill(0);
                previewMask.graphics.drawRect(0, 1, 200, 21);
                previewMask.graphics.endFill();
                previewMask.x = 55;
                base.addChild(previewMask);
                abstractPreview.mask = previewMask;
            };
            if (!Boolean(mouseEventRect)){
                mouseEventRect = new Sprite();
                mouseEventRect.name = "OVER_BOUND";
                mouseEventRect.buttonMode = true;
                base.addChild(mouseEventRect);
            };
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get data():Object{
            return (_data);
        }
        private function outHandler(_arg1:MouseEvent):void{
        }
        public function set selected(_arg1:Boolean):void{
            this._selected = _arg1;
            if (this._selected){
                if (!data.isChecked){
                    data.isChecked = true;
                };
            } else {
                data.isChecked = false;
            };
            (data as SongInfoServiceObject).isSelected = this._selected;
        }
        private function registEnterframe():void{
            addEventListener(Event.ENTER_FRAME, drawMask, false, 0, true);
        }
        public function set selectAction(_arg1:Boolean):void{
            this._selectAction = _arg1;
        }
        private function removeResourceHandler(_arg1:Event=null):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, removeResourceHandler);
            if (Boolean(checkBox)){
                checkBox.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                base.removeChild(checkBox);
                checkBox = null;
            };
            if (Boolean(songTitle)){
                base.removeChild(songTitle);
                songTitle = null;
            };
        }
        override protected function draw():void{
            var _local5:int;
            super.draw();
            songTitle.visible = true;
            songDelimeter.visible = true;
            songSinger.visible = true;
            abstractPreview.visible = false;
            unregistEnterframe();
            flowCount = 0;
            abstractPreview.graphics.clear();
            abstractPreview.x = 51;
            abstractPreview.y = songIndex.y;
            var _local1:TextFormat = songIndex.getTextFormat();
            var _local2:TextFormat = songTitle.getTextFormat();
            var _local3:TextFormat = songDelimeter.getTextFormat();
            var _local4:TextFormat = songSinger.getTextFormat();
            checkBox.selected = data.isChecked;
            checkBox.move(7, 5);
            checkBox.drawNow();
            if (!data.isServiced){
                album_icon_instance.buttonMode = false;
                album_icon_instance.useHandCursor = false;
                data.isPlaying = false;
                listen_icon_instance.visible = false;
                songIndex.visible = true;
                _local1.color = defaultSongIndexFormatColor;
                _local1.bold = false;
                _local2.color = defaultSongTitleTextColor;
                _local2.bold = false;
                _local3.color = defaultSongDelimeterTextColor;
                _local3.bold = false;
                _local4.color = defaultSongSingerTextColor;
                _local4.bold = false;
                base.graphics.clear();
                if ((listData.index % 2) == 0){
                    base.graphics.beginFill(defaultBgColor);
                } else {
                    base.graphics.beginFill(_optionalBGColor);
                };
                base.graphics.drawRect(0, 1, 334, 20);
                base.graphics.endFill();
                songIndex.alpha = 0.25;
                songTitle.alpha = 0.25;
                songSinger.alpha = 0.25;
                songDelimeter.alpha = 0.25;
                songIndex.text = (listData.row + 1).toString();
                (data as SongInfoServiceObject).soIndex = listData.index;
                songTitle.text = data.label;
                songSinger.text = data.singer;
                if ((data as SongInfoServiceObject).hasMp3File()){
                    if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                        (mp3_icon_instance as MovieClip).gotoAndStop(2);
                        (mp3_icon_instance as MovieClip).buttonMode = false;
                    } else {
                        if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                            (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            (mp3_icon_instance as MovieClip).buttonMode = false;
                        } else {
                            if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                (mp3_icon_instance as MovieClip).buttonMode = false;
                            } else {
                                (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                (mp3_icon_instance as MovieClip).buttonMode = false;
                            };
                        };
                    };
                } else {
                    if (!(data as SongInfoServiceObject).hasMp3File()){
                        (mp3_icon_instance as MovieClip).gotoAndStop(2);
                        (mp3_icon_instance as MovieClip).buttonMode = false;
                    };
                };
                if ((data as SongInfoServiceObject).isAdultSong()){
                    is_adult_icon_instance.visible = true;
                } else {
                    is_adult_icon_instance.visible = false;
                };
            } else {
                if (!data.isValid){
                    data.isPlaying = false;
                    listen_icon_instance.visible = false;
                    songIndex.visible = true;
                    _local1.color = defaultSongIndexFormatColor;
                    _local1.bold = false;
                    _local2.color = defaultSongTitleTextColor;
                    _local2.bold = false;
                    _local3.color = defaultSongDelimeterTextColor;
                    _local3.bold = false;
                    _local4.color = defaultSongSingerTextColor;
                    _local4.bold = false;
                    album_icon_instance.buttonMode = true;
                    album_icon_instance.useHandCursor = true;
                    base.graphics.clear();
                    if ((listData.index % 2) == 0){
                        base.graphics.beginFill(defaultBgColor);
                    } else {
                        base.graphics.beginFill(_optionalBGColor);
                    };
                    base.graphics.drawRect(0, 1, 334, 20);
                    base.graphics.endFill();
                    songIndex.alpha = 0.25;
                    songTitle.alpha = 0.25;
                    songSinger.alpha = 0.25;
                    songDelimeter.alpha = 0.25;
                    songIndex.text = (listData.row + 1).toString();
                    (data as SongInfoServiceObject).soIndex = listData.index;
                    songTitle.text = data.label;
                    songSinger.text = data.singer;
                    if ((data as SongInfoServiceObject).hasMp3File()){
                        if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                            (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            (mp3_icon_instance as MovieClip).buttonMode = false;
                        } else {
                            if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                                (mp3_icon_instance as MovieClip).gotoAndStop(1);
                                (mp3_icon_instance as MovieClip).buttonMode = true;
                            } else {
                                if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                    (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                    (mp3_icon_instance as MovieClip).buttonMode = false;
                                } else {
                                    (mp3_icon_instance as MovieClip).gotoAndStop(1);
                                    (mp3_icon_instance as MovieClip).buttonMode = true;
                                };
                            };
                        };
                    } else {
                        if (!(data as SongInfoServiceObject).hasMp3File()){
                            (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            (mp3_icon_instance as MovieClip).buttonMode = false;
                        };
                    };
                    if ((data as SongInfoServiceObject).isAdultSong()){
                        is_adult_icon_instance.visible = true;
                    } else {
                        is_adult_icon_instance.visible = false;
                    };
                } else {
                    album_icon_instance.buttonMode = true;
                    album_icon_instance.useHandCursor = true;
                    checkBox.mouseEnabled = true;
                    mouseEventRect.mouseEnabled = true;
                    checkBox.alpha = 1;
                    songIndex.alpha = 1;
                    songTitle.alpha = 1;
                    songSinger.alpha = 1;
                    songDelimeter.alpha = 1;
                    if (selected){
                        base.graphics.clear();
                        base.graphics.beginFill(selectBgColor);
                        base.graphics.drawRect(0, 1, 334, 20);
                        base.graphics.endFill();
                    } else {
                        base.graphics.clear();
                        if ((listData.index % 2) == 0){
                            base.graphics.beginFill(defaultBgColor);
                        } else {
                            base.graphics.beginFill(_optionalBGColor);
                        };
                        base.graphics.drawRect(0, 1, 334, 20);
                        base.graphics.endFill();
                    };
                    if (Boolean(listData)){
                        _local5 = (listData.owner as NaverMusicPlayerList).dataProvider.length;
                        songIndex.text = (listData.row + 1).toString();
                        (data as SongInfoServiceObject).soIndex = listData.index;
                        songTitle.text = data.label;
                        songSinger.text = data.singer;
                        if ((data as SongInfoServiceObject).hasMp3File()){
                            if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                                (mp3_icon_instance as MovieClip).gotoAndStop(1);
                            } else {
                                if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                    (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                } else {
                                    (mp3_icon_instance as MovieClip).gotoAndStop(1);
                                };
                            };
                        } else {
                            if (!(data as SongInfoServiceObject).hasMp3File()){
                                (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            };
                        };
                        if ((data as SongInfoServiceObject).isAdultSong()){
                            is_adult_icon_instance.visible = true;
                        } else {
                            is_adult_icon_instance.visible = false;
                        };
                        if (data.isPlaying){
                            _local1.color = activeSongIndexFormatColor;
                            _local1.bold = true;
                            _local2.color = activeSongIndexFormatColor;
                            _local2.bold = true;
                            _local3.color = activeSongIndexFormatColor;
                            _local3.bold = true;
                            _local4.color = activeSongIndexFormatColor;
                            _local4.bold = true;
                            listen_icon_instance.visible = true;
                            songIndex.visible = false;
                            if (((isMouseOver) && (!(isDragOver)))){
                                if (data.isAbstract){
                                    abstractPreview.visible = true;
                                    unregistEnterframe();
                                    abstractPreview.x = 51;
                                    abstractPreview.y = songIndex.y;
                                    registEnterframe();
                                };
                            } else {
                                if (((((isMouseOver) && (isDragOver))) || (((!(isMouseOver)) && (isDragOver))))){
                                    if ((((listData.index == 0)) && ((mouseY < 10)))){
                                        ControlSettingManager.getInstance().dragAndDropFirst = true;
                                        base.graphics.lineStyle(2, indicatorColor);
                                        base.graphics.moveTo(0, 4);
                                        base.graphics.lineTo(314, 4);
                                    } else {
                                        if ((((listData.index == (_local5 - 1))) && ((mouseY >= 0)))){
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(2, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        } else {
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(4, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        };
                                    };
                                } else {
                                    if (data.isAbstract){
                                        unregistEnterframe();
                                        abstractPreview.x = 51;
                                        abstractPreview.y = songIndex.y;
                                        abstractPreview.visible = false;
                                        songTitle.visible = true;
                                        songDelimeter.visible = true;
                                        songSinger.visible = true;
                                    };
                                };
                            };
                        } else {
                            listen_icon_instance.visible = false;
                            songIndex.visible = true;
                            if (((isMouseOver) && (!(isDragOver)))){
                                if (data.isAbstract){
                                    abstractPreview.visible = true;
                                    unregistEnterframe();
                                    abstractPreview.x = 51;
                                    abstractPreview.y = songIndex.y;
                                    registEnterframe();
                                };
                                _local1.color = activeSongIndexFormatColor;
                                _local2.color = activeSongIndexFormatColor;
                                _local3.color = activeSongIndexFormatColor;
                                _local4.color = activeSongIndexFormatColor;
                            } else {
                                if (((((isMouseOver) && (isDragOver))) || (((!(isMouseOver)) && (isDragOver))))){
                                    if ((((listData.index == 0)) && ((mouseY < 10)))){
                                        ControlSettingManager.getInstance().dragAndDropFirst = true;
                                        base.graphics.lineStyle(2, indicatorColor);
                                        base.graphics.moveTo(0, 4);
                                        base.graphics.lineTo(314, 4);
                                    } else {
                                        if ((((listData.index == (_local5 - 1))) && ((mouseY >= 0)))){
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(2, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        } else {
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(4, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        };
                                    };
                                } else {
                                    if (data.isAbstract){
                                        unregistEnterframe();
                                        abstractPreview.visible = false;
                                        songTitle.visible = true;
                                        songDelimeter.visible = true;
                                        songSinger.visible = true;
                                    };
                                    _local1.color = defaultSongIndexFormatColor;
                                    _local1.bold = false;
                                    _local2.color = defaultSongTitleTextColor;
                                    _local2.bold = false;
                                    _local3.color = defaultSongDelimeterTextColor;
                                    _local3.bold = false;
                                    _local4.color = defaultSongSingerTextColor;
                                    _local4.bold = false;
                                };
                            };
                        };
                    };
                };
            };
            songIndex.setTextFormat(_local1, 0, songIndex.text.length);
            songTitle.setTextFormat(_local2, 0, songTitle.text.length);
            songDelimeter.setTextFormat(_local3, 0, songDelimeter.text.length);
            songSinger.setTextFormat(_local4, 0, songSinger.text.length);
            songIndex.y = 3;
            songTitle.width = (songTitle.textWidth + 5);
            songTitle.height = (songTitle.textHeight + 3);
            songTitle.y = songIndex.y;
            songDelimeter.x = (songTitle.x + songTitle.width);
            songDelimeter.width = (songDelimeter.textWidth + 5);
            songDelimeter.height = (songDelimeter.textHeight + 5);
            songDelimeter.y = songIndex.y;
            songSinger.x = (songDelimeter.x + songDelimeter.width);
            songSinger.width = (songSinger.textWidth + 5);
            songSinger.height = (songSinger.textHeight + 5);
            songSinger.y = songIndex.y;
            checkSongInfoTextLength();
            songIndex.setTextFormat(_local1, 0, songIndex.text.length);
            songTitle.setTextFormat(_local2, 0, songTitle.text.length);
            songDelimeter.setTextFormat(_local3, 0, songDelimeter.text.length);
            songSinger.setTextFormat(_local4, 0, songSinger.text.length);
            is_adult_icon_instance.x = 0xFF;
            is_adult_icon_instance.y = 3.5;
        }
        public function set isPlaying(_arg1:Boolean):void{
            this.data.isPlaying = _arg1;
            draw();
        }
        public function removeAsset():void{
            unregistEnterframe();
            if (mouseEventRect){
                base.removeChild(mouseEventRect);
                mouseEventRect = null;
            };
            if (abstractBitmap){
                if (abstractBitmap.bitmapData){
                    abstractBitmap.bitmapData.dispose();
                    abstractBitmap.bitmapData = null;
                };
                abstractBitmap = null;
            };
            if (abstractPreview){
                base.removeChild(abstractPreview);
                abstractPreview = null;
            };
            if (previewMask){
                base.removeChild(previewMask);
                previewMask = null;
            };
            if (Boolean(checkBox)){
                base.removeChild(checkBox);
                checkBox.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                checkBox = null;
            };
            if (Boolean(songIndex)){
                base.removeChild(songIndex);
                songIndex = null;
            };
            if (Boolean(songTitle)){
                base.removeChild(songTitle);
                songTitle = null;
            };
            if (Boolean(songDelimeter)){
                base.removeChild(songDelimeter);
                songDelimeter = null;
            };
            if (Boolean(songSinger)){
                base.removeChild(songSinger);
                songSinger = null;
            };
            if (Boolean(album_icon_instance)){
                base.removeChild(album_icon_instance);
                album_icon_instance.removeEventListener(MouseEvent.MOUSE_OVER, showTooltipGuide);
                album_icon_instance.removeEventListener(MouseEvent.MOUSE_OUT, hideTooltipGuide);
                album_icon_instance = null;
            };
            if (Boolean(mp3_icon_instance)){
                base.removeChild(mp3_icon_instance);
                mp3_icon_instance = null;
            };
            if (Boolean(is_adult_icon_instance)){
                base.removeChild(is_adult_icon_instance);
                is_adult_icon_instance = null;
            };
            if (Boolean(base)){
                removeChild(base);
                base = null;
            };
            if (Boolean(data)){
            };
            if (Boolean(_listData)){
                _listData = null;
            };
            removeResourceHandler();
        }
        public function set listData(_arg1:ListData):void{
            this._listData = _arg1;
        }
        private function unregistEnterframe():void{
            removeEventListener(Event.ENTER_FRAME, drawMask);
        }
        private function overHandler(_arg1:MouseEvent):void{
        }
        private function hideTooltipGuide(_arg1:MouseEvent):void{
            TooltipManager.getInstance().hide();
        }
        public function get selectAction():Boolean{
            return (_selectAction);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
            if (!(_arg1 as SongInfoServiceObject).isEmpty){
                songTitle.text = (_arg1 as SongInfoServiceObject).label;
            };
        }
        private function showTooltipGuide(_arg1:MouseEvent):void{
            var _local2:SongInfoServiceObject = (data as SongInfoServiceObject);
            if (((_local2) && (_local2.isServiced))){
                TooltipManager.getInstance().setText("앨범정보보기");
                TooltipManager.getInstance().setOffsetPoint(0, 20);
                TooltipManager.getInstance().show();
            };
        }
        public function set isDragOver(_arg1:Boolean):void{
            this.data.isDragOver = _arg1;
            draw();
        }
        private function checkSongInfoTextLength():void{
            var _local3:Boolean;
            var _local10:TextField;
            var _local11:TextFormat;
            var _local12:BitmapData;
            var _local1:int;
            var _local2:Number = (songTitle.x + songTitle.width);
            var _local4:Number = 250;
            data.abstractedTitle = ((data.getTrackTitle() + " / ") + data.singer);
            data.isAbstract = false;
            var _local5:Number = songTitle.x;
            var _local6:int;
            while (_local6 < songTitle.text.length) {
                _local5 = (_local5 + songTitle.getCharBoundaries(_local6).width);
                if (_local5 >= 235){
                    songTitle.text = (songTitle.text.slice(0, _local6) + "...");
                    songDelimeter.visible = false;
                    songSinger.visible = false;
                    _local3 = true;
                    _local4 = 250;
                    break;
                };
                _local6++;
            };
            var _local7:Number = songSinger.x;
            var _local8:int = songSinger.text.length;
            var _local9:int;
            while (_local9 < _local8) {
                _local7 = (_local7 + songSinger.getCharBoundaries(_local9).width);
                if (_local7 >= 240){
                    songSinger.text = (songSinger.text.slice(0, _local9) + "...");
                    _local3 = true;
                    _local4 = 250;
                    break;
                };
                _local9++;
            };
            if (_local3){
                data.isAbstract = true;
                _local10 = new TextField();
                _local11 = new TextFormat();
                _local11.font = "돋움,AppleGothic";
                _local11.size = 12;
                _local11.color = activeSongIndexFormatColor;
                _local11.bold = data.isPlaying;
                _local10.defaultTextFormat = _local11;
                _local10.text = data.abstractedTitle;
                _local10.width = (_local10.textWidth + 5);
                _local10.height = (_local10.textHeight + 5);
                data.originalLength = (_local10.width - 245);
                _local12 = new BitmapData((_local10.width + flowTextSpace), _local10.height, true, defaultBgColor);
                _local12.draw(_local10);
                abstractBitmap.bitmapData = _local12;
            };
            if (is_adult_icon_instance.visible){
                _local4 = 235;
            };
            mouseEventRect.graphics.clear();
            mouseEventRect.graphics.beginFill(0xFFFFFF, 0);
            mouseEventRect.graphics.drawRect(songIndex.x, 0, _local4, 19);
            mouseEventRect.graphics.endFill();
        }
        private function registEventHandler():void{
        }
        public function get listData():ListData{
            return (_listData);
        }
        public function createBase():void{
            base = new Sprite();
            base.mouseEnabled = false;
            base.graphics.clear();
            base.graphics.beginFill(defaultBgColor);
            base.graphics.drawRect(0, 1, 334, 20);
            base.graphics.endFill();
            addChild(base);
        }
        public function setMouseState(_arg1:String):void{
            this._setMouseState = _arg1;
        }
        private function drawCopiedText():void{
            var _local1:TextField = new TextField();
            var _local2:TextFormat = new TextFormat();
            _local2.font = "돋움,AppleGothic";
            _local2.size = 12;
            _local2.color = activeSongIndexFormatColor;
            _local2.bold = data.isPlaying;
            _local1.defaultTextFormat = _local2;
            _local1.text = data.abstractedTitle;
            _local1.width = (_local1.textWidth + 5);
            _local1.height = (_local1.textHeight + 5);
            data.originalLength = (_local1.width - 245);
            var _local3:BitmapData = new BitmapData(_local1.width, _local1.height, true, defaultBgColor);
            _local3.draw(_local1);
            var _local4:Bitmap = new Bitmap();
            _local4.bitmapData = _local3;
            _local4.x = ((abstractBitmap.x + abstractBitmap.width) + TEXT_GAP);
            abstractPreview.addChild(_local4);
        }
        private function drawMask(_arg1:Event=null):void{
            var _local2:Graphics;
            if (Boolean(data)){
                if (abstractBitmap.bitmapData){
                    _local2 = abstractPreview.graphics;
                    _local2.clear();
                    _local2.beginBitmapFill(abstractBitmap.bitmapData, new Matrix(1, 0, 0, 1, flowCount, 0), true, false);
                    _local2.drawRect(0, 0, abstractBitmap.bitmapData.width, abstractBitmap.bitmapData.height);
                    _local2.endFill();
                    flowCount = (flowCount - flowPixelUnit);
                    songTitle.visible = false;
                    songDelimeter.visible = false;
                    songSinger.visible = false;
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPostingPlayerCellRenderer_is_adult_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.controls.listClasses.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;

    public class NaverBasicPostingPlayerCellRenderer extends UIComponent implements ICellRenderer {

        private static const TEXT_GAP:int = 50;
        private static const INTERVAL_GAP:int = 15;

        private static var _defaultSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _selectBgColor:int = 0xF5F5F5;
        private static var is_adult_icon:Class = NaverBasicPostingPlayerCellRenderer_is_adult_icon;
        private static var indicatorColor:int = 0x555555;
        private static var checkBox_icon:Class = NaverBasicPostingPlayerCellRenderer_checkBox_icon;
        private static var selected_icon:Class = NaverBasicPostingPlayerCellRenderer_selected_icon;
        private static var _overedSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _activeSongTitleTextColor:int = 0;
        private static var _defaultBgColor:int = 0xFFFFFF;
        private static var album_icon:Class = NaverBasicPostingPlayerCellRenderer_album_icon;
        private static var _selectedSongTitleTextColor:int = 0;
        public static var _defaultSongIndexFormatColor:int = 0x666666;
        private static var _overedSongSingerTextColor:int = 0x777777;
        private static var _selectedSongIndexFormatColor:int = 0x32C100;
        private static var _activeSongSingerTextColor:int = 0x777777;
        private static var _overedSongIndexFormatColor:int = 0x32C100;
        private static var _defaultSongSingerTextColor:int = 0x777777;
        private static var _defaultSongTitleTextColor:int = 0;
        private static var _overedSongTitleTextColor:int = 0;
        private static var mp3_icon:Class = NaverBasicPostingPlayerCellRenderer_mp3_icon;
        private static var _selectedSongSingerTextColor:int = 0x777777;
        private static var _activeSongDelimeterTextColor:int = 0xCCCCCC;
        private static var listen_icon:Class = NaverBasicPostingPlayerCellRenderer_listen_icon;
        private static var _activeSongIndexFormatColor:int = 0x32C100;
        private static var _selectedSongDelimeterTextColor:int = 0xCCCCCC;
        private static var _optionalBGColor:int = 0xFFFFFF;

        private var flowCount:Number = 0;
        private var mp3_icon_instance;
        private var _data:Object;
        private var flowPixelUnit:Number = 1;
        private var listen_icon_instance;
        private var _isPlaying:Boolean = false;
        private var _selected:Boolean = false;
        private var checkBox:CheckBox;
        private var songIndex:TextField;
        private var intervalId:Number;
        private var is_adult_icon_instance;
        private var songTitle:TextField;
        public var _listData:ListData;
        private var _selectAction:Boolean;
        private var album_icon_instance;
        private var base:Sprite;
        private var flowTextSpace:Number = 10;
        private var previewMask:Shape;
        private var abstractPreview:Sprite;
        private var _isMouseOver:Boolean = false;
        private var abstractBitmap:Bitmap;
        private var songDelimeter:TextField;
        private var songSinger:TextField;
        private var mouseEventRect:Sprite;
        private var _setMouseState:String;

        public function NaverBasicPostingPlayerCellRenderer(){
            createBase();
            createChildren();
        }
        public static function get defaultSongDelimeterTextColor():int{
            return (_defaultSongDelimeterTextColor);
        }
        public static function set overedSongIndexFormatColor(_arg1:int):void{
        }
        public static function get overedSongTitleTextColor():int{
            return (_overedSongTitleTextColor);
        }
        public static function set defaultSongSingerTextColor(_arg1:int):void{
        }
        public static function set defaultSongDelimeterTextColor(_arg1:int):void{
        }
        public static function set overedSongTitleTextColor(_arg1:int):void{
        }
        public static function get activeSongDelimeterTextColor():int{
            return (_activeSongDelimeterTextColor);
        }
        public static function get defaultSongIndexFormatColor():int{
            return (_defaultSongIndexFormatColor);
        }
        public static function get selectBgColor():int{
            return (_selectBgColor);
        }
        public static function set activeSongDelimeterTextColor(_arg1:int):void{
        }
        public static function set selectBgColor(_arg1:int):void{
        }
        public static function set defaultSongIndexFormatColor(_arg1:int):void{
        }
        public static function updateAsset(_arg1):void{
            album_icon = _arg1.getDefinition("album_info");
            mp3_icon = _arg1.getDefinition("mp3_icon");
            listen_icon = _arg1.getDefinition("listen_icon");
            checkBox_icon = _arg1.getDefinition("checkBox_icon");
            selected_icon = _arg1.getDefinition("selected_icon");
            is_adult_icon = _arg1.getDefinition("is_adult_icon");
        }
        public static function set defaultSongTitleTextColor(_arg1:int):void{
        }
        public static function set activeSongIndexFormatColor(_arg1:int):void{
        }
        public static function get defaultBgColor():int{
            return (_defaultBgColor);
        }
        public static function get selectedSongTitleTextColor():int{
            return (_selectedSongTitleTextColor);
        }
        public static function set activeSongTitleTextColor(_arg1:int):void{
        }
        public static function get overedSongDelimeterTextColor():int{
            return (_overedSongDelimeterTextColor);
        }
        public static function set selectedSongDelimeterTextColor(_arg1:int):void{
        }
        public static function set activeSongSingerTextColor(_arg1:int):void{
        }
        public static function set defaultBgColor(_arg1:int):void{
        }
        public static function get defaultSongSingerTextColor():int{
            return (_defaultSongSingerTextColor);
        }
        public static function get selectedSongSingerTextColor():int{
            return (_selectedSongSingerTextColor);
        }
        public static function get overedSongSingerTextColor():int{
            return (_overedSongSingerTextColor);
        }
        public static function set selectedSongIndexFormatColor(_arg1:int):void{
        }
        public static function get activeSongIndexFormatColor():int{
            return (_activeSongIndexFormatColor);
        }
        public static function get activeSongTitleTextColor():int{
            return (_activeSongTitleTextColor);
        }
        public static function get overedSongIndexFormatColor():int{
            return (_overedSongIndexFormatColor);
        }
        public static function get defaultSongTitleTextColor():int{
            return (_defaultSongTitleTextColor);
        }
        public static function set selectedSongTitleTextColor(_arg1:int):void{
        }
        public static function set overedSongSingerTextColor(_arg1:int):void{
        }
        public static function get activeSongSingerTextColor():int{
            return (_activeSongSingerTextColor);
        }
        public static function set overedSongDelimeterTextColor(_arg1:int):void{
        }
        public static function get selectedSongIndexFormatColor():int{
            return (_selectedSongIndexFormatColor);
        }
        public static function get selectedSongDelimeterTextColor():int{
            return (_selectedSongDelimeterTextColor);
        }
        public static function set selectedSongSingerTextColor(_arg1:int):void{
        }
        public static function updateRendererStyle(_arg1):void{
            _defaultSongDelimeterTextColor = _arg1.DEFAULT_SONG_DELIMETER_COLOR;
            _overedSongDelimeterTextColor = _arg1.OVERED_SONG_DELIMETER_COLOR;
            _activeSongDelimeterTextColor = _arg1.ACTIVE_SONG_DELIMETER_COLOR;
            _selectedSongDelimeterTextColor = _arg1.SELECTED_SONG_DELIMETER_COLOR;
            _defaultSongSingerTextColor = _arg1.DEFAULT_SONG_SINGER_COLOR;
            _overedSongSingerTextColor = _arg1.OVERED_SONG_SINGER_COLOR;
            _activeSongSingerTextColor = _arg1.ACTIVE_SONG_SINGER_COLOR;
            _selectedSongSingerTextColor = _arg1.SELECTED_SONG_SINGER_COLOR;
            _defaultSongIndexFormatColor = _arg1.DEFAULT_SONG_INDEX_COLOR;
            _overedSongIndexFormatColor = _arg1.OVERED_SONG_SINGER_COLOR;
            _selectedSongIndexFormatColor = _arg1.SELECTED_SONG_SINGER_COLOR;
            _activeSongIndexFormatColor = _arg1.ACTIVE_SONG_INDEX_COLOR;
            _defaultSongTitleTextColor = _arg1.DEFAULT_SONG_TITLE_COLOR;
            _overedSongTitleTextColor = _arg1.OVERED_SONG_SINGER_COLOR;
            _selectedSongTitleTextColor = _arg1.SELECTED_SONG_SINGER_COLOR;
            _activeSongTitleTextColor = _arg1.ACTIVE_SONG_SINGER_COLOR;
            _optionalBGColor = _arg1.OPTIONAL_BG_COLOR;
            _defaultBgColor = _arg1.DEFAULT_BG_COLOR;
            _selectBgColor = _arg1.SELECT_BG_COLOR;
            indicatorColor = _arg1.INDICATOR_COLOR;
        }

        public function get isMouseOver():Boolean{
            return (_isMouseOver);
        }
        public function get isDragOver():Boolean{
            return (data.isDragOver);
        }
        private function checkBoxChangeHandler(_arg1:Event):void{
            data.isChecked = checkBox.selected;
            _arg1.preventDefault();
            _arg1.stopImmediatePropagation();
        }
        public function get selected():Boolean{
            return (_selected);
        }
        public function set isMouseOver(_arg1:Boolean):void{
            this._isMouseOver = _arg1;
            draw();
        }
        public function createChildren():void{
            var _local1:TextFormat;
            var _local2:TextFormat;
            var _local3:TextFormat;
            var _local4:TextFormat;
            if (!Boolean(checkBox)){
                checkBox = new CheckBox();
                checkBox.setSize(10, 10);
                checkBox.alpha = 1;
                checkBox.setStyle("downIcon", checkBox_icon);
                checkBox.setStyle("upIcon", checkBox_icon);
                checkBox.setStyle("overIcon", checkBox_icon);
                checkBox.setStyle("selectedDownIcon", selected_icon);
                checkBox.setStyle("selectedOverIcon", selected_icon);
                checkBox.setStyle("selectedUpIcon", selected_icon);
                checkBox.addEventListener(Event.CHANGE, checkBoxChangeHandler, false, 0, true);
                checkBox.label = "";
                base.addChild(checkBox);
            };
            if (!Boolean(songTitle)){
                songTitle = new TextField();
                songTitle.blendMode = BlendMode.LAYER;
                songTitle.mouseEnabled = false;
                songTitle.x = 52;
                songTitle.y = 0;
                songTitle.selectable = false;
                _local1 = new TextFormat();
                _local1.font = "돋움,AppleGothic";
                _local1.size = "12";
                _local1.color = defaultSongTitleTextColor;
                songTitle.defaultTextFormat = _local1;
                base.addChild(songTitle);
            };
            if (!Boolean(songIndex)){
                songIndex = new TextField();
                songIndex.blendMode = BlendMode.LAYER;
                songIndex.mouseEnabled = false;
                songIndex.x = 22;
                songIndex.width = 28;
                songIndex.height = 16;
                songIndex.selectable = false;
                _local2 = new TextFormat();
                _local2.align = TextFormatAlign.CENTER;
                _local2.font = "돋움,AppleGothic";
                _local2.size = 12;
                _local2.color = defaultSongIndexFormatColor;
                songIndex.defaultTextFormat = _local2;
                base.addChild(songIndex);
            };
            if (!Boolean(songDelimeter)){
                songDelimeter = new TextField();
                songDelimeter.blendMode = BlendMode.LAYER;
                songDelimeter.mouseEnabled = false;
                songDelimeter.x = (songTitle.x + 10);
                _local3 = new TextFormat();
                _local3.font = "돋움,AppleGothic";
                _local3.size = 12;
                _local3.color = defaultSongDelimeterTextColor;
                songDelimeter.defaultTextFormat = _local3;
                songDelimeter.text = "/";
                base.addChild(songDelimeter);
            };
            if (!Boolean(songSinger)){
                songSinger = new TextField();
                songSinger.blendMode = BlendMode.LAYER;
                songSinger.mouseEnabled = false;
                songSinger.x = (songDelimeter.x + songDelimeter.width);
                _local4 = new TextFormat();
                _local4.font = "돋움,AppleGothic";
                _local4.size = 12;
                _local4.color = defaultSongSingerTextColor;
                songSinger.defaultTextFormat = _local4;
                base.addChild(songSinger);
            };
            if (!Boolean(album_icon_instance)){
                album_icon_instance = new album_icon();
                album_icon_instance.addEventListener(MouseEvent.MOUSE_OVER, showTooltipGuide, false, 0, true);
                album_icon_instance.addEventListener(MouseEvent.MOUSE_OUT, hideTooltipGuide, false, 0, true);
                (album_icon_instance as DisplayObject).name = "album_icon";
                album_icon_instance.buttonMode = true;
                album_icon_instance.useHandCursor = true;
                (album_icon_instance as DisplayObject).x = 277;
                (album_icon_instance as DisplayObject).y = 11;
                base.addChild(album_icon_instance);
            };
            if (!Boolean(mp3_icon_instance)){
                mp3_icon_instance = new mp3_icon();
                (mp3_icon_instance as MovieClip).gotoAndStop(1);
                (mp3_icon_instance as DisplayObject).name = "mp3_icon";
                mp3_icon_instance.buttonMode = true;
                mp3_icon_instance.useHandCursor = true;
                (mp3_icon_instance as DisplayObject).x = 302;
                (mp3_icon_instance as DisplayObject).y = 11;
                base.addChild(mp3_icon_instance);
            };
            if (!Boolean(listen_icon_instance)){
                listen_icon_instance = new listen_icon();
                (listen_icon_instance as DisplayObject).x = (songIndex.x + (songIndex.width / 2));
                (listen_icon_instance as DisplayObject).y = 12;
                base.addChild(listen_icon_instance);
                listen_icon_instance.visible = false;
            };
            if (!Boolean(is_adult_icon_instance)){
                is_adult_icon_instance = new is_adult_icon();
                base.addChild(is_adult_icon_instance);
                is_adult_icon_instance.visible = false;
            };
            if (!Boolean(abstractPreview)){
                abstractPreview = new Sprite();
                abstractPreview.x = 51;
                abstractPreview.mouseEnabled = false;
                abstractPreview.mouseChildren = false;
                abstractPreview.visible = false;
                base.addChild(abstractPreview);
            };
            if (!Boolean(abstractBitmap)){
                abstractBitmap = new Bitmap();
            };
            if (!Boolean(previewMask)){
                previewMask = new Shape();
                previewMask.graphics.beginFill(0);
                previewMask.graphics.drawRect(0, 1, 200, 21);
                previewMask.graphics.endFill();
                previewMask.x = 55;
                base.addChild(previewMask);
                abstractPreview.mask = previewMask;
            };
            if (!Boolean(mouseEventRect)){
                mouseEventRect = new Sprite();
                mouseEventRect.name = "OVER_BOUND";
                mouseEventRect.buttonMode = true;
                base.addChild(mouseEventRect);
            };
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get data():Object{
            return (_data);
        }
        private function outHandler(_arg1:MouseEvent):void{
        }
        public function set selected(_arg1:Boolean):void{
            this._selected = _arg1;
            if (this._selected){
                if (!data.isChecked){
                    data.isChecked = true;
                };
            } else {
                data.isChecked = false;
            };
            (data as SongInfoServiceObject).isSelected = this._selected;
        }
        private function registEnterframe():void{
            addEventListener(Event.ENTER_FRAME, drawMask, false, 0, true);
        }
        public function set selectAction(_arg1:Boolean):void{
            this._selectAction = _arg1;
        }
        private function removeResourceHandler(_arg1:Event=null):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, removeResourceHandler);
            if (Boolean(checkBox)){
                checkBox.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                base.removeChild(checkBox);
                checkBox = null;
            };
            if (Boolean(songTitle)){
                base.removeChild(songTitle);
                songTitle = null;
            };
        }
        override protected function draw():void{
            var _local5:int;
            super.draw();
            songTitle.visible = true;
            songDelimeter.visible = true;
            songSinger.visible = true;
            abstractPreview.visible = false;
            flowCount = 0;
            abstractPreview.graphics.clear();
            unregistEnterframe();
            abstractPreview.x = 51;
            abstractPreview.y = songIndex.y;
            var _local1:TextFormat = songIndex.getTextFormat();
            var _local2:TextFormat = songTitle.getTextFormat();
            var _local3:TextFormat = songDelimeter.getTextFormat();
            var _local4:TextFormat = songSinger.getTextFormat();
            checkBox.selected = data.isChecked;
            checkBox.move(7, 5);
            checkBox.drawNow();
            if (!data.isServiced){
                data.isPlaying = false;
                listen_icon_instance.visible = false;
                songIndex.visible = true;
                _local1.color = defaultSongIndexFormatColor;
                _local1.bold = false;
                _local2.color = defaultSongTitleTextColor;
                _local2.bold = false;
                _local3.color = defaultSongDelimeterTextColor;
                _local3.bold = false;
                _local4.color = defaultSongSingerTextColor;
                _local4.bold = false;
                base.graphics.clear();
                if ((listData.index % 2) == 0){
                    base.graphics.beginFill(defaultBgColor);
                } else {
                    base.graphics.beginFill(_optionalBGColor);
                };
                base.graphics.drawRect(0, 1, 334, 20);
                base.graphics.endFill();
                album_icon_instance.buttonMode = false;
                album_icon_instance.useHandCursor = false;
                songIndex.alpha = 0.25;
                songTitle.alpha = 0.25;
                songSinger.alpha = 0.25;
                songDelimeter.alpha = 0.25;
                songIndex.text = (listData.row + 1).toString();
                (data as SongInfoServiceObject).soIndex = listData.index;
                songTitle.text = data.label;
                songSinger.text = data.singer;
                if ((data as SongInfoServiceObject).hasMp3File()){
                    if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                        (mp3_icon_instance as MovieClip).gotoAndStop(2);
                        (mp3_icon_instance as MovieClip).buttonMode = false;
                    } else {
                        if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                            (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            (mp3_icon_instance as MovieClip).buttonMode = false;
                        } else {
                            if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                (mp3_icon_instance as MovieClip).buttonMode = false;
                            } else {
                                (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                (mp3_icon_instance as MovieClip).buttonMode = false;
                            };
                        };
                    };
                } else {
                    if (!(data as SongInfoServiceObject).hasMp3File()){
                        (mp3_icon_instance as MovieClip).gotoAndStop(2);
                        (mp3_icon_instance as MovieClip).buttonMode = false;
                    };
                };
                if ((data as SongInfoServiceObject).isAdultSong()){
                    is_adult_icon_instance.visible = true;
                } else {
                    is_adult_icon_instance.visible = false;
                };
            } else {
                if (!data.isValid){
                    data.isPlaying = false;
                    listen_icon_instance.visible = false;
                    songIndex.visible = true;
                    _local1.color = defaultSongIndexFormatColor;
                    _local1.bold = false;
                    _local2.color = defaultSongTitleTextColor;
                    _local2.bold = false;
                    _local3.color = defaultSongDelimeterTextColor;
                    _local3.bold = false;
                    _local4.color = defaultSongSingerTextColor;
                    _local4.bold = false;
                    album_icon_instance.buttonMode = true;
                    album_icon_instance.useHandCursor = true;
                    base.graphics.clear();
                    if ((listData.index % 2) == 0){
                        base.graphics.beginFill(defaultBgColor);
                    } else {
                        base.graphics.beginFill(_optionalBGColor);
                    };
                    base.graphics.drawRect(0, 1, 334, 20);
                    base.graphics.endFill();
                    songIndex.alpha = 0.25;
                    songTitle.alpha = 0.25;
                    songSinger.alpha = 0.25;
                    songDelimeter.alpha = 0.25;
                    songIndex.text = (listData.row + 1).toString();
                    (data as SongInfoServiceObject).soIndex = listData.index;
                    songTitle.text = data.label;
                    songSinger.text = data.singer;
                    if ((data as SongInfoServiceObject).hasMp3File()){
                        if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                            (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            (mp3_icon_instance as MovieClip).buttonMode = false;
                        } else {
                            if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                                (mp3_icon_instance as MovieClip).gotoAndStop(1);
                                (mp3_icon_instance as MovieClip).buttonMode = true;
                            } else {
                                if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                    (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                    (mp3_icon_instance as MovieClip).buttonMode = false;
                                } else {
                                    (mp3_icon_instance as MovieClip).gotoAndStop(1);
                                    (mp3_icon_instance as MovieClip).buttonMode = true;
                                };
                            };
                        };
                    } else {
                        if (!(data as SongInfoServiceObject).hasMp3File()){
                            (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            (mp3_icon_instance as MovieClip).buttonMode = false;
                        };
                    };
                    if ((data as SongInfoServiceObject).isAdultSong()){
                        is_adult_icon_instance.visible = true;
                    } else {
                        is_adult_icon_instance.visible = false;
                    };
                } else {
                    checkBox.mouseEnabled = true;
                    mouseEventRect.mouseEnabled = true;
                    album_icon_instance.buttonMode = false;
                    album_icon_instance.useHandCursor = false;
                    checkBox.alpha = 1;
                    songIndex.alpha = 1;
                    songTitle.alpha = 1;
                    songSinger.alpha = 1;
                    songDelimeter.alpha = 1;
                    if (selected){
                        base.graphics.clear();
                        base.graphics.beginFill(selectBgColor);
                        base.graphics.drawRect(0, 1, 334, 20);
                        base.graphics.endFill();
                    } else {
                        base.graphics.clear();
                        if ((listData.index % 2) == 0){
                            base.graphics.beginFill(defaultBgColor);
                        } else {
                            base.graphics.beginFill(_optionalBGColor);
                        };
                        base.graphics.drawRect(0, 1, 334, 20);
                        base.graphics.endFill();
                    };
                    if (Boolean(listData)){
                        _local5 = (listData.owner as NaverPostingMusicPlayerList).dataProvider.length;
                        songIndex.text = (listData.row + 1).toString();
                        (data as SongInfoServiceObject).soIndex = listData.index;
                        songTitle.text = data.label;
                        songSinger.text = data.singer;
                        if ((data as SongInfoServiceObject).hasMp3File()){
                            if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                                (mp3_icon_instance as MovieClip).gotoAndStop(1);
                            } else {
                                if ((((data as SongInfoServiceObject).isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                    (mp3_icon_instance as MovieClip).gotoAndStop(2);
                                } else {
                                    (mp3_icon_instance as MovieClip).gotoAndStop(1);
                                };
                            };
                        } else {
                            if (!(data as SongInfoServiceObject).hasMp3File()){
                                (mp3_icon_instance as MovieClip).gotoAndStop(2);
                            };
                        };
                        if ((data as SongInfoServiceObject).isAdultSong()){
                            is_adult_icon_instance.visible = true;
                        } else {
                            is_adult_icon_instance.visible = false;
                        };
                        if (data.isPlaying){
                            _local1.color = activeSongIndexFormatColor;
                            _local1.bold = true;
                            _local2.color = activeSongIndexFormatColor;
                            _local2.bold = true;
                            _local3.color = activeSongIndexFormatColor;
                            _local3.bold = true;
                            _local4.color = activeSongIndexFormatColor;
                            _local4.bold = true;
                            listen_icon_instance.visible = true;
                            songIndex.visible = false;
                            if (((isMouseOver) && (!(isDragOver)))){
                                if (data.isAbstract){
                                    abstractPreview.visible = true;
                                    unregistEnterframe();
                                    abstractPreview.x = 51;
                                    abstractPreview.y = songIndex.y;
                                    registEnterframe();
                                };
                            } else {
                                if (((((isMouseOver) && (isDragOver))) || (((!(isMouseOver)) && (isDragOver))))){
                                    if ((((listData.index == 0)) && ((mouseY < 10)))){
                                        ControlSettingManager.getInstance().dragAndDropFirst = true;
                                        base.graphics.lineStyle(2, indicatorColor);
                                        base.graphics.moveTo(0, 4);
                                        base.graphics.lineTo(314, 4);
                                    } else {
                                        if ((((listData.index == (_local5 - 1))) && ((mouseY >= 0)))){
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(2, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        } else {
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(4, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        };
                                    };
                                } else {
                                    if (data.isAbstract){
                                        unregistEnterframe();
                                        abstractPreview.x = 51;
                                        abstractPreview.y = songIndex.y;
                                        abstractPreview.visible = false;
                                        songTitle.visible = true;
                                        songDelimeter.visible = true;
                                        songSinger.visible = true;
                                    };
                                };
                            };
                        } else {
                            listen_icon_instance.visible = false;
                            songIndex.visible = true;
                            if (((isMouseOver) && (!(isDragOver)))){
                                if (data.isAbstract){
                                    abstractPreview.visible = true;
                                    unregistEnterframe();
                                    abstractPreview.x = 51;
                                    abstractPreview.y = songIndex.y;
                                    registEnterframe();
                                };
                                _local1.color = activeSongIndexFormatColor;
                                _local2.color = activeSongIndexFormatColor;
                                _local3.color = activeSongIndexFormatColor;
                                _local4.color = activeSongIndexFormatColor;
                            } else {
                                if (((((isMouseOver) && (isDragOver))) || (((!(isMouseOver)) && (isDragOver))))){
                                    if ((((listData.index == 0)) && ((mouseY < 10)))){
                                        ControlSettingManager.getInstance().dragAndDropFirst = true;
                                        base.graphics.lineStyle(2, indicatorColor);
                                        base.graphics.moveTo(0, 4);
                                        base.graphics.lineTo(314, 4);
                                    } else {
                                        if ((((listData.index == (_local5 - 1))) && ((mouseY >= 0)))){
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(2, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        } else {
                                            ControlSettingManager.getInstance().dragAndDropFirst = false;
                                            base.graphics.lineStyle(4, indicatorColor);
                                            base.graphics.moveTo(0, 20);
                                            base.graphics.lineTo(314, 20);
                                        };
                                    };
                                } else {
                                    if (data.isAbstract){
                                        unregistEnterframe();
                                        abstractPreview.visible = false;
                                        songTitle.visible = true;
                                        songDelimeter.visible = true;
                                        songSinger.visible = true;
                                    };
                                    _local1.color = defaultSongIndexFormatColor;
                                    _local1.bold = false;
                                    _local2.color = defaultSongTitleTextColor;
                                    _local2.bold = false;
                                    _local3.color = defaultSongDelimeterTextColor;
                                    _local3.bold = false;
                                    _local4.color = defaultSongSingerTextColor;
                                    _local4.bold = false;
                                };
                            };
                        };
                    };
                };
            };
            songIndex.setTextFormat(_local1, 0, songIndex.text.length);
            songTitle.setTextFormat(_local2, 0, songTitle.text.length);
            songDelimeter.setTextFormat(_local3, 0, songDelimeter.text.length);
            songSinger.setTextFormat(_local4, 0, songSinger.text.length);
            songIndex.y = 3;
            songTitle.width = (songTitle.textWidth + 5);
            songTitle.height = (songTitle.textHeight + 3);
            songTitle.y = songIndex.y;
            songDelimeter.x = (songTitle.x + songTitle.width);
            songDelimeter.width = (songDelimeter.textWidth + 5);
            songDelimeter.height = (songDelimeter.textHeight + 5);
            songDelimeter.y = songIndex.y;
            songSinger.x = (songDelimeter.x + songDelimeter.width);
            songSinger.width = (songSinger.textWidth + 5);
            songSinger.height = (songSinger.textHeight + 5);
            songSinger.y = songIndex.y;
            checkSongInfoTextLength();
            songIndex.setTextFormat(_local1, 0, songIndex.text.length);
            songTitle.setTextFormat(_local2, 0, songTitle.text.length);
            songDelimeter.setTextFormat(_local3, 0, songDelimeter.text.length);
            songSinger.setTextFormat(_local4, 0, songSinger.text.length);
            is_adult_icon_instance.x = 0xFF;
            is_adult_icon_instance.y = 3.5;
        }
        public function set isPlaying(_arg1:Boolean):void{
            this.data.isPlaying = _arg1;
            draw();
        }
        public function removeAsset():void{
            unregistEnterframe();
            if (mouseEventRect){
                base.removeChild(mouseEventRect);
                mouseEventRect = null;
            };
            if (abstractBitmap){
                if (abstractBitmap.bitmapData){
                    abstractBitmap.bitmapData.dispose();
                    abstractBitmap.bitmapData = null;
                };
                abstractBitmap = null;
            };
            if (abstractPreview){
                base.removeChild(abstractPreview);
                abstractPreview = null;
            };
            if (previewMask){
                base.removeChild(previewMask);
                previewMask = null;
            };
            if (Boolean(checkBox)){
                base.removeChild(checkBox);
                checkBox.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                checkBox = null;
            };
            if (Boolean(songIndex)){
                base.removeChild(songIndex);
                songIndex = null;
            };
            if (Boolean(songTitle)){
                base.removeChild(songTitle);
                songTitle = null;
            };
            if (Boolean(songDelimeter)){
                base.removeChild(songDelimeter);
                songDelimeter = null;
            };
            if (Boolean(songSinger)){
                base.removeChild(songSinger);
                songSinger = null;
            };
            if (Boolean(album_icon_instance)){
                base.removeChild(album_icon_instance);
                album_icon_instance.removeEventListener(MouseEvent.MOUSE_OVER, showTooltipGuide);
                album_icon_instance.removeEventListener(MouseEvent.MOUSE_OUT, hideTooltipGuide);
                album_icon_instance = null;
            };
            if (Boolean(mp3_icon_instance)){
                base.removeChild(mp3_icon_instance);
                mp3_icon_instance = null;
            };
            if (Boolean(is_adult_icon_instance)){
                base.removeChild(is_adult_icon_instance);
                is_adult_icon_instance = null;
            };
            if (Boolean(base)){
                removeChild(base);
                base = null;
            };
            if (Boolean(data)){
            };
            if (Boolean(_listData)){
                _listData = null;
            };
            removeResourceHandler();
        }
        public function set listData(_arg1:ListData):void{
            this._listData = _arg1;
        }
        private function unregistEnterframe():void{
            removeEventListener(Event.ENTER_FRAME, drawMask);
        }
        private function overHandler(_arg1:MouseEvent):void{
        }
        private function hideTooltipGuide(_arg1:MouseEvent):void{
            TooltipManager.getInstance().hide();
        }
        public function get selectAction():Boolean{
            return (_selectAction);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
            if (!(_arg1 as SongInfoServiceObject).isEmpty){
                songTitle.text = (_arg1 as SongInfoServiceObject).label;
            };
        }
        private function showTooltipGuide(_arg1:MouseEvent):void{
            var _local2:SongInfoServiceObject = (data as SongInfoServiceObject);
            if (((_local2) && (_local2.isServiced))){
                TooltipManager.getInstance().setText("앨범정보보기");
                TooltipManager.getInstance().setOffsetPoint(0, 20);
                TooltipManager.getInstance().show();
            };
        }
        public function set isDragOver(_arg1:Boolean):void{
            this.data.isDragOver = _arg1;
            draw();
        }
        private function checkSongInfoTextLength():void{
            var _local3:Boolean;
            var _local10:TextField;
            var _local11:TextFormat;
            var _local12:BitmapData;
            var _local1:int;
            var _local2:Number = (songTitle.x + songTitle.width);
            var _local4:Number = 250;
            data.abstractedTitle = ((data.getTrackTitle() + " / ") + data.singer);
            data.isAbstract = false;
            var _local5:Number = songTitle.x;
            var _local6:int;
            while (_local6 < songTitle.text.length) {
                _local5 = (_local5 + songTitle.getCharBoundaries(_local6).width);
                if (_local5 >= 235){
                    songTitle.text = (songTitle.text.slice(0, _local6) + "...");
                    songDelimeter.visible = false;
                    songSinger.visible = false;
                    _local3 = true;
                    _local4 = 250;
                    break;
                };
                _local6++;
            };
            var _local7:Number = songSinger.x;
            var _local8:int = songSinger.text.length;
            var _local9:int;
            while (_local9 < _local8) {
                _local7 = (_local7 + songSinger.getCharBoundaries(_local9).width);
                if (_local7 >= 240){
                    songSinger.text = (songSinger.text.slice(0, _local9) + "...");
                    _local3 = true;
                    _local4 = 250;
                    break;
                };
                _local9++;
            };
            if (_local3){
                data.isAbstract = true;
                _local10 = new TextField();
                _local11 = new TextFormat();
                _local11.font = "돋움,AppleGothic";
                _local11.size = 12;
                _local11.color = activeSongIndexFormatColor;
                _local11.bold = data.isPlaying;
                _local10.defaultTextFormat = _local11;
                _local10.text = data.abstractedTitle;
                _local10.width = (_local10.textWidth + 5);
                _local10.height = (_local10.textHeight + 5);
                data.originalLength = (_local10.width - 245);
                _local12 = new BitmapData((_local10.width + flowTextSpace), _local10.height, true, defaultBgColor);
                _local12.draw(_local10);
                abstractBitmap.bitmapData = _local12;
            };
            if (is_adult_icon_instance.visible){
                _local4 = 235;
            };
            mouseEventRect.graphics.clear();
            mouseEventRect.graphics.beginFill(0xFFFFFF, 0);
            mouseEventRect.graphics.drawRect(songIndex.x, 0, _local4, 19);
            mouseEventRect.graphics.endFill();
        }
        private function registEventHandler():void{
        }
        public function get listData():ListData{
            return (_listData);
        }
        public function createBase():void{
            base = new Sprite();
            base.mouseEnabled = false;
            base.graphics.clear();
            base.graphics.beginFill(defaultBgColor);
            base.graphics.drawRect(0, 1, 334, 20);
            base.graphics.endFill();
            addChild(base);
        }
        public function setMouseState(_arg1:String):void{
            this._setMouseState = _arg1;
        }
        private function drawMask(_arg1:Event=null):void{
            var _local2:Graphics;
            if (Boolean(data)){
                if (abstractBitmap.bitmapData){
                    _local2 = abstractPreview.graphics;
                    _local2.clear();
                    _local2.beginBitmapFill(abstractBitmap.bitmapData, new Matrix(1, 0, 0, 1, flowCount, 0), true, false);
                    _local2.drawRect(0, 0, abstractBitmap.bitmapData.width, abstractBitmap.bitmapData.height);
                    _local2.endFill();
                    flowCount = (flowCount - flowPixelUnit);
                    songTitle.visible = false;
                    songDelimeter.visible = false;
                    songSinger.visible = false;
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPlayerCellRenderer_listen_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPostingPlayerCellRenderer_listen_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import flash.text.*;

    public class DescriptionPanel extends Sprite {

        private static var alert_sentence_icon:Class;
        private static var color:int = 16764159;

        private var textField:TextField;
        private var noti_instance:MovieClip;

        public function DescriptionPanel(){
            mouseEnabled = false;
            mouseChildren = false;
        }
        public static function updateStyle(_arg1):void{
            color = _arg1.NOTIFY_TEXT_SENTENCE_COLOR;
        }
        public static function udpateAsset(_arg1):void{
            alert_sentence_icon = _arg1.getDefinition("empty_guide_text");
        }

        public function showInfo(_arg1:Boolean):void{
            visible = _arg1;
        }
        public function changeFrame():void{
            noti_instance.gotoAndStop(2);
        }
        public function showLoadingInfo():void{
            noti_instance.gotoAndStop(4);
        }
        public function createNotifyTextField():void{
            noti_instance = new alert_sentence_icon();
            noti_instance.mouseEnabled = false;
            noti_instance.gotoAndStop(1);
            addChild(noti_instance);
        }
        public function removeAsset():void{
            removeChild(noti_instance);
            noti_instance = null;
        }
        public function changeFrameAs(_arg1:int=3):void{
            noti_instance.gotoAndStop(_arg1);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPlayerCellRenderer_mp3_icon extends MovieClipAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPlayerCellRenderer_is_adult_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPostingPlayerCellRenderer_mp3_icon extends MovieClipAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPlayerCellRenderer_album_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPostingPlayerCellRenderer_checkBox_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPostingPlayerCellRenderer_album_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPlayerCellRenderer_checkBox_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPlayerCellRenderer_selected_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer {
    import flash.display.*;
    import mx.core.*;

    public class NaverBasicPostingPlayerCellRenderer_selected_icon extends SpriteAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText.*;

    public class NaverPostingPlayerHeader extends Sprite {

        public static const SHOW_LYRICS_LIST:String = "SHOW_LYRICS_LIST";
        public static const CONFIG_COLOR_SET:String = "config_color_btn";
        public static const CONFIG_PLAY_LIST_SET:String = "config_lists_btn";
        private static const SHOW_CREATOR_LINK_YES:String = "Y";
        public static const TITEL_BAR:String = "TITEL_BAR";
        public static const USERID_BAR:String = "USERID_BAR";
        public static const SHOW_TOP100_SONG_LIST:String = "SHOW_TOP100_SONG_LIST";
        private static const SHOW_CREATOR_LINK_NO:String = "N";
        public static const SHOW_PLAY_SONG_LIST:String = "SHOW_PLAY_SONG_LIST";

        private static var header_button_list:Class;
        private static var titleColor:int = 0;
        private static var userIdColor:int = 0xCCCCCC;

        private var titleBar:FlowTextField;
        private var userIdBar:FlowTextField;
        private var header_button_list_instance;

        public function NaverPostingPlayerHeader(){
            drawHeaderButtonList();
        }
        public static function updateAsset(_arg1):void{
            header_button_list = _arg1.getDefinition("header_base_layer");
        }
        public static function updateStyle(_arg1):void{
            titleColor = _arg1.BASIC_POSTION_RIGHT_TITLE_COLOR;
            userIdColor = _arg1.BASIC_POSTION_RIGHT_USER_ID_COLOR;
        }

        public function updateHeaderData(_arg1:String, _arg2:String):void{
            titleBar.text = (_arg1 + " ");
            userIdBar.text = ("by " + _arg2);
            userIdBar.x = ((titleBar.x + titleBar.width) + 2);
        }
        private function drawHeaderButtonList():void{
            header_button_list_instance = new header_button_list();
            header_button_list_instance.addEventListener(MouseEvent.MOUSE_DOWN, downHandler);
            header_button_list_instance.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            header_button_list_instance.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            addChild(header_button_list_instance);
            createHeaderTitle();
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:TooltipManager;
            var _local5:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                _local4 = TooltipManager.getInstance();
                _local4.setOffsetPoint(0, 20);
                _local4.fadeInDuration = 0.4;
                _local5 = "";
                switch (_local3){
                    case TITEL_BAR:
                        if (titleBar.isReduced){
                            _local5 = titleBar.originText;
                            _local4.setText(_local5);
                            _local4.setHorizontalAlign(HorizontalAlignment.RIGHT);
                            _local4.setVerticalAlign(VerticalAlignment.BOTTOM);
                            _local4.show();
                        };
                        break;
                    case USERID_BAR:
                        if (userIdBar.isReduced){
                            _local5 = userIdBar.originText;
                            _local4.setText(_local5);
                            _local4.setHorizontalAlign(HorizontalAlignment.RIGHT);
                            _local4.setVerticalAlign(VerticalAlignment.BOTTOM);
                            _local4.show();
                        };
                        break;
                };
            };
        }
        public function updateHeaderButton(_arg1:String):void{
        }
        public function removeAsset():void{
            header_button_list_instance.removeEventListener(MouseEvent.MOUSE_DOWN, downHandler);
            header_button_list_instance.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
            header_button_list_instance.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
            removeChild(header_button_list_instance);
            header_button_list_instance = null;
        }
        private function createHeaderTitle():void{
            titleBar = new FlowTextField();
            titleBar.name = TITEL_BAR;
            titleBar.availableWidth = 180;
            titleBar.useFlowEffect = false;
            titleBar.fontFamily = "돋움,AppleGothic";
            titleBar.fontColor = titleColor;
            titleBar.fontSize = 12;
            titleBar.letterSpacing = -1;
            titleBar.bold = true;
            titleBar.x = 10;
            titleBar.y = 5;
            header_button_list_instance.addChild(titleBar);
            userIdBar = new FlowTextField();
            var _local1:String = PostingSettingClass.getInstance().linkYn;
            if (((Boolean(_local1)) && ((_local1 == SHOW_CREATOR_LINK_YES)))){
                userIdBar.useHandCursor = true;
                userIdBar.buttonMode = true;
            };
            userIdBar.useFlowEffect = false;
            userIdBar.name = USERID_BAR;
            userIdBar.availableWidth = 100;
            userIdBar.fontFamily = "돋움,AppleGothic";
            userIdBar.fontColor = userIdColor;
            userIdBar.fontSize = 11;
            userIdBar.letterSpacing = -0.5;
            userIdBar.x = 10;
            userIdBar.y = 5;
            header_button_list_instance.addChild(userIdBar);
        }
        private function downHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local6:NaverMusicPlayerBasicEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case USERID_BAR:
                        _local4 = PostingSettingClass.getInstance().linkYn;
                        if (!Boolean(_local4)){
                            return;
                        };
                        switch (_local4){
                            case SHOW_CREATOR_LINK_YES:
                                _local5 = PostingSettingClass.getInstance().link;
                                _local6 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_CREATOR_LINK_PAGE, true);
                                _local6.data = {link:_local5};
                                dispatchEvent(_local6);
                                break;
                            case SHOW_CREATOR_LINK_NO:
                                break;
                        };
                        break;
                };
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NaverBasicPlayerHeaderPanel extends Sprite {

        public static const SHOW_PLAY_SONG_LIST:String = "SHOW_PLAY_SONG_LIST";
        public static const CONFIG_COLOR_SET:String = "config_color_btn";
        public static const CONFIG_PLAY_LIST_SET:String = "config_lists_btn";
        public static const SHOW_LYRICS_LIST:String = "SHOW_LYRICS_LIST";
        public static const SHOW_TOP100_SONG_LIST:String = "SHOW_TOP100_SONG_LIST";

        private static var show_lylics_list:Class;
        private static var show_play_list:Class;
        private static var outterColor:int;
        private static var header_button_list:Class;
        private static var defaultSongCountColor:int;
        private static var activeSongCountColor:int;
        private static var defaultOutterColor:int;
        private static var show_top100_list:Class;

        private var shape:Shape;
        private var show_play_list_instance;
        private var shape1:Shape;
        private var show_lylics_list_instance;
        private var show_top100_list_instance;
        private var header_button_list_instance;
        private var songListCountField:TextField;

        public function NaverBasicPlayerHeaderPanel(){
            drawHeaderButtonList();
        }
        public static function updateStyle(_arg1):void{
            outterColor = _arg1.BUTTON_OUTTER;
            defaultOutterColor = _arg1.DEFAULT_BUTTON_OUTTER;
            defaultSongCountColor = _arg1.DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON;
            activeSongCountColor = _arg1.ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON;
        }
        public static function updateAsset(_arg1):void{
            header_button_list = _arg1.getDefinition("header_button_layer");
            show_play_list = _arg1.getDefinition("playlist_btn");
            show_top100_list = _arg1.getDefinition("top100_btn");
            show_lylics_list = _arg1.getDefinition("showlylics_btn");
        }

        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        private function updateSongCountTextColor():void{
            var _local1:TextFormat = songListCountField.getTextFormat(0, songListCountField.text.length);
            var _local2:int = show_play_list_instance.currentFrame;
            if (_local2 == 2){
                _local1.color = activeSongCountColor;
            } else {
                if (_local2 == 1){
                    _local1.color = defaultSongCountColor;
                };
            };
            songListCountField.setTextFormat(_local1, 0, songListCountField.length);
        }
        private function createSongListCount():void{
            songListCountField = new TextField();
            songListCountField.text = "(0)";
            songListCountField.selectable = false;
            songListCountField.mouseEnabled = false;
            var _local1:TextFormat = new TextFormat();
            _local1.font = "돋움,Dotum,AppleGothic";
            _local1.size = 11;
            _local1.bold = false;
            _local1.color = "0xffffff";
            songListCountField.defaultTextFormat = _local1;
            songListCountField.setTextFormat(_local1, 0, songListCountField.length);
            songListCountField.x = 68;
            songListCountField.y = 6;
            songListCountField.width = 50;
            songListCountField.height = 20;
            header_button_list_instance.addChild(songListCountField);
        }
        private function drawHeaderButtonList():void{
            header_button_list_instance = new header_button_list();
            header_button_list_instance.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            header_button_list_instance.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            header_button_list_instance.config_lists_btn.visible = true;
            header_button_list_instance.config_color_btn.visible = false;
            header_button_list_instance.config_lists_btn.x = 310;
            header_button_list_instance.config_lists_btn.y = 7;
            header_button_list_instance.show_lylics_btn.gotoAndStop(2);
            header_button_list_instance.show_playlist_btn.visible = false;
            header_button_list_instance.show_top100_btn.visible = false;
            header_button_list_instance.show_lylics_btn.visible = false;
            addChild(header_button_list_instance);
            show_play_list_instance = new show_play_list();
            show_play_list_instance.buttonMode = true;
            show_play_list_instance.useHandCursor = true;
            show_play_list_instance.name = SHOW_PLAY_SONG_LIST;
            show_play_list_instance.gotoAndStop(2);
            header_button_list_instance.addChild(show_play_list_instance);
            show_top100_list_instance = new show_top100_list();
            show_top100_list_instance.name = SHOW_TOP100_SONG_LIST;
            show_top100_list_instance.buttonMode = true;
            show_top100_list_instance.useHandCursor = true;
            show_top100_list_instance.x = show_play_list_instance.width;
            show_top100_list_instance.gotoAndStop(1);
            header_button_list_instance.addChild(show_top100_list_instance);
            show_lylics_list_instance = new show_lylics_list();
            show_lylics_list_instance.name = SHOW_LYRICS_LIST;
            show_lylics_list_instance.buttonMode = true;
            show_lylics_list_instance.useHandCursor = true;
            show_lylics_list_instance.x = (show_top100_list_instance.x + show_top100_list_instance.width);
            show_lylics_list_instance.gotoAndStop(1);
            header_button_list_instance.addChild(show_lylics_list_instance);
            shape = new Shape();
            shape.graphics.lineStyle(1, defaultOutterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
            shape.graphics.lineTo(0, 27);
            shape.x = -1;
            show_lylics_list_instance.addChild(shape);
            shape1 = new Shape();
            shape1.graphics.lineStyle(1, defaultOutterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
            shape1.graphics.lineTo(0, 27);
            shape1.x = show_play_list_instance.width;
            show_play_list_instance.addChild(shape1);
            createSongListCount();
        }
        public function removeAsset():void{
            if (shape1){
                show_top100_list_instance.removeChild(shape1);
                shape1 = null;
            };
            if (shape){
                show_lylics_list_instance.removeChild(shape);
                shape = null;
            };
            if (Boolean(show_lylics_list_instance)){
                header_button_list_instance.removeChild(show_lylics_list_instance);
                show_lylics_list_instance = null;
            };
            if (Boolean(show_top100_list_instance)){
                header_button_list_instance.removeChild(show_top100_list_instance);
                show_top100_list_instance = null;
            };
            if (Boolean(show_play_list_instance)){
                header_button_list_instance.removeChild(show_play_list_instance);
                show_play_list_instance = null;
            };
            if (Boolean(header_button_list_instance)){
                removeChild(header_button_list_instance);
                header_button_list_instance.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
                header_button_list_instance.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
                header_button_list_instance = null;
            };
        }
        public function updateHeaderButton(_arg1:String):void{
            switch (_arg1){
                case SHOW_PLAY_SONG_LIST:
                    show_play_list_instance.gotoAndStop(2);
                    show_lylics_list_instance.gotoAndStop(1);
                    show_top100_list_instance.gotoAndStop(1);
                    shape.graphics.clear();
                    shape.graphics.lineStyle(1, defaultOutterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                    shape.graphics.lineTo(0, 27);
                    shape1.graphics.clear();
                    shape1.graphics.lineStyle(1, outterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                    shape1.graphics.lineTo(0, 27);
                    break;
                case SHOW_TOP100_SONG_LIST:
                    show_play_list_instance.gotoAndStop(1);
                    show_lylics_list_instance.gotoAndStop(1);
                    show_top100_list_instance.gotoAndStop(2);
                    shape.graphics.clear();
                    shape.graphics.lineStyle(1, outterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                    shape.graphics.lineTo(0, 27);
                    shape1.graphics.clear();
                    shape1.graphics.lineStyle(2, outterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                    shape1.graphics.lineTo(0, 27);
                    break;
                case SHOW_LYRICS_LIST:
                    show_play_list_instance.gotoAndStop(1);
                    show_lylics_list_instance.gotoAndStop(2);
                    show_top100_list_instance.gotoAndStop(1);
                    shape.graphics.clear();
                    shape.graphics.lineStyle(1, outterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                    shape.graphics.lineTo(0, 27);
                    shape1.graphics.clear();
                    shape1.graphics.lineStyle(1, defaultOutterColor, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                    shape1.graphics.lineTo(0, 27);
                    break;
            };
            updateSongCountTextColor();
        }
        public function updateSongCount(_arg1:int):void{
            var _local2:String = _arg1.toString();
            songListCountField.text = (("(" + _local2) + ")");
            updateSongCountTextColor();
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(0, 20);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case "config_lists_btn":
                        _local3.setText(NaverMusicPlayerProperty.COLOR_SELECT_TEXT);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case "config_color_btn":
                        _local3.setText(NaverMusicPlayerProperty.COLOR_SELECT_TEXT);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case SHOW_TOP100_SONG_LIST:
                        break;
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent {
    import flash.display.*;
    import flash.utils.*;
    import com.flashdynamix.motion.*;
    import flash.text.*;

    public class WordBalloonTip extends Sprite {

        private static var bg_asset;

        private var txt:TextField;
        private var bg:DisplayObject;

        public static function updateAsset(_arg1):void{
            bg_asset = _arg1.getDefinition("balloon_tag");
        }

        public function updateSongCount(_arg1:int):void{
            var _local2:String = _arg1.toString();
            txt.text = _local2;
            txt.width = (txt.textWidth + 4);
            txt.height = 16;
            var _local3 = 25;
            if (_local2.length >= 3){
                _local3 = 23;
            };
            txt.x = (_local3 - int((txt.width / 2)));
            show();
            setTimeout(hide, 1000);
        }
        public function hide():void{
            TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.4, null, 0.4);
        }
        public function createAsset():void{
            bg = new bg_asset();
            addChild(bg);
            txt = new TextField();
            txt.x = 12;
            txt.y = 1;
            txt.selectable = false;
            txt.blendMode = BlendMode.LAYER;
            var _local1:TextFormat = new TextFormat();
            _local1.font = "돋움,AppleGothic";
            _local1.size = 12;
            _local1.color = 0;
            txt.defaultTextFormat = _local1;
            addChild(txt);
            mouseEnabled = false;
            mouseChildren = false;
        }
        public function removeAsset():void{
            if (bg){
                removeChild(bg);
                bg = null;
            };
            if (txt){
                removeChild(txt);
                txt = null;
            };
        }
        public function show():void{
            TweensyZero.fromTo(this, {alpha:0}, {alpha:1}, 0.4, null, 0.4);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin {
    import flash.display.*;

    public class ListBackGround extends Sprite {

        public static var SKIN_BG_COLOR:int = 0xFFFFFF;

        public function ListBackGround(_arg1:Number=330, _arg2:Number=200){
            var _local3:Graphics = graphics;
            _local3.clear();
            _local3.beginFill(SKIN_BG_COLOR);
            _local3.drawRect(0, 0, _arg1, _arg2);
            _local3.endFill();
        }
        public static function updateSkinStyle(_arg1):void{
            SKIN_BG_COLOR = _arg1.SKIN_BG_COLOR;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.events.*;
    import com.nhn.nclicks.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;
    import flash.external.*;

    public class CSlider extends MovieClip {

        public static const WHEEL_FLASH:String = "wheelFlash";
        public static const WHEEL_JS:String = "wheelJS";

        private static var LIMIT_LINE_COLOR:int = 0xCCCCCC;

        private var _direction:String = "horizental";
        private var _stage;
        private var _wheelRatio:Number = 0.1;
        public var _thumbSize:Number = 0;
        private var _sliderSize:Number;
        private var _minValue:Number;
        private var axis:String;
        private var newWheelRatio:Number;
        private var _mask:Sprite;
        private var _maxValue:Number;
        private var _ease:Function = null;
        private var _trackLimit:Shape;
        public var limitWidth:int = 10;
        public var _thumb:MovieClip;
        private var _wheel:String = "";
        private var _trackEmpty:MovieClip;
        private var side:String;
        public var limitColor:int = 0xCCCCCC;
        public var _thumbSpace:Number = 0;
        private var _value:Number;
        private var _duration:Number = 0.2;
        private var _trackFull:MovieClip;
        public var _isFull:Boolean;

        public function CSlider(_arg1:MovieClip, _arg2:MovieClip, _arg3:MovieClip=null, _arg4:String="horizental", _arg5:Number=0, _arg6:Number=100, _arg7:Number=50, _arg8:Boolean=false, _arg9:Boolean=false){
            _thumb = _arg1;
            _trackEmpty = _arg2;
            _trackFull = _arg3;
            _direction = _arg4;
            switch (_arg4){
                case "vertical":
                    axis = "y";
                    side = "height";
                    break;
                case "horizental":
                default:
                    axis = "x";
                    side = "width";
            };
            _minValue = _arg5;
            _maxValue = _arg6;
            if (_arg7 > _arg6){
                value = _arg6;
            } else {
                if (_arg7 < _arg5){
                    value = _arg5;
                } else {
                    value = _arg7;
                };
            };
            initAssets(_arg8, _arg9);
            addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            addEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);
        }
        public static function updateStyle(_arg1):void{
            LIMIT_LINE_COLOR = _arg1.NPOD_LIMIT_LINE_COLOR;
        }

        public function get sliderSize():Number{
            return (_sliderSize);
        }
        public function set sliderSize(_arg1:Number):void{
            _sliderSize = _arg1;
        }
        public function get direction():String{
            return (_direction);
        }
        public function drawLimitArea():void{
        }
        private function trackEmptyUpHandler(_arg1:MouseEvent):void{
            var e:* = _arg1;
            if (Boolean(e)){
                switch (name){
                    case "progressBar":
                        try {
                            NClicks.sendLog(e, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_TIME, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_TIME_CID);
                        } catch(error:Error) {
                        };
                        break;
                    case "volumeBar":
                        try {
                            NClicks.sendLog(e, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SOUND, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SOUND_CID);
                        } catch(error:Error) {
                        };
                        break;
                };
            };
            e.stopImmediatePropagation();
            _thumb.stopDrag();
            dispatchEvent(new CSliderEvent(CSliderEvent.TRACK_CLICK_END));
        }
        public function get wheelRatio():Number{
            return (_wheelRatio);
        }
        public function get duration():Number{
            return (_duration);
        }
        public function unregisterWheel():void{
            if (_stage){
                _stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
            };
        }
        private function thumbDownHandler(_arg1:MouseEvent=null):void{
            dispatchEvent(new CSliderEvent(CSliderEvent.THUMB_DRAG_START));
            _thumb.startDrag(false, getDragRect());
            stage.addEventListener(MouseEvent.MOUSE_MOVE, thumbDraggingHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
        }
        private function initTrack(_arg1:Boolean=false):void{
            _trackEmpty.addEventListener(MouseEvent.MOUSE_DOWN, trackEmptyDownHandler);
            _trackEmpty.addEventListener(MouseEvent.MOUSE_UP, trackEmptyUpHandler);
            _trackEmpty.buttonMode = true;
            addChild(_trackEmpty);
            if (_arg1){
                _trackLimit = new Shape();
                _trackLimit.graphics.clear();
                _trackLimit.graphics.beginFill(LIMIT_LINE_COLOR);
                _trackLimit.graphics.drawRect(0, 0, 0, 2);
                _trackLimit.graphics.endFill();
                addChild(_trackLimit);
            };
            if (_trackFull){
                _trackFull.mouseEnabled = false;
                initMask(_trackFull);
                addChild(_trackFull);
            };
        }
        private function initMask(_arg1:MovieClip):void{
            _mask = new Sprite();
            _mask.graphics.beginFill(0xFF0000);
            _mask.graphics.drawRect(_arg1.x, _arg1.y, _arg1.width, _arg1.height);
            addChild(_mask);
            _arg1.mask = _mask;
        }
        public function updateLimitArea(_arg1:Number):void{
            if (_arg1 == -1){
                return;
            };
            this.limitWidth = _arg1;
            if ((((this.limitWidth == 0)) || (isNaN(this.limitWidth)))){
                this.limitWidth = 1;
            };
            _trackLimit.graphics.clear();
            _trackLimit.graphics.beginFill(LIMIT_LINE_COLOR);
            _trackLimit.graphics.drawRect(0, 0, this.limitWidth, 2);
            _trackLimit.graphics.endFill();
            thumbSpace = (this.limitWidth + 1);
        }
        public function set thumbSpace(_arg1:Number):void{
            this._thumbSpace = _arg1;
        }
        private function initThumb(_arg1:Boolean=false):void{
            _thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDownHandler);
            _thumb.addEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
            _thumb.buttonMode = true;
            if ((((_thumbSize == 0)) && (!(_arg1)))){
                _thumbSize = _thumb[side];
            };
            var _local2:Number = ((value - minValue) / (maxValue - minValue));
            moveThumbFromValue(_local2);
            addChild(_thumb);
        }
        public function initProgressData():void{
            thumbSpace = 0;
            this.limitWidth = 0;
            _trackLimit.graphics.clear();
        }
        private function changeValueFromThumb():void{
            var _local1:Number = (thumbSpotRatio * (maxValue - minValue));
            value = _local1;
        }
        public function set duration(_arg1:Number):void{
            _duration = _arg1;
        }
        private function registerWheel():void{
            if (wheel == WHEEL_FLASH){
                if (_stage){
                    if (wheel){
                        _stage.addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
                    } else {
                        _stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
                    };
                };
            } else {
                if (wheel == WHEEL_JS){
                    if (ExternalInterface.available){
                        ExternalInterface.addCallback("onWheelHandler", externalWheelHandler);
                    };
                };
            };
        }
        public function set isFull(_arg1:Boolean):void{
            this._isFull = _arg1;
        }
        private function mouseWheelHandler(_arg1:MouseEvent):void{
            wheeler(_arg1.delta);
        }
        public function set wheel(_arg1:String):void{
            _wheel = _arg1;
            registerWheel();
        }
        private function initAssets(_arg1:Boolean=false, _arg2:Boolean=false):void{
            initTrack(_arg1);
            initThumb(_arg2);
        }
        private function getDragRect():Rectangle{
            var _local1:Rectangle = new Rectangle();
            _local1[side] = thumbSpace;
            if (_thumbSpace != 0){
                _local1[side] = _thumbSpace;
            };
            return (_local1);
        }
        private function trackEmptyDownHandler(_arg1:MouseEvent):void{
            var _local3:Number;
            dispatchEvent(new CSliderEvent(CSliderEvent.TRACK_CLICK_START));
            var _local2:MovieClip = (_arg1.target as MovieClip);
            if (direction == "horizental"){
                _local3 = ((_local2.mouseX - (_thumbSize / 2)) / thumbSpace);
            } else {
                if (direction == "vertical"){
                    _local3 = ((_local2.mouseY - (_thumbSize / 2)) / thumbSpace);
                };
            };
            moveThumbFromValue(_local3);
        }
        public function get minValue():Number{
            return (_minValue);
        }
        private function removedFromStageHandler(_arg1:Event):void{
            if (stage.hasEventListener(MouseEvent.MOUSE_WHEEL)){
                stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
            };
            if (_stage){
                _stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
            };
            _trackEmpty.removeEventListener(MouseEvent.MOUSE_DOWN, trackEmptyDownHandler);
            _trackEmpty.removeEventListener(MouseEvent.MOUSE_UP, trackEmptyUpHandler, true);
            _thumb.addEventListener(MouseEvent.MOUSE_DOWN, thumbDownHandler);
            _thumb.addEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
            removeEventListener(Event.REMOVED_FROM_STAGE, removedFromStageHandler);
        }
        public function drawLimitAreaForce():void{
            _trackLimit.graphics.clear();
            _trackLimit.graphics.beginFill(LIMIT_LINE_COLOR);
            _trackLimit.graphics.drawRect(0, 0, _trackEmpty.width, 2);
            _trackLimit.graphics.endFill();
        }
        public function wheeler(_arg1:Number):void{
            if (isNaN(newWheelRatio)){
                newWheelRatio = thumbSpotRatio;
            };
            if (_arg1 < 0){
                newWheelRatio = (newWheelRatio - wheelRatio);
                if (newWheelRatio < 0){
                    newWheelRatio = 0;
                };
                moveThumbFromValue(newWheelRatio);
            } else {
                if (_arg1 > 0){
                    newWheelRatio = (newWheelRatio + wheelRatio);
                    if (newWheelRatio > 1){
                        newWheelRatio = 1;
                    };
                    moveThumbFromValue(newWheelRatio);
                };
            };
        }
        private function viewUpdate(_arg1:MotionEvent=null):void{
            changeValueFromThumb();
            if (_trackFull){
                _mask[axis] = (_thumb[axis] - _mask[side]);
            };
            dispatchEvent(new CSliderEvent(CSliderEvent.SLIDER_CHANGE));
        }
        public function thumbSizeOption(_arg1:Number):void{
            _thumbSize = _arg1;
        }
        private function addedToStageHandler(_arg1:Event):void{
            _stage = stage;
            registerWheel();
            removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
        }
        public function get isFull():Boolean{
            return (_isFull);
        }
        private function externalWheelHandler(_arg1:Number, _arg2:Number, _arg3:Number):void{
            wheeler(_arg1);
        }
        public function get wheel():String{
            return (_wheel);
        }
        private function thumbDraggingHandler(_arg1:Event):void{
            viewUpdate();
        }
        public function get thumbSpace():Number{
            return ((_trackEmpty[side] - _thumbSize));
        }
        public function set value(_arg1:Number):void{
            _value = _arg1;
        }
        public function set ease(_arg1:Function):void{
            _ease = _arg1;
        }
        public function set wheelRatio(_arg1:Number):void{
            _wheelRatio = _arg1;
        }
        public function moveThumbFromValue(_arg1:Number):void{
            var _local2:Number = (_trackEmpty[axis] + (thumbSpace * _arg1));
            if (thumbSpace < _local2){
                _local2 = thumbSpace;
            } else {
                if (_local2 < _trackEmpty[axis]){
                    _local2 = minValue;
                };
            };
            var _local3:Number = _thumbSpace;
            if ((((_local2 >= _local3)) && (!((_local3 == 0))))){
                _local2 = _local3;
                isFull = true;
            } else {
                isFull = false;
            };
            thumbSpot = _local2;
            newWheelRatio = thumbSpotRatio;
            viewUpdate();
        }
        private function motionFinished(_arg1:MotionEvent):void{
            newWheelRatio = thumbSpotRatio;
            viewUpdate();
        }
        public function get maxValue():Number{
            return (_maxValue);
        }
        public function get ease():Function{
            return (_ease);
        }
        public function set thumbSpot(_arg1:Number):void{
            _thumb[axis] = _arg1;
        }
        public function get value():Number{
            return (_value);
        }
        public function get thumbSpotRatio():Number{
            return ((thumbSpot / thumbSpace));
        }
        public function get thumbSpot():Number{
            return (_thumb[axis]);
        }
        private function thumbUpHandler(_arg1):void{
            var e:* = _arg1;
            if (((Boolean(e)) && ((e is MouseEvent)))){
                switch (name){
                    case "progressBar":
                        try {
                            NClicks.sendLog(e, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_TIME, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_TIME_CID);
                        } catch(error:Error) {
                        };
                        break;
                    case "volumeBar":
                        try {
                            NClicks.sendLog(e, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SOUND, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SOUND_CID);
                        } catch(error:Error) {
                        };
                        break;
                };
            };
            dispatchEvent(new CSliderEvent(CSliderEvent.THUMB_DRAG_END));
            _thumb.stopDrag();
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, thumbDraggingHandler);
            stage.removeEventListener(MouseEvent.MOUSE_UP, thumbUpHandler);
            newWheelRatio = thumbSpotRatio;
            viewUpdate();
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders {
    import flash.events.*;

    public class CSliderEvent extends Event {

        public static var THUMB_DRAG_START:String = "thumbDragStart";
        public static var SLIDER_CHANGE:String = "sliderChange";
        public static var TRACK_CLICK_START:String = "trackClickStart";
        public static var TRACK_CLICK_END:String = "trackClickEnd";
        public static var THUMB_DRAG_END:String = "thumbDragEnd";

        private var _data:Object;

        public function CSliderEvent(_arg1:String, _arg2:Object=null):void{
            _data = new Object();
            _data = _arg2;
            super(_arg1);
        }
        public function get data():Object{
            return (_data);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips {

    public class HorizontalAlignment {

        public static const CENTER:String = "center";
        public static const LEFT:String = "left";
        public static const RIGHT:String = "right";

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.text.*;

    public class Tooltip extends Sprite {

        protected static var properties:Array = ["text", "textFormat", "backgroundColor", "borderColor", "leftMargin", "topMargin"];

        private var _backgroundColor:uint = 16711399;
        private var _textFormat:TextFormat;
        private var _hAlign:String = "right";
        private var border:Shape;
        private var background:Shape;
        private var _leftMargin:Number = 3;
        private var _isInline:Boolean = true;
        protected var limitWidth:Number = NaN;
        private var _vAlign:String = "bottom";
        protected var textField:TextField;
        private var _borderColor:uint = 0;
        protected var actualHeight:Number = 0;
        protected var actualWidth:Number = 0;
        private var _topMargin:Number = 3;

        public function Tooltip(_arg1:String=null, _arg2:TextFormat=null, _arg3:uint=16711399, _arg4:uint=0, _arg5:Number=3, _arg6:Number=3, _arg7:String="right", _arg8:String="bottom", _arg9:Boolean=true){
            var _local10:TextFormat;
            super();
            initialize();
            this.text = _arg1;
            if (Boolean(_arg2)){
                this.textFormat = _arg2;
            } else {
                _local10 = new TextFormat("Dotum,돋움,AppleGothic,_sans", 12, 0, null, null, null, null, null, null, null, null, null, null);
                _local10.letterSpacing = -0.5;
                this.textFormat = _local10;
            };
            this.borderColor = _arg4;
            this.backgroundColor = _arg3;
            this.leftMargin = _arg5;
            this.topMargin = _arg6;
            this.hAlign = _arg7;
            this.vAlign = _arg8;
            this.isInline = _arg9;
        }
        public function get textFormat():TextFormat{
            if (Boolean(textField.getTextFormat().font)){
                _textFormat = textField.getTextFormat();
            };
            return (_textFormat);
        }
        public function set textFormat(_arg1:TextFormat):void{
            if (!Boolean(_arg1)){
                return;
            };
            _textFormat = _arg1;
            textField.defaultTextFormat = _arg1;
            textField.setTextFormat(_arg1);
        }
        protected function initialize():void{
            mouseChildren = false;
            mouseEnabled = false;
            background = new Shape();
            addChild(background);
            textField = new TextField();
            textField.blendMode = BlendMode.LAYER;
            addChild(textField);
            border = new Shape();
            addChild(border);
            var _local2 = textField;
            with (_local2) {
                autoSize = TextFieldAutoSize.LEFT;
                selectable = false;
                mouseEnabled = false;
            };
        }
        protected function drawBackground():void{
            var _local2 = background.graphics;
            with (_local2) {
                clear();
                beginFill(backgroundColor);
                drawRect(0, 0, actualWidth, actualHeight);
            };
        }
        public function get leftMargin():Number{
            return (_leftMargin);
        }
        public function get borderColor():uint{
            return (_borderColor);
        }
        protected function drawBorder():void{
            var _local2 = border.graphics;
            with (_local2) {
                clear();
                lineStyle(1, borderColor, 1, false, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER, 3);
                drawRect(0, 0, (actualWidth - 1), (actualHeight - 1));
            };
        }
        override public function get height():Number{
            return (actualHeight);
        }
        public function get text():String{
            return (textField.text);
        }
        public function get vAlign():String{
            return (_vAlign);
        }
        public function set backgroundColor(_arg1:uint):void{
            if (_backgroundColor === _arg1){
                return;
            };
            _backgroundColor = _arg1;
            drawBackground();
        }
        public function set borderColor(_arg1:uint):void{
            if (_borderColor === _arg1){
                return;
            };
            _borderColor = _arg1;
            drawBorder();
        }
        public function set leftMargin(_arg1:Number):void{
            if (_leftMargin === _arg1){
                return;
            };
            _leftMargin = _arg1;
        }
        public function getType():String{
            var _local1:String = getQualifiedClassName(this);
            return (_local1.substring((_local1.lastIndexOf(":") + 1), _local1.length));
        }
        public function update():void{
            initActualSize();
            textField.wordWrap = false;
            textField.multiline = false;
            var _local1:Number = textField.width;
            if (!isInline){
                textField.wordWrap = true;
                textField.multiline = true;
                if (Boolean(limitWidth)){
                    textField.width = Math.min(_local1, limitWidth);
                };
            };
            actualWidth = Math.max(actualWidth, (textField.width + leftMargin));
            actualHeight = Math.max(actualHeight, (textField.height + topMargin));
            updateShape();
            textField.x = Math.floor(((actualWidth - textField.width) * 0.5));
            textField.y = Math.round(((actualHeight - textField.height) * 0.5));
            dispatchEvent(new Event(Event.CHANGE));
        }
        override public function get width():Number{
            return (actualWidth);
        }
        public function move(_arg1:Number, _arg2:Number):void{
            if (Boolean(_arg1)){
                this.x = _arg1;
            };
            if (Boolean(_arg2)){
                this.y = _arg2;
            };
        }
        public function get backgroundColor():uint{
            return (_backgroundColor);
        }
        public function set text(_arg1:String):void{
            if ((((_arg1 === "")) || (!(Boolean(_arg1))))){
                return;
            };
            textField.text = _arg1;
            update();
        }
        public function getTransformOriginY():Number{
            var _local1:Number;
            switch (vAlign){
                case VerticalAlignment.BOTTOM:
                    _local1 = 1;
                    break;
                case VerticalAlignment.TOP:
                    _local1 = 0;
                    break;
                default:
                    _local1 = 0.5;
            };
            return (_local1);
        }
        public function set topMargin(_arg1:Number):void{
            if (_topMargin === _arg1){
                return;
            };
            _topMargin = _arg1;
        }
        public function set vAlign(_arg1:String):void{
            if (_vAlign === _arg1){
                return;
            };
            _vAlign = _arg1;
            switch (vAlign){
                case VerticalAlignment.BOTTOM:
                    y = 0;
                    break;
                case VerticalAlignment.TOP:
                    y = -(height);
                    break;
                case VerticalAlignment.CENTER:
                    y = (-(height) * 0.5);
                    break;
                default:
                    throw (new ArgumentError("유효하지 않는 수직 정렬 값을 입력하였습니다."));
            };
        }
        protected function initActualSize():void{
            actualWidth = 0;
            actualHeight = 0;
        }
        public function get topMargin():Number{
            return (_topMargin);
        }
        public function getTransformOriginX():Number{
            var _local1:Number;
            switch (hAlign){
                case HorizontalAlignment.RIGHT:
                    _local1 = 1;
                    break;
                case HorizontalAlignment.LEFT:
                    _local1 = 0;
                    break;
                default:
                    _local1 = 0.5;
            };
            return (_local1);
        }
        override public function toString():String{
            var _local1:String;
            var _local2:String;
            var _local3:String;
            _local2 = getType();
            _local1 = (("{" + _local2) + " start}\n");
            for each (_local3 in properties) {
                _local1 = (_local1 + (((_local3 + " : ") + this[_local3]) + "\n"));
            };
            _local1 = (_local1 + (("{" + _local2) + " end}"));
            return (_local1);
        }
        public function setLimitWidth(_arg1:Number):void{
            this.limitWidth = _arg1;
            isInline = ((Boolean(_arg1)) ? false : true);
        }
        protected function updateShape():void{
            if ((((actualWidth == 0)) || ((actualHeight == 0)))){
                return;
            };
            drawBackground();
            drawBorder();
        }
        public function get isInline():Boolean{
            return (_isInline);
        }
        public function set isInline(_arg1:Boolean):void{
            _isInline = _arg1;
            if (Boolean(isInline)){
                limitWidth = NaN;
            };
        }
        public function set hAlign(_arg1:String):void{
            if (_hAlign === _arg1){
                return;
            };
            _hAlign = _arg1;
            switch (hAlign){
                case HorizontalAlignment.RIGHT:
                    x = 0;
                    break;
                case HorizontalAlignment.LEFT:
                    x = -(width);
                    break;
                case HorizontalAlignment.CENTER:
                    x = (-(width) * 0.5);
                    break;
                default:
                    throw (new ArgumentError("유효하지 않는 수평 정렬 값을 입력하였습니다."));
            };
        }
        public function get hAlign():String{
            return (_hAlign);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips {

    public class VerticalAlignment {

        public static const CENTER:String = "center";
        public static const BOTTOM:String = "bottom";
        public static const TOP:String = "top";

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.flashdynamix.motion.*;
    import flash.text.*;
    import fl.motion.easing.*;

    public class FlowTextField extends Sprite {

        protected static const BITMAP_MAX_WIDTH:int = 2880;

        public static var properties:Array = ["text", "originText", "textFormat", "fontFamily", "fontSize", "fontColor", "mouseOverFontColor", "bold", "letterSpacing", "width", "height", "textWidth", "textHeight", "availableWidth", "isReduced", "useFlowEffect", "useAlphaTransition"];

        private var flowCount:Number = 0;
        private var virtualTextField:TextField;
        private var _text:String = null;
        private var _delimiter:String = "...";
        protected var _originText:String = null;
        private var defaultFontColor:uint;
        private var isUseMouseOverFontColor:Boolean = false;
        private var _flowPixelUnit:Number = 1;
        private var _availableWidth:Number = NaN;
        private var displayTextField:TextField;
        private var isTextChanged:Boolean = false;
        private var _useFlowEffect:Boolean = true;
        private var _alphaTransitionDuration:Number = 0.4;
        private var _alphaTransitionDelay:Number = 0;
        private var _flowTextSpace:Number = 10;
        private var flowTextBitmapData:BitmapData;
        private var _orignTextVisible:Boolean = false;
        private var _maskRect:Rectangle;
        private var _mouseOverFontColor:uint;
        private var flowTextShape:Shape;
        private var _useAlphaTransition:Boolean = true;

        public function FlowTextField(_arg1:String=null, _arg2:Number=12, _arg3:uint=0, _arg4:Boolean=false, _arg5:Number=1, _arg6:Number=NaN, _arg7:String="..."){
            initialize();
            if (!isNaN(_arg6)){
                this.availableWidth = _arg6;
            };
            this.fontFamily = _arg1;
            this.fontSize = _arg2;
            this.fontColor = _arg3;
            this.bold = _arg4;
            this.letterSpacing = _arg5;
            this.delimiter = _arg7;
        }
        protected function initialize():void{
            virtualTextField = new TextField();
            var _local2 = virtualTextField;
            with (_local2) {
                text = "";
                mouseEnabled = false;
                selectable = false;
                autoSize = TextFieldAutoSize.LEFT;
            };
            displayTextField = new TextField();
            _local2 = displayTextField;
            with (_local2) {
                text = "";
                mouseEnabled = false;
                selectable = false;
                visible = false;
                autoSize = TextFieldAutoSize.LEFT;
                blendMode = BlendMode.LAYER;
            };
            addChild(displayTextField);
            addEventListener(MouseEvent.MOUSE_OVER, handleMouseEvent, false, 0, true);
            addEventListener(MouseEvent.MOUSE_OUT, handleMouseEvent, false, 0, true);
        }
        public function get bold():Boolean{
            return ((getTextFormatProperty("bold") as Boolean));
        }
        public function get delimiter():String{
            return (_delimiter);
        }
        public function set textFormat(_arg1:TextFormat):void{
            if (Boolean(displayTextField)){
                return (displayTextField.setTextFormat(_arg1));
            };
        }
        public function set bold(_arg1:Boolean):void{
            setTextFormatProperty("bold", _arg1);
        }
        public function get textFormat():TextFormat{
            if (Boolean(displayTextField)){
                return (displayTextField.getTextFormat());
            };
            return (null);
        }
        public function set delimiter(_arg1:String):void{
            if (_delimiter === _arg1){
                return;
            };
            _delimiter = _arg1;
        }
        public function set flowTextSpace(_arg1:Number):void{
            _flowTextSpace = _arg1;
        }
        public function get textWidth():Number{
            if (Boolean(displayTextField)){
                return (displayTextField.textWidth);
            };
            return (NaN);
        }
        public function get fontFamily():String{
            return ((getTextFormatProperty("font") as String));
        }
        public function set useFlowEffect(_arg1:Boolean):void{
            if (_useFlowEffect === _arg1){
                return;
            };
            _useFlowEffect = _arg1;
        }
        public function set availableWidth(_arg1:Number):void{
            if (_availableWidth === _arg1){
                return;
            };
            _availableWidth = _arg1;
        }
        protected function removeBitmapText():void{
            if (Boolean(flowTextBitmapData)){
                flowTextBitmapData.dispose();
                flowTextBitmapData = null;
            };
            if (Boolean(flowTextShape)){
                flowTextShape.graphics.clear();
                if (this.contains(flowTextShape)){
                    removeChild(flowTextShape);
                };
                flowTextShape = null;
            };
        }
        public function get alphaTransitionDuration():Number{
            return (_alphaTransitionDuration);
        }
        public function get text():String{
            return (_text);
        }
        public function set fontColor(_arg1:uint):void{
            defaultFontColor = _arg1;
            setTextFormatProperty("color", _arg1);
        }
        public function init():void{
            flowCount = 0;
            orignTextVisible = true;
            if (hasEventListener(Event.ENTER_FRAME)){
                removeEventListener(Event.ENTER_FRAME, render, false);
            };
        }
        public function get isReduced():Boolean{
            if (((!(Boolean(text))) || (!(Boolean(originText))))){
                return (false);
            };
            return (!((text === originText)));
        }
        public function set fontFamily(_arg1:String):void{
            setTextFormatProperty("font", _arg1);
        }
        public function get maskRect():Rectangle{
            return (_maskRect);
        }
        public function getType():String{
            var _local1:String = getQualifiedClassName(this);
            return (_local1.substring((_local1.lastIndexOf(":") + 1), _local1.length));
        }
        public function get textHeight():Number{
            if (Boolean(displayTextField)){
                return (displayTextField.textHeight);
            };
            return (NaN);
        }
        public function get letterSpacing():Number{
            return ((getTextFormatProperty("letterSpacing") as Number));
        }
        public function get flowPixelUnit():Number{
            return (_flowPixelUnit);
        }
        public function set flowPixelUnit(_arg1:Number):void{
            _flowPixelUnit = _arg1;
        }
        public function destroy():void{
            releaseMemory();
        }
        public function get mouseOverFontColor():uint{
            return (_mouseOverFontColor);
        }
        public function set useAlphaTransition(_arg1:Boolean):void{
            if (_useAlphaTransition === _arg1){
                return;
            };
            _useAlphaTransition = _arg1;
        }
        public function get useFlowEffect():Boolean{
            return (_useFlowEffect);
        }
        public function update():void{
            redrawText();
            if (isTextChanged){
                dispatchEvent(new Event(Event.CHANGE));
            };
        }
        public function get flowTextSpace():Number{
            return (_flowTextSpace);
        }
        override public function get width():Number{
            if (Boolean(displayTextField)){
                return (displayTextField.width);
            };
            return (super.width);
        }
        private function convertTextFieldToBitmapData(_arg1:TextField, _arg2:Number=0):BitmapData{
            var _local3:BitmapData;
            _local3 = new BitmapData(Math.min((_arg1.width + _arg2), BITMAP_MAX_WIDTH), _arg1.height, true, 0xFF0000);
            _local3.draw(_arg1);
            return (_local3.clone());
        }
        private function drawBackgroundForMouseHitArea(_arg1:Number, _arg2:Number):void{
            var w:* = _arg1;
            var h:* = _arg2;
            var _local4 = this.graphics;
            with (_local4) {
                clear();
                beginFill(0, 0);
                drawRect(0, 0, w, h);
                endFill();
            };
        }
        private function handleMouseEvent(_arg1:MouseEvent):void{
            switch (_arg1.type){
                case MouseEvent.MOUSE_OVER:
                    if (((isReduced) && (useFlowEffect))){
                        if (Boolean(flowTextBitmapData)){
                            addEventListener(Event.ENTER_FRAME, render, false, 0, true);
                            orignTextVisible = false;
                        };
                    } else {
                        if (isUseMouseOverFontColor){
                            setTextFormatProperty("color", mouseOverFontColor);
                        };
                    };
                    break;
                case MouseEvent.MOUSE_OUT:
                    if (((isReduced) && (useFlowEffect))){
                        if (Boolean(flowTextBitmapData)){
                            init();
                        };
                    } else {
                        if (isUseMouseOverFontColor){
                            setTextFormatProperty("color", defaultFontColor);
                        };
                    };
                    break;
            };
        }
        public function set text(_arg1:String):void{
            if ((((_text === _arg1)) || (!(Boolean(_arg1))))){
                return;
            };
            _text = _arg1;
            isTextChanged = ((originText)==text) ? false : true;
            _originText = _text;
            update();
        }
        public function get fontColor():uint{
            return ((getTextFormatProperty("color") as uint));
        }
        public function redrawText():void{
            var _local1:TextFormat;
            if ((((text === "")) || (!(Boolean(text))))){
                return;
            };
            if (!Boolean(displayTextField)){
                return;
            };
            init();
            removeBitmapText();
            displayTextField.text = this.text;
            if (!isNaN(availableWidth)){
                _text = TextFieldHelper.getReduceText(displayTextField, availableWidth, delimiter);
                displayTextField.text = _text;
            };
            drawBackgroundForMouseHitArea(this.width, this.height);
            if (isReduced){
                _local1 = displayTextField.getTextFormat();
                if (Boolean(mouseOverFontColor)){
                    _local1["color"] = mouseOverFontColor;
                };
                if (Boolean(virtualTextField)){
                    virtualTextField.defaultTextFormat = _local1;
                    virtualTextField.text = this.originText;
                    flowTextBitmapData = convertTextFieldToBitmapData(virtualTextField, flowTextSpace);
                    flowTextShape = new Shape();
                    addChild(flowTextShape);
                };
            };
            displayTextField.width = (displayTextField.textWidth + 2);
            startAlphaFadeInEffect();
        }
        public function set fontSize(_arg1:Number):void{
            setTextFormatProperty("size", _arg1);
        }
        public function set alphaTransitionDuration(_arg1:Number):void{
            _alphaTransitionDuration = _arg1;
        }
        public function get useAlphaTransition():Boolean{
            return (_useAlphaTransition);
        }
        public function set alphaTransitionDelay(_arg1:Number):void{
            _alphaTransitionDelay = _arg1;
        }
        public function releaseMemory():void{
            removeBitmapText();
            if (Boolean(displayTextField)){
                if (this.contains(displayTextField)){
                    removeChild(displayTextField);
                };
                displayTextField = null;
            };
            if (Boolean(virtualTextField)){
                virtualTextField = null;
            };
            if (Boolean(maskRect)){
                maskRect = null;
            };
            if (this.hasEventListener(Event.ENTER_FRAME)){
                removeEventListener(Event.ENTER_FRAME, render, false);
            };
            removeEventListener(MouseEvent.MOUSE_OVER, handleMouseEvent, false);
            removeEventListener(MouseEvent.MOUSE_OUT, handleMouseEvent, false);
            _text = null;
            _originText = null;
        }
        private function render(_arg1:Event):void{
            var _local2:Graphics;
            if (((!(isReduced)) || (!(Boolean(flowTextShape))))){
                return;
            };
            if (Boolean(flowTextBitmapData)){
                _local2 = flowTextShape.graphics;
                _local2.clear();
                _local2.beginBitmapFill(flowTextBitmapData, new Matrix(1, 0, 0, 1, flowCount, 0), true, false);
                _local2.drawRect(0, 0, flowTextBitmapData.width, flowTextBitmapData.height);
                _local2.endFill();
                flowCount = (flowCount - flowPixelUnit);
            };
        }
        override public function toString():String{
            var _local1:String;
            var _local2:String;
            var _local3:String;
            _local2 = getType();
            _local1 = (("{" + _local2) + " start}\n");
            for each (_local3 in properties) {
                _local1 = (_local1 + (((_local3 + " : ") + this[_local3]) + "\n"));
            };
            _local1 = (_local1 + (("{" + _local2) + " end}"));
            return (_local1);
        }
        private function startAlphaFadeInEffect():void{
            if (((useAlphaTransition) && (isTextChanged))){
                TweensyZero.fromTo(this, {alpha:0}, {alpha:1}, alphaTransitionDuration, Linear.easeOut, alphaTransitionDelay);
            };
        }
        public function set maskRect(_arg1:Rectangle):void{
            if (_maskRect === _arg1){
                return;
            };
            _maskRect = _arg1;
            this.scrollRect = _maskRect;
        }
        public function set orignTextVisible(_arg1:Boolean):void{
            _orignTextVisible = _arg1;
            if (Boolean(displayTextField)){
                displayTextField.visible = orignTextVisible;
                if (Boolean(flowTextShape)){
                    flowTextShape.visible = !(orignTextVisible);
                };
            };
        }
        public function get originText():String{
            return (_originText);
        }
        public function set mouseOverFontColor(_arg1:uint):void{
            if (_mouseOverFontColor === _arg1){
                return;
            };
            _mouseOverFontColor = _arg1;
            if (!isUseMouseOverFontColor){
                isUseMouseOverFontColor = true;
            };
        }
        public function get fontSize():Number{
            return ((getTextFormatProperty("size") as Number));
        }
        public function get orignTextVisible():Boolean{
            return (_orignTextVisible);
        }
        public function set letterSpacing(_arg1:Number):void{
            setTextFormatProperty("letterSpacing", _arg1);
        }
        private function setTextFormatProperty(_arg1:String, _arg2:Object):void{
            var _local3:TextFormat;
            if (Boolean(displayTextField)){
                _local3 = displayTextField.getTextFormat();
                _local3[_arg1] = _arg2;
                displayTextField.defaultTextFormat = _local3;
                displayTextField.setTextFormat(_local3);
            };
        }
        public function get availableWidth():Number{
            return (_availableWidth);
        }
        private function getTextFormatProperty(_arg1:String):Object{
            var _local2:TextFormat;
            if (Boolean(displayTextField)){
                _local2 = displayTextField.getTextFormat();
                if (Boolean(_local2[_arg1])){
                    return (_local2[_arg1]);
                };
            };
            return (null);
        }
        public function get alphaTransitionDelay():Number{
            return (_alphaTransitionDelay);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText {
    import flash.text.*;

    public class TextFieldHelper {

        public static function getReduceText(_arg1:TextField, _arg2:Number, _arg3:String="..."):String{
            var _local4:String;
            var _local5:Number;
            var _local6:int;
            var _local7:int;
            if (!Boolean(_arg1)){
                throw (new ArgumentError("targetTextField is null"));
            };
            if (Boolean(_arg1.text)){
                _local4 = "";
                _local5 = 0;
                _local6 = _arg1.text.length;
                _local7 = 0;
                while (_local7 < _local6) {
                    _local5 = (_local5 + _arg1.getCharBoundaries(_local7).width);
                    if (_local5 >= _arg2){
                        _local4 = (_arg1.text.slice(0, _local7) + _arg3);
                        return (_local4);
                    };
                    _local7++;
                };
                return (_arg1.text);
            };
            return (null);
        }
        public static function convertToAddZeroString(_arg1:Number):String{
            return (((_arg1)<10) ? ("0" + _arg1.toString()) : _arg1.toString());
        }
        public static function convertToMinSecString(_arg1:Number):String{
            _arg1 = Math.ceil(_arg1);
            var _local2:Number = Math.floor((_arg1 / 60));
            var _local3:Number = (_arg1 % 60);
            var _local4:String = ((convertToAddZeroString(_local2) + ":") + convertToAddZeroString(_local3));
            return (_local4);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.flashdynamix.motion.*;
    import flash.text.*;
    import com.nhn.easing.*;

    public class BitmapTextField extends Sprite {

        protected static const BITMAP_MAX_WIDTH:int = 2880;

        private var flowCount:Number = 0;
        private var _delimiter:String = ", ";
        private var _overFormat:TextFormat;
        private var _defaultFormat:TextFormat;
        private var _availableWidth:Number = NaN;
        private var _flowPixelUnit:Number = 1;
        private var mouseEventArea:Bitmap;
        private var _ellipsis:String = "...";
        private var selectIndex:int = -1;
        private var isOverAvailableWidth:Boolean = false;
        private var isTextChanged:Boolean = false;
        private var selectData = null;
        private var _flowTextSpace:Number = 20;
        private var listString:Array;
        private var beforeText:String = "";
        private var textContainer01:Sprite;
        private var textContainer02:Sprite;
        private var bAutoUpdate:Boolean = false;
        private var virtualTextImage:Bitmap;

        public function BitmapTextField(){
            this.initialize();
        }
        public function set size(_arg1:int):void{
            this._defaultFormat.size = _arg1;
            this._overFormat.size = _arg1;
        }
        public function set delimiter(_arg1:String):void{
            this._delimiter = _arg1;
        }
        protected function initialize():void{
            this.buttonMode = true;
            this.listString = [];
            this.textContainer01 = new Sprite();
            this.textContainer02 = new Sprite();
            this.textContainer02.visible = false;
            this.addChild(this.textContainer01);
            this.addChild(this.textContainer02);
            this._defaultFormat = new TextFormat("돋움,AppleGothic", 11, 0x818181);
            this._overFormat = new TextFormat("돋움,AppleGothic", 11, 1038592);
            this.mouseEventArea = new Bitmap(new BitmapData(1, 1, true, 0));
            this.addChild(this.mouseEventArea);
            this.addEventListener(MouseEvent.ROLL_OVER, mouseHandler);
            this.addEventListener(MouseEvent.ROLL_OUT, mouseHandler);
            this.addEventListener(MouseEvent.CLICK, mouseHandler);
        }
        public function set bold(_arg1:Boolean):void{
            this._defaultFormat.bold = _arg1;
            this._overFormat.bold = _arg1;
        }
        public function set availableWidth(_arg1:Number):void{
            if (_availableWidth === _arg1){
                return;
            };
            _availableWidth = _arg1;
        }
        private function render(_arg1:Event):void{
            if (textContainer02.x < 0){
                flowCount = textContainer02.x;
            };
            textContainer01.x = flowCount;
            textContainer02.x = ((textContainer01.width + flowCount) + _flowTextSpace);
            flowCount = (flowCount - _flowPixelUnit);
        }
        public function get defaultFormat():TextFormat{
            return (this._defaultFormat);
        }
        public function set ellipsis(_arg1:String):void{
            this._ellipsis = _arg1;
        }
        public function set font(_arg1:String):void{
            this._defaultFormat.font = _arg1;
            this._overFormat.font = _arg1;
        }
        public function get text():String{
            var _local2:StringObject;
            var _local1 = "";
            var _local3:int;
            while (_local3 < this.listString.length) {
                _local2 = this.listString[_local3];
                _local1 = (_local1 + _local2.txt);
                _local3++;
            };
            return (_local1);
        }
        public function set flowTextSpace(_arg1:Number):void{
            this._flowTextSpace = _arg1;
        }
        public function get data(){
            return (selectData);
        }
        public function set maskArea(_arg1:Rectangle):void{
            this.scrollRect = _arg1;
            if (bAutoUpdate){
                this.update();
            };
        }
        private function releaseContainer(_arg1:Sprite=null):void{
            var _local3:Sprite;
            var _local2:Array = [];
            if (_arg1){
                _local2.push(_arg1);
            } else {
                _local2 = [textContainer01, textContainer02];
            };
            var _local4:int;
            while (_local4 < _local2.length) {
                _local3 = _local2[_local4];
                while (_local3.numChildren) {
                    _local3.removeChildAt(0);
                };
                _local4++;
            };
        }
        public function set flowPixelUnit(_arg1:Number):void{
            this._flowPixelUnit = _arg1;
        }
        public function set isAutoUpdate(_arg1:Boolean):void{
            this.bAutoUpdate = _arg1;
        }
        public function update():void{
            var _local1:StringObject;
            var _local2:FieldContainer;
            var _local5:TextField;
            var _local6:String;
            var _local7:String;
            var _local8:Array;
            var _local9:String;
            var _local10:int;
            this.isTextChanged = (((this.beforeText == this.text)) ? false : true);
            this.beforeText = this.text;
            this.releaseContainer();
            this.textContainer01.x = 0;
            var _local3:Number = 0;
            var _local4:int;
            while (_local4 < this.listString.length) {
                _local1 = this.listString[_local4];
                _local1.index = int((_local4 / 2));
                _local2 = new FieldContainer(_local1);
                _local2.setTextFormat(defaultFormat, overFormat);
                _local2.x = _local3;
                textContainer01.addChild(_local2);
                _local2 = new FieldContainer(_local1);
                _local2.setTextFormat(defaultFormat, overFormat);
                _local2.x = _local3;
                textContainer02.addChild(_local2);
                _local3 = (_local3 + _local2.width);
                _local4++;
            };
            if (this.scrollRect){
                this.isOverAvailableWidth = (this.scrollRect.width < _local3);
            } else {
                this.isOverAvailableWidth = false;
            };
            if (this.mouseEventArea.bitmapData){
                this.mouseEventArea.bitmapData.dispose();
            };
            this.mouseEventArea.visible = isOverAvailableWidth;
            this.textContainer01.visible = !(isOverAvailableWidth);
            if (isOverAvailableWidth){
                this.mouseEventArea.bitmapData = new BitmapData(scrollRect.width, scrollRect.height, true, 0);
                if (!isNaN(availableWidth)){
                    if (availableWidth > this.scrollRect.width){
                        availableWidth = this.scrollRect.width;
                    };
                } else {
                    availableWidth = this.scrollRect.width;
                };
                if (!virtualTextImage){
                    virtualTextImage = new Bitmap();
                };
                if (virtualTextImage.bitmapData){
                    virtualTextImage.bitmapData.dispose();
                };
                virtualTextImage.bitmapData = new BitmapData(scrollRect.width, scrollRect.height, true, 0);
                _local5 = new TextField();
                _local5.autoSize = TextFieldAutoSize.LEFT;
                _local5.defaultTextFormat = this._defaultFormat;
                _local5.setTextFormat(this._defaultFormat);
                _local6 = "";
                _local7 = "";
                _local8 = this.text.split(_delimiter);
                _local9 = "";
                _local4 = 0;
                _loop1:
                while (_local4 < _local8.length) {
                    _local9 = String(_local8[_local4]);
                    _local10 = 0;
                    while (_local10 < _local9.length) {
                        _local6 = _local5.text;
                        _local5.appendText(String(_local9).substr(_local10, 1));
                        _local5.appendText(this._ellipsis);
                        if (_local5.textWidth > availableWidth){
                            if ((((_local10 == 0)) && (!((_local7 == ""))))){
                                _local6 = _local7;
                            };
                            _local5.text = (_local6 + this._ellipsis);
                            break _loop1;
                        };
                        _local5.text = (_local6 + String(_local9).substr(_local10, 1));
                        _local10++;
                    };
                    _local7 = _local5.text;
                    _local5.appendText(this._delimiter);
                    _local4++;
                };
                virtualTextImage.bitmapData.draw(_local5);
                virtualTextImage.x = (int((this.scrollRect.width - availableWidth)) / 2);
                this.addChild(virtualTextImage);
            } else {
                if (virtualTextImage){
                    if (this.contains(virtualTextImage)){
                        this.removeChild(virtualTextImage);
                    };
                    virtualTextImage.bitmapData.dispose();
                    virtualTextImage = null;
                };
                this.releaseContainer(textContainer02);
                textContainer01.x = int(((scrollRect.width - _local3) / 2));
            };
            if (this.isTextChanged){
                this.tweenCreateField();
            };
        }
        public function set defaultColor(_arg1:uint):void{
            this._defaultFormat.color = _arg1;
        }
        public function get index():int{
            return (selectIndex);
        }
        public function appendList(_arg1:Array, _arg2:Boolean=true):void{
            if (_arg2){
                this.listString = [];
            };
            var _local3:int;
            while (_local3 < _arg1.length) {
                this.appendText(_arg1[_local3]);
                _local3++;
            };
        }
        public function set overColor(_arg1:uint):void{
            this._overFormat.color = _arg1;
        }
        public function set text(_arg1:String):void{
            this.listString = [];
            this.appendText(_arg1);
        }
        private function mouseHandler(_arg1:MouseEvent):void{
            var _local2:FieldContainer;
            switch (_arg1.type){
                case MouseEvent.ROLL_OVER:
                    if (this.isOverAvailableWidth){
                        if (this.scrollRect.width < this.textContainer01.width){
                            addEventListener(Event.ENTER_FRAME, render, false, 0, true);
                            textContainer01.visible = true;
                            textContainer02.visible = true;
                            virtualTextImage.visible = false;
                        };
                    };
                    _arg1.stopImmediatePropagation();
                    break;
                case MouseEvent.ROLL_OUT:
                    if (this.isOverAvailableWidth){
                        flowCount = 0;
                        textContainer01.x = flowCount;
                        textContainer01.visible = false;
                        textContainer02.visible = false;
                        virtualTextImage.visible = true;
                    };
                    if (this.hasEventListener(Event.ENTER_FRAME)){
                        removeEventListener(Event.ENTER_FRAME, render, false);
                    };
                    _arg1.stopImmediatePropagation();
                    break;
                case MouseEvent.CLICK:
                    if ((_arg1.target is FieldContainer)){
                        _local2 = (_arg1.target as FieldContainer);
                        if (_local2.stringObject.bInteraction){
                            this.selectIndex = _local2.stringObject.index;
                            this.selectData = _local2.stringObject.data;
                        };
                    };
                    break;
            };
        }
        public function appendText(_arg1:String, _arg2:Boolean=true, _arg3=null):void{
            if (this.listString.length > 0){
                this.listString.push(new StringObject(_delimiter, false));
            };
            this.listString.push(new StringObject(_arg1, _arg2, _arg3));
            if (bAutoUpdate){
                this.update();
            };
        }
        public function releaseMemory():void{
            var _local1:int;
            _local1 = 0;
            while (_local1 < listString.length) {
                listString[_local1] = null;
                _local1++;
            };
            listString = null;
            _defaultFormat = null;
            _overFormat = null;
            selectData = null;
            if (mouseEventArea){
                if (this.contains(mouseEventArea)){
                    this.removeChild(mouseEventArea);
                };
                if (mouseEventArea.bitmapData){
                    mouseEventArea.bitmapData.dispose();
                };
                mouseEventArea.bitmapData = null;
                mouseEventArea = null;
            };
            if (virtualTextImage){
                if (this.contains(virtualTextImage)){
                    this.removeChild(virtualTextImage);
                };
                if (virtualTextImage.bitmapData){
                    virtualTextImage.bitmapData.dispose();
                };
                virtualTextImage.bitmapData = null;
                virtualTextImage = null;
            };
            if (this.hasEventListener(Event.ENTER_FRAME)){
                removeEventListener(Event.ENTER_FRAME, render, false);
            };
            if (this.hasEventListener(MouseEvent.ROLL_OVER)){
                removeEventListener(MouseEvent.ROLL_OVER, mouseHandler);
            };
            if (this.hasEventListener(MouseEvent.ROLL_OUT)){
                removeEventListener(MouseEvent.ROLL_OUT, mouseHandler);
            };
            if (this.hasEventListener(MouseEvent.CLICK)){
                removeEventListener(MouseEvent.CLICK, mouseHandler);
            };
            this.releaseContainer();
        }
        public function get overFormat():TextFormat{
            return (this._overFormat);
        }
        private function tweenCreateField():void{
            TweensyZero.fromTo(this, {alpha:0}, {alpha:1}, 0.4, Linear.easeOut, 0);
        }
        public function set letterSpacing(_arg1:Number):void{
            this._defaultFormat.letterSpacing = _arg1;
            this._overFormat.letterSpacing = _arg1;
        }
        public function get availableWidth():Number{
            return (_availableWidth);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText 

import flash.events.*;
import flash.display.*;
import flash.text.*;

class FieldContainer extends Sprite {

    private var bdView:BitmapData;
    private var bitmap:Bitmap;
    public var stringObject:StringObject;
    private var bdOver:BitmapData;
    private var _width:Number = 0;

    public function FieldContainer(_arg1:StringObject){
        this.stringObject = _arg1;
        this.bdView = new BitmapData(1, 1);
        this.bdOver = new BitmapData(1, 1);
        this.addEventListener(MouseEvent.MOUSE_OVER, mouseHandler);
        this.addEventListener(MouseEvent.MOUSE_OUT, mouseHandler);
        this.addEventListener(Event.REMOVED_FROM_STAGE, removeHandler);
    }
    private function mouseHandler(_arg1:MouseEvent):void{
        switch (_arg1.type){
            case MouseEvent.MOUSE_OVER:
                this.bitmapData = this.bdOver;
                break;
            case MouseEvent.MOUSE_OUT:
                this.bitmapData = this.bdView;
                break;
        };
    }
    public function setTextFormat(_arg1:TextFormat, _arg2:TextFormat):void{
        this.bitmap = new Bitmap();
        this.addChild(this.bitmap);
        this.bdView.dispose();
        this.bdOver.dispose();
        var _local3:TextField = new TextField();
        _local3.autoSize = TextFieldAutoSize.LEFT;
        _local3.text = stringObject.txt;
        _local3.defaultTextFormat = _arg1;
        _local3.setTextFormat(_arg1);
        this._width = _local3.textWidth;
        this.bdView = new BitmapData(_local3.width, _local3.height, true, 0);
        this.bdView.draw(_local3);
        this.bitmapData = this.bdView;
        if (stringObject.bInteraction){
            _local3.text = stringObject.txt;
            _local3.defaultTextFormat = _arg2;
            _local3.setTextFormat(_arg2);
            this.bdOver = new BitmapData(_local3.width, _local3.height, true, 0);
            this.bdOver.draw(_local3);
        } else {
            this.bdOver = this.bdView.clone();
        };
    }
    private function removeHandler(_arg1:Event):void{
        _arg1.target.removeEventListener(_arg1.type, arguments.callee);
        if (this.hasEventListener(MouseEvent.MOUSE_OVER)){
            this.removeEventListener(MouseEvent.MOUSE_OVER, mouseHandler);
        };
        if (this.hasEventListener(MouseEvent.MOUSE_OUT)){
            this.removeEventListener(MouseEvent.MOUSE_OUT, mouseHandler);
        };
        stringObject = null;
        if (bitmap){
            if (bitmap.bitmapData){
                bitmap.bitmapData.dispose();
            };
            bitmap = null;
        };
        if (bdView){
            bdView.dispose();
        };
        if (bdOver){
            bdOver.dispose();
        };
        bdView = null;
        bdOver = null;
    }
    override public function get width():Number{
        return (_width);
    }
    private function set bitmapData(_arg1:BitmapData):void{
        this.bitmap.bitmapData = _arg1;
    }

}
class StringObject {

    private var _data:String = "";
    private var _bInteraction:Boolean = true;
    private var _txt:String = "";
    private var _index:int = 0;

    public function StringObject(_arg1:String, _arg2:Boolean=true, _arg3=null){
        this._txt = _arg1;
        this._bInteraction = _arg2;
        if (_arg3 == null){
            _arg3 = _arg1;
        };
        this._data = _arg3;
    }
    public function set index(_arg1:int):void{
        this._index = _arg1;
    }
    public function get data():String{
        return (this._data);
    }
    public function get txt():String{
        return (this._txt);
    }
    public function get bInteraction():Boolean{
        return (this._bInteraction);
    }
    public function get index():int{
        return (this._index);
    }

}
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import fl.controls.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.layercomponent.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.*;

    public class NaverBasicMusicPlayerInterpreter implements IAssetInterpreter {

        public function updateAsset(_arg1, _arg2):void{
            CSlider.updateStyle(_arg2);
            NaverBasicPlayerHeaderPanel.updateStyle(_arg2);
            NaverBasicPlayerCellRenderer.updateAsset(_arg1);
            NaverBasicPlayerCellRenderer.updateRendererStyle(_arg2);
            ListBackGround.updateSkinStyle(_arg2);
            ScrollBar.updateLineStyle(_arg2);
            NaverMusicPlayerList.updateAsset(_arg1);
            NaverPlayerLyricsPanel.updateAsset(_arg1);
            NaverPlayerLyricsPanel.updatePanelStyle(_arg2);
            NpodPlayerArea.updateAsset(_arg1);
            NpodPlayerArea.updateStyle(_arg2);
            NaverBasicPlayerHeaderPanel.updateAsset(_arg1);
            NaverBasicPlayerGuideFooter.updateStyle(_arg2);
            NaverBasicPlayerGuideFooter.updateAsset(_arg1);
            NPodPlayListFooter.updateStyle(_arg2);
            NPodPlayListFooter.updateAsset(_arg1);
            NPodTop100ListFooter.updateStyle(_arg2);
            NPodTop100ListFooter.updateAsset(_arg1);
            SkinSelectPopup.updateStyle(_arg2);
            SkinSelectPopup.updateAsset(_arg1);
            NpodNotifyAlert.updateAsset(_arg1);
            NpodNotifyAlert.updateStyle(_arg2);
            PopMenu.udpateAsset(_arg1);
            TicketPopup.updateAsset(_arg1);
            CanMoveIcon.updateAsset(_arg1);
            DescriptionPanel.updateStyle(_arg2);
            DescriptionPanel.udpateAsset(_arg1);
            WordBalloonTip.updateAsset(_arg1);
            MusicPlayerConfigurationPanel.updateAsset(_arg1);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;

    public class ControlSettingManager extends EventDispatcher {

        public static const SAVE_CURRENT_LIST:String = "S01";
        public static const INSERT_AT_FIRST:String = "INSERT_AT_FIRST";
        public static const DO_NOT_SAVE_CURRENT_LIST:String = "S02";
        public static const MAX_SAVE_SONG_LIST_COUNT:int = 50;
        public static const INSERT_AT_LAST:String = "INSERT_AT_LAST";
        public static const MAX_NONE_INTERACTION_SONG_COUNT:int = 120;
        public static const POPUP_HIDE_OPTION:String = "POPUP_HIDE_OPTION4";
        public static const CONSISTANT_DAYS_7:int = 7;
        public static const CONSISTANT_DAYS:int = 1;
        public static const POPIP_HIDE_OPTION_CHECKOUT_PROMOTION:String = "POPIP_HIDE_OPTION_CHECKOUT_PROMOTION2";
        public static const MAX_LOOP_COUNT:int = 5;
        public static const CONSISTAN_INIFINITE_DAYS:int = 100000;

        private static var _instance:ControlSettingManager;

        public var showPauseButton:Boolean = false;
        public var pcolorOfConfig:String;
        public var volumeButtonFrameValue:int = 3;
        public var repeatButtonFrameValue:int = 1;
        public var albumName:String;
        public var currentPlayedBitrate:String;
        public var progressSliderValue:Number = 0;
        public var volumeSliderValue:Number = 0.61;
        public var prevVolume:Number = 0.61;
        public var totalTime:Number = 0;
        public var controlOption:String = "INSERT_AT_LAST";
        public var selectedItemOfPlaylist:Array;
        public var dragAndDropFirst:Boolean;
        public var selectedItemOfTop100list:Array;
        public var songTitle:String;
        public var scrollPos:Number = 0;
        public var playOption:int;
        public var loopCount:int = 0;
        public var isPure:Boolean = false;
        public var noneInteractionSongCount:int = 0;
        public var showPlayButton:Boolean = true;
        public var poption:String;
        public var songLyrics:String;
        public var bitrate:String;
        public var songAlubmURL:String;
        public var skinFrame:String = "8";
        public var isValid:Boolean = true;
        public var saveOrNot:String = "S01";
        public var currentTime:Number = 0;
        public var shuffleButtonFrameValue:int = 1;
        public var artistName:String;
        public var songTitleName:String;
        public var songArtistName:String;

        public function ControlSettingManager(){
            selectedItemOfPlaylist = new Array();
            selectedItemOfTop100list = new Array();
        }
        public static function getInstance():ControlSettingManager{
            if (!Boolean(_instance)){
                _instance = new (ControlSettingManager)();
            };
            return (_instance);
        }

        public function noneInteractionCheckHandler(_arg1:Boolean):void{
            if (_arg1){
                noneInteractionSongCount = 0;
            } else {
                noneInteractionSongCount++;
                if (noneInteractionSongCount >= MAX_NONE_INTERACTION_SONG_COUNT){
                    isValid = false;
                };
            };
        }
        public function repeatPolicyCheckHandler():void{
            loopCount++;
            if (loopCount >= (MAX_LOOP_COUNT - 1)){
                isValid = false;
            };
        }
        public function repeatCheck(_arg1:Boolean=false):void{
            var _local2:InternalPlayRestrictViloationEvent;
            isValid = true;
            if (!_arg1){
                if (loopCount >= (MAX_LOOP_COUNT - 1)){
                    loopCount = 0;
                    _local2 = new InternalPlayRestrictViloationEvent(InternalPlayRestrictViloationEvent.REPEAT_POLICY_VIOLATION);
                    dispatchEvent(_local2);
                };
            };
            if (noneInteractionSongCount >= (MAX_NONE_INTERACTION_SONG_COUNT - 1)){
                noneInteractionSongCount = 0;
                _local2 = new InternalPlayRestrictViloationEvent(InternalPlayRestrictViloationEvent.NONE_INTERACTION_VIOLATION);
                dispatchEvent(_local2);
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets.*;

    public class SettingInterpreter {

        public static const NEW01:String = "C09";
        public static const GRAY:String = "C02";
        public static const NEW02:String = "C10";
        public static const MOUSEGRAY:String = "C04";
        public static const WHITE:String = "C01";
        public static const GREEN:String = "C06";
        public static const PINK:String = "C05";
        public static const BLUE:String = "C07";
        public static const SKYBLUE:String = "C03";
        public static const BLACK:String = "C08";

        private static var _instance:SettingInterpreter;

        public var activeColor:String;

        public static function getInstance():SettingInterpreter{
            if (!Boolean(_instance)){
                _instance = new (SettingInterpreter)();
            };
            return (_instance);
        }

        public function updatePlaySetting(_arg1:String):void{
            ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_FIRST;
            ControlSettingManager.getInstance().poption = _arg1;
            switch (_arg1){
                case "A":
                    ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_LAST;
                    break;
                case "B":
                    ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_FIRST;
                    break;
            };
        }
        public function updateSkinSetting(_arg1:String, _arg2:Boolean=false):Object{
            var _local3:Object = {
                asset:AssetLoadManager.TEST_BLACK_ASSET_URL,
                description:BlackColorSet
            };
            if (!Boolean(_arg1)){
                throw (new Error("pcolor is invalid!!"));
            };
            activeColor = _arg1.slice(1, 2);
            switch (_arg1){
                case WHITE:
                    _local3.asset = AssetLoadManager.TEST_WHITE_ASSET_URL;
                    _local3.description = WhiteColorSet;
                    break;
                case GRAY:
                    _local3.asset = AssetLoadManager.TEST_GRAY_ASSET_URL;
                    _local3.description = GrayColorSet;
                    break;
                case SKYBLUE:
                    _local3.asset = AssetLoadManager.TEST_BLUE_ASSET_URL;
                    _local3.description = BlueBlueColorSet;
                    break;
                case MOUSEGRAY:
                    _local3.asset = AssetLoadManager.TEST_MOUSE_ASSET_URL;
                    _local3.description = MouseColorSet;
                    break;
                case PINK:
                    _local3.asset = AssetLoadManager.TEST_BLACK_PINK_ASSET_URL;
                    _local3.description = BlackPinkColorSet;
                    break;
                case GREEN:
                    _local3.asset = AssetLoadManager.TEST_BLACK_GREEN_ASSET_URL;
                    _local3.description = GreenColorSet;
                    break;
                case BLUE:
                    _local3.asset = AssetLoadManager.TEST_S_BLACK_URL;
                    _local3.description = SBlackColorSet;
                    break;
                case BLACK:
                    _local3.asset = AssetLoadManager.TEST_BLACK_ASSET_URL;
                    _local3.description = BlackColorSet;
                    break;
                case NEW01:
                    _local3.asset = AssetLoadManager.TEST_NEW01_ASSET_URL;
                    _local3.description = NewBlackAndWhite;
                    break;
                case NEW02:
                    _local3.asset = AssetLoadManager.TEST_NEW02_ASSET_URL;
                    _local3.description = NewPurppleColor;
                    break;
                default:
                    throw (new Error("Invalid PColor type!!"));
            };
            ControlSettingManager.getInstance().pcolorOfConfig = _arg1;
            AssetLoadManager.getInstance().loadAsset(_local3.asset, _local3.description, _arg2);
            return (_local3);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import flash.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import fl.motion.easing.*;

    public class TooltipManager {

        private static var instance:TooltipManager = null;

        private var _enabled:Boolean;
        private var _tooltip:Tooltip;
        private var tooltipContainer:Sprite = null;
        private var offset:Point = null;
        private var initialized:Boolean = false;
        private var placeHolder:DisplayObjectContainer = null;
        private var _bounds:Rectangle;
        public var fadeInDuration:Number = 0.3;

        public function TooltipManager(){
            if (Boolean(instance)){
                throw (new Error("TooltipManager is Singleton"));
            };
        }
        public static function getInstance():TooltipManager{
            if (!Boolean(instance)){
                instance = new (TooltipManager)();
            };
            return ((instance as TooltipManager));
        }

        public function get enabled():Boolean{
            return (_enabled);
        }
        public function get tooltip():Tooltip{
            return (_tooltip);
        }
        public function set enabled(_arg1:Boolean):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            _enabled = _arg1;
            if (Boolean(placeHolder.stage)){
                if (enabled){
                    placeHolder.stage.addEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMoveEvent, false, 0, true);
                } else {
                    placeHolder.stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleStageMouseMoveEvent, false);
                };
                placeHolder.visible = enabled;
            };
        }
        public function setLimitWidth(_arg1:Number):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            tooltip.setLimitWidth(_arg1);
        }
        public function init(_arg1:DisplayObjectContainer=null, _arg2:Number=0.3):void{
            var stageWidth:* = NaN;
            var stageHeight:* = NaN;
            var target = _arg1;
            var fadeInDuration:Number = _arg2;
            if (!Boolean(_tooltip)){
                _tooltip = new Tooltip();
            };
            if (Boolean(target)){
                tooltipContainer = new Sprite();
                var _local4 = tooltipContainer;
                with (_local4) {
                    mouseEnabled = false;
                    mouseChildren = false;
                };
                this.placeHolder = target;
                this.placeHolder.addChildAt(tooltipContainer, 0);
                tooltipContainer.addChildAt(_tooltip, 0);
            };
            if (Boolean(fadeInDuration)){
                this.fadeInDuration = fadeInDuration;
            };
            initialized = true;
            hide();
            setOffsetPoint(0, 0);
            if (Boolean(placeHolder.stage)){
                stageWidth = placeHolder.stage.stageWidth;
                stageHeight = placeHolder.stage.stageHeight;
                bounds = new Rectangle(0, 0, stageWidth, stageHeight);
            } else {
                bounds = new Rectangle(0, 0, 230, 240);
            };
            enabled = true;
        }
        public function hide():void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            enabled = false;
            tooltip.alpha = 0;
        }
        public function setVerticalAlign(_arg1:String):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            if (!Boolean(tooltip.text)){
                throw (new ReferenceError("text is empty or null"));
            };
            tooltip.vAlign = _arg1;
        }
        public function set bounds(_arg1:Rectangle):void{
            if (_bounds === _arg1){
                return;
            };
            _bounds = _arg1;
        }
        public function get bounds():Rectangle{
            return (_bounds);
        }
        public function setText(_arg1:String):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            tooltip.text = _arg1;
        }
        private function handleStageMouseMoveEvent(_arg1:MouseEvent):void{
            var _local2:Number = (placeHolder.mouseX + offset.x);
            var _local3:Number = (placeHolder.mouseY + offset.y);
            var _local4:Number = tooltip.getTransformOriginX();
            var _local5:Number = (bounds.x + (tooltip.width * (1 - _local4)));
            var _local6:Number = ((bounds.x + bounds.width) - (tooltip.width * _local4));
            _local2 = Math.min(Math.max(_local2, _local5), _local6);
            var _local7:Number = tooltip.getTransformOriginY();
            var _local8:Number = (bounds.y + (tooltip.height * (1 - _local7)));
            var _local9:Number = ((bounds.y + bounds.height) - (tooltip.height * _local7));
            _local3 = Math.min(Math.max(_local3, _local8), _local9);
            tooltipContainer.x = _local2;
            tooltipContainer.y = _local3;
            _arg1.updateAfterEvent();
        }
        public function setOffsetPoint(_arg1:Number, _arg2:Number):void{
            offset = new Point(_arg1, _arg2);
        }
        public function show():void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            enabled = true;
            TweensyZero.fromTo(tooltip, {alpha:0}, {alpha:1}, fadeInDuration, Cubic.easeOut, 0, null);
        }
        public function setHorizontalAlign(_arg1:String):void{
            if (!initialized){
                throw (new Error("initialize"));
            };
            if (!Boolean(tooltip.text)){
                throw (new ReferenceError("text is empty or null"));
            };
            tooltip.hAlign = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import fl.controls.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.layercomponent.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin.*;

    public class NaverPostingPlayerInterpreter implements IAssetInterpreter {

        public function updateAsset(_arg1, _arg2):void{
            CSlider.updateStyle(_arg2);
            NaverBasicPostingPlayerCellRenderer.updateAsset(_arg1);
            NaverBasicPostingPlayerCellRenderer.updateRendererStyle(_arg2);
            ListBackGround.updateSkinStyle(_arg2);
            ScrollBar.updateLineStyle(_arg2);
            NaverPostingMusicPlayerList.updateAsset(_arg1);
            NpodPostingPlayerArea.updateAsset(_arg1);
            NpodPostingPlayerArea.updateStyle(_arg2);
            NaverPostingPlayerHeader.updateAsset(_arg1);
            NaverPostingPlayerHeader.updateStyle(_arg2);
            NaverBasicPostingPlayerGuideFooter.updateStyle(_arg2);
            NaverBasicPostingPlayerGuideFooter.updateAsset(_arg1);
            NpodNotifyAlert.updateAsset(_arg1);
            NpodNotifyAlert.updateStyle(_arg2);
            PopMenu.udpateAsset(_arg1);
            TicketPopup.updateAsset(_arg1);
            NPodPostingPlayerFooter.updateAsset(_arg1);
            NPodPostingPlayerFooter.updateStyle(_arg2);
            NaverBasicPostingPromotionGuide.updateAsset(_arg1);
            PromotionPopup.updateAsset(_arg1);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.errors.*;
    import flash.external.*;

    public class NPhotoScrollManager extends EventDispatcher {

        private static var _instance:NPhotoScrollManager = null;

        public var applicationInitClick:Boolean = false;
        public var scrollHandler:Function = null;

        public function NPhotoScrollManager(_arg1:Lock){
            if (_arg1 == null){
                throw (new InstanceIOError(this));
            };
            init();
        }
        public static function getInstance():NPhotoScrollManager{
            if (_instance == null){
                _instance = new NPhotoScrollManager(new Lock());
            };
            return (_instance);
        }

        protected function init():void{
            if (ExternalInterface.available){
                ExternalInterface.addCallback("flashWheelListener", defaultScrollHandler);
            };
            configureEvents();
        }
        protected function defaultScrollHandler(_arg1:Number, _arg2:Number, _arg3:Number):void{
            if (scrollHandler != null){
                scrollHandler(_arg1, _arg2, _arg3);
            };
        }
        override public function toString():String{
            return ("NPhotoScrollManager");
        }
        protected function configureEvents():void{
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 

class Lock {

    public function Lock(){
    }
}
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.net.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets.*;

    public class AssetLoadManager extends EventDispatcher {

        private static const ASSET_COLOR_ARRAY:Array = [{music_icon_asset_gray:GrayColorSet}, {music_icon_asset_white:WhiteColorSet}, {music_icon_asset_green:GreenColorSet}];
        public static const TEST_NEW01_ASSET_URL:String = "flash/assets/music_icon_asset_9.swf";
        public static const TEST_NEW02_ASSET_URL:String = "flash/assets/music_icon_asset_10.swf";

        public static var TEST_BLACK_PINK_ASSET_URL:String = "flash/assets/music_icon_asset_5.swf";
        public static var TEST_BLUE_ASSET_URL:String = "flash/assets/music_icon_asset_3.swf";
        public static var TEST_GRAY_ASSET_URL:String = "flash/assets/music_icon_asset_2.swf";
        public static var TEST_BLACK_ASSET_URL:String = "flash/assets/music_icon_asset_8.swf";
        public static var full_path:String;
        public static var TEST_S_BLACK_URL:String = "flash/assets/music_icon_asset_7.swf";
        private static var _instance:AssetLoadManager;
        public static var TEST_BLACK_GREEN_ASSET_URL:String = "flash/assets/music_icon_asset_6.swf";
        public static var TEST_MOUSE_ASSET_URL:String = "flash/assets/music_icon_asset_4.swf";
        public static var TEST_WHITE_ASSET_URL:String = "flash/assets/music_icon_asset_1.swf";

        public var signiture:Class;
        private var _assetInterpreter:IAssetInterpreter;
        private var _loader:Loader;

        public function AssetLoadManager(){
            signiture = WhiteColorSet;
            super();
            _loader = new Loader();
            _loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeAssetLoadHandler);
            _loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorAssetLoadHandler);
            _loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressAssetLoadHandler);
        }
        public static function getInstance():AssetLoadManager{
            if (!Boolean(_instance)){
                _instance = new (AssetLoadManager)();
            };
            return (_instance);
        }

        private function progressAssetLoadHandler(_arg1:ProgressEvent):void{
        }
        public function get assetInterpreter():IAssetInterpreter{
            return (_assetInterpreter);
        }
        public function sendNewAssetListToComponent(_arg1, _arg2:Class=null):void{
            var _local3:*;
            var _local4:AssetControlEvent;
            if (Boolean(assetInterpreter)){
                _local3 = ASSET_COLOR_ARRAY[_arg2];
                assetInterpreter.updateAsset(_arg1, _arg2);
                _local4 = new AssetControlEvent(AssetControlEvent.COMPETE_ASSIGN_NEW_ASSET);
                dispatchEvent(_local4);
            };
        }
        private function completeAssetLoadHandler(_arg1:Event):void{
            var _local2:* = _loader.contentLoaderInfo.applicationDomain;
            var _local3:AssetControlEvent = new AssetControlEvent(AssetControlEvent.COMPLETE_LOAD_ASSET, true);
            _local3.data = _local2;
            dispatchEvent(_local3);
            sendNewAssetListToComponent(_local2, signiture);
            _local2 = null;
        }
        public function loadAsset(_arg1:String, _arg2:Class=null, _arg3:Boolean=false):void{
            var _local4:String;
            if (_arg3){
                _local4 = (full_path + _arg1);
            } else {
                _local4 = _arg1;
            };
            _local4 = (_local4 + ("?ver=" + WebPlayerCoreProperties.WEB_PLAYER_VER));
            var _local5:URLRequest = new URLRequest(encodeURI(_local4));
            _loader.load(_local5);
            if (Boolean(_arg2)){
                signiture = _arg2;
            };
        }
        public function set assetInterpreter(_arg1:IAssetInterpreter):void{
            this._assetInterpreter = _arg1;
        }
        public function drawNewAsset():void{
        }
        private function errorAssetLoadHandler(_arg1:IOErrorEvent):void{
            throw (new Error("invalid asset file or file does not exist"));
        }
        public function removeExistAsset():void{
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager {

    public class PostingSettingClass {

        private static var _instance:PostingSettingClass;

        public var link:String;
        public var site:String;
        public var mylist_seq:String;
        public var userid:String;
        public var linkYn:String;
        public var ptype:String;
        public var title:String;
        public var pcolor:String;

        public static function getInstance():PostingSettingClass{
            if (!Boolean(_instance)){
                _instance = new (PostingSettingClass)();
            };
            return (_instance);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import fl.managers.*;
    import fl.controls.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import flash.text.*;
    import fl.containers.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin.*;
    import flash.ui.*;

    public class NaverPlayerLyricsPanel extends ScrollPane {

        private static const REPLACE_TAG:RegExp = new RegExp("\n{1}");
        private static const MIN_HEIGHT:Number = 290;

        public static var titleFieldColor:int = 0x32C100;
        public static var artistFieldColor:int = 0x777777;
        private static var up_scroll_mouse_down_icon:Class;
        public static var baseColor:int = 0xFFFFFF;
        private static var down_scroll_mouse_up_icon:Class;
        public static var hruleColor:int = 15527663;
        private static var down_scroll_mouse_down_icon:Class;
        private static var scroll_thumb_over_icon:Class;
        public static var lyricsFieldColor:int = 0x333333;
        private static var scroll_thumb_icon:Class;
        private static var up_scroll_mouse_up_icon:Class;
        private static var scroll_background_icon:Class;
        public static var delemeterFieldColor:int = 0xCCCCCC;

        private var _artistTextField:TextField;
        private var _playerModel:MusicPlayerBasicModel;
        private var tooltipMgr:TooltipManager;
        private var _delimeterTextField:TextField;
        private var _songTitleTextField:TextField;
        private var vrule:Sprite;
        private var _baseRect:Sprite;
        private var _activeSongSO:Song;
        private var _lylicsTextField:TextField;
        private var description:DescriptionPanel;

        public function NaverPlayerLyricsPanel(){
            tooltipMgr = TooltipManager.getInstance();
            defineStyle();
            horizontalScrollPolicy = ScrollPolicy.OFF;
            addEventListener(MouseEvent.ROLL_OVER, wheelOverHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, wheelOutHandler, false, 0, true);
            _baseRect = new Sprite();
            _baseRect.graphics.beginFill(baseColor);
            _baseRect.graphics.drawRect(0, 0, 335, 300);
            _baseRect.graphics.endFill();
            _songTitleTextField = new TextField();
            _songTitleTextField.selectable = false;
            var _local1:TextFormat = new TextFormat();
            _local1.font = "돋움,AppleGothic";
            _local1.size = 12;
            _local1.color = titleFieldColor;
            _local1.bold = true;
            _songTitleTextField.defaultTextFormat = _local1;
            _songTitleTextField.x = 12;
            _songTitleTextField.y = 15;
            _baseRect.addChild(_songTitleTextField);
            _delimeterTextField = new TextField();
            _delimeterTextField.selectable = false;
            var _local2:TextFormat = new TextFormat();
            _local2.font = "돋움,AppleGothic";
            _local2.size = 12;
            _local2.color = delemeterFieldColor;
            _delimeterTextField.defaultTextFormat = _local2;
            _delimeterTextField.text = "/";
            _delimeterTextField.visible = false;
            _delimeterTextField.x = ((_songTitleTextField.x + _songTitleTextField.textWidth) + 5);
            _delimeterTextField.y = _songTitleTextField.y;
            _baseRect.addChild(_delimeterTextField);
            _artistTextField = new TextField();
            _artistTextField.selectable = false;
            var _local3:TextFormat = new TextFormat();
            _local3.font = "돋움,AppleGothic";
            _local3.size = 12;
            _local3.color = artistFieldColor;
            _artistTextField.defaultTextFormat = _local3;
            _artistTextField.x = ((_delimeterTextField.x + _delimeterTextField.textWidth) + 5);
            _artistTextField.y = 15;
            _baseRect.addChild(_artistTextField);
            vrule = new Sprite();
            vrule.graphics.clear();
            vrule.graphics.lineStyle(1, hruleColor, 1, true);
            vrule.graphics.moveTo(11, 42);
            vrule.graphics.lineTo(314, 42);
            vrule.visible = false;
            _baseRect.addChild(vrule);
            _lylicsTextField = new TextField();
            _lylicsTextField.selectable = false;
            var _local4:TextFormat = new TextFormat();
            _local4.font = "돋움,AppleGothic";
            _local4.size = 12;
            _local4.color = lyricsFieldColor;
            _local4.leading = 8;
            _lylicsTextField.defaultTextFormat = _local4;
            _lylicsTextField.width = 303;
            _lylicsTextField.x = 11;
            _lylicsTextField.y = 58;
            _lylicsTextField.text = "";
            _lylicsTextField.wordWrap = true;
            _lylicsTextField.multiline = true;
            _lylicsTextField.mouseWheelEnabled = false;
            _baseRect.addChild(_lylicsTextField);
            _baseRect.graphics.clear();
            _baseRect.graphics.beginFill(baseColor);
            var _local5:Number = ((_lylicsTextField.y + _lylicsTextField.textHeight) + 10);
            if (_local5 < MIN_HEIGHT){
                _local5 = 300;
            };
            _baseRect.graphics.drawRect(0, 0, 335, _local5);
            _baseRect.graphics.endFill();
            description = new DescriptionPanel();
            description.x = 95;
            description.y = 110;
            description.createNotifyTextField();
            description.changeFrame();
            description.showInfo(true);
            _baseRect.addChild(description);
            source = _baseRect;
        }
        public static function updateAsset(_arg1):void{
            down_scroll_mouse_down_icon = _arg1.getDefinition("down_scroll_mouse_down_icon");
            down_scroll_mouse_up_icon = _arg1.getDefinition("down_scroll_mouse_up_icon");
            up_scroll_mouse_down_icon = _arg1.getDefinition("up_scroll_mouse_down_icon");
            up_scroll_mouse_up_icon = _arg1.getDefinition("scroll_mouse_up_icon");
            scroll_background_icon = _arg1.getDefinition("scroll_background_icon");
            scroll_thumb_icon = _arg1.getDefinition("scroll_thumb_icon");
            scroll_thumb_over_icon = _arg1.getDefinition("scroll_thumb_over_icon");
        }
        public static function updatePanelStyle(_arg1):void{
            baseColor = _arg1.LYRICSPANEL_BG_COLOR;
            titleFieldColor = _arg1.LYRICSPANEL_TITLE_COLOR;
            delemeterFieldColor = _arg1.LYRICSPANEL_DELEMETER_COLOR;
            artistFieldColor = _arg1.LYRICSPANEL_ARTIST_COLOR;
            lyricsFieldColor = _arg1.LYRICSPANEL_LYRICS_COLOR;
            hruleColor = _arg1.LYRICSPANEL_HRULE_COLOR;
        }

        public function drawForce():void{
            var _local1:Number;
            if (Boolean(ControlSettingManager.getInstance().songTitleName)){
                if (Boolean(playerModel.activeNode)){
                    description.showInfo(false);
                    _songTitleTextField.visible = true;
                    _delimeterTextField.visible = true;
                    _artistTextField.visible = true;
                    vrule.visible = true;
                    _songTitleTextField.text = ControlSettingManager.getInstance().songTitleName;
                    _songTitleTextField.width = (_songTitleTextField.textWidth + 10);
                    _delimeterTextField.x = ((_songTitleTextField.x + _songTitleTextField.textWidth) + 10);
                    _artistTextField.text = ControlSettingManager.getInstance().songArtistName;
                    _artistTextField.x = ((_delimeterTextField.x + _delimeterTextField.textWidth) + 10);
                    _artistTextField.width = (_artistTextField.textWidth + 5);
                    checkSongInfoTextLength();
                    _songTitleTextField.width = (_songTitleTextField.textWidth + 10);
                    _delimeterTextField.x = ((_songTitleTextField.x + _songTitleTextField.textWidth) + 10);
                    _artistTextField.text = ControlSettingManager.getInstance().songArtistName;
                    _artistTextField.x = ((_delimeterTextField.x + _delimeterTextField.textWidth) + 10);
                    _artistTextField.width = (_artistTextField.textWidth + 5);
                    _lylicsTextField.text = ControlSettingManager.getInstance().songLyrics;
                    _lylicsTextField.width = 315;
                    _lylicsTextField.height = _lylicsTextField.textHeight;
                    _local1 = ((_lylicsTextField.y + _lylicsTextField.height) + 10);
                    if (_local1 <= MIN_HEIGHT){
                        _local1 = 300;
                    };
                    _baseRect.graphics.clear();
                    _baseRect.graphics.beginFill(baseColor);
                    _baseRect.graphics.drawRect(0, 0, 335, _local1);
                    _baseRect.graphics.endFill();
                    source = _baseRect;
                    setTimeout(drawNow, 5000);
                };
            };
        }
        private function artistTooltopHandler(_arg1:MouseEvent):void{
            var _local2:String = _arg1.type;
            if (_local2 == MouseEvent.MOUSE_OVER){
                tooltipMgr.show();
            } else {
                if (_local2 == MouseEvent.MOUSE_OUT){
                    tooltipMgr.hide();
                };
            };
        }
        private function artistTooltop(_arg1:Boolean):void{
            if (_arg1){
                _artistTextField.autoSize = TextFieldAutoSize.LEFT;
                tooltipMgr.setText(ControlSettingManager.getInstance().songArtistName);
                _artistTextField.addEventListener(MouseEvent.MOUSE_OVER, artistTooltopHandler);
                _artistTextField.addEventListener(MouseEvent.MOUSE_OUT, artistTooltopHandler);
            } else {
                if (_artistTextField.hasEventListener(MouseEvent.MOUSE_OVER)){
                    _artistTextField.removeEventListener(MouseEvent.MOUSE_OVER, artistTooltopHandler);
                } else {
                    if (_artistTextField.hasEventListener(MouseEvent.MOUSE_OUT)){
                        _artistTextField.removeEventListener(MouseEvent.MOUSE_OUT, artistTooltopHandler);
                    };
                };
            };
        }
        public function get playerModel():MusicPlayerBasicModel{
            return (_playerModel);
        }
        private function wheelOverHandler(_arg1:MouseEvent):void{
            NPhotoScrollManager.getInstance().scrollHandler = supportWheel;
        }
        public function applySkin(_arg1:Object):void{
            baseColor = _arg1.baseColor;
            titleFieldColor = _arg1.titleFieldColor;
            artistFieldColor = _arg1.artistFieldColor;
            delemeterFieldColor = _arg1.delemeterFieldColor;
            lyricsFieldColor = _arg1.lyricsFieldColor;
        }
        public function removeAsset():void{
            ControlSettingManager.getInstance().scrollPos = verticalScrollPosition;
            removeEventListener(MouseEvent.ROLL_OVER, wheelOverHandler);
            removeEventListener(MouseEvent.ROLL_OUT, wheelOutHandler);
            if (description){
                _baseRect.removeChild(description);
                description = null;
            };
            if (Boolean(_songTitleTextField)){
                _baseRect.removeChild(_songTitleTextField);
                _songTitleTextField = null;
            };
            if (Boolean(_delimeterTextField)){
                _baseRect.removeChild(_delimeterTextField);
                _delimeterTextField = null;
            };
            if (Boolean(_artistTextField)){
                _baseRect.removeChild(_artistTextField);
                _artistTextField = null;
            };
            if (Boolean(_lylicsTextField)){
                _baseRect.removeChild(_lylicsTextField);
                _lylicsTextField = null;
            };
            var _local1:int = _baseRect.numChildren;
            var _local2:int;
            while (_local2 < _local1) {
                _baseRect.removeChildAt(0);
                _local2++;
            };
            _baseRect = null;
        }
        public function release():void{
            if (Boolean(_activeSongSO)){
                _activeSongSO.releaseMemory();
                _activeSongSO = null;
            };
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            switch (_arg1.keyCode){
                case Keyboard.SPACE:
                    handlePlayPause();
                    break;
            };
        }
        public function initAll():void{
            _songTitleTextField.text = "";
            _artistTextField.text = "";
            _lylicsTextField.text = "";
            var _local1:Number = ((_lylicsTextField.y + _lylicsTextField.textHeight) + 10);
            if (_local1 <= MIN_HEIGHT){
                _local1 = 300;
            };
            _baseRect.graphics.clear();
            _baseRect.graphics.beginFill(baseColor);
            _baseRect.graphics.drawRect(0, 0, 335, _local1);
            _baseRect.graphics.endFill();
        }
        public function updateEmptyListLyrics():void{
            _songTitleTextField.text = "";
            _artistTextField.text = "";
            _lylicsTextField.text = "";
            _songTitleTextField.visible = false;
            _delimeterTextField.visible = false;
            _artistTextField.visible = false;
            vrule.visible = false;
            _lylicsTextField.text = "";
            description.showInfo(true);
            var _local1:Number = (_lylicsTextField.y + _lylicsTextField.height);
            if (_local1 <= MIN_HEIGHT){
                _local1 = 300;
            };
            _baseRect.graphics.clear();
            _baseRect.graphics.beginFill(baseColor);
            _baseRect.graphics.drawRect(0, 0, 335, _local1);
            _baseRect.graphics.endFill();
            source = _baseRect;
            drawNow();
        }
        public function get activeSongSO():Song{
            return (_activeSongSO);
        }
        private function forceScroll():void{
            verticalScrollPosition = 0;
        }
        private function handlePlayPause():void{
            var _local1:InternalUIHandlerEvent = new InternalUIHandlerEvent(InternalUIHandlerEvent.APPLY_HOT_KEY_OF_SPACE, false);
            dispatchEvent(_local1);
        }
        private function supportWheel(_arg1:Number, _arg2:Number, _arg3:Number):void{
            var _local4 = 1;
            if (_arg1 < 0){
                _local4 = 1;
            } else {
                if (_arg1 > 0){
                    _local4 = -1;
                };
            };
            var _local5:int = (_local4 * verticalLineScrollSize);
            verticalScrollPosition = (verticalScrollPosition + _local5);
        }
        public function drawLylics(_arg1:String):void{
            var _local2:Song;
            var _local3:Number;
            if (Boolean(playerModel.activeNode)){
                description.showInfo(false);
                _songTitleTextField.visible = true;
                _delimeterTextField.visible = true;
                _artistTextField.visible = true;
                vrule.visible = true;
                _local2 = (playerModel.activeNode.data as SongInfoServiceObject).songServiceObject;
                _songTitleTextField.text = _local2.track.tracktitle;
                ControlSettingManager.getInstance().songTitleName = _local2.track.tracktitle;
                _songTitleTextField.width = (_songTitleTextField.textWidth + 10);
                _delimeterTextField.x = ((_songTitleTextField.x + _songTitleTextField.textWidth) + 10);
                _artistTextField.text = (playerModel.activeNode.data as SongInfoServiceObject).singer;
                _artistTextField.width = (_artistTextField.textWidth + 5);
                ControlSettingManager.getInstance().songArtistName = _artistTextField.text;
                _artistTextField.x = ((_delimeterTextField.x + _delimeterTextField.textWidth) + 10);
                checkSongInfoTextLength();
                _songTitleTextField.width = (_songTitleTextField.textWidth + 10);
                _delimeterTextField.x = ((_songTitleTextField.x + _songTitleTextField.textWidth) + 10);
                _artistTextField.width = (_artistTextField.textWidth + 5);
                _artistTextField.x = ((_delimeterTextField.x + _delimeterTextField.textWidth) + 10);
                _lylicsTextField.text = _arg1;
                ControlSettingManager.getInstance().songLyrics = _arg1;
                _lylicsTextField.width = 315;
                _lylicsTextField.height = _lylicsTextField.textHeight;
                _local3 = ((_lylicsTextField.y + _lylicsTextField.height) + 10);
                if (_local3 <= MIN_HEIGHT){
                    _local3 = 300;
                };
                _baseRect.graphics.clear();
                _baseRect.graphics.beginFill(baseColor);
                _baseRect.graphics.drawRect(0, 0, 335, _local3);
                _baseRect.graphics.endFill();
                source = _baseRect;
                drawNow();
                setTimeout(forceScroll, 50);
            };
        }
        public function set playerModel(_arg1:MusicPlayerBasicModel):void{
            this._playerModel = _arg1;
        }
        private function checkSongInfoTextLength():void{
            var _local1:int;
            var _local2:Number = (_songTitleTextField.x + _songTitleTextField.width);
            var _local3:Number = _songTitleTextField.x;
            var _local4:int;
            while (_local4 < _songTitleTextField.text.length) {
                _local3 = (_local3 + _songTitleTextField.getCharBoundaries(_local4).width);
                if (_local3 >= 150){
                    _songTitleTextField.text = (_songTitleTextField.text.slice(0, _local4) + "...");
                    break;
                };
                _local4++;
            };
            var _local5:Number = 0;
            var _local6:int = _artistTextField.text.length;
            var _local7:int;
            while (_local7 < _local6) {
                _local5 = (_local5 + _artistTextField.getCharBoundaries(_local7).width);
                if ((((_local3 >= 150)) && ((_local5 >= 120)))){
                    _artistTextField.text = (_artistTextField.text.slice(0, _local7) + "...");
                    this.artistTooltop(true);
                    break;
                };
                if ((_local3 + _local5) > 280){
                    _artistTextField.text = (_artistTextField.text.slice(0, _local7) + "...");
                    this.artistTooltop(true);
                    break;
                };
                this.artistTooltop(false);
                _local7++;
            };
        }
        private function wheelOutHandler(_arg1:MouseEvent):void{
            NPhotoScrollManager.getInstance().scrollHandler = null;
        }
        public function set activeSongSO(_arg1:Song):void{
            if (Boolean(this._activeSongSO)){
                this._activeSongSO = null;
            };
            this._activeSongSO = _arg1;
        }
        public function drawHeader():void{
        }
        private function defineStyle():void{
            StyleManager.setStyle("scrollBarWidth", 10);
            StyleManager.setStyle("scrollArrowWidth", 10);
            StyleManager.setStyle("scrollArrowHeight", 13);
            setStyle("skin", ListBackGround);
            setStyle("thumbOverSkin", scroll_thumb_over_icon);
            setStyle("thumbUpSkin", scroll_thumb_icon);
            setStyle("thumbDownSkin", scroll_thumb_over_icon);
            setStyle("thumbIcon", null);
            setStyle("thumbDisabledSkin", scroll_thumb_icon);
            setStyle("trackDownSkin", scroll_background_icon);
            setStyle("trackOverSkin", scroll_background_icon);
            setStyle("trackUpSkin", scroll_background_icon);
            setStyle("trackDisabledSkin", scroll_background_icon);
            setStyle("upArrowDisabledSkin", up_scroll_mouse_up_icon);
            setStyle("upArrowDownSkin", up_scroll_mouse_up_icon);
            setStyle("upArrowOverSkin", up_scroll_mouse_down_icon);
            setStyle("upArrowUpSkin", up_scroll_mouse_up_icon);
            setStyle("downArrowDisabledSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowDownSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowUpSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowOverSkin", down_scroll_mouse_down_icon);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.assets {
    import flash.display.*;

    public class HighQualityNotiIcon extends Bitmap {

        public function HighQualityNotiIcon(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, true);
        }
    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel {
    import flash.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders.*;
    import com.nhn.events.*;
    import flash.text.*;
    import flash.net.*;
    import com.nhn.net.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;
    import com.nhn.easing.*;

    public class NpodPostingPlayerArea extends Sprite {

        private static const DOWNER_STATE:int = 2;
        private static const PROGRESSBAR_SLIDE_RECT:Rectangle = new Rectangle(10, 178, 140, 18);
        public static const FORWARD_BUTTON:String = "FORWARD_BUTTON";
        public static const LOG_OUT_BTN:String = "LOG_OUT_BTN";
        public static const REPEAT_ONE_SONG:int = 2;
        private static const MINUTE:int = 80;
        private static const VOLUME_SLIDE_RECT:Rectangle = new Rectangle(41, 328, 64, 10);
        public static const LOG_IN_BTN:String = "LOG_IN_BTN";
        public static const PURCHASE_BUTTON:String = "PURCHASE_BUTTON";
        public static const PAUSE_PLAY_BUTTON:String = "PAUSE_PLAY_BUTTON";
        public static const REWIND_BUTTON:String = "REWIND_BUTTON";
        public static const REPEAT_ALL_SONG:int = 1;
        public static const FOLD_BUTTON:String = "FOLD_BUTTON";
        private static const VALID_STATE:int = 0;
        public static const REPEAT_BUTTON:String = "REPEAT_BUTTON";
        public static const NO_REPEAT:int = 3;
        public static const SHUFFLE_BUTTON:String = "SHUFFLE_BUTTON";
        public static const PLAY_PAUSE_BUTTON:String = "PLAY_PAUSE_BUTTON";
        public static const PROGRESSBAR_BUTTON:String = "PROGRESSBAR_BUTTON";
        public static const VOLUM_BUTTON:String = "VOLUM_BUTTON";
        private static const SIXTY_SECOND:int = 60;
        private static const UPPER_STATE:int = 1;
        public static const EXPAND_BUTTON:String = "EXPAND_BUTTON";

        private static var footer_vrule_prototype:Class;
        private static var shuffle_button_prototype:Class;
        private static var volumn_button_prototype:Class;
        private static var forward_button_prototype:Class;
        private static var _albumInfoTextColor:int = 0;
        private static var no_image_mc_prototype:Class;
        private static var bgColor:int = 0xFFFFFF;
        private static var borderColor:int = 0xAEAEAE;
        private static var _mouseOveredColor:int;
        private static var _trackInfoTextColor:int = 0;
        private static var purchase_mp3_button_prototype:Class;
        private static var main_jacket_prototype:Class;
        private static var header_title_prototype:Class;
        private static var npod_bg_prototype:Class;
        private static var _totalTimeColor:int = 0xC0C0C0;
        private static var borderShadowColor:int = 0xCFCFCF;
        private static var _artistInfoTextColor:int = 0;
        private static var progress_bar_prototype:Class;
        private static var _playingTimeColor:int = 3258625;
        private static var play_pause_button_prototype:Class;
        private static var volumn_ctrl_prototype:Class;
        private static var rewind_button_prototype:Class;
        private static var repeat_button_prototype:Class;
        private static var pause_play_button_prototype:Class;

        private var isVolumeBarOver:Boolean;
        protected var _playerModel:MusicPlayerBasicModel;
        protected var _thumbnailBitmap:Bitmap;
        private var isProgressBarOver:Boolean;
        protected var progress_bar_instance;
        protected var volumn_ctrl_slider:CSlider;
        protected var empty_list_area:FlowTextField;
        protected var npod_bg_instance:DisplayObject;
        protected var shadow:Sprite;
        private var curState:int = 0;
        protected var no_image_instance:DisplayObject;
        protected var ignoreUpdate:Boolean;
        protected var vrule_array:Array;
        private var currentTimes:Number = 0;
        protected var repeat_button_instance:DisplayObject;
        protected var main_jacket_instance:DisplayObject;
        protected var _totalTimeField:TextField;
        protected var purchase_mp3_button_instance:DisplayObject;
        protected var existThumbnailPath:String;
        protected var rewind_button_instance:DisplayObject;
        protected var artist_info_area:FlowTextField;
        protected var forward_button_instance:DisplayObject;
        protected var header_title_instance:DisplayObject;
        protected var _thumbnailBg:Sprite;
        protected var empty_artist_area:FlowTextField;
        protected var pause_play_button_instance:DisplayObject;
        protected var album_info_area:FlowTextField;
        protected var _totalTime:Number = 305;
        private var header_title_naver:Sprite;
        protected var shuffle_button_instance:DisplayObject;
        private var header_title_music:Sprite;
        protected var volumn_ctrl_instance;
        protected var _prevVolume:int;
        protected var overRect:Sprite;
        protected var progress_bar_slider:CSlider;
        protected var _prevBitmap:Bitmap;
        protected var volumn_button_instance:DisplayObject;
        private var deemedLayer:Sprite;
        protected var play_pause_button_instance:DisplayObject;
        private var _displayTime:Number;
        protected var _playingTimeField:TextField;

        public function NpodPostingPlayerArea(){
            addEventListener(MouseEvent.ROLL_OVER, npodWheelOverHandler);
            addEventListener(MouseEvent.ROLL_OUT, npodWheelOutHandler);
            _prevBitmap = new Bitmap();
            _thumbnailBitmap = new Bitmap();
            _thumbnailBg = new Sprite();
            _thumbnailBg.addChild(_prevBitmap);
            _thumbnailBg.addChild(_thumbnailBitmap);
            _thumbnailBg.mouseEnabled = false;
        }
        public static function updateStyle(_arg1):void{
            bgColor = _arg1.NPDO_AREA_BG_COLOR;
            borderColor = _arg1.NPOD_AREA_BORDER_COLOR;
            borderShadowColor = _arg1.NPOD_AREA_BORDER_SHADOW_COLOR;
            _playingTimeColor = _arg1.NPOD_AREA_PLAYING_TIME_COLOR;
            _totalTimeColor = _arg1.NPOD_AREA_TOTAL_TIME_COLOR;
            _mouseOveredColor = _arg1.MOUSE_OVERED_COLOR;
            _albumInfoTextColor = _arg1.NPOD_AREA_ALBUM_TITLE_COLOR;
            _artistInfoTextColor = _arg1.NPOD_AREA_ARTIST_TITLE_COLOR;
            _trackInfoTextColor = _arg1.NPOD_AREA_TRACK_TITLE_COLOR;
        }
        public static function updateAsset(_arg1):void{
            no_image_mc_prototype = _arg1.getDefinition("no_image_mc");
            npod_bg_prototype = _arg1.getDefinition("npod_bg");
            header_title_prototype = _arg1.getDefinition("header_title");
            main_jacket_prototype = _arg1.getDefinition("main_jacket_asset");
            progress_bar_prototype = _arg1.getDefinition("progressive_slider");
            purchase_mp3_button_prototype = _arg1.getDefinition("purchasemp3_btn");
            rewind_button_prototype = _arg1.getDefinition("rewind_btn");
            forward_button_prototype = _arg1.getDefinition("forward_btn");
            play_pause_button_prototype = _arg1.getDefinition("play_btn");
            pause_play_button_prototype = _arg1.getDefinition("pause_btn");
            footer_vrule_prototype = _arg1.getDefinition("vruler_asset");
            volumn_button_prototype = _arg1.getDefinition("volumn_btn");
            volumn_ctrl_prototype = _arg1.getDefinition("volumn_slider");
            repeat_button_prototype = _arg1.getDefinition("repeat_btn");
            shuffle_button_prototype = _arg1.getDefinition("shuffle_btn");
        }

        public function isPauseState():Boolean{
            return ((play_pause_button_instance.visible == true));
        }
        public function release():void{
            if (Boolean(_playerModel)){
                _playerModel.releaseModel();
                _playerModel = null;
            };
        }
        private function checkPurchaseMp3():void{
            var _local1:NaverMusicPlayerBasicEvent;
            var _local2:SongInfoServiceObject;
            var _local3:SongInfoServiceObject;
            if ((purchase_mp3_button_instance as MovieClip).currentFrame != 1){
                return;
            };
            if (playerModel.userInfo.isTeam == UserInfo.IS_TEAM){
                notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                return;
            };
            if (playerModel.activeNode){
                _local2 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local2)){
                    _local1 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                    _local1.data = {trackIds:[_local2.getTrackID()]};
                    dispatchEvent(_local1);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local3 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local3){
                        _local1 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                        _local1.data = {trackIds:[_local3.getTrackID()]};
                        dispatchEvent(_local1);
                    };
                };
            };
        }
        public function createAssetInstance():void{
            var _local10:*;
            addEventListener(MouseEvent.MOUSE_MOVE, checkRect);
            addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            npod_bg_instance = new npod_bg_prototype();
            addChild(npod_bg_instance);
            header_title_instance = new header_title_prototype();
            (header_title_instance as MovieClip).buttonMode = false;
            (header_title_instance as MovieClip).useHandCursor = false;
            header_title_naver = new Sprite();
            header_title_naver.addChild(new Bitmap(new BitmapData(55, 20)));
            header_title_naver.addEventListener(MouseEvent.CLICK, requestNaverHome);
            header_title_naver.buttonMode = true;
            header_title_naver.useHandCursor = true;
            header_title_naver.alpha = 0;
            (header_title_instance as MovieClip).addChild(header_title_naver);
            header_title_music = new Sprite();
            header_title_music.x = ((header_title_instance as MovieClip).width - 55);
            header_title_music.addChild(new Bitmap(new BitmapData(55, 20)));
            header_title_music.addEventListener(MouseEvent.CLICK, requestNaverMusicHome);
            header_title_music.buttonMode = true;
            header_title_music.useHandCursor = true;
            header_title_music.alpha = 0;
            (header_title_instance as MovieClip).addChild(header_title_music);
            addChild(header_title_instance);
            no_image_instance = new no_image_mc_prototype();
            (no_image_instance as MovieClip).mouseEnabled = false;
            no_image_instance.visible = false;
            addChild(no_image_instance);
            addChild(_thumbnailBg);
            main_jacket_instance = new main_jacket_prototype();
            main_jacket_instance.addEventListener(MouseEvent.CLICK, requestAlbumEndPage);
            (main_jacket_instance as MovieClip).buttonMode = true;
            (main_jacket_instance as MovieClip).useHandCursor = true;
            addChild(main_jacket_instance);
            progress_bar_instance = new progress_bar_prototype();
            var _local1:MovieClip = progress_bar_instance.thumb;
            var _local2:MovieClip = progress_bar_instance.trackEmpty;
            var _local3:MovieClip = progress_bar_instance.track;
            progress_bar_slider = new CSlider(_local1, _local2, _local3, "horizental", 0, 100, ControlSettingManager.getInstance().progressSliderValue, true);
            progress_bar_slider.thumbSizeOption(0);
            progress_bar_slider.ease = Exponential.easeInOut;
            progress_bar_slider.duration = 0.2;
            progress_bar_slider.wheelRatio = 0.1;
            progress_bar_slider.buttonMode = true;
            progress_bar_slider.useHandCursor = true;
            progress_bar_slider._thumb.visible = true;
            progress_bar_slider.addEventListener(CSliderEvent.THUMB_DRAG_START, checkState);
            progress_bar_slider.addEventListener(CSliderEvent.TRACK_CLICK_START, checkState);
            progress_bar_slider.addEventListener(CSliderEvent.THUMB_DRAG_END, progressSliderHandler);
            progress_bar_slider.addEventListener(CSliderEvent.TRACK_CLICK_END, progressSliderHandler);
            addChild(progress_bar_slider);
            album_info_area = new FlowTextField();
            album_info_area.name = "TRACK_TITLE";
            album_info_area.buttonMode = true;
            album_info_area.addEventListener(MouseEvent.CLICK, showEndPage);
            album_info_area.maskRect = new Rectangle(1, 0, 140, 20);
            album_info_area.availableWidth = 130;
            album_info_area.fontFamily = "돋움,Dotum,AppleGothic,_sans";
            album_info_area.fontColor = _albumInfoTextColor;
            album_info_area.mouseOverFontColor = _mouseOveredColor;
            album_info_area.fontSize = 13;
            album_info_area.letterSpacing = -0.5;
            album_info_area.bold = true;
            album_info_area.x = 16;
            album_info_area.y = 200;
            addChild(album_info_area);
            artist_info_area = new FlowTextField();
            artist_info_area.name = "ARTIST_TITLE";
            artist_info_area.buttonMode = true;
            artist_info_area.addEventListener(MouseEvent.CLICK, showEndPage);
            artist_info_area.maskRect = new Rectangle(1, 0, 130, 20);
            artist_info_area.availableWidth = 120;
            artist_info_area.fontFamily = "돋움,Dotum,AppleGothic,_sans";
            artist_info_area.fontColor = _artistInfoTextColor;
            artist_info_area.mouseOverFontColor = _mouseOveredColor;
            artist_info_area.fontSize = 11;
            artist_info_area.letterSpacing = -0.5;
            artist_info_area.x = 16;
            artist_info_area.y = 218;
            addChild(artist_info_area);
            purchase_mp3_button_instance = new purchase_mp3_button_prototype();
            purchase_mp3_button_instance.name = PURCHASE_BUTTON;
            (purchase_mp3_button_instance as MovieClip).buttonMode = true;
            (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
            addChild(purchase_mp3_button_instance);
            updateMp3ActiveState();
            rewind_button_instance = new rewind_button_prototype();
            rewind_button_instance.name = REWIND_BUTTON;
            addChild(rewind_button_instance);
            play_pause_button_instance = new play_pause_button_prototype();
            play_pause_button_instance.name = PLAY_PAUSE_BUTTON;
            play_pause_button_instance.visible = ControlSettingManager.getInstance().showPlayButton;
            addChild(play_pause_button_instance);
            pause_play_button_instance = new pause_play_button_prototype();
            pause_play_button_instance.name = PAUSE_PLAY_BUTTON;
            pause_play_button_instance.visible = ControlSettingManager.getInstance().showPauseButton;
            addChild(pause_play_button_instance);
            forward_button_instance = new forward_button_prototype();
            forward_button_instance.name = FORWARD_BUTTON;
            addChild(forward_button_instance);
            vrule_array = new Array();
            var _local4:int;
            while (_local4 < 2) {
                _local10 = new footer_vrule_prototype();
                _local4++;
            };
            volumn_button_instance = new volumn_button_prototype();
            volumn_button_instance.name = VOLUM_BUTTON;
            (volumn_button_instance as MovieClip).buttonMode = true;
            (volumn_button_instance as MovieClip).useHandCursor = true;
            (volumn_button_instance as MovieClip).gotoAndStop(ControlSettingManager.getInstance().volumeButtonFrameValue);
            addChild(volumn_button_instance);
            volumn_ctrl_instance = new volumn_ctrl_prototype();
            var _local5:MovieClip = volumn_ctrl_instance.thumb;
            var _local6:MovieClip = volumn_ctrl_instance.trackEmpty;
            var _local7:MovieClip = volumn_ctrl_instance.track;
            volumn_ctrl_slider = new CSlider(_local5, _local6, _local7, "horizental", 0, 1, ControlSettingManager.getInstance().volumeSliderValue);
            volumn_ctrl_slider._thumb.visible = true;
            volumn_ctrl_slider.thumbSizeOption(0);
            volumn_ctrl_slider.ease = Exponential.easeInOut;
            volumn_ctrl_slider.duration = 0.2;
            volumn_ctrl_slider.wheelRatio = 0.1;
            volumn_ctrl_slider.addEventListener(CSliderEvent.SLIDER_CHANGE, volumnSliderHandler);
            addChild(volumn_ctrl_slider);
            shuffle_button_instance = new shuffle_button_prototype();
            (shuffle_button_instance as MovieClip).buttonMode = true;
            (shuffle_button_instance as MovieClip).useHandCursor = true;
            (shuffle_button_instance as MovieClip).gotoAndStop(ControlSettingManager.getInstance().shuffleButtonFrameValue);
            shuffle_button_instance.name = SHUFFLE_BUTTON;
            addChild(shuffle_button_instance);
            repeat_button_instance = new repeat_button_prototype();
            (repeat_button_instance as MovieClip).buttonMode = true;
            (repeat_button_instance as MovieClip).useHandCursor = true;
            (repeat_button_instance as MovieClip).gotoAndStop(ControlSettingManager.getInstance().repeatButtonFrameValue);
            repeat_button_instance.name = REPEAT_BUTTON;
            addChild(repeat_button_instance);
            _playingTimeField = new TextField();
            _playingTimeField.selectable = false;
            _playingTimeField.x = 14;
            _playingTimeField.y = 184;
            var _local8:TextFormat = new TextFormat();
            _local8.font = "Tahoma,AppleGothic";
            _local8.size = 9;
            _local8.color = _playingTimeColor;
            _playingTimeField.defaultTextFormat = _local8;
            _playingTimeField.text = "00:00";
            _playingTimeField.width = (_playingTimeField.textWidth + 5);
            _playingTimeField.height = (_playingTimeField.textHeight + 5);
            addChild(_playingTimeField);
            _totalTimeField = new TextField();
            _totalTimeField.selectable = false;
            _totalTimeField.x = 124;
            _totalTimeField.y = 184;
            var _local9:TextFormat = new TextFormat();
            _local9.font = "Tahoma,AppleGothic";
            _local9.size = 9;
            _local9.color = _totalTimeColor;
            _totalTimeField.defaultTextFormat = _local9;
            _totalTimeField.text = "04:15";
            _totalTimeField.width = (_totalTimeField.textWidth + 5);
            _totalTimeField.height = (_totalTimeField.textHeight + 5);
            addChild(_totalTimeField);
            totalTime = ControlSettingManager.getInstance().totalTime;
            empty_list_area = new FlowTextField();
            empty_list_area.mouseEnabled = false;
            empty_list_area.fontFamily = "나눔고딕 Bold,NanumGothic Bold,NanumGothicOTFBold";
            empty_list_area.availableWidth = 150;
            empty_list_area.fontColor = _albumInfoTextColor;
            empty_list_area.fontSize = 12.5;
            empty_list_area.text = NaverMusicPlayerProperty.EMPTY_PLAYLIST_ALERT;
            empty_list_area.x = ((npod_bg_instance.width / 2) - (empty_list_area.width / 2));
            empty_list_area.y = 200;
            empty_artist_area = new FlowTextField();
            empty_artist_area.mouseEnabled = false;
            empty_artist_area.availableWidth = 170;
            empty_artist_area.fontFamily = "나눔고딕 Bold,NanumGothic Bold,NanumGothicOTFBold";
            empty_artist_area.fontColor = _artistInfoTextColor;
            empty_artist_area.fontSize = 11;
            empty_artist_area.text = NaverMusicPlayerProperty.EMPTY_ARTIST_ALERT;
            empty_artist_area.x = ((npod_bg_instance.width / 2) - (empty_artist_area.width / 2));
            empty_artist_area.y = 218;
            deemedLayer = new Sprite();
            deemedLayer.mouseChildren = false;
            deemedLayer.graphics.beginFill(0, 0);
            deemedLayer.graphics.drawRect(0, 0, 165, 353);
            deemedLayer.graphics.endFill();
            deemedLayer.visible = false;
            addChild(deemedLayer);
            registEventHandler();
        }
        private function checkRect(_arg1:MouseEvent):void{
            if (deemedLayer.visible){
                return;
            };
            if (PROGRESSBAR_SLIDE_RECT.contains(_arg1.stageX, _arg1.stageY)){
                if (!isProgressBarOver){
                    showThumb();
                    isProgressBarOver = true;
                };
            } else {
                if (isProgressBarOver){
                    hideThumb();
                    isProgressBarOver = false;
                };
            };
            if (VOLUME_SLIDE_RECT.contains(_arg1.stageX, _arg1.stageY)){
                if (!isVolumeBarOver){
                    showVolumeThumb();
                    isVolumeBarOver = true;
                };
            } else {
                if (isVolumeBarOver){
                    hideVolumeThumb();
                    isVolumeBarOver = false;
                };
            };
        }
        private function progressSliderHandler(_arg1:CSliderEvent):void{
            var _local3:CSlider;
            var _local4:int;
            var _local5:NaverMusicPlayerBasicEvent;
            ignoreUpdate = false;
            var _local2:Number = _arg1.target.value;
            if (Boolean(playerModel.activeNode)){
                _local3 = (_arg1.target as CSlider);
                if (_local3.isFull){
                    _local4 = ((_arg1.target.value * totalTime) / progress_bar_slider.maxValue);
                    updatePlayingTime(SIXTY_SECOND);
                    curState = VALID_STATE;
                } else {
                    _local4 = ((_arg1.target.value * totalTime) / progress_bar_slider.maxValue);
                    if (_local4 > currentTimes){
                        curState = UPPER_STATE;
                    } else {
                        if (_local4 < currentTimes){
                            curState = DOWNER_STATE;
                        } else {
                            curState = VALID_STATE;
                        };
                    };
                    currentTimes = _local4;
                    updatePlayingTime();
                };
                ControlSettingManager.getInstance().progressSliderValue = _local4;
                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, true);
                _local5.data = {
                    trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID(),
                    seek:_local4,
                    auto:false
                };
                dispatchEvent(_local5);
            };
        }
        public function checkPlayPauseButtonState(_arg1:Boolean):void{
            pause_play_button_instance.visible = _arg1;
            play_pause_button_instance.visible = !(_arg1);
            ControlSettingManager.getInstance().showPauseButton = pause_play_button_instance.visible;
            ControlSettingManager.getInstance().showPlayButton = play_pause_button_instance.visible;
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        public function initAllState():void{
            play_pause_button_instance.visible = true;
            pause_play_button_instance.visible = false;
            _totalTime = 0;
            displayTime = 0;
            updateTotalTime();
            updateCurrentSongLength(0);
            curState = VALID_STATE;
            currentTimes = 0;
            deemOnOff(true);
            resizeDeemedLayer(true);
        }
        public function updateAllInfomationOfSong():void{
            var _local2:SongInfoServiceObject;
            var _local1:DListNode = playerModel.activeNode;
            if (Boolean(_local1)){
                showHideExistInfoField(true);
                _local2 = (_local1.data as SongInfoServiceObject);
                if (Boolean(_local2)){
                    updateMp3ActiveState();
                    loadAlbumJacketThumbnail(_local2.getAlbumJacketThumbURL());
                    updateAlbumTitle(_local2.getTrackTitle(), _local2.singer, _local2.getAlbumTitle());
                    ControlSettingManager.getInstance().songTitle = _local2.getTrackTitle();
                    ControlSettingManager.getInstance().artistName = _local2.singer;
                    ControlSettingManager.getInstance().albumName = _local2.getAlbumTitle();
                    ControlSettingManager.getInstance().songAlubmURL = _local2.getAlbumJacketThumbURL();
                };
                showEmptyCase(false);
            } else {
                showHideExistInfoField(false);
                showEmptyCase(true);
                loadAlbumJacketThumbnail(null);
            };
        }
        protected function unregistEventHandler():void{
            forward_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            rewind_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            pause_play_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            play_pause_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            purchase_mp3_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            shuffle_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            repeat_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            volumn_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            removeEventListener(MouseEvent.MOUSE_MOVE, checkRect);
            removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
            removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
        }
        private function hideVolumeThumb():void{
            TweensyZero.to(volumn_ctrl_slider._thumb, {alpha:0});
        }
        public function updateMp3ActiveState():void{
            var _local1:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local1 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (_local1.hasMp3File()){
                    if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                        (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                    } else {
                        if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                            (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                            (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                        } else {
                            if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                            } else {
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                            };
                        };
                    };
                } else {
                    if (!_local1.hasMp3File()){
                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                        (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                    };
                };
            } else {
                if (playerModel.playingSongNode){
                    _local1 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local1){
                        if (_local1.hasMp3File()){
                            if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                            } else {
                                if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                                    (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                                    (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                                } else {
                                    if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                        (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                                    } else {
                                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                                        (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                                    };
                                };
                            };
                        } else {
                            if (!_local1.hasMp3File()){
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                            };
                        };
                    };
                };
            };
        }
        public function get totalTime():Number{
            return (_totalTime);
        }
        private function checkShuffleState():void{
            var _local2:int;
            var _local3:TooltipManager;
            var _local1:MovieClip = (shuffle_button_instance as MovieClip);
            if (Boolean(_local1)){
                _local2 = _local1.currentFrame;
                _local3 = TooltipManager.getInstance();
                switch (_local2){
                    case 1:
                        _local1.gotoAndStop(2);
                        _local3.setText(NaverMusicPlayerProperty.RANDOME_PLAY);
                        playerModel.shuffleActiveList();
                        ControlSettingManager.getInstance().shuffleButtonFrameValue = 2;
                        break;
                    case 2:
                        _local1.gotoAndStop(1);
                        _local3.setText(NaverMusicPlayerProperty.SEQUENCE_PLAY);
                        playerModel.unShuffleActiveList();
                        ControlSettingManager.getInstance().shuffleButtonFrameValue = 1;
                        break;
                };
            };
        }
        public function updateLayout():void{
            header_title_instance.x = 17;
            header_title_instance.y = 5;
            _thumbnailBg.x = -286;
            _thumbnailBg.y = -135;
            main_jacket_instance.x = 16;
            main_jacket_instance.y = 44;
            progress_bar_slider.x = 16;
            progress_bar_slider.y = 182;
            no_image_instance.x = 16;
            no_image_instance.y = 44;
            purchase_mp3_button_instance.x = 56;
            purchase_mp3_button_instance.y = 239;
            rewind_button_instance.x = 41;
            rewind_button_instance.y = 294;
            play_pause_button_instance.x = 75;
            play_pause_button_instance.y = 291;
            pause_play_button_instance.x = 75;
            pause_play_button_instance.y = 291;
            forward_button_instance.x = 115;
            forward_button_instance.y = 294;
            var _local1:Array = [57, 107];
            var _local2:int;
            while (_local2 < vrule_array.length) {
                vrule_array[_local2].x = _local1[_local2];
                vrule_array[_local2].y = 289;
                _local2++;
            };
            repeat_button_instance.x = 116;
            repeat_button_instance.y = 327;
            shuffle_button_instance.x = 130;
            shuffle_button_instance.y = 327;
            volumn_button_instance.x = 23;
            volumn_button_instance.y = 325;
            volumn_ctrl_slider.x = 41;
            volumn_ctrl_slider.y = 331;
            updateExistInfo();
        }
        private function showEndPage(_arg1:MouseEvent):void{
            switch (_arg1.target.name){
                case "ALBUM_TITLE":
                    requestAlbumEndPage();
                    break;
                case "TRACK_TITLE":
                    requestAlbumEndPage();
                    break;
                case "ARTIST_TITLE":
                    requestArtistEndPage();
                    break;
            };
        }
        public function loadAlbumJacketThumbnail(_arg1:String):void{
            if (Boolean(_arg1)){
                if (_arg1 != existThumbnailPath){
                    _thumbnailBg.visible = true;
                    TweensyZero.fromTo(no_image_instance, {alpha:1}, {alpha:0});
                    SmartLoader.getIntance().closeAll();
                    SmartLoader.getIntance().load(new URLRequest(_arg1), {
                        onComplete:completeHandler,
                        onFailure:failHandler,
                        onIoError:ioErrorHandler
                    });
                    existThumbnailPath = _arg1;
                };
            } else {
                existThumbnailPath = null;
                _thumbnailBg.visible = false;
                no_image_instance.visible = true;
                if (Boolean(_thumbnailBitmap.bitmapData)){
                    _thumbnailBitmap.bitmapData.dispose();
                    _thumbnailBitmap.bitmapData = null;
                };
                TweensyZero.fromTo(no_image_instance, {alpha:0}, {alpha:1});
            };
        }
        private function handleNpodEventHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:NaverMusicPlayerBasicEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                _local4 = null;
                switch (_local3){
                    case PROGRESSBAR_BUTTON:
                        break;
                    case PURCHASE_BUTTON:
                        checkPurchaseMp3();
                        break;
                    case REWIND_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_PREV_SONG, false);
                        break;
                    case PLAY_PAUSE_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, false);
                        break;
                    case PAUSE_PLAY_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, false);
                        break;
                    case FORWARD_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_NEXT_SONG, false);
                        break;
                    case VOLUM_BUTTON:
                        checkVolumeState();
                        break;
                    case SHUFFLE_BUTTON:
                        checkShuffleState();
                        break;
                    case REPEAT_BUTTON:
                        checkRepeatState();
                        break;
                };
                if (Boolean(_local4)){
                    ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
                    dispatchEvent(_local4);
                };
            };
        }
        private function requestNaverHome(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_HOME, true);
            dispatchEvent(_local2);
        }
        private function failHandler():void{
            _thumbnailBg.visible = false;
            if (Boolean(_thumbnailBitmap.bitmapData)){
                _thumbnailBitmap.bitmapData.dispose();
                _thumbnailBitmap.bitmapData = null;
            };
            no_image_instance.visible = true;
            TweensyZero.fromTo(no_image_instance, {alpha:0}, {alpha:1});
        }
        public function set displayTime(_arg1:Number):void{
            this._displayTime = _arg1;
        }
        public function set totalTime(_arg1:Number):void{
            deemOnOff(false);
            this._totalTime = _arg1;
            ControlSettingManager.getInstance().totalTime = _arg1;
            updateTotalTime();
            updateCurrentVolume();
            ignoreUpdate = false;
        }
        public function updateTotalTime():void{
            var _local1:String;
            var _local2:String;
            var _local5:Number;
            _totalTimeField.text = "";
            var _local3:int = (totalTime / 60);
            var _local4:int = (totalTime % 60);
            _local1 = _local3.toString();
            _local2 = _local4.toString();
            if (_local3 < 10){
                _local1 = ("0" + _local3.toString());
            };
            if (_local4 < 10){
                _local2 = ("0" + _local4.toString());
            };
            _totalTimeField.text = ((_local1 + ":") + _local2);
            if (Boolean(playerModel.userInfo)){
                switch (playerModel.userInfo.isAuth){
                    case 0:
                        progress_bar_slider.initProgressData();
                        progress_bar_slider.updateLimitArea(-1);
                        progress_bar_slider.drawLimitAreaForce();
                        break;
                    case 1:
                        _local5 = ((100 * MINUTE) / totalTime);
                        if (totalTime <= (MINUTE - 20)){
                            _local5 = 132;
                        };
                        if (displayTime > 60){
                            _local5 = 132;
                        };
                        progress_bar_slider.updateLimitArea(_local5);
                        break;
                };
            };
        }
        private function checkState(_arg1:CSliderEvent):void{
            ignoreUpdate = true;
            currentTimes = ((_arg1.target.value * totalTime) / progress_bar_slider.maxValue);
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
        }
        private function showHideExistInfoField(_arg1:Boolean):void{
            album_info_area.visible = _arg1;
            artist_info_area.visible = _arg1;
            purchase_mp3_button_instance.visible = _arg1;
        }
        private function ioErrorHandler(_arg1:IOErrorEvent):void{
            _thumbnailBg.visible = false;
            if (Boolean(_thumbnailBitmap.bitmapData)){
                _thumbnailBitmap.bitmapData.dispose();
                _thumbnailBitmap.bitmapData = null;
            };
            no_image_instance.visible = true;
            TweensyZero.fromTo(no_image_instance, {alpha:0}, {alpha:1});
        }
        private function notiErrorOccured(_arg1:String):void{
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, true);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        private function requestArtistEndPage(_arg1:MouseEvent=null):void{
            var _local2:NaverMusicPlayerBasicEvent;
            var _local3:SongInfoServiceObject;
            var _local4:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local3)){
                    if (_local3.getArtistid() == "0"){
                        return;
                    };
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, true);
                    _local2.data = {artistid:_local3.getArtistid()};
                    dispatchEvent(_local2);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local4 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local4){
                        if (_local4.getArtistid() == "0"){
                            return;
                        };
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, true);
                        _local2.data = {artistid:_local4.getArtistid()};
                        dispatchEvent(_local2);
                    };
                };
            };
        }
        public function updateExistInfo():void{
            if (ControlSettingManager.getInstance().songAlubmURL){
                loadAlbumJacketThumbnail(ControlSettingManager.getInstance().songAlubmURL);
            };
            if (ControlSettingManager.getInstance().songTitle){
                updateAlbumTitle(ControlSettingManager.getInstance().songTitle, ControlSettingManager.getInstance().artistName, ControlSettingManager.getInstance().albumName);
            };
            updateCurrentSongLength(ControlSettingManager.getInstance().currentTime);
        }
        public function checkVolumeState():void{
            var _local4:SongInfoServiceObject;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local1:int = (volumn_button_instance as MovieClip).currentFrame;
            var _local2:int = _local1;
            var _local3:Number = volumn_ctrl_slider.value;
            switch (_local1){
                case 2:
                case 3:
                case 4:
                    _prevVolume = _local1;
                    ControlSettingManager.getInstance().prevVolume = _local3;
                    _local2 = 1;
                    _local3 = 0;
                    break;
                case 1:
                    if (_prevVolume == 0){
                        _local2 = 2;
                        _local3 = 0.3;
                    };
                    _local2 = _prevVolume;
                    switch (_local2){
                        case 2:
                        case 3:
                        case 4:
                            _local3 = ControlSettingManager.getInstance().prevVolume;
                            break;
                    };
                    break;
            };
            if (playerModel.activeNode){
                _local4 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local4)){
                    ControlSettingManager.getInstance().volumeButtonFrameValue = _local2;
                    (volumn_button_instance as MovieClip).gotoAndStop(_local2);
                    volumn_ctrl_slider.moveThumbFromValue(_local3);
                    _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
                    _local5.data = {
                        trackId:_local4.getTrackID(),
                        volume:_local3
                    };
                    dispatchEvent(_local5);
                };
            };
        }
        public function set playerModel(_arg1:MusicPlayerBasicModel):void{
            this._playerModel = _arg1;
        }
        public function resizeDeemedLayer(_arg1:Boolean):void{
            var _local2:Number = 0;
            var _local3:Number = 0;
            var _local4:Number = 165;
            var _local5:Number = 353;
            if (_arg1){
                _local2 = PROGRESSBAR_SLIDE_RECT.x;
                _local3 = PROGRESSBAR_SLIDE_RECT.y;
                _local4 = PROGRESSBAR_SLIDE_RECT.width;
                _local5 = PROGRESSBAR_SLIDE_RECT.height;
            };
            if (deemedLayer){
                deemedLayer.graphics.clear();
                deemedLayer.graphics.beginFill(0xCCCCCC, 0);
                deemedLayer.graphics.drawRect(_local2, _local3, _local4, _local5);
                deemedLayer.graphics.endFill();
            };
        }
        public function updatePlayingTime(_arg1:Number=-1):void{
            var _local3:String;
            var _local4:String;
            _playingTimeField.text = "";
            var _local2:Number = ((progress_bar_slider.value * totalTime) / 100);
            if (_arg1 != -1){
                _local2 = _arg1;
            };
            ControlSettingManager.getInstance().currentTime = _local2;
            var _local5:int = (_local2 / 60);
            var _local6:int = (_local2 % 60);
            _local3 = _local5.toString();
            _local4 = _local6.toString();
            if (_local5 < 10){
                _local3 = ("0" + _local5.toString());
            };
            if (_local6 < 10){
                _local4 = ("0" + _local6.toString());
            };
            _playingTimeField.text = ((_local3 + ":") + _local4);
        }
        private function checkRepeatState():void{
            var _local3:int;
            var _local1:MovieClip = (repeat_button_instance as MovieClip);
            var _local2:TooltipManager = TooltipManager.getInstance();
            ControlSettingManager.getInstance().loopCount = 0;
            if (Boolean(_local1)){
                _local3 = _local1.currentFrame;
                playerModel.repeatOption = _local3;
                switch (_local3){
                    case 1:
                        _local1.gotoAndStop(2);
                        _local2.setText(NaverMusicPlayerProperty.REPEAT_ALL);
                        ControlSettingManager.getInstance().repeatButtonFrameValue = 2;
                        break;
                    case 2:
                        _local1.gotoAndStop(3);
                        _local2.setText(NaverMusicPlayerProperty.REPEAT_ONE);
                        ControlSettingManager.getInstance().repeatButtonFrameValue = 3;
                        break;
                    case 3:
                        _local1.gotoAndStop(1);
                        _local2.setText(NaverMusicPlayerProperty.REPEAT_NONE);
                        ControlSettingManager.getInstance().repeatButtonFrameValue = 1;
                        break;
                };
            };
        }
        private function showVolumeThumb():void{
            TweensyZero.to(volumn_ctrl_slider._thumb, {alpha:1});
        }
        public function deemOnOff(_arg1:Boolean):void{
            if (deemedLayer){
                deemedLayer.visible = _arg1;
            };
            resizeDeemedLayer(false);
        }
        public function updateCurrentVolume():void{
            volumnSliderHandler();
        }
        public function get displayTime():Number{
            return (_displayTime);
        }
        private function hideThumb(_arg1:MouseEvent=null):void{
            TweensyZero.to(progress_bar_slider._thumb, {alpha:0});
        }
        public function showEmptyCase(_arg1:Boolean):void{
            empty_artist_area.visible = _arg1;
            empty_list_area.visible = _arg1;
            deemOnOff(_arg1);
            if (_arg1){
                TweensyZero.fromTo(empty_artist_area, {alpha:0}, {alpha:1});
                TweensyZero.fromTo(empty_list_area, {alpha:0}, {alpha:1});
                _totalTime = 0;
                displayTime = 0;
                updateTotalTime();
                updatePlayingTime(0);
                progress_bar_slider.moveThumbFromValue(0);
            } else {
                TweensyZero.fromTo(empty_artist_area, {alpha:1}, {alpha:0});
                TweensyZero.fromTo(empty_list_area, {alpha:1}, {alpha:0});
            };
        }
        private function npodWheelOverHandler(_arg1:MouseEvent):void{
        }
        private function volumnSliderHandler(_arg1:CSliderEvent=null):void{
            var _local2:Number;
            var _local3:NaverMusicPlayerBasicEvent;
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            if (Boolean(playerModel.activeNode)){
                _local2 = volumn_ctrl_slider.value;
                _local2 = fixInterval();
                ControlSettingManager.getInstance().volumeSliderValue = _local2;
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
                _local3.data = {
                    trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID(),
                    volume:_local2
                };
                dispatchEvent(_local3);
            };
        }
        private function npodWheelOutHandler(_arg1:MouseEvent):void{
        }
        public function get playerModel():MusicPlayerBasicModel{
            return (_playerModel);
        }
        private function requestAlbumEndPage(_arg1:MouseEvent=null):void{
            var _local2:NaverMusicPlayerBasicEvent;
            var _local3:SongInfoServiceObject;
            var _local4:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local3)){
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
                    _local2.data = {albumid:_local3.getAlbumid()};
                    dispatchEvent(_local2);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local4 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local4){
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
                        _local2.data = {albumid:_local4.getAlbumid()};
                        dispatchEvent(_local2);
                    };
                };
            };
        }
        private function completeHandler(_arg1:SmartLoaderEvent):void{
            if (Boolean(_thumbnailBitmap.bitmapData)){
                _prevBitmap.bitmapData = _thumbnailBitmap.bitmapData;
                if ((((_thumbnailBitmap.width >= 132)) || ((_thumbnailBitmap.height >= 132)))){
                    _prevBitmap.width = 132;
                    _prevBitmap.height = 132;
                } else {
                    _prevBitmap.width = _prevBitmap.bitmapData.width;
                    _prevBitmap.height = _prevBitmap.bitmapData.height;
                };
                _prevBitmap.x = ((735 / 2) - (_prevBitmap.width / 2));
                _prevBitmap.y = ((490 / 2) - (_prevBitmap.height / 2));
            };
            TweensyZero.fromTo(_prevBitmap, {alpha:1}, {alpha:0});
            var _local2:Bitmap = (_arg1.content as Bitmap);
            _thumbnailBitmap.bitmapData = _local2.bitmapData;
            if ((((_thumbnailBitmap.width > 132)) || ((_thumbnailBitmap.height > 132)))){
                _thumbnailBitmap.width = 132;
                _thumbnailBitmap.height = 132;
            } else {
                _thumbnailBitmap.width = _local2.bitmapData.width;
                _thumbnailBitmap.height = _local2.bitmapData.height;
            };
            _thumbnailBitmap.x = ((735 / 2) - (_thumbnailBitmap.width / 2));
            _thumbnailBitmap.y = ((490 / 2) - (_thumbnailBitmap.height / 2));
            _thumbnailBitmap.name = "mainThumb";
            TweensyZero.fromTo(_thumbnailBitmap, {alpah:0}, {alpha:1}, 0.3, null, 0, null);
        }
        public function updateAlbumTitle(_arg1:String, _arg2:String, _arg3:String):void{
            if (Boolean(_arg3)){
                album_info_area.text = _arg1;
                album_info_area.x = ((npod_bg_instance.width / 2) - (album_info_area.width / 2));
            };
            if (Boolean(artist_info_area)){
                artist_info_area.text = _arg2;
                artist_info_area.x = ((npod_bg_instance.width / 2) - (artist_info_area.width / 2));
            };
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local5:int;
            var _local6:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(0, 20);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case FORWARD_BUTTON:
                        _local6 = NaverMusicPlayerProperty.NEXT_TEXT;
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case REWIND_BUTTON:
                        _local6 = NaverMusicPlayerProperty.PREV_TEXT;
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case SHUFFLE_BUTTON:
                        _local5 = (_local2 as MovieClip).currentFrame;
                        switch (_local5){
                            case 1:
                                _local6 = NaverMusicPlayerProperty.SEQUENCE_PLAY;
                                break;
                            case 2:
                                _local6 = NaverMusicPlayerProperty.RANDOME_PLAY;
                                break;
                        };
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case REPEAT_BUTTON:
                        _local5 = (_local2 as MovieClip).currentFrame;
                        switch (_local5){
                            case 1:
                                _local6 = NaverMusicPlayerProperty.REPEAT_NONE;
                                break;
                            case 2:
                                _local6 = NaverMusicPlayerProperty.REPEAT_ALL;
                                break;
                            case 3:
                                _local6 = NaverMusicPlayerProperty.REPEAT_ONE;
                                break;
                        };
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                };
            };
        }
        private function requestNaverMusicHome(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_HOME, true);
            dispatchEvent(_local2);
        }
        public function removeAsset():void{
            unregistEventHandler();
            if (Boolean(deemedLayer)){
                removeChild(deemedLayer);
                deemedLayer = null;
            };
            if (no_image_instance){
                removeChild(no_image_instance);
                no_image_instance = null;
            };
            if (Boolean(overRect)){
                removeChild(overRect);
                overRect = null;
            };
            if (Boolean(npod_bg_instance)){
                removeChild(npod_bg_instance);
                npod_bg_instance = null;
            };
            if (header_title_instance){
                removeChild(header_title_instance);
                header_title_naver.removeEventListener(MouseEvent.CLICK, requestNaverHome);
                header_title_music.removeEventListener(MouseEvent.CLICK, requestNaverMusicHome);
                header_title_instance = null;
            };
            if (_thumbnailBg){
                removeChild(_thumbnailBg);
                _thumbnailBg = null;
            };
            if (main_jacket_instance){
                removeChild(main_jacket_instance);
                main_jacket_instance.removeEventListener(MouseEvent.CLICK, requestAlbumEndPage);
                main_jacket_instance = null;
            };
            if (progress_bar_instance){
                progress_bar_instance = null;
            };
            if (progress_bar_slider){
                removeChild(progress_bar_slider);
                progress_bar_slider.removeEventListener(MouseEvent.MOUSE_OVER, showThumb);
                progress_bar_slider.removeEventListener(MouseEvent.MOUSE_OUT, hideThumb);
                progress_bar_slider.removeEventListener(CSliderEvent.THUMB_DRAG_START, checkState);
                progress_bar_slider.removeEventListener(CSliderEvent.TRACK_CLICK_START, checkState);
                progress_bar_slider.removeEventListener(CSliderEvent.THUMB_DRAG_END, progressSliderHandler);
                progress_bar_slider.removeEventListener(CSliderEvent.TRACK_CLICK_END, progressSliderHandler);
                progress_bar_slider = null;
            };
            if (album_info_area){
                album_info_area.releaseMemory();
                album_info_area.removeEventListener(MouseEvent.CLICK, showEndPage);
                removeChild(album_info_area);
                album_info_area = null;
            };
            if (artist_info_area){
                artist_info_area.releaseMemory();
                artist_info_area.removeEventListener(MouseEvent.CLICK, showEndPage);
                removeChild(artist_info_area);
                artist_info_area = null;
            };
            if (purchase_mp3_button_instance){
                removeChild(purchase_mp3_button_instance);
                purchase_mp3_button_instance = null;
            };
            if (rewind_button_instance){
                removeChild(rewind_button_instance);
                rewind_button_instance = null;
            };
            if (pause_play_button_instance){
                removeChild(pause_play_button_instance);
                rewind_button_instance = null;
            };
            if (play_pause_button_instance){
                removeChild(play_pause_button_instance);
                play_pause_button_instance = null;
            };
            if (forward_button_instance){
                removeChild(forward_button_instance);
                forward_button_instance = null;
            };
            if (volumn_button_instance){
                removeChild(volumn_button_instance);
                volumn_button_instance = null;
            };
            if (volumn_ctrl_instance){
                volumn_ctrl_instance = null;
            };
            if (volumn_ctrl_slider){
                removeChild(volumn_ctrl_slider);
                volumn_ctrl_slider.removeEventListener(CSliderEvent.SLIDER_CHANGE, volumnSliderHandler);
                volumn_ctrl_slider = null;
            };
            if (shuffle_button_instance){
                removeChild(shuffle_button_instance);
                shuffle_button_instance = null;
            };
            if (repeat_button_instance){
                removeChild(repeat_button_instance);
                repeat_button_instance = null;
            };
            if (_playingTimeField){
                removeChild(_playingTimeField);
                _playingTimeField = null;
            };
            if (_totalTimeField){
                removeChild(_totalTimeField);
                _totalTimeField = null;
            };
        }
        private function showThumb(_arg1:MouseEvent=null):void{
            TweensyZero.to(progress_bar_slider._thumb, {alpha:1});
        }
        public function updateCurrentSongLength(_arg1:Number):void{
            var _local2:Number;
            var _local3:Number;
            if (ControlSettingManager.getInstance().currentTime == _arg1){
                return;
            };
            if (!ignoreUpdate){
                _local2 = ((100 * _arg1) / totalTime);
                progress_bar_slider.value = _local2;
                _local3 = (_local2 / 100);
                switch (curState){
                    case UPPER_STATE:
                        if (_arg1 < currentTimes){
                            return;
                        };
                        curState = VALID_STATE;
                        progress_bar_slider.moveThumbFromValue(_local3);
                        updatePlayingTime(_arg1);
                        break;
                    case DOWNER_STATE:
                        if (_arg1 > currentTimes){
                            return;
                        };
                        curState = VALID_STATE;
                        progress_bar_slider.moveThumbFromValue(_local3);
                        updatePlayingTime(_arg1);
                        break;
                    case VALID_STATE:
                        progress_bar_slider.moveThumbFromValue(_local3);
                        updatePlayingTime(_arg1);
                        break;
                };
            };
        }
        protected function registEventHandler():void{
            forward_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            rewind_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            pause_play_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            play_pause_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            purchase_mp3_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            shuffle_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            repeat_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            volumn_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
        }
        private function supportWheel(_arg1:Number, _arg2:Number, _arg3:Number):void{
            volumn_ctrl_slider.wheeler(_arg1);
        }
        private function fixInterval():Number{
            var _local1:Number = volumn_ctrl_slider.value;
            var _local2:int;
            if (_local1 == 0){
                _local1 = 0;
                _local2 = 1;
            } else {
                if ((((_local1 > 0)) && ((_local1 <= 0.3)))){
                    _local2 = 2;
                } else {
                    if ((((_local1 > 0.3)) && ((_local1 <= 0.6)))){
                        _local2 = 3;
                    } else {
                        if (_local1 > 0.6){
                            _local2 = 4;
                        };
                    };
                };
            };
            (volumn_button_instance as MovieClip).gotoAndStop(_local2);
            ControlSettingManager.getInstance().volumeButtonFrameValue = _local2;
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import fl.data.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.events.*;
    import fl.controls.listClasses.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin.*;

    public class NaverPostingMusicPlayerList extends List {

        public static const ALBUM_ICON_TARGET:String = "album_icon";
        public static const MP3_ICON_TARGET:String = "mp3_icon";
        public static const NAME:String = "NAVERMUSICPLAYERLIST";

        protected static var up_scroll_mouse_up_icon:Class;
        protected static var scroll_thumb_over_icon:Class;
        protected static var up_scroll_mouse_down_icon:Class;
        protected static var scroll_thumb_icon:Class;
        protected static var scroll_background_icon:Class;
        protected static var down_scroll_mouse_up_icon:Class;
        protected static var down_scroll_mouse_down_icon:Class;

        protected var _playingSongRenderer:SongInfoServiceObject;
        protected var _playerModel:MusicPlayerBasicModel;
        protected var _isSelectAll:Boolean;
        private var _dragInit:Boolean;
        private var _isDragging:Boolean;
        private var mouseDragScrollingInterval:Number = 0;
        private var _tryDragging:Boolean;
        private var _dragEnable:Boolean;

        public function NaverPostingMusicPlayerList(){
            mouseEnabled = false;
            mouseChildren = false;
            allowMultipleSelection = true;
            verticalLineScrollSize = rowHeight;
            verticalPageScrollSize = rowHeight;
            StyleManager.setStyle("scrollBarWidth", 10);
            StyleManager.setStyle("scrollArrowWidth", 10);
            StyleManager.setStyle("scrollArrowHeight", 13);
            setStyle("skin", ListBackGround);
            setStyle("thumbOverSkin", scroll_thumb_over_icon);
            setStyle("thumbUpSkin", scroll_thumb_icon);
            setStyle("thumbDownSkin", scroll_thumb_over_icon);
            setStyle("thumbIcon", null);
            setStyle("thumbDisabledSkin", scroll_thumb_icon);
            setStyle("trackDownSkin", scroll_background_icon);
            setStyle("trackOverSkin", scroll_background_icon);
            setStyle("trackUpSkin", scroll_background_icon);
            setStyle("trackDisabledSkin", scroll_background_icon);
            setStyle("upArrowDisabledSkin", up_scroll_mouse_up_icon);
            setStyle("upArrowDownSkin", up_scroll_mouse_up_icon);
            setStyle("upArrowOverSkin", up_scroll_mouse_down_icon);
            setStyle("upArrowUpSkin", up_scroll_mouse_up_icon);
            setStyle("downArrowDisabledSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowDownSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowUpSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowOverSkin", down_scroll_mouse_down_icon);
            addEventListener(Event.REMOVED_FROM_STAGE, removeResource, false, 0, true);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OVER, wheelOverHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, wheelOutHandler, false, 0, true);
        }
        public static function updateAsset(_arg1):void{
            down_scroll_mouse_down_icon = _arg1.getDefinition("down_scroll_mouse_down_icon");
            down_scroll_mouse_up_icon = _arg1.getDefinition("down_scroll_mouse_up_icon");
            up_scroll_mouse_down_icon = _arg1.getDefinition("up_scroll_mouse_down_icon");
            up_scroll_mouse_up_icon = _arg1.getDefinition("scroll_mouse_up_icon");
            scroll_background_icon = _arg1.getDefinition("scroll_background_icon");
            scroll_thumb_icon = _arg1.getDefinition("scroll_thumb_icon");
            scroll_thumb_over_icon = _arg1.getDefinition("scroll_thumb_over_icon");
        }

        override protected function drawList():void{
            var _local5:uint;
            var _local6:Object;
            var _local7:ICellRenderer;
            var _local10:Boolean;
            var _local11:String;
            var _local12:Object;
            var _local13:Sprite;
            var _local14:String;
            var _local1:int = getTimer();
            listHolder.x = (listHolder.y = contentPadding);
            var _local2:Rectangle = listHolder.scrollRect;
            _local2.x = _horizontalScrollPosition;
            _local2.y = 0;
            _local2.height = 261;
            listHolder.scrollRect = _local2;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var _local3:uint = Math.floor((_verticalScrollPosition / rowHeight));
            var _local4:uint = Math.min(length, ((_local3 + rowCount) + 1));
            var _local8:Dictionary = (renderedItems = new Dictionary(true));
            _local5 = _local3;
            while (_local5 < _local4) {
                _local8[_dataProvider.getItemAt(_local5)] = true;
                _local5++;
            };
            var _local9:Dictionary = new Dictionary(true);
            while (activeCellRenderers.length > 0) {
                _local7 = (activeCellRenderers.pop() as ICellRenderer);
                _local6 = _local7.data;
                if ((((_local8[_local6] == null)) || ((invalidItems[_local6] == true)))){
                    availableCellRenderers.push(_local7);
                } else {
                    _local9[_local6] = _local7;
                    invalidItems[_local6] = true;
                };
                list.removeChild((_local7 as DisplayObject));
            };
            invalidItems = new Dictionary(true);
            _local5 = _local3;
            while (_local5 < _local4) {
                _local10 = false;
                _local6 = _dataProvider.getItemAt(_local5);
                if (_local9[_local6] != null){
                    _local10 = true;
                    _local7 = _local9[_local6];
                    delete _local9[_local6];
                } else {
                    if (availableCellRenderers.length > 0){
                        _local7 = (availableCellRenderers.pop() as ICellRenderer);
                    } else {
                        _local7 = (getDisplayObjectInstance(getStyleValue("cellRenderer")) as ICellRenderer);
                        _local13 = (_local7 as Sprite);
                        if (_local13 != null){
                            _local13.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                            _local13.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                            _local13.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                            _local13.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                            _local13.doubleClickEnabled = true;
                            _local13.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                            if (_local13.hasOwnProperty("setStyle")){
                                for (_local14 in rendererStyles) {
                                    var _local17 = _local13;
                                    _local17["setStyle"](_local14, rendererStyles[_local14]);
                                };
                            };
                        };
                    };
                };
                list.addChild((_local7 as Sprite));
                activeCellRenderers.push(_local7);
                _local7.y = ((rowHeight * (_local5 - _local3)) + 13);
                _local7.setSize((availableWidth + _maxHorizontalScrollPosition), rowHeight);
                _local11 = itemToLabel(_local6);
                _local12 = null;
                if (_iconFunction != null){
                    _local12 = _iconFunction(_local6);
                } else {
                    if (_iconField != null){
                        _local12 = _local6[_iconField];
                    };
                };
                if (!_local10){
                    _local7.data = _local6;
                };
                _local7.listData = new ListData(_local11, _local12, this, _local5, _local5, 0);
                _local7.selected = !((_selectedIndices.indexOf(_local5) == -1));
                if ((_local7 is UIComponent)){
                    (_local7 as UIComponent).drawNow();
                };
                _local5++;
            };
        }
        public function get isSelectAll():Boolean{
            return (_isSelectAll);
        }
        public function set playingSongRenderer(_arg1:SongInfoServiceObject):void{
            this._playingSongRenderer = _arg1;
        }
        public function set playerModel(_arg1:MusicPlayerBasicModel):void{
            if (Boolean(this._playerModel)){
                this._playerModel.removeEventListener("updateListOfMusic", updateListHandler);
                this._playerModel.removeEventListener("initializeView", initializeView);
                this._playerModel.releaseModel();
                this._playerModel = null;
            };
            this._playerModel = _arg1;
            if (Boolean(this._playerModel)){
                this._playerModel.addEventListener("updateListOfMusic", updateListHandler);
                this._playerModel.addEventListener("initializeView", initializeView);
            };
        }
        public function updateScrollPositionToSomeRenderer(_arg1:SongInfoServiceObject):void{
            var _local2:int;
            if (Boolean(_arg1)){
                _local2 = dataProvider.getItemIndex(_arg1);
                if ((verticalScrollPosition / verticalLineScrollSize) < _local2){
                    scrollToIndex((_local2 + 2));
                } else {
                    scrollToIndex(_local2);
                };
            };
        }
        override protected function handleWheel(_arg1:MouseEvent):void{
        }
        override protected function drawLayout():void{
            super.drawLayout();
        }
        public function get isDragging():Boolean{
            return (_isDragging);
        }
        override protected function handleCellRendererChange(_arg1:Event):void{
            super.handleCellRendererChange(_arg1);
        }
        protected function mouseUpHandler(_arg1:MouseEvent):void{
            initMouseDrag();
        }
        override protected function calculateAvailableSize():void{
            var _local1:Number = Number(getStyleValue("scrollBarWidth"));
            var _local2:Number = (contentPadding = Number(getStyleValue("contentPadding")));
            var _local3:Number = ((height - (2 * _local2)) - vOffset);
            vScrollBar = (((_verticalScrollPolicy == ScrollPolicy.ON)) || ((((_verticalScrollPolicy == ScrollPolicy.AUTO)) && ((contentHeight > 275)))));
            var _local4:Number = ((width - ((vScrollBar) ? _local1 : 0)) - (2 * _local2));
            var _local5:Number = ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - _local4));
            hScrollBar = (((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_local5 > 0)))));
            if (hScrollBar){
                _local3 = (_local3 - _local1);
            };
            if (((((((hScrollBar) && (!(vScrollBar)))) && ((_verticalScrollPolicy == ScrollPolicy.AUTO)))) && ((contentHeight > _local3)))){
                vScrollBar = true;
                _local4 = (_local4 - _local1);
            };
            availableHeight = (_local3 + vOffset);
            availableWidth = _local4;
        }
        private function get properList():Array{
            var _local1:Array;
            switch (NaverBasicPlayerBaseView.CURRENT_STATE){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    _local1 = playerModel.musicPlayListAsArray;
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    _local1 = playerModel.top100MusicListAsArray;
                    break;
            };
            return (_local1);
        }
        private function wheelOverHandler(_arg1:MouseEvent):void{
        }
        public function get tryDragging():Boolean{
            return (_tryDragging);
        }
        public function changeRendererViewAsPlaying():void{
            var _local2:SongInfoServiceObject;
            var _local3:Array;
            var _local4:int;
            var _local1:DListNode = playerModel.activeNode;
            if (Boolean(_local1)){
                _local2 = (_local1.data as SongInfoServiceObject);
                _local3 = properList;
                if (Boolean(_local2)){
                    if (Boolean(playingSongRenderer)){
                        playingSongRenderer.isPlaying = false;
                    };
                    _local2.isPlaying = true;
                    _local4 = _local3.indexOf(_local2);
                    if (_local4 > -1){
                        playingSongRenderer = _local2;
                        updateScrollPosition();
                    };
                };
            };
        }
        public function mouseDragScroll():void{
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            var _local6:ScrollEvent;
            var _local8:String;
            var _local9:Number;
            var _local1:Number = 0;
            var _local2:Number = 30;
            var _local7:Number = 30;
            clearInterval(mouseDragScrollingInterval);
            if ((((((mouseY < _local2)) && ((mouseY > 0)))) && ((((mouseX > 0)) && ((mouseX < width)))))){
                _local4 = verticalScrollPosition;
                verticalScrollPosition = Math.max(0, (_local4 - 1));
                mouseDragScrollingInterval = setInterval(mouseDragScroll, 500);
                if (_local4 != verticalScrollPosition){
                    verticalScrollBar.setScrollPosition((verticalScrollBar.scrollPosition - verticalScrollBar.pageScrollSize));
                };
            } else {
                if ((((((mouseY > (height - _local2))) && ((mouseY < height)))) && ((((mouseX > 0)) && ((mouseX < width)))))){
                    _local4 = verticalScrollPosition;
                    verticalScrollPosition = Math.min(maxVerticalScrollPosition, (verticalScrollPosition + 1));
                    mouseDragScrollingInterval = setInterval(mouseDragScroll, 500);
                    verticalScrollBar.setScrollPosition((verticalScrollBar.scrollPosition + verticalScrollBar.pageScrollSize));
                } else {
                    mouseDragScrollingInterval = setInterval(mouseDragScroll, 500);
                };
            };
        }
        public function set dragEnable(_arg1:Boolean):void{
            this._dragEnable = _arg1;
        }
        public function set isDragging(_arg1:Boolean):void{
            this._isDragging = _arg1;
        }
        public function selectAllItem():void{
            var _local1:int;
            var _local2:Array;
            var _local3:SongInfoServiceObject;
            var _local4:int;
            if (!isSelectAll){
                _local1 = dataProvider.length;
                _local2 = new Array();
                _local3 = null;
                _local4 = 0;
                while (_local4 < _local1) {
                    _local3 = (dataProvider.getItemAt(_local4) as SongInfoServiceObject);
                    if (((Boolean(_local3)) && (!(_local3.isEmpty)))){
                        _local3.isChecked = true;
                        _local2.push(_local3);
                    };
                    _local4++;
                };
                isSelectAll = true;
            } else {
                selectedItems = new Array();
                isSelectAll = false;
            };
            selectedItems = _local2;
        }
        protected function removeResource(_arg1:Event=null):void{
            removeEventListener(Event.REMOVED_FROM_STAGE, removeResource);
            removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
            removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
            removeEventListener(MouseEvent.ROLL_OVER, wheelOverHandler);
            removeEventListener(MouseEvent.ROLL_OUT, wheelOutHandler);
        }
        public function updateScrollPosition():void{
            var _local1:SongInfoServiceObject;
            var _local2:int;
            if (Boolean(playerModel.playingSongNode)){
                _local1 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                if (Boolean(_local1)){
                    _local2 = dataProvider.getItemIndex(_local1);
                    if ((verticalScrollPosition / verticalLineScrollSize) < _local2){
                        scrollToIndex((_local2 + 2));
                    } else {
                        scrollToIndex(_local2);
                    };
                };
            };
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == ((rowHeight * length) + 26)));
            contentHeight = ((rowHeight * length) + 26);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (_cellRenderer != getStyleValue("cellRenderer")){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                };
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        public function get playingSongRenderer():SongInfoServiceObject{
            return (_playingSongRenderer);
        }
        public function get playerModel():MusicPlayerBasicModel{
            return (_playerModel);
        }
        public function initMouseDrag():void{
            clearInterval(mouseDragScrollingInterval);
            mouseDragScrollingInterval = 0;
        }
        protected function updateListHandler(_arg1:Event):void{
            dataProvider = new DataProvider(playerModel.musicPlayListAsArray);
        }
        public function removeAsset():void{
            removeResource();
        }
        public function set dragInit(_arg1:Boolean):void{
            this._dragInit = _arg1;
        }
        public function updateMouseEnableState():void{
            mouseEnabled = true;
            mouseChildren = true;
        }
        private function supportWheel(_arg1:int, _arg2:Number, _arg3:Number):void{
            var _local4:int = ((-3 * _arg1) * verticalLineScrollSize);
            verticalScrollPosition = (verticalScrollPosition + _local4);
        }
        public function set tryDragging(_arg1:Boolean):void{
            this._tryDragging = _arg1;
        }
        private function initializeView(_arg1:Event):void{
        }
        public function get dragEnable():Boolean{
            return (_dragEnable);
        }
        public function removeScrollBarEvent():void{
            if (verticalScrollBar){
                verticalScrollBar.unRegistMouseEvent();
            };
        }
        protected function mouseMoveHandler(_arg1:MouseEvent):void{
            var _local2:Array;
            var _local3:int;
            var _local4:int;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:NaverBasicPostingPlayerCellRenderer;
            if (_arg1.buttonDown){
                if (dragEnable){
                    isDragging = true;
                    if (((((((!(dragInit)) && ((_arg1.target is NaverBasicPostingPlayerCellRenderer)))) && (NaverBasicPostingPlayerCellRenderer(_arg1.target)))) && (!(isSelectAll)))){
                        tryDragging = true;
                        _local2 = new Array();
                        if (Boolean(selectedItems)){
                            _local3 = selectedItems.length;
                            if (_local3 > 0){
                                _local4 = 0;
                                while (_local4 < _local3) {
                                    _local6 = (itemToCellRenderer(selectedItems[_local4]) as NaverBasicPostingPlayerCellRenderer);
                                    _local2.push(_local6);
                                    _local4++;
                                };
                                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_START);
                                _local5.data = _local2;
                                dispatchEvent(_local5);
                            };
                        };
                        dragInit = true;
                    };
                    mouseDragScroll();
                };
            } else {
                isDragging = false;
            };
        }
        private function wheelOutHandler(_arg1:MouseEvent):void{
        }
        override protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            super.handleCellRendererMouseEvent(_arg1);
            var _local2:NaverBasicPostingPlayerCellRenderer = (_arg1.target as NaverBasicPostingPlayerCellRenderer);
            if (!Boolean(_local2)){
                return;
            };
            switch (_arg1.type){
                case MouseEvent.ROLL_OVER:
                    _local2.isMouseOver = true;
                    break;
                case MouseEvent.ROLL_OUT:
                    _local2.isMouseOver = false;
                    break;
            };
        }
        protected function mouseDownHandler(_arg1:MouseEvent):void{
        }
        public function get dragInit():Boolean{
            return (_dragInit);
        }
        public function sortSelectedItems(_arg1:Boolean=false):Array{
            var _local2:Array = selectedItems.concat();
            _local2.sortOn("soIndex", Array.NUMERIC);
            var _local3:int = _local2.length;
            var _local4:SongInfoServiceObject;
            var _local5:int;
            while (_local5 < _local3) {
                _local4 = _local2[_local5];
                if (!_arg1){
                    _local2[_local5] = _local4.clone();
                } else {
                    _local2[_local5] = _local4;
                };
                _local5++;
            };
            return (_local2);
        }
        override protected function handleCellRendererDoubleClick(_arg1:MouseEvent):void{
        }
        public function changeCurrentActiveRenderer(_arg1:NaverBasicPostingPlayerCellRenderer, _arg2:String):void{
            var _local4:DLinkedList;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:NaverBasicPostingPlayerCellRenderer;
            if (Boolean(playingSongRenderer)){
                playingSongRenderer.isPlaying = false;
            };
            var _local3:NaverBasicPostingPlayerCellRenderer = (_arg1 as NaverBasicPostingPlayerCellRenderer);
            if (Boolean(_local3)){
                _local3.isPlaying = true;
            };
            _local4 = playerModel.musicPlayList;
            playerModel.activeNode = playerModel.searchVaildSongObject((_local3.data as SongInfoServiceObject), _local4);
            playerModel.activeMusicList = _local4.concat();
            if (playerModel.isShuffled){
                playerModel.shuffleActiveList();
            };
            if (Boolean(playerModel.activeNode)){
                playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList((playerModel.activeNode.data as SongInfoServiceObject));
                playingSongRenderer = (_local3.data as SongInfoServiceObject);
                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, false);
                _local5.data = {trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID()};
                dispatchEvent(_local5);
                _local6 = (itemToCellRenderer(playerModel.activeNode.data) as NaverBasicPostingPlayerCellRenderer);
            };
        }
        private function notiErrorOccured(_arg1:String):void{
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, true);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        override protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local3:NaverBasicPostingPlayerCellRenderer;
            var _local4:InternalUIHandlerEvent;
            var _local5:Array;
            var _local6:int;
            var _local7:Array;
            var _local8:MouseEvent;
            var _local9:int;
            var _local10:String;
            var _local11:NaverMusicPlayerBasicEvent;
            var _local12:NaverBasicPostingPlayerCellRenderer;
            var _local13:SongInfoServiceObject;
            var _local14:NaverMusicPlayerBasicEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if ((_local2 is CheckBox)){
                _local3 = (_local2.parent.parent as NaverBasicPostingPlayerCellRenderer);
                _arg1.preventDefault();
                _arg1.stopImmediatePropagation();
                if (Boolean(_local3)){
                    if (!_local3.data.isChecked){
                        _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                        _local4.data = {isAll:false};
                        dispatchEvent(_local4);
                        isSelectAll = false;
                        _local3.selected = false;
                        _local5 = selectedItems;
                        _local6 = _local5.indexOf(_local3.data);
                        _local5.splice(_local6, 1);
                        selectedItems = _local5;
                    } else {
                        _local7 = selectedItems;
                        if (Boolean(_local7)){
                            _local3.selected = true;
                            _local8 = _arg1;
                            _arg1.ctrlKey = true;
                            super.handleCellRendererClick(_local8);
                            _local9 = dataProvider.length;
                            if (selectedItems.length === _local9){
                                _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                                _local4.data = {isAll:true};
                                dispatchEvent(_local4);
                                isSelectAll = true;
                            } else {
                                isSelectAll = false;
                            };
                        };
                    };
                };
            } else {
                _local10 = _local2.name;
                if (Boolean(_local2)){
                    _local11 = null;
                    _local12 = null;
                    switch (_local10){
                        case ALBUM_ICON_TARGET:
                            _local12 = (_local2.parent.parent as NaverBasicPostingPlayerCellRenderer);
                            if (Boolean(_local12)){
                                _local13 = (_local12.data as SongInfoServiceObject);
                                if (((Boolean(_local13)) && (_local13.isServiced))){
                                    _local11 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
                                    _local11.data = {albumid:_local13.getAlbumid()};
                                    dispatchEvent(_local11);
                                };
                            };
                            break;
                        case MP3_ICON_TARGET:
                            _local12 = (_local2.parent.parent as NaverBasicPostingPlayerCellRenderer);
                            if (Boolean(_local12)){
                                _local13 = (_local12.data as SongInfoServiceObject);
                                if (((Boolean(_local13)) && (_local13.hasMp3File()))){
                                    if (playerModel.userInfo.isTeam == UserInfo.IS_TEAM){
                                        notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                                        return;
                                    };
                                    if (_local13.adultProperty === "Y"){
                                        if (playerModel.userInfo.isAdult === UserInfo.IS_ADULT){
                                            _local11 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                                            _local11.data = {trackIds:[_local13.getTrackID()]};
                                            dispatchEvent(_local11);
                                        };
                                    } else {
                                        if (_local13.adultProperty != "Y"){
                                            _local11 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                                            _local11.data = {trackIds:[_local13.getTrackID()]};
                                            dispatchEvent(_local11);
                                        };
                                    };
                                };
                            };
                            break;
                        case "OVER_BOUND":
                            _local12 = (_local2.parent.parent as NaverBasicPostingPlayerCellRenderer);
                            _local14 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED);
                            _local14.data = {
                                renderer:_local12,
                                target:name
                            };
                            dispatchEvent(_local14);
                            break;
                        default:
                            if ((_local2 is NaverBasicPostingPlayerCellRenderer)){
                                _local14 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED);
                                _local14.data = {
                                    renderer:_local2,
                                    target:name
                                };
                                dispatchEvent(_local14);
                            };
                    };
                } else {
                    super.handleCellRendererClick(_arg1);
                };
            };
        }
        public function set isSelectAll(_arg1:Boolean):void{
            this._isSelectAll = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import fl.data.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import fl.managers.*;
    import fl.core.*;
    import fl.controls.*;
    import fl.events.*;
    import fl.controls.listClasses.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase.*;
    import com.nhn.nclicks.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.skin.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;
    import flash.ui.*;

    public class NaverMusicPlayerList extends List {

        public static const NOTIPANEL:String = "NOTIPANEL";
        public static const ALBUM_ICON_TARGET:String = "album_icon";
        public static const MP3_ICON_TARGET:String = "mp3_icon";
        public static const NAME:String = "NAVERMUSICPLAYERLIST";

        protected static var up_scroll_mouse_up_icon:Class;
        protected static var scroll_thumb_over_icon:Class;
        protected static var scroll_thumb_icon:Class;
        protected static var down_scroll_mouse_up_icon:Class;
        protected static var scroll_background_icon:Class;
        protected static var up_scroll_mouse_down_icon:Class;
        protected static var down_scroll_mouse_down_icon:Class;

        protected var _playingSongRenderer:SongInfoServiceObject;
        protected var _playerModel:MusicPlayerBasicModel;
        public var selectedVO:SongInfoServiceObject;
        private var notiPanel:DescriptionPanel;
        public var selectedForcedRenderer:NaverBasicPlayerCellRenderer;
        private var _isDragging:Boolean;
        protected var _isSelectAll:Boolean;
        private var ignoreKeyboardEvent:Boolean;
        private var _dragInit:Boolean;
        private var mouseDragScrollingInterval:Number = 0;
        public var tryToDrag:Boolean;
        private var _tryDragging:Boolean;
        private var _dragEnable:Boolean;

        public function NaverMusicPlayerList(){
            allowMultipleSelection = true;
            verticalLineScrollSize = rowHeight;
            verticalPageScrollSize = rowHeight;
            StyleManager.setStyle("scrollBarWidth", 10);
            StyleManager.setStyle("scrollArrowWidth", 10);
            StyleManager.setStyle("scrollArrowHeight", 13);
            setStyle("skin", ListBackGround);
            setStyle("thumbOverSkin", scroll_thumb_over_icon);
            setStyle("thumbUpSkin", scroll_thumb_icon);
            setStyle("thumbDownSkin", scroll_thumb_over_icon);
            setStyle("thumbIcon", null);
            setStyle("thumbDisabledSkin", scroll_thumb_icon);
            setStyle("trackDownSkin", scroll_background_icon);
            setStyle("trackOverSkin", scroll_background_icon);
            setStyle("trackUpSkin", scroll_background_icon);
            setStyle("trackDisabledSkin", scroll_background_icon);
            setStyle("upArrowDisabledSkin", up_scroll_mouse_up_icon);
            setStyle("upArrowDownSkin", up_scroll_mouse_up_icon);
            setStyle("upArrowOverSkin", up_scroll_mouse_down_icon);
            setStyle("upArrowUpSkin", up_scroll_mouse_up_icon);
            setStyle("downArrowDisabledSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowDownSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowUpSkin", down_scroll_mouse_up_icon);
            setStyle("downArrowOverSkin", down_scroll_mouse_down_icon);
            addEventListener(Event.REMOVED_FROM_STAGE, removeResource, false, 0, true);
            addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler, false, 0, true);
            addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OVER, wheelOverHandler, false, 0, true);
            addEventListener(MouseEvent.ROLL_OUT, wheelOutHandler, false, 0, true);
            notiPanel = new DescriptionPanel();
            notiPanel.name = NOTIPANEL;
            notiPanel.createNotifyTextField();
            notiPanel.changeFrameAs(3);
            notiPanel.showInfo(false);
            notiPanel.x = 95;
            notiPanel.y = 110;
            listHolder.addChildAt(notiPanel, 0);
            NPhotoScrollManager.getInstance().scrollHandler = supportWheel;
        }
        public static function updateAsset(_arg1):void{
            down_scroll_mouse_down_icon = _arg1.getDefinition("down_scroll_mouse_down_icon");
            down_scroll_mouse_up_icon = _arg1.getDefinition("down_scroll_mouse_up_icon");
            up_scroll_mouse_down_icon = _arg1.getDefinition("up_scroll_mouse_down_icon");
            up_scroll_mouse_up_icon = _arg1.getDefinition("scroll_mouse_up_icon");
            scroll_background_icon = _arg1.getDefinition("scroll_background_icon");
            scroll_thumb_icon = _arg1.getDefinition("scroll_thumb_icon");
            scroll_thumb_over_icon = _arg1.getDefinition("scroll_thumb_over_icon");
        }

        private function updateScrollPositionByGap():void{
            trace((verticalScrollPosition + "~~~~~~~~~~~~~~~~~~~~~~~"));
        }
        public function mouseMoveHandler(_arg1:MouseEvent):void{
            var _local2:DisplayObject;
            var _local3:NaverBasicPlayerCellRenderer;
            var _local4:Array;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:int;
            var _local7:int;
            var _local8:NaverBasicPlayerCellRenderer;
            if (_arg1.buttonDown){
                if (!tryToDrag){
                    return;
                };
                if (dragEnable){
                    isDragging = true;
                    _local2 = (_arg1.target as DisplayObject);
                    if ((_local2 is NaverBasicPlayerCellRenderer)){
                        _local3 = NaverBasicPlayerCellRenderer(_local2);
                    } else {
                        if ((((_local2 is Sprite)) && ((_local2.name == "OVER_BOUND")))){
                            _local3 = (_local2.parent.parent as NaverBasicPlayerCellRenderer);
                        };
                    };
                    _local4 = new Array();
                    if (((((((!(dragInit)) && (_local3))) && (_local3.selected))) && (!(isSelectAll)))){
                        tryDragging = true;
                        if (Boolean(selectedItems)){
                            _local6 = selectedItems.length;
                            if (_local6 > 0){
                                _local7 = 0;
                                while (_local7 < _local6) {
                                    _local8 = (itemToCellRenderer(selectedItems[_local7]) as NaverBasicPlayerCellRenderer);
                                    _local4.push(_local8);
                                    _local7++;
                                };
                                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_START);
                                _local5.data = _local4;
                                dispatchEvent(_local5);
                            };
                        };
                        dragInit = true;
                    } else {
                        if (((((((!(dragInit)) && (_local3))) && (!(_local3.selected)))) && (!(isSelectAll)))){
                            tryDragging = true;
                            if (Boolean(selectedForcedRenderer)){
                                _local4.push(selectedForcedRenderer);
                                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_START);
                                _local5.data = _local4;
                                dispatchEvent(_local5);
                            };
                            dragInit = true;
                        };
                    };
                    mouseDragScroll();
                };
            } else {
                isDragging = false;
            };
        }
        public function get isSelectAll():Boolean{
            return (_isSelectAll);
        }
        public function set playingSongRenderer(_arg1:SongInfoServiceObject):void{
            this._playingSongRenderer = _arg1;
        }
        public function set playerModel(_arg1:MusicPlayerBasicModel):void{
            if (Boolean(this._playerModel)){
                this._playerModel.removeEventListener("updateListOfMusic", updateListHandler);
                this._playerModel.removeEventListener("initializeView", initializeView);
                this._playerModel.releaseModel();
                this._playerModel = null;
            };
            this._playerModel = _arg1;
            if (Boolean(this._playerModel)){
                this._playerModel.addEventListener("updateListOfMusic", updateListHandler);
                this._playerModel.addEventListener("initializeView", initializeView);
            };
        }
        override protected function drawList():void{
            var i:* = 0;
            var item:* = null;
            var renderer:* = null;
            var reused:* = false;
            var label:* = null;
            var icon:* = null;
            var rendererSprite:* = null;
            var n:* = null;
            var start:* = getTimer();
            listHolder.x = (listHolder.y = contentPadding);
            var rect:* = listHolder.scrollRect;
            rect.x = _horizontalScrollPosition;
            rect.y = 0;
            rect.height = 261;
            listHolder.scrollRect = rect;
            listHolder.cacheAsBitmap = useBitmapScrolling;
            var startIndex:* = Math.floor((_verticalScrollPosition / rowHeight));
            var endIndex:* = Math.min(length, ((startIndex + rowCount) + 1));
            var itemHash:* = (renderedItems = new Dictionary(true));
            i = startIndex;
            while (i < endIndex) {
                itemHash[_dataProvider.getItemAt(i)] = true;
                i = (i + 1);
            };
            var itemToRendererHash:* = new Dictionary(true);
            while (activeCellRenderers.length > 0) {
                renderer = (activeCellRenderers.pop() as ICellRenderer);
                item = renderer.data;
                if ((((itemHash[item] == null)) || ((invalidItems[item] == true)))){
                    availableCellRenderers.push(renderer);
                } else {
                    itemToRendererHash[item] = renderer;
                    invalidItems[item] = true;
                };
                try {
                    list.removeChild((renderer as DisplayObject));
                } catch(e:Error) {
                };
            };
            invalidItems = new Dictionary(true);
            i = startIndex;
            while (i < endIndex) {
                reused = false;
                item = _dataProvider.getItemAt(i);
                if (itemToRendererHash[item] != null){
                    reused = true;
                    renderer = itemToRendererHash[item];
                    delete itemToRendererHash[item];
                } else {
                    if (availableCellRenderers.length > 0){
                        renderer = (availableCellRenderers.pop() as ICellRenderer);
                    } else {
                        renderer = (getDisplayObjectInstance(getStyleValue("cellRenderer")) as ICellRenderer);
                        rendererSprite = (renderer as Sprite);
                        if (rendererSprite != null){
                            rendererSprite.addEventListener(MouseEvent.CLICK, handleCellRendererClick, false, 0, true);
                            rendererSprite.addEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false, 0, true);
                            rendererSprite.addEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false, 0, true);
                            rendererSprite.addEventListener(Event.CHANGE, handleCellRendererChange, false, 0, true);
                            rendererSprite.doubleClickEnabled = true;
                            rendererSprite.addEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false, 0, true);
                            if (rendererSprite.hasOwnProperty("setStyle")){
                                for (n in rendererStyles) {
                                    var _local4 = rendererSprite;
                                    _local4["setStyle"](n, rendererStyles[n]);
                                };
                            };
                        };
                    };
                };
                list.addChild((renderer as Sprite));
                activeCellRenderers.push(renderer);
                renderer.y = ((rowHeight * (i - startIndex)) + 13);
                renderer.setSize((availableWidth + _maxHorizontalScrollPosition), rowHeight);
                label = itemToLabel(item);
                icon = null;
                if (_iconFunction != null){
                    icon = _iconFunction(item);
                } else {
                    if (_iconField != null){
                        icon = item[_iconField];
                    };
                };
                if (!reused){
                    renderer.data = item;
                };
                renderer.listData = new ListData(label, icon, this, i, i, 0);
                renderer.selected = !((_selectedIndices.indexOf(i) == -1));
                if ((renderer is UIComponent)){
                    (renderer as UIComponent).drawNow();
                };
                i = (i + 1);
            };
        }
        override protected function handleWheel(_arg1:MouseEvent):void{
        }
        override protected function drawLayout():void{
            super.drawLayout();
        }
        override protected function keyUpHandler(_arg1:KeyboardEvent):void{
            switch (_arg1.keyCode){
                case Keyboard.SPACE:
                    makePauseCurrentSong();
                    break;
                case Keyboard.UP:
                case Keyboard.DOWN:
                    if (ignoreKeyboardEvent){
                        return;
                    };
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
                case Keyboard.DELETE:
                case Keyboard.BACKSPACE:
                    removeSelectedItems();
                    break;
                case Keyboard.HOME:
                case Keyboard.END:
                case Keyboard.PAGE_UP:
                case Keyboard.PAGE_DOWN:
                    if (ignoreKeyboardEvent){
                        return;
                    };
                    moveSelectionVertically(_arg1.keyCode, ((_arg1.shiftKey) && (_allowMultipleSelection)), ((_arg1.ctrlKey) && (_allowMultipleSelection)));
                    _arg1.stopPropagation();
                    break;
            };
        }
        public function updateScrollPositionToSomeRenderer(_arg1:SongInfoServiceObject, _arg2:String):void{
            var _local3:int;
            if (Boolean(_arg1)){
                _local3 = dataProvider.getItemIndex(_arg1);
                switch (_arg2){
                    case "UP":
                        scrollToIndex(_local3);
                        break;
                    case "DOWN":
                        scrollToIndex((_local3 + 2));
                        break;
                };
            };
        }
        public function get isDragging():Boolean{
            return (_isDragging);
        }
        override protected function handleCellRendererChange(_arg1:Event):void{
            super.handleCellRendererChange(_arg1);
        }
        override protected function moveSelectionVertically(_arg1:uint, _arg2:Boolean, _arg3:Boolean):void{
            var _local9:Boolean;
            var _local10:Boolean;
            var _local11:Number;
            var _local4:int = Math.max(Math.floor((calculateAvailableHeight() / rowHeight)), 1);
            var _local5 = 13;
            var _local6:uint = Math.floor((_verticalScrollPosition / rowHeight));
            var _local7 = -1;
            var _local8:int;
            switch (_arg1){
                case Keyboard.UP:
                    _local7 = (_local6 - 1);
                    break;
                case Keyboard.DOWN:
                    _local7 = ((_local6 + _local5) + 2);
                    break;
                case Keyboard.HOME:
                    _local7 = 0;
                    break;
                case Keyboard.END:
                    _local7 = (dataProvider.length - 1);
                    _local9 = true;
                    break;
                case Keyboard.PAGE_DOWN:
                    _local7 = (_local6 + _local5);
                    _local11 = ((_local6 + (_local5 * 2)) + 1);
                    if (_local7 >= dataProvider.length){
                        _local7 = (dataProvider.length - 1);
                    };
                    scrollToIndex(_local11);
                    return;
                case Keyboard.PAGE_UP:
                    _local7 = (_local6 - _local5);
                    if (_local7 < 0){
                        _local7 = 0;
                    };
                    break;
            };
            if (_local7 >= 0){
                if (_local9){
                    _local7 = (_local7 + 2);
                };
                scrollToIndex(_local7);
            };
        }
        protected function mouseUpHandler(_arg1:MouseEvent):void{
            var _local4:NaverBasicPlayerCellRenderer;
            var _local8:Array;
            var _local9:Array;
            var _local10:int;
            var _local11:Boolean;
            var _local12:int;
            var _local13:Object;
            var _local14:SongInfoServiceObject;
            var _local15:*;
            var _local16:SongInfoServiceObject;
            var _local17:int;
            var _local18:int;
            var _local19:Boolean;
            var _local20:int;
            var _local21:SongInfoServiceObject;
            tryToDrag = false;
            initMouseDrag();
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_STOP);
            dispatchEvent(_local2);
            var _local3:DisplayObject = (_arg1.target as DisplayObject);
            if ((_local3 is NaverBasicPlayerCellRenderer)){
                _local4 = NaverBasicPlayerCellRenderer(_local3);
            } else {
                if ((((_local3 is Sprite)) && ((_local3.name == "OVER_BOUND")))){
                    _local4 = (_local3.parent.parent as NaverBasicPlayerCellRenderer);
                };
            };
            var _local5:NaverBasicPlayerCellRenderer = _local4;
            if (((((!(isDragging)) && (!(tryDragging)))) && ((selectedItems.length > 1)))){
                if ((((_arg1.target is NaverBasicPlayerCellRenderer)) && (NaverBasicPlayerCellRenderer(_arg1.target)))){
                    selectedForcedRenderer = null;
                    selectedVO = null;
                };
                return;
            };
            if ((_arg1.target is NaverBasicPlayerCellRenderer)){
                NaverBasicPlayerCellRenderer(_arg1.target).selectAction = false;
            };
            var _local6:Boolean = ControlSettingManager.getInstance().dragAndDropFirst;
            if (((((isDragging) && (tryDragging))) && (!(isSelectAll)))){
                tryDragging = false;
                isDragging = false;
                dragInit = false;
                if (dataProvider.length <= 1){
                    return;
                };
                if (_local5){
                    _local5.isDragOver = false;
                } else {
                    if (_local6){
                        _local13 = getItemAt(0);
                        _local5 = (itemToCellRenderer(_local13) as NaverBasicPlayerCellRenderer);
                        if (_local5){
                            _local5.isDragOver = false;
                        };
                    } else {
                        return;
                    };
                };
                _local8 = sortSelectedItems(true);
                _local9 = _local8.concat();
                if (selectedForcedRenderer){
                    _local14 = selectedVO;
                    _local8.splice(0, _local8.length);
                    _local8.push(_local14);
                    selectedForcedRenderer = null;
                    selectedVO = null;
                };
                _local8.reverse();
                _local10 = _local8.length;
                _local12 = 0;
                while (_local12 < _local10) {
                    _local15 = _local8[_local12];
                    playerModel.removeExistNode(_local15);
                    _local11 = true;
                    _local12++;
                };
                if (_local11){
                    _local16 = (_local5.data as SongInfoServiceObject);
                    _local17 = _local5.listData.index;
                    if (!playerModel.musicPlayList.contains(_local16)){
                        _local18 = dataProvider.length;
                        _local20 = _local17;
                        while (_local20 >= 0) {
                            _local16 = (dataProvider.getItemAt(_local20) as SongInfoServiceObject);
                            if (Boolean(_local16)){
                                if (playerModel.musicPlayList.contains(_local16)){
                                    _local19 = true;
                                    break;
                                };
                            };
                            _local20--;
                        };
                        if (!_local19){
                            _local20 = _local17;
                            while (_local20 < _local18) {
                                _local16 = (dataProvider.getItemAt(_local20) as SongInfoServiceObject);
                                if (Boolean(_local16)){
                                    if (playerModel.musicPlayList.contains(_local16)){
                                        _local19 = true;
                                        break;
                                    };
                                };
                                _local20++;
                            };
                        };
                        if ((((_local17 == 0)) && ((_local5._listData.index == 0)))){
                            _local6 = true;
                        };
                        if (dataProvider.getItemAt(0).isSelected){
                            _local6 = true;
                        };
                    };
                    playerModel.changeSongIndex(_local16, _local8, -1, _local6);
                    if (!playerModel.isShuffled){
                        playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    };
                    if (Boolean(playingSongRenderer)){
                        _local21 = (playingSongRenderer as SongInfoServiceObject);
                    };
                    dataProvider.removeAll();
                    dataProvider = new DataProvider(playerModel.musicPlayListAsArray);
                    drawNow();
                    if (selectedForcedRenderer){
                        selectedForcedRenderer = null;
                        selectedVO = null;
                        selectedItems = _local9;
                    } else {
                        selectedItems = _local8;
                    };
                    if (Boolean(_local21)){
                        playingSongRenderer = _local21;
                        playerModel.activeNode = playerModel.searchVaildSongObject(playingSongRenderer);
                        playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(playingSongRenderer);
                    };
                };
            };
            var _local7:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.UPDATE_PLAY_LIST_SAVE_CONFIGURATION);
            dispatchEvent(_local7);
        }
        override protected function calculateAvailableSize():void{
            var _local1:Number = Number(getStyleValue("scrollBarWidth"));
            var _local2:Number = (contentPadding = Number(getStyleValue("contentPadding")));
            var _local3:Number = ((height - (2 * _local2)) - vOffset);
            vScrollBar = (((_verticalScrollPolicy == ScrollPolicy.ON)) || ((((_verticalScrollPolicy == ScrollPolicy.AUTO)) && ((contentHeight > 275)))));
            var _local4:Number = ((width - ((vScrollBar) ? _local1 : 0)) - (2 * _local2));
            var _local5:Number = ((useFixedHorizontalScrolling) ? _maxHorizontalScrollPosition : (contentWidth - _local4));
            hScrollBar = (((_horizontalScrollPolicy == ScrollPolicy.ON)) || ((((_horizontalScrollPolicy == ScrollPolicy.AUTO)) && ((_local5 > 0)))));
            if (hScrollBar){
                _local3 = (_local3 - _local1);
            };
            if (((((((hScrollBar) && (!(vScrollBar)))) && ((_verticalScrollPolicy == ScrollPolicy.AUTO)))) && ((contentHeight > _local3)))){
                vScrollBar = true;
                _local4 = (_local4 - _local1);
            };
            availableHeight = (_local3 + vOffset);
            availableWidth = _local4;
        }
        private function get properList():Array{
            var _local1:Array;
            switch (NaverBasicPlayerBaseView.CURRENT_STATE){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    _local1 = playerModel.musicPlayListAsArray;
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    _local1 = playerModel.top100MusicListAsArray;
                    break;
            };
            return (_local1);
        }
        public function get tryDragging():Boolean{
            return (_tryDragging);
        }
        public function changeRendererViewAsPlaying():void{
            var _local2:SongInfoServiceObject;
            var _local3:Array;
            var _local4:int;
            var _local1:DListNode = playerModel.activeNode;
            if (Boolean(_local1)){
                _local2 = (_local1.data as SongInfoServiceObject);
                _local3 = properList;
                if (Boolean(_local2)){
                    if (Boolean(playingSongRenderer)){
                        playingSongRenderer.isPlaying = false;
                    };
                    _local2.isPlaying = true;
                    _local4 = _local3.indexOf(_local2);
                    if (_local4 > -1){
                        playingSongRenderer = _local2;
                        updateScrollPosition();
                    };
                };
            };
        }
        public function mouseDragScroll():void{
            var _local3:Number;
            var _local4:Number;
            var _local5:Number;
            var _local6:ScrollEvent;
            var _local8:String;
            var _local9:Number;
            var _local1:Number = 0;
            var _local2:Number = 30;
            var _local7:Number = 30;
            clearInterval(mouseDragScrollingInterval);
            if ((((((mouseY < _local2)) && ((mouseY > 0)))) && ((((mouseX > 0)) && ((mouseX < width)))))){
                _local4 = verticalScrollPosition;
                verticalScrollPosition = Math.max(0, (_local4 - 1));
                mouseDragScrollingInterval = setInterval(mouseDragScroll, 500);
                if (_local4 != verticalScrollPosition){
                    verticalScrollBar.setScrollPosition((verticalScrollBar.scrollPosition - verticalScrollBar.pageScrollSize));
                };
            } else {
                if ((((((mouseY > (height - _local2))) && ((mouseY < height)))) && ((((mouseX > 0)) && ((mouseX < width)))))){
                    _local4 = verticalScrollPosition;
                    verticalScrollPosition = Math.min(maxVerticalScrollPosition, (verticalScrollPosition + 1));
                    mouseDragScrollingInterval = setInterval(mouseDragScroll, 500);
                    verticalScrollBar.setScrollPosition((verticalScrollBar.scrollPosition + verticalScrollBar.pageScrollSize));
                } else {
                    mouseDragScrollingInterval = setInterval(mouseDragScroll, 500);
                };
            };
        }
        public function set isDragging(_arg1:Boolean):void{
            this._isDragging = _arg1;
        }
        private function wheelOverHandler(_arg1:MouseEvent):void{
            var _local2:PlaylistDragControlEvent;
            if (_arg1.buttonDown){
                _local2 = new PlaylistDragControlEvent(PlaylistDragControlEvent.HIDE_CAND_NOT_MOVE_ICON);
                dispatchEvent(_local2);
            };
            NPhotoScrollManager.getInstance().scrollHandler = supportWheel;
            ignoreKeyboardEvent = false;
        }
        public function set dragEnable(_arg1:Boolean):void{
            this._dragEnable = _arg1;
        }
        protected function removeResource(_arg1:Event=null):void{
            var sprite:* = null;
            var i:* = 0;
            var e = _arg1;
            removeEventListener(Event.REMOVED_FROM_STAGE, removeResource);
            removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
            removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
            removeEventListener(MouseEvent.ROLL_OVER, wheelOverHandler);
            removeEventListener(MouseEvent.ROLL_OUT, wheelOutHandler);
            if (Boolean(notiPanel)){
                try {
                    listHolder.removeChild(notiPanel);
                } catch(e:Error) {
                };
                notiPanel.removeAsset();
                notiPanel = null;
            };
            if (Boolean(dataProvider)){
                i = 0;
                while (i < list.numChildren) {
                    sprite = (list.getChildAt(0) as Sprite);
                    (sprite as NaverBasicPlayerCellRenderer).removeAsset();
                    sprite.removeEventListener(MouseEvent.CLICK, handleCellRendererClick, false);
                    sprite.removeEventListener(MouseEvent.ROLL_OVER, handleCellRendererMouseEvent, false);
                    sprite.removeEventListener(MouseEvent.ROLL_OUT, handleCellRendererMouseEvent, false);
                    sprite.removeEventListener(Event.CHANGE, handleCellRendererChange, false);
                    sprite.removeEventListener(MouseEvent.DOUBLE_CLICK, handleCellRendererDoubleClick, false);
                    try {
                        list.removeChild(sprite);
                    } catch(e:Error) {
                    };
                    sprite = null;
                    i = (i + 1);
                };
                dataProvider.removeAll();
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            var e:* = _arg1;
            var area:String = _arg2;
            var cid:String = _arg3;
            var rank:int = _arg4;
            var linkURL:String = _arg5;
            try {
                NClicks.sendLog(e, area, cid, rank, linkURL);
            } catch(error:Error) {
            };
        }
        public function removeSendSuccess(_arg1:SongInfoServiceObject):void{
            var _local3:Song;
            var _local5:InternalUIHandlerEvent;
            var _local2:Array = selectedItems;
            var _local4:int;
            while (_local4 < _local2.length) {
                _local3 = (_local2[_local4] as SongInfoServiceObject).songServiceObject;
                if (((Boolean(_local3)) && (_local3.compare(_arg1.songServiceObject)))){
                    break;
                };
                _local4++;
            };
            _local2.splice(_local4, 1);
            selectedItems = _local2;
            if (selectedItems.length == 0){
                _local5 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                _local5.data = {isAll:false};
                dispatchEvent(_local5);
                isSelectAll = false;
            };
            ControlSettingManager.getInstance().selectedItemOfTop100list = selectedItems;
        }
        public function updateScrollPosition():void{
            var _local1:SongInfoServiceObject;
            var _local2:int;
            if (Boolean(playerModel.playingSongNode)){
                _local1 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                if (Boolean(_local1)){
                    _local2 = dataProvider.getItemIndex(_local1);
                    if ((verticalScrollPosition / verticalLineScrollSize) < _local2){
                        scrollToIndex((_local2 + 2));
                    } else {
                        scrollToIndex(_local2);
                    };
                };
            };
        }
        override protected function draw():void{
            var _local1 = !((contentHeight == ((rowHeight * length) + 26)));
            contentHeight = ((rowHeight * length) + 26);
            if (isInvalid(InvalidationType.STYLES)){
                setStyles();
                drawBackground();
                if (contentPadding != getStyleValue("contentPadding")){
                    invalidate(InvalidationType.SIZE, false);
                };
                if (_cellRenderer != getStyleValue("cellRenderer")){
                    _invalidateList();
                    _cellRenderer = getStyleValue("cellRenderer");
                };
            };
            if (((isInvalid(InvalidationType.SIZE, InvalidationType.STATE)) || (_local1))){
                drawLayout();
            };
            if (isInvalid(InvalidationType.RENDERER_STYLES)){
                updateRendererStyles();
            };
            if (isInvalid(InvalidationType.STYLES, InvalidationType.SIZE, InvalidationType.DATA, InvalidationType.SCROLL, InvalidationType.SELECTED)){
                drawList();
            };
            updateChildren();
            validate();
        }
        public function get playingSongRenderer():SongInfoServiceObject{
            return (_playingSongRenderer);
        }
        public function selectAllItem():void{
            var _local1:int;
            var _local2:Array;
            var _local3:SongInfoServiceObject;
            var _local4:Boolean;
            var _local5:int;
            var _local6:Array;
            var _local7:int;
            if (!isSelectAll){
                _local1 = dataProvider.length;
                _local2 = new Array();
                _local3 = null;
                _local4 = true;
                _local5 = 0;
                while (_local5 < _local1) {
                    _local3 = (dataProvider.getItemAt(_local5) as SongInfoServiceObject);
                    _local3.soIndex = _local5;
                    if (Boolean(_local3)){
                        _local3.isChecked = true;
                        _local2.push(_local3);
                    };
                    _local5++;
                };
                isSelectAll = true;
            } else {
                selectedItems = new Array();
                isSelectAll = false;
            };
            selectedItems = _local2;
            switch (name){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    ControlSettingManager.getInstance().selectedItemOfPlaylist = selectedItems;
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    _local6 = new Array();
                    _local7 = 0;
                    while (_local7 < selectedItems.length) {
                        _local6.push(selectedItems[_local7].clone());
                        _local7++;
                    };
                    ControlSettingManager.getInstance().selectedItemOfTop100list = _local6;
                    break;
            };
            if (selectedItems.length == 0){
                isSelectAll = false;
            };
        }
        public function get playerModel():MusicPlayerBasicModel{
            return (_playerModel);
        }
        public function initMouseDrag():void{
            clearInterval(mouseDragScrollingInterval);
            mouseDragScrollingInterval = 0;
            firstDraggedItemClear();
        }
        protected function updateListHandler(_arg1:Event):void{
            dataProvider = new DataProvider(playerModel.musicPlayListAsArray);
        }
        private function updateScrollPositionToTarget(_arg1:int):void{
            scrollToIndex(_arg1);
        }
        public function removeAsset():void{
            removeResource();
        }
        public function setEmptyState(_arg1:Boolean, _arg2:Boolean=false):void{
            if (_arg2){
                if (notiPanel){
                    notiPanel.showInfo(_arg1);
                    notiPanel.changeFrameAs(4);
                };
                return;
            };
            if (notiPanel){
                notiPanel.showInfo(_arg1);
                notiPanel.changeFrameAs(3);
            };
        }
        public function set dragInit(_arg1:Boolean):void{
            this._dragInit = _arg1;
        }
        private function removeSelectedItems():void{
            if (name == NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST){
                dispatchEvent(new Event("REMOVE_SELECTED_ITEM_BY_KEYBOARD"));
            };
        }
        public function updateMouseEnableState(_arg1:Boolean):void{
            if (name == NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST){
                mouseEnabled = _arg1;
                mouseChildren = _arg1;
            };
        }
        private function supportWheel(_arg1:Number, _arg2:Number, _arg3:Number):void{
            var _local4 = 1;
            if (_arg1 < 0){
                _local4 = 1;
            } else {
                if (_arg1 > 0){
                    _local4 = -1;
                };
            };
            var _local5:int = (_local4 * verticalLineScrollSize);
            verticalScrollPosition = (verticalScrollPosition + _local5);
        }
        public function set tryDragging(_arg1:Boolean):void{
            this._tryDragging = _arg1;
        }
        public function drawForceCopiedItems():void{
            var _local1:Array;
            var _local2:int;
            var _local3:int;
            var _local4:NaverMusicPlayerBasicEvent;
            var _local5:NaverBasicPlayerCellRenderer;
            isDragging = true;
            if (((!(dragInit)) && (!(isSelectAll)))){
                tryDragging = true;
                _local1 = new Array();
                if (Boolean(selectedItems)){
                    _local2 = selectedItems.length;
                    if (_local2 > 0){
                        _local3 = 0;
                        while (_local3 < _local2) {
                            _local5 = (itemToCellRenderer(selectedItems[_local3]) as NaverBasicPlayerCellRenderer);
                            _local1.push(_local5);
                            _local3++;
                        };
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_START);
                        _local4.data = _local1;
                        dispatchEvent(_local4);
                    };
                };
                dragInit = true;
            };
        }
        public function get dragEnable():Boolean{
            return (_dragEnable);
        }
        public function removeScrollBarEvent():void{
            if (verticalScrollBar){
                verticalScrollBar.unRegistMouseEvent();
            };
        }
        public function getAllSongList(_arg1:Boolean):Array{
            var _local3:SongInfoServiceObject;
            var _local4:int;
            var _local5:int;
            var _local6:String;
            var _local7:int;
            var _local8:int;
            var _local9:int;
            var _local10:int;
            var _local2:Array = new Array();
            if (_arg1){
                _local3 = null;
                _local4 = ControlSettingManager.MAX_SAVE_SONG_LIST_COUNT;
                _local5 = dataProvider.length;
                if (_local5 < _local4){
                    _local4 = _local5;
                };
                _local6 = ControlSettingManager.getInstance().controlOption;
                switch (_local6){
                    case ControlSettingManager.INSERT_AT_FIRST:
                        _local7 = 0;
                        while (_local7 < _local4) {
                            _local3 = (dataProvider.getItemAt(_local7) as SongInfoServiceObject);
                            if (_local3){
                                _local2.push(_local3.getTrackID());
                            };
                            _local7++;
                        };
                        break;
                    case ControlSettingManager.INSERT_AT_LAST:
                        _local8 = (_local5 - 1);
                        _local9 = (_local5 - _local4);
                        _local10 = 0;
                        while (_local10 < _local4) {
                            _local3 = (dataProvider.getItemAt(_local8) as SongInfoServiceObject);
                            if (_local3){
                                _local2.unshift(_local3.getTrackID());
                            };
                            _local10++;
                            _local8--;
                        };
                };
            };
            return (_local2);
        }
        private function firstDraggedItemClear():void{
            var _local1:Object;
            var _local2:NaverBasicPlayerCellRenderer;
            if (((Boolean(dataProvider)) && ((dataProvider.length > 0)))){
                _local1 = getItemAt(0);
                _local2 = (itemToCellRenderer(_local1) as NaverBasicPlayerCellRenderer);
                if (_local2){
                    _local2.isDragOver = false;
                };
            };
        }
        override protected function handleCellRendererMouseEvent(_arg1:MouseEvent):void{
            super.handleCellRendererMouseEvent(_arg1);
            var _local2:NaverBasicPlayerCellRenderer = (_arg1.target as NaverBasicPlayerCellRenderer);
            if (!Boolean(_local2)){
                return;
            };
            switch (_arg1.type){
                case MouseEvent.ROLL_OVER:
                    if (((((((_arg1.buttonDown) && (isDragging))) && (dragInit))) && (tryDragging))){
                        if (name == "NAVERMUSICPLAYERLIST"){
                            _local2.isDragOver = true;
                        };
                    } else {
                        _local2.isMouseOver = true;
                    };
                    break;
                case MouseEvent.ROLL_OUT:
                    if (((!(ControlSettingManager.getInstance().dragAndDropFirst)) && (!((_local2.listData.index == 0))))){
                        _local2.isDragOver = false;
                    } else {
                        firstDraggedItemClear();
                    };
                    _local2.isMouseOver = false;
                    break;
            };
        }
        protected function mouseDownHandler(_arg1:MouseEvent):void{
            var _local3:NaverBasicPlayerCellRenderer;
            var _local4:MouseEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            if (((!((_arg1.target is NaverBasicPlayerCellRenderer))) && (!((_local2.name == "OVER_BOUND"))))){
                return;
            };
            if ((_local2 is NaverBasicPlayerCellRenderer)){
                _local3 = NaverBasicPlayerCellRenderer(_local2);
            } else {
                if ((((_local2 is Sprite)) && ((_local2.name == "OVER_BOUND")))){
                    _local3 = (_local2.parent.parent as NaverBasicPlayerCellRenderer);
                };
            };
            if (Boolean(_local3)){
                tryToDrag = true;
                if (_local3.selected){
                    if (selectedItems.length > 1){
                        switch (name){
                            case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                                if (((((_arg1.altKey) || (_arg1.ctrlKey))) || (_arg1.shiftKey))){
                                    _local3.selectAction = true;
                                    _local4 = new MouseEvent(MouseEvent.CLICK, false);
                                    _local4.altKey = _arg1.altKey;
                                    _local4.buttonDown = _arg1.buttonDown;
                                    _local4.ctrlKey = _arg1.ctrlKey;
                                    _local4.delta = _arg1.delta;
                                    _local4.localX = _arg1.localX;
                                    _local4.localY = _arg1.localY;
                                    _local4.shiftKey = _arg1.shiftKey;
                                    _local3.dispatchEvent(_local4);
                                };
                                break;
                            case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                                break;
                        };
                    };
                } else {
                    if (!_local3.selected){
                        switch (name){
                            case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                                selectedForcedRenderer = _local3;
                                selectedVO = (_local3.data as SongInfoServiceObject);
                                break;
                        };
                    };
                };
            };
        }
        public function get dragInit():Boolean{
            return (_dragInit);
        }
        private function makePauseCurrentSong():void{
            var _local1:InternalUIHandlerEvent = new InternalUIHandlerEvent(InternalUIHandlerEvent.APPLY_HOT_KEY_OF_SPACE, false);
            dispatchEvent(_local1);
        }
        public function updateSelectedCellPosition():void{
        }
        override protected function keyDownHandler(_arg1:KeyboardEvent):void{
        }
        private function initializeView(_arg1:Event):void{
            changeRendererViewAsPlaying();
        }
        private function wheelOutHandler(_arg1:MouseEvent):void{
            var _local2:PlaylistDragControlEvent;
            if (_arg1.buttonDown){
                _local2 = new PlaylistDragControlEvent(PlaylistDragControlEvent.SHOW_CAN_NOT_MOVE_ICON);
                dispatchEvent(_local2);
            };
            NPhotoScrollManager.getInstance().scrollHandler = null;
            ignoreKeyboardEvent = true;
        }
        override protected function handleCellRendererDoubleClick(_arg1:MouseEvent):void{
        }
        public function changeCurrentActiveRenderer(_arg1:NaverBasicPlayerCellRenderer, _arg2:String):void{
            var _local4:DLinkedList;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:NaverBasicPlayerCellRenderer;
            if (Boolean(playingSongRenderer)){
                playingSongRenderer.isPlaying = false;
            };
            var _local3:NaverBasicPlayerCellRenderer = (_arg1 as NaverBasicPlayerCellRenderer);
            if (Boolean(_local3)){
                _local3.isPlaying = true;
            };
            switch (_arg2){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    _local4 = playerModel.musicPlayList;
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    _local4 = playerModel.top100MusicList;
                    break;
            };
            playerModel.activeNode = playerModel.searchVaildSongObject((_local3.data as SongInfoServiceObject), _local4);
            playerModel.activeMusicList = _local4.concat();
            if (playerModel.isShuffled){
                playerModel.shuffleActiveList();
            };
            if (Boolean(playerModel.activeNode)){
                playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList((playerModel.activeNode.data as SongInfoServiceObject));
                playingSongRenderer = (_local3.data as SongInfoServiceObject);
                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, false);
                _local5.data = {trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID()};
                dispatchEvent(_local5);
                drawList();
                _local6 = (itemToCellRenderer(playerModel.activeNode.data) as NaverBasicPlayerCellRenderer);
                _local6.drawNow();
            };
        }
        public function bindingExistData():void{
            var _local1:SongInfoServiceObject;
            var _local4:int;
            var _local2:Array = new Array();
            var _local3:int;
            while (_local3 < selectedItems.length) {
                _local1 = selectedItems[_local3];
                _local4 = dataProvider.getItemIndex(_local1);
                if (_local4 >= 0){
                    _local1.soIndex = _local4;
                    _local2.push(_local1);
                };
                _local3++;
            };
            selectedItems = _local2;
            switch (name){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    ControlSettingManager.getInstance().selectedItemOfPlaylist = selectedItems;
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    ControlSettingManager.getInstance().selectedItemOfTop100list = selectedItems;
                    break;
            };
        }
        public function set isSelectAll(_arg1:Boolean):void{
            this._isSelectAll = _arg1;
        }
        private function notiErrorOccured(_arg1:String):void{
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, true);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        override protected function handleCellRendererClick(_arg1:MouseEvent):void{
            var _local3:NaverBasicPlayerCellRenderer;
            var _local4:InternalUIHandlerEvent;
            var _local5:Array;
            var _local6:int;
            var _local7:Array;
            var _local8:MouseEvent;
            var _local9:int;
            var _local10:String;
            var _local11:NaverMusicPlayerBasicEvent;
            var _local12:NaverBasicPlayerCellRenderer;
            var _local13:SongInfoServiceObject;
            var _local14:NaverMusicPlayerBasicEvent;
            var _local15:NaverMusicPlayerBasicEvent;
            var _local16:String;
            var _local17:String;
            var _local18:SongInfoServiceObject;
            var _local19:Array;
            var _local20:int;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if ((_local2 is CheckBox)){
                _local3 = (_local2.parent.parent as NaverBasicPlayerCellRenderer);
                _arg1.preventDefault();
                _arg1.stopImmediatePropagation();
                if (Boolean(_local3)){
                    ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
                    switch (name){
                        case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_CHECK, "", (_local3.listData.index + 1));
                            break;
                        case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PLT_CHECK, "", (_local3.listData.index + 1));
                            break;
                    };
                    if (!_local3.data.isChecked){
                        _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                        _local4.data = {isAll:false};
                        dispatchEvent(_local4);
                        isSelectAll = false;
                        _local3.selected = false;
                        _local5 = selectedItems;
                        _local6 = _local5.indexOf(_local3.data);
                        _local5.splice(_local6, 1);
                        selectedItems = _local5;
                    } else {
                        _local7 = selectedItems;
                        if (Boolean(_local7)){
                            _local3.selected = true;
                            _local8 = _arg1;
                            _arg1.ctrlKey = true;
                            super.handleCellRendererClick(_local8);
                            _local9 = dataProvider.length;
                            if (selectedItems.length === _local9){
                                _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                                _local4.data = {isAll:true};
                                dispatchEvent(_local4);
                                isSelectAll = true;
                            } else {
                                isSelectAll = false;
                            };
                        };
                    };
                };
            } else {
                _local10 = _local2.name;
                if (Boolean(_local2)){
                    _local11 = null;
                    _local12 = null;
                    ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
                    switch (_local10){
                        case ALBUM_ICON_TARGET:
                            _local12 = (_local2.parent.parent as NaverBasicPlayerCellRenderer);
                            if (Boolean(_local12)){
                                _local13 = (_local12.data as SongInfoServiceObject);
                                if (((Boolean(_local13)) && (_local13.isServiced))){
                                    _local16 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_ALBUM_INFO);
                                    switch (name){
                                        case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_ALBUM, _local13.getAlbumid(), (_local12.listData.index + 1), _local16);
                                            break;
                                        case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PLT_ALBUM, _local13.getAlbumid(), (_local12.listData.index + 1), _local16);
                                            break;
                                    };
                                    _local11 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
                                    _local11.data = {albumid:_local13.getAlbumid()};
                                    dispatchEvent(_local11);
                                };
                            };
                            break;
                        case MP3_ICON_TARGET:
                            _local12 = (_local2.parent.parent as NaverBasicPlayerCellRenderer);
                            if (Boolean(_local12)){
                                _local13 = (_local12.data as SongInfoServiceObject);
                                if (((Boolean(_local13)) && (_local13.hasMp3File()))){
                                    switch (name){
                                        case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_MP3, _local13.getTrackID(), (_local12.listData.index + 1));
                                            break;
                                        case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PLT_MP3, _local13.getTrackID(), (_local12.listData.index + 1));
                                            break;
                                    };
                                    if (playerModel.userInfo.isTeam == UserInfo.IS_TEAM){
                                        notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                                        return;
                                    };
                                    if (_local13.adultProperty === "Y"){
                                        if (playerModel.userInfo.isAdult === UserInfo.IS_ADULT){
                                            _local11 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                                            _local11.data = {trackIds:[_local13.getTrackID()]};
                                            dispatchEvent(_local11);
                                        };
                                    } else {
                                        if (_local13.adultProperty != "Y"){
                                            _local11 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                                            _local11.data = {trackIds:[_local13.getTrackID()]};
                                            dispatchEvent(_local11);
                                        };
                                    };
                                };
                            };
                            break;
                        case "OVER_BOUND":
                            _local12 = (_local2.parent.parent as NaverBasicPlayerCellRenderer);
                            _local17 = "";
                            switch (name){
                                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                                    if (_local12){
                                        if (Boolean(_local12.listData)){
                                            _local18 = (_local12.data as SongInfoServiceObject);
                                            if (Boolean(_local18)){
                                                _local17 = _local18.getTrackID();
                                                if (((((Boolean(_local17)) && ((_arg1.currentTarget as DisplayObject)))) && ((_arg1.currentTarget as DisplayObject).stage))){
                                                    callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_TRACK, _local17, (_local12.listData.index + 1));
                                                };
                                            };
                                        };
                                        _local14 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED);
                                        _local14.data = {
                                            renderer:_local12,
                                            target:name
                                        };
                                        dispatchEvent(_local14);
                                    };
                                    break;
                                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                                    if (_local12){
                                        _local18 = (_local12.data as SongInfoServiceObject);
                                        if (Boolean(_local18)){
                                            _local17 = _local18.getTrackID();
                                            if (Boolean(_local17)){
                                                callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PLT_TRACK, (_local12.data as SongInfoServiceObject).getTrackID(), (_local12.listData.index + 1));
                                            };
                                        };
                                        _local14 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED);
                                        _local14.data = {
                                            renderer:_local12,
                                            target:name
                                        };
                                        dispatchEvent(_local14);
                                    };
                                    break;
                            };
                            _local15 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_STOP);
                            dispatchEvent(_local15);
                            break;
                        default:
                            if ((_arg1.target is NaverBasicPlayerCellRenderer)){
                                switch (name){
                                    case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                                        _local14 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED);
                                        _local14.data = {
                                            renderer:_local2,
                                            target:name
                                        };
                                        dispatchEvent(_local14);
                                        break;
                                    case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                                        _local14 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED);
                                        _local14.data = {
                                            renderer:_local2,
                                            target:name
                                        };
                                        dispatchEvent(_local14);
                                        break;
                                };
                                _local15 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.LIST_CELL_DRAG_STOP);
                                dispatchEvent(_local15);
                            };
                    };
                } else {
                    super.handleCellRendererClick(_arg1);
                };
            };
            switch (name){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    ControlSettingManager.getInstance().selectedItemOfPlaylist = selectedItems;
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    _local19 = new Array();
                    _local20 = 0;
                    while (_local20 < selectedItems.length) {
                        _local19.push(selectedItems[_local20].clone());
                        _local20++;
                    };
                    ControlSettingManager.getInstance().selectedItemOfTop100list = _local19;
                    break;
            };
        }
        public function sortSelectedItems(_arg1:Boolean=false):Array{
            var _local2:Array = selectedItems.concat();
            _local2.sortOn("soIndex", Array.NUMERIC);
            var _local3:int = _local2.length;
            var _local4:SongInfoServiceObject;
            var _local5:int;
            while (_local5 < _local3) {
                _local4 = _local2[_local5];
                if (!_arg1){
                    _local2[_local5] = _local4.clone();
                } else {
                    _local2[_local5] = _local4;
                };
                _local5++;
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel {
    import flash.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.flashdynamix.motion.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.sliders.*;
    import com.nhn.events.*;
    import flash.text.*;
    import flash.net.*;
    import com.nhn.net.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.nclicks.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.richText.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.assets.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;
    import com.nhn.easing.*;
    import flash.ui.*;

    public class NpodPlayerArea extends Sprite {

        private static const DOWNER_STATE:int = 2;
        private static const PROGRESSBAR_SLIDE_RECT:Rectangle = new Rectangle(10, 178, 140, 18);
        public static const FORWARD_BUTTON:String = "FORWARD_BUTTON";
        private static const MINUTE:int = 80;
        private static const VOLUME_SLIDE_RECT:Rectangle = new Rectangle(41, 328, 64, 10);
        public static const PURCHASE_BUTTON:String = "PURCHASE_BUTTON";
        public static const REWIND_BUTTON:String = "REWIND_BUTTON";
        public static const REPEAT_ALL_SONG:int = 1;
        private static const FORCED_SEEKING_TIME_GAP:Number = 5;
        public static const FOLD_BUTTON:String = "FOLD_BUTTON";
        private static const VALID_STATE:int = 0;
        public static const REPEAT_BUTTON:String = "REPEAT_BUTTON";
        public static const SHUFFLE_BUTTON:String = "SHUFFLE_BUTTON";
        public static const BOOKMARK_BUTTON:String = "BOOKMARK_BUTTON";
        public static const VOLUM_BUTTON:String = "VOLUM_BUTTON";
        private static const UPPER_STATE:int = 1;
        public static const EXPAND_BUTTON:String = "EXPAND_BUTTON";
        public static const SEND_TO_ME2DAY_BUTTON:String = "SEND_TO_ME2DAY_BUTTON";
        public static const LOG_OUT_BTN:String = "LOG_OUT_BTN";
        public static const REPEAT_ONE_SONG:int = 2;
        public static const LOG_IN_BTN:String = "LOG_IN_BTN";
        public static const PAUSE_PLAY_BUTTON:String = "PAUSE_PLAY_BUTTON";
        public static const NO_REPEAT:int = 3;
        public static const PLAY_PAUSE_BUTTON:String = "PLAY_PAUSE_BUTTON";
        public static const PROGRESSBAR_BUTTON:String = "PROGRESSBAR_BUTTON";
        private static const SIXTY_SECOND:int = 60;
        private static const DEFAULT_VOLUME_GAP:Number = 0.1;

        private static var fold_play_list_button_prototype:Class;
        private static var bgColor:int = 0xFFFFFF;
        private static var _mouseOveredColor:int;
        private static var _trackInfoTextColor:int = 0;
        private static var bookmark_button_prototype:Class;
        private static var purchase_mp3_button_prototype:Class;
        private static var header_title_prototype:Class;
        private static var borderShadowColor:int = 0xCFCFCF;
        private static var rewind_button_prototype:Class;
        private static var _artistInfoTextColor:int = 0;
        private static var progress_bar_prototype:Class;
        private static var logout_button_prototype:Class;
        private static var login_button_prototype:Class;
        private static var no_image_mc_prototype:Class;
        private static var _playingTimeColor:int = 3258625;
        private static var pause_play_button_prototype:Class;
        private static var repeat_button_prototype:Class;
        private static var send_to_me2day_button_prototype:Class;
        private static var forward_button_prototype:Class;
        private static var borderColor:int = 0xAEAEAE;
        private static var _albumInfoTextColor:int = 0;
        private static var main_jacket_prototype:Class;
        private static var expand_play_list_button_prototype:Class;
        private static var _totalTimeColor:int = 0xC0C0C0;
        private static var npod_bg_prototype:Class;
        private static var shuffle_button_prototype:Class;
        private static var play_pause_button_prototype:Class;
        private static var volumn_ctrl_prototype:Class;
        private static var footer_vrule_prototype:Class;
        private static var volumn_button_prototype:Class;

        private var isVolumeBarOver:Boolean;
        protected var _playerModel:MusicPlayerBasicModel;
        protected var _thumbnailBitmap:Bitmap;
        protected var progress_bar_instance;
        private var isProgressBarOver:Boolean;
        protected var volumn_ctrl_slider:CSlider;
        protected var shadow:Sprite;
        protected var empty_list_area:FlowTextField;
        protected var expand_play_list_button_instance:DisplayObject;
        protected var login_btn_instance:DisplayObject;
        private var curState:int = 0;
        protected var npod_bg_instance:DisplayObject;
        protected var no_image_instance:DisplayObject;
        protected var ignoreUpdate:Boolean;
        private var currentTimes:Number = 0;
        private var deemedWhole:Boolean = true;
        protected var vrule_array:Array;
        protected var repeat_button_instance:DisplayObject;
        protected var main_jacket_instance:DisplayObject;
        protected var _totalTimeField:TextField;
        protected var artist_info_area2:BitmapTextField;
        private var descriptionPanel:DescriptionPanel;
        private var isForcedVolumeControlState:Boolean = false;
        protected var purchase_mp3_button_instance:DisplayObject;
        protected var existThumbnailPath:String;
        protected var rewind_button_instance:DisplayObject;
        protected var artist_info_area:FlowTextField;
        protected var prevProgressVar:Number;
        protected var forward_button_instance:DisplayObject;
        protected var header_title_instance:DisplayObject;
        protected var _thumbnailBg:Sprite;
        protected var empty_artist_area:FlowTextField;
        protected var pause_play_button_instance:DisplayObject;
        protected var highqualityMusicIcon:HighQualityNotiIcon;
        protected var logout_btn_intance:DisplayObject;
        protected var album_info_area:FlowTextField;
        protected var _totalTime:Number = 305;
        protected var shuffle_button_instance:DisplayObject;
        private var header_title_naver:Sprite;
        protected var volumn_ctrl_instance;
        protected var fold_play_list_button_instance:DisplayObject;
        private var isLoaded:Boolean;
        protected var _prevVolume:int;
        protected var send_to_me2day_button_instance:DisplayObject;
        protected var progress_bar_slider:CSlider;
        protected var _prevBitmap:Bitmap;
        private var header_title_music:Sprite;
        protected var volumn_button_instance:DisplayObject;
        protected var overRect:Sprite;
        private var deemedLayer:Sprite;
        protected var play_pause_button_instance:DisplayObject;
        private var _displayTime:Number;
        protected var bookmark_button_instance:DisplayObject;
        protected var _playingTimeField:TextField;

        public function NpodPlayerArea(){
            addEventListener(Event.ADDED_TO_STAGE, registKeyboardHandler);
            addEventListener(MouseEvent.ROLL_OVER, npodWheelOverHandler);
            addEventListener(MouseEvent.ROLL_OUT, npodWheelOutHandler);
            _prevBitmap = new Bitmap();
            _thumbnailBitmap = new Bitmap();
            _thumbnailBg = new Sprite();
            _thumbnailBg.addChild(_prevBitmap);
            _thumbnailBg.addChild(_thumbnailBitmap);
            _thumbnailBg.mouseEnabled = false;
        }
        public static function updateStyle(_arg1):void{
            bgColor = _arg1.NPDO_AREA_BG_COLOR;
            borderColor = _arg1.NPOD_AREA_BORDER_COLOR;
            borderShadowColor = _arg1.NPOD_AREA_BORDER_SHADOW_COLOR;
            _playingTimeColor = _arg1.NPOD_AREA_PLAYING_TIME_COLOR;
            _totalTimeColor = _arg1.NPOD_AREA_TOTAL_TIME_COLOR;
            _albumInfoTextColor = _arg1.NPOD_AREA_ALBUM_TITLE_COLOR;
            _artistInfoTextColor = _arg1.NPOD_AREA_ARTIST_TITLE_COLOR;
            _trackInfoTextColor = _arg1.NPOD_AREA_TRACK_TITLE_COLOR;
            _mouseOveredColor = _arg1.MOUSE_OVERED_COLOR;
        }
        public static function updateAsset(_arg1):void{
            npod_bg_prototype = _arg1.getDefinition("npod_bg");
            header_title_prototype = _arg1.getDefinition("header_title");
            expand_play_list_button_prototype = _arg1.getDefinition("show_npod_btn");
            fold_play_list_button_prototype = _arg1.getDefinition("hide_npod_btn");
            main_jacket_prototype = _arg1.getDefinition("main_jacket_asset");
            progress_bar_prototype = _arg1.getDefinition("progressive_slider");
            purchase_mp3_button_prototype = _arg1.getDefinition("purchasemp3_btn");
            bookmark_button_prototype = _arg1.getDefinition("bookmark_btn");
            send_to_me2day_button_prototype = _arg1.getDefinition("send_me2day_btn");
            rewind_button_prototype = _arg1.getDefinition("rewind_btn");
            forward_button_prototype = _arg1.getDefinition("forward_btn");
            play_pause_button_prototype = _arg1.getDefinition("play_btn");
            pause_play_button_prototype = _arg1.getDefinition("pause_btn");
            footer_vrule_prototype = _arg1.getDefinition("vruler_asset");
            volumn_button_prototype = _arg1.getDefinition("volumn_btn");
            volumn_ctrl_prototype = _arg1.getDefinition("volumn_slider");
            repeat_button_prototype = _arg1.getDefinition("repeat_btn");
            shuffle_button_prototype = _arg1.getDefinition("shuffle_btn");
            login_button_prototype = _arg1.getDefinition("login_btn");
            logout_button_prototype = _arg1.getDefinition("logout_btn");
            no_image_mc_prototype = _arg1.getDefinition("no_image_mc");
        }

        public function isPauseState():Boolean{
            return ((play_pause_button_instance.visible == true));
        }
        public function release():void{
            if (Boolean(_playerModel)){
                _playerModel.releaseModel();
                _playerModel = null;
            };
        }
        private function keyHandler(_arg1:KeyboardEvent):void{
            switch (_arg1.keyCode){
                case Keyboard.LEFT:
                    seekingByKeyboard(-(FORCED_SEEKING_TIME_GAP));
                    break;
                case Keyboard.RIGHT:
                    seekingByKeyboard(FORCED_SEEKING_TIME_GAP);
                    break;
                case Keyboard.UP:
                    volumeControlByKeyboard(DEFAULT_VOLUME_GAP);
                    break;
                case Keyboard.DOWN:
                    volumeControlByKeyboard(-(DEFAULT_VOLUME_GAP));
                    break;
            };
        }
        private function checkPurchaseMp3(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent;
            var _local3:String;
            var _local4:SongInfoServiceObject;
            var _local5:SongInfoServiceObject;
            if ((purchase_mp3_button_instance as MovieClip).currentFrame != 1){
                return;
            };
            if (playerModel.userInfo.isTeam == UserInfo.IS_TEAM){
                notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                return;
            };
            if (playerModel.activeNode){
                _local4 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local4)){
                    _local3 = _local4.getTrackID();
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                    _local2.data = {trackIds:[_local4.getTrackID()]};
                    dispatchEvent(_local2);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local5 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local5){
                        _local3 = _local5.getTrackID();
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
                        _local2.data = {trackIds:[_local5.getTrackID()]};
                        dispatchEvent(_local2);
                    };
                };
            };
            if (Boolean(_arg1)){
                callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_ALBUM_MP3_PURCHASE, _local3);
            };
        }
        public function createAssetInstance():void{
            var _local10:*;
            addEventListener(MouseEvent.MOUSE_MOVE, checkRect);
            addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            npod_bg_instance = new npod_bg_prototype();
            addChild(npod_bg_instance);
            header_title_instance = new header_title_prototype();
            (header_title_instance as MovieClip).buttonMode = false;
            (header_title_instance as MovieClip).useHandCursor = false;
            header_title_naver = new Sprite();
            header_title_naver.addChild(new Bitmap(new BitmapData(55, 20)));
            header_title_naver.addEventListener(MouseEvent.CLICK, requestNaverHome);
            header_title_naver.buttonMode = true;
            header_title_naver.useHandCursor = true;
            header_title_naver.alpha = 0;
            (header_title_instance as MovieClip).addChild(header_title_naver);
            header_title_music = new Sprite();
            header_title_music.x = ((header_title_instance as MovieClip).width - 55);
            header_title_music.addChild(new Bitmap(new BitmapData(55, 20)));
            header_title_music.addEventListener(MouseEvent.CLICK, requestNaverMusicHome);
            header_title_music.buttonMode = true;
            header_title_music.useHandCursor = true;
            header_title_music.alpha = 0;
            (header_title_instance as MovieClip).addChild(header_title_music);
            addChild(header_title_instance);
            expand_play_list_button_instance = new expand_play_list_button_prototype();
            expand_play_list_button_instance.name = EXPAND_BUTTON;
            fold_play_list_button_instance = new fold_play_list_button_prototype();
            fold_play_list_button_instance.name = FOLD_BUTTON;
            no_image_instance = new no_image_mc_prototype();
            (no_image_instance as MovieClip).mouseEnabled = false;
            no_image_instance.visible = false;
            addChild(no_image_instance);
            addChild(_thumbnailBg);
            main_jacket_instance = new main_jacket_prototype();
            main_jacket_instance.addEventListener(MouseEvent.CLICK, requestAlbumEndPage);
            (main_jacket_instance as MovieClip).buttonMode = true;
            (main_jacket_instance as MovieClip).useHandCursor = true;
            addChild(main_jacket_instance);
            progress_bar_instance = new progress_bar_prototype();
            var _local1:MovieClip = progress_bar_instance.thumb;
            var _local2:MovieClip = progress_bar_instance.trackEmpty;
            var _local3:MovieClip = progress_bar_instance.track;
            progress_bar_slider = new CSlider(_local1, _local2, _local3, "horizental", 0, 100, ControlSettingManager.getInstance().progressSliderValue, true, false);
            progress_bar_slider.name = "progressBar";
            progress_bar_slider.thumbSizeOption(0);
            progress_bar_slider.ease = Exponential.easeInOut;
            progress_bar_slider.duration = 0.2;
            progress_bar_slider.wheelRatio = 0.1;
            progress_bar_slider.buttonMode = true;
            progress_bar_slider.useHandCursor = true;
            progress_bar_slider._thumb.visible = true;
            progress_bar_slider._thumb.alpha = 0;
            progress_bar_slider.addEventListener(CSliderEvent.THUMB_DRAG_START, checkState);
            progress_bar_slider.addEventListener(CSliderEvent.TRACK_CLICK_START, checkState);
            progress_bar_slider.addEventListener(CSliderEvent.THUMB_DRAG_END, progressSliderHandler);
            progress_bar_slider.addEventListener(CSliderEvent.TRACK_CLICK_END, progressSliderHandler);
            addChild(progress_bar_slider);
            album_info_area = new FlowTextField();
            album_info_area.name = "TRACK_TITLE";
            album_info_area.buttonMode = true;
            album_info_area.addEventListener(MouseEvent.CLICK, showEndPage);
            album_info_area.maskRect = new Rectangle(1, 0, 140, 20);
            album_info_area.availableWidth = 130;
            album_info_area.fontFamily = "돋움,AppleGothic";
            album_info_area.fontColor = _albumInfoTextColor;
            album_info_area.mouseOverFontColor = _mouseOveredColor;
            album_info_area.fontSize = 13;
            album_info_area.letterSpacing = -0.5;
            album_info_area.bold = true;
            album_info_area.x = 16;
            album_info_area.y = 200;
            addChild(album_info_area);
            artist_info_area2 = new BitmapTextField();
            artist_info_area2.name = "ARTIST_TITLE";
            artist_info_area2.buttonMode = true;
            artist_info_area2.addEventListener(MouseEvent.CLICK, showEndPage);
            artist_info_area2.maskArea = new Rectangle(1, 0, 130, 20);
            artist_info_area2.availableWidth = 120;
            artist_info_area2.font = "돋움,AppleGothic";
            artist_info_area2.defaultColor = _artistInfoTextColor;
            artist_info_area2.overColor = _mouseOveredColor;
            artist_info_area2.size = 11;
            artist_info_area2.letterSpacing = -0.5;
            artist_info_area2.x = 16;
            artist_info_area2.y = 218;
            artist_info_area2.update();
            addChild(artist_info_area2);
            purchase_mp3_button_instance = new purchase_mp3_button_prototype();
            purchase_mp3_button_instance.name = PURCHASE_BUTTON;
            (purchase_mp3_button_instance as MovieClip).buttonMode = true;
            (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
            updateMp3ActiveState();
            addChild(purchase_mp3_button_instance);
            bookmark_button_instance = new bookmark_button_prototype();
            bookmark_button_instance.name = BOOKMARK_BUTTON;
            (bookmark_button_instance as MovieClip).buttonMode = true;
            (bookmark_button_instance as MovieClip).gotoAndStop(1);
            addChild(bookmark_button_instance);
            send_to_me2day_button_instance = new send_to_me2day_button_prototype();
            send_to_me2day_button_instance.name = SEND_TO_ME2DAY_BUTTON;
            (send_to_me2day_button_instance as MovieClip).buttonMode = true;
            (send_to_me2day_button_instance as MovieClip).gotoAndStop(1);
            addChild(send_to_me2day_button_instance);
            rewind_button_instance = new rewind_button_prototype();
            rewind_button_instance.name = REWIND_BUTTON;
            addChild(rewind_button_instance);
            play_pause_button_instance = new play_pause_button_prototype();
            play_pause_button_instance.name = PLAY_PAUSE_BUTTON;
            play_pause_button_instance.visible = ControlSettingManager.getInstance().showPlayButton;
            addChild(play_pause_button_instance);
            pause_play_button_instance = new pause_play_button_prototype();
            pause_play_button_instance.name = PAUSE_PLAY_BUTTON;
            pause_play_button_instance.visible = ControlSettingManager.getInstance().showPauseButton;
            addChild(pause_play_button_instance);
            forward_button_instance = new forward_button_prototype();
            forward_button_instance.name = FORWARD_BUTTON;
            addChild(forward_button_instance);
            vrule_array = new Array();
            var _local4:int;
            while (_local4 < 2) {
                _local10 = new footer_vrule_prototype();
                vrule_array.push(_local10);
                _local4++;
            };
            volumn_button_instance = new volumn_button_prototype();
            volumn_button_instance.name = VOLUM_BUTTON;
            (volumn_button_instance as MovieClip).buttonMode = true;
            (volumn_button_instance as MovieClip).useHandCursor = true;
            (volumn_button_instance as MovieClip).gotoAndStop(ControlSettingManager.getInstance().volumeButtonFrameValue);
            addChild(volumn_button_instance);
            volumn_ctrl_instance = new volumn_ctrl_prototype();
            var _local5:MovieClip = volumn_ctrl_instance.thumb;
            var _local6:MovieClip = volumn_ctrl_instance.trackEmpty;
            var _local7:MovieClip = volumn_ctrl_instance.track;
            volumn_ctrl_slider = new CSlider(_local5, _local6, _local7, "horizental", 0, 1, ControlSettingManager.getInstance().volumeSliderValue, false, true);
            volumn_ctrl_slider.name = "volumeBar";
            volumn_ctrl_slider._thumb.visible = true;
            volumn_ctrl_slider._thumb.alpha = 0;
            volumn_ctrl_slider.thumbSizeOption(0);
            volumn_ctrl_slider.ease = Exponential.easeInOut;
            volumn_ctrl_slider.duration = 0.2;
            volumn_ctrl_slider.wheelRatio = 0.1;
            fixInterval();
            volumn_ctrl_slider.addEventListener(CSliderEvent.SLIDER_CHANGE, volumnSliderHandler);
            volumn_ctrl_slider.thumbSpace = 66;
            volumn_ctrl_slider._thumbSize = 0;
            addChild(volumn_ctrl_slider);
            shuffle_button_instance = new shuffle_button_prototype();
            (shuffle_button_instance as MovieClip).buttonMode = true;
            (shuffle_button_instance as MovieClip).useHandCursor = true;
            (shuffle_button_instance as MovieClip).gotoAndStop(ControlSettingManager.getInstance().shuffleButtonFrameValue);
            shuffle_button_instance.name = SHUFFLE_BUTTON;
            addChild(shuffle_button_instance);
            repeat_button_instance = new repeat_button_prototype();
            (repeat_button_instance as MovieClip).buttonMode = true;
            (repeat_button_instance as MovieClip).useHandCursor = true;
            (repeat_button_instance as MovieClip).gotoAndStop(ControlSettingManager.getInstance().repeatButtonFrameValue);
            repeat_button_instance.name = REPEAT_BUTTON;
            addChild(repeat_button_instance);
            _playingTimeField = new TextField();
            _playingTimeField.selectable = false;
            _playingTimeField.x = 14;
            _playingTimeField.y = 184;
            var _local8:TextFormat = new TextFormat();
            _local8.font = "Tahoma,AppleGothic";
            _local8.size = 9;
            _local8.color = _playingTimeColor;
            _playingTimeField.defaultTextFormat = _local8;
            _playingTimeField.text = "00:00";
            _playingTimeField.width = (_playingTimeField.textWidth + 5);
            _playingTimeField.height = (_playingTimeField.textHeight + 5);
            addChild(_playingTimeField);
            _totalTimeField = new TextField();
            _totalTimeField.selectable = false;
            _totalTimeField.x = 124;
            _totalTimeField.y = 184;
            var _local9:TextFormat = new TextFormat();
            _local9.font = "Tahoma,AppleGothic";
            _local9.size = 9;
            _local9.color = _totalTimeColor;
            _totalTimeField.defaultTextFormat = _local9;
            _totalTimeField.text = "00:00";
            _totalTimeField.width = (_totalTimeField.textWidth + 5);
            _totalTimeField.height = (_totalTimeField.textHeight + 5);
            addChild(_totalTimeField);
            login_btn_instance = new login_button_prototype();
            login_btn_instance.name = LOG_IN_BTN;
            login_btn_instance.visible = false;
            addChild(login_btn_instance);
            logout_btn_intance = new logout_button_prototype();
            logout_btn_intance.visible = false;
            logout_btn_intance.name = LOG_OUT_BTN;
            addChild(logout_btn_intance);
            totalTime = ControlSettingManager.getInstance().totalTime;
            descriptionPanel = new DescriptionPanel();
            descriptionPanel.createNotifyTextField();
            descriptionPanel.showInfo(false);
            descriptionPanel.x = 14;
            descriptionPanel.y = 202;
            addChild(descriptionPanel);
            highqualityMusicIcon = new HighQualityNotiIcon();
            addChild(highqualityMusicIcon);
            highqualityMusicIcon.x = 103;
            highqualityMusicIcon.y = 46;
            highqualityMusicIcon.visible = true;
            setIsHighQualitySong(false, false);
            deemedLayer = new Sprite();
            deemedLayer.mouseChildren = false;
            deemedLayer.graphics.beginFill(0, 0);
            deemedLayer.graphics.drawRect(0, 0, 165, 353);
            deemedLayer.graphics.endFill();
            deemedLayer.visible = false;
            addChild(deemedLayer);
            registEventHandler();
        }
        private function checkRect(_arg1:MouseEvent):void{
            if (deemedLayer.visible){
                return;
            };
            if (PROGRESSBAR_SLIDE_RECT.contains(_arg1.stageX, _arg1.stageY)){
                if (!isProgressBarOver){
                    showThumb();
                    isProgressBarOver = true;
                };
            } else {
                if (isProgressBarOver){
                    hideThumb();
                    isProgressBarOver = false;
                };
            };
            if (VOLUME_SLIDE_RECT.contains(_arg1.stageX, _arg1.stageY)){
                if (!isVolumeBarOver){
                    showVolumeThumb();
                    isVolumeBarOver = true;
                };
            } else {
                if (isVolumeBarOver){
                    hideVolumeThumb();
                    isVolumeBarOver = false;
                };
            };
        }
        private function progressSliderHandler(_arg1:CSliderEvent):void{
            var _local3:CSlider;
            var _local4:int;
            var _local5:NaverMusicPlayerBasicEvent;
            ignoreUpdate = false;
            var _local2:Number = _arg1.target.value;
            if (Boolean(playerModel.activeNode)){
                _local3 = (_arg1.target as CSlider);
                if (_local3.isFull){
                    _local4 = ((_arg1.target.value * totalTime) / progress_bar_slider.maxValue);
                    updatePlayingTime(SIXTY_SECOND);
                    curState = VALID_STATE;
                } else {
                    _local4 = ((_arg1.target.value * totalTime) / progress_bar_slider.maxValue);
                    if (_local4 > currentTimes){
                        curState = UPPER_STATE;
                    } else {
                        if (_local4 < currentTimes){
                            curState = DOWNER_STATE;
                        } else {
                            curState = VALID_STATE;
                        };
                    };
                    currentTimes = _local4;
                    updatePlayingTime();
                };
                ControlSettingManager.getInstance().progressSliderValue = _local4;
                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, true);
                _local5.data = {
                    trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID(),
                    seek:_local4,
                    auto:false
                };
                dispatchEvent(_local5);
                if (_local4 <= 0){
                    curState = VALID_STATE;
                    updateCurrentSongLength(0);
                    currentTimes = 0;
                };
            };
        }
        public function checkPlayPauseButtonState(_arg1:Boolean):void{
            pause_play_button_instance.visible = _arg1;
            play_pause_button_instance.visible = !(_arg1);
            ControlSettingManager.getInstance().showPauseButton = pause_play_button_instance.visible;
            ControlSettingManager.getInstance().showPlayButton = play_pause_button_instance.visible;
        }
        private function sendToMe2dayCurrentSong(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:SongInfoServiceObject;
            var _local5:SongInfoServiceObject;
            var _local2:NaverMusicPlayerBasicEvent;
            if (playerModel.activeNode){
                _local4 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local4)){
                    _local3 = _local4.getTrackID();
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ME2DAY_POST_CURRENT_SONG, true);
                    _local2.data = {song:_local4.songServiceObject};
                    dispatchEvent(_local2);
                };
            } else {
                _local5 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                if (_local5){
                    _local3 = _local4.getTrackID();
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.ME2DAY_POST_CURRENT_SONG, true);
                    _local2.data = {song:_local5.songServiceObject};
                    dispatchEvent(_local2);
                };
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        public function updateAllInfomationOfSong():void{
            var _local2:SongInfoServiceObject;
            var _local1:DListNode = playerModel.activeNode;
            if (Boolean(_local1)){
                showHideExistInfoField(true);
                _local2 = (_local1.data as SongInfoServiceObject);
                if (Boolean(_local2)){
                    updateMp3ActiveState();
                    loadAlbumJacketThumbnail(_local2.getAlbumJacketThumbURL());
                    updateAlbumTitle(_local2.getTrackTitle(), _local2.singer, _local2.getAlbumTitle());
                    ControlSettingManager.getInstance().songTitle = _local2.getTrackTitle();
                    ControlSettingManager.getInstance().artistName = _local2.singer;
                    ControlSettingManager.getInstance().albumName = _local2.getAlbumTitle();
                    ControlSettingManager.getInstance().songAlubmURL = _local2.getAlbumJacketThumbURL();
                };
                showEmptyCase(false);
            } else {
                showHideExistInfoField(false);
                showEmptyCase(true);
                loadAlbumJacketThumbnail(null);
            };
        }
        protected function unregistEventHandler():void{
            expand_play_list_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            fold_play_list_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            forward_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            rewind_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            pause_play_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            play_pause_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            purchase_mp3_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            bookmark_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            shuffle_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            repeat_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            volumn_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            login_btn_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            logout_btn_intance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            send_to_me2day_button_instance.removeEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            removeEventListener(MouseEvent.MOUSE_MOVE, checkRect);
            removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
            removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
            removeEventListener(MouseEvent.ROLL_OVER, npodWheelOverHandler);
            removeEventListener(MouseEvent.ROLL_OUT, npodWheelOutHandler);
        }
        private function hideVolumeThumb():void{
            TweensyZero.to(volumn_ctrl_slider._thumb, {alpha:0});
        }
        public function updateMp3ActiveState():void{
            var _local1:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local1 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (_local1.hasMp3File()){
                    if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                        (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                    } else {
                        if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                            (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                            (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                        } else {
                            if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                            } else {
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                            };
                        };
                    };
                } else {
                    if (!_local1.hasMp3File()){
                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                        (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                    };
                };
            } else {
                if (playerModel.playingSongNode){
                    _local1 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local1){
                        if (_local1.hasMp3File()){
                            if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isLogin == UserInfo.IS_NOT_LOGIN)))){
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                            } else {
                                if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_ADULT)))){
                                    (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                                    (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                                } else {
                                    if (((_local1.isAdultSong()) && ((MusicPlayerBasicModel.getInstance().userInfo.isAdult == UserInfo.IS_NOT_ADULT)))){
                                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                        (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                                    } else {
                                        (purchase_mp3_button_instance as MovieClip).gotoAndStop(1);
                                        (purchase_mp3_button_instance as MovieClip).buttonMode = true;
                                    };
                                };
                            };
                        } else {
                            if (!_local1.hasMp3File()){
                                (purchase_mp3_button_instance as MovieClip).gotoAndStop(2);
                                (purchase_mp3_button_instance as MovieClip).buttonMode = false;
                            };
                        };
                    };
                };
            };
        }
        private function registKeyboardHandler(_arg1:Event):void{
        }
        public function get totalTime():Number{
            return (_totalTime);
        }
        private function supportWheel(_arg1:Number, _arg2:Number, _arg3:Number):void{
            if (_arg1 == 0){
                NPhotoScrollManager.getInstance().scrollHandler = null;
                volumn_ctrl_slider.wheel = CSlider.WHEEL_FLASH;
            } else {
                volumn_ctrl_slider.wheeler(_arg1);
            };
        }
        private function showEndPage(_arg1:MouseEvent):void{
            switch (_arg1.currentTarget.name){
                case "ALBUM_TITLE":
                    requestAlbumEndPage(_arg1);
                    break;
                case "TRACK_TITLE":
                    requestAlbumEndPage(_arg1, false);
                    break;
                case "ARTIST_TITLE":
                    requestArtistEndPage(_arg1);
                    break;
            };
        }
        private function handleNpodEventHandler(_arg1:MouseEvent):void{
            var _local4:String;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:int;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            var _local3:TooltipManager = TooltipManager.getInstance();
            if (Boolean(_local2)){
                ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
                _local4 = _local2.name;
                _local5 = null;
                switch (_local4){
                    case SEND_TO_ME2DAY_BUTTON:
                        sendToMe2dayCurrentSong(_arg1);
                        break;
                    case PURCHASE_BUTTON:
                        checkPurchaseMp3(_arg1);
                        break;
                    case BOOKMARK_BUTTON:
                        checkBookmarkSong(_arg1);
                        break;
                    case REWIND_BUTTON:
                        if (Boolean(_arg1)){
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_REWIND, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_REWIND_CID);
                        };
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_PREV_SONG, false);
                        break;
                    case PLAY_PAUSE_BUTTON:
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, false);
                        break;
                    case PAUSE_PLAY_BUTTON:
                        if (Boolean(_arg1)){
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_PAUSE, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_PAUSE_CID);
                        };
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, false);
                        break;
                    case FORWARD_BUTTON:
                        if (Boolean(_arg1)){
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_FORWARD, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_FORWARD_CID);
                        };
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_NEXT_SONG, false);
                        break;
                    case VOLUM_BUTTON:
                        _local6 = (volumn_button_instance as MovieClip).currentFrame;
                        if (((Boolean(_arg1)) && (!((_local6 == 1))))){
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SOUND_OFF, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SOUND_OFF_CID);
                        };
                        checkVolumeState();
                        break;
                    case SHUFFLE_BUTTON:
                        if (Boolean(_arg1)){
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SHUFFLE, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_SHUFFLE_CID);
                        };
                        checkShuffleState();
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CHANGED_SHUFFLE_OPTION, true, false);
                        _local5.data = {shuffleOption:ControlSettingManager.getInstance().shuffleButtonFrameValue};
                        break;
                    case REPEAT_BUTTON:
                        checkRepeatState();
                        if (Boolean(_arg1)){
                            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_REPEAT, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_REPEAT_CID);
                        };
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CHANGED_REPEAT_OPTION, true, false);
                        _local5.data = {repeatOption:ControlSettingManager.getInstance().repeatButtonFrameValue};
                        break;
                    case EXPAND_BUTTON:
                        fold_play_list_button_instance.visible = true;
                        expand_play_list_button_instance.visible = false;
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST, true);
                        break;
                    case FOLD_BUTTON:
                        fold_play_list_button_instance.visible = false;
                        expand_play_list_button_instance.visible = true;
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.HIDE_SONG_LIST, true);
                        break;
                    case LOG_IN_BTN:
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_LOG_IN, true);
                        break;
                    case LOG_OUT_BTN:
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_LOG_OUT, true);
                        break;
                };
                if (Boolean(_local5)){
                    dispatchEvent(_local5);
                };
            };
        }
        private function checkShuffleState():void{
            var _local2:int;
            var _local3:TooltipManager;
            var _local1:MovieClip = (shuffle_button_instance as MovieClip);
            if (Boolean(_local1)){
                _local2 = _local1.currentFrame;
                _local3 = TooltipManager.getInstance();
                switch (_local2){
                    case 1:
                        _local1.gotoAndStop(2);
                        _local3.setText(NaverMusicPlayerProperty.RANDOME_PLAY);
                        playerModel.shuffleActiveList();
                        ControlSettingManager.getInstance().shuffleButtonFrameValue = 2;
                        break;
                    case 2:
                        _local1.gotoAndStop(1);
                        _local3.setText(NaverMusicPlayerProperty.SEQUENCE_PLAY);
                        playerModel.unShuffleActiveList();
                        ControlSettingManager.getInstance().shuffleButtonFrameValue = 1;
                        break;
                };
            };
        }
        public function updateLayout():void{
            header_title_instance.x = 17;
            header_title_instance.y = 5;
            expand_play_list_button_instance.x = 151.5;
            expand_play_list_button_instance.y = 5;
            fold_play_list_button_instance.x = 151.5;
            fold_play_list_button_instance.y = 5;
            _thumbnailBg.x = -286;
            _thumbnailBg.y = -135;
            main_jacket_instance.x = 16;
            main_jacket_instance.y = 44;
            no_image_instance.x = 16;
            no_image_instance.y = 44;
            progress_bar_slider.x = 16;
            progress_bar_slider.y = 182;
            purchase_mp3_button_instance.x = 20;
            purchase_mp3_button_instance.y = 239;
            bookmark_button_instance.x = 60;
            bookmark_button_instance.y = 239;
            send_to_me2day_button_instance.x = 103;
            send_to_me2day_button_instance.y = 239;
            rewind_button_instance.x = 41;
            rewind_button_instance.y = 294;
            play_pause_button_instance.x = 75;
            play_pause_button_instance.y = 291;
            pause_play_button_instance.x = 75;
            pause_play_button_instance.y = 291;
            forward_button_instance.x = 115;
            forward_button_instance.y = 294;
            var _local1:Array = [57, 107];
            var _local2:int;
            while (_local2 < vrule_array.length) {
                vrule_array[_local2].x = _local1[_local2];
                vrule_array[_local2].y = 289;
                _local2++;
            };
            repeat_button_instance.x = 116;
            repeat_button_instance.y = 327;
            shuffle_button_instance.x = 130;
            shuffle_button_instance.y = 327;
            volumn_button_instance.x = 23;
            volumn_button_instance.y = 325;
            volumn_ctrl_slider.x = 41;
            volumn_ctrl_slider.y = 331;
            login_btn_instance.x = 107;
            login_btn_instance.y = 330;
        }
        private function failHandler():void{
            _thumbnailBg.visible = false;
            if (Boolean(_thumbnailBitmap.bitmapData)){
                _thumbnailBitmap.bitmapData.dispose();
                _thumbnailBitmap.bitmapData = null;
            };
            no_image_instance.visible = true;
            TweensyZero.fromTo(no_image_instance, {alpha:0}, {alpha:1});
        }
        public function initAllState():void{
            play_pause_button_instance.visible = true;
            pause_play_button_instance.visible = false;
            ControlSettingManager.getInstance().showPlayButton = true;
            ControlSettingManager.getInstance().showPauseButton = false;
            _totalTime = 0;
            displayTime = 0;
            updateTotalTime();
            updateCurrentSongLength(0);
            curState = VALID_STATE;
            currentTimes = 0;
            deemOnOff(true);
            resizeDeemedLayer(true);
            updateMp3ActiveState();
        }
        public function set displayTime(_arg1:Number):void{
            this._displayTime = _arg1;
        }
        public function set totalTime(_arg1:Number):void{
            deemOnOff(false);
            this._totalTime = _arg1;
            ControlSettingManager.getInstance().totalTime = _arg1;
            updateTotalTime();
            updateCurrentVolume();
            ignoreUpdate = false;
        }
        public function loadAlbumJacketThumbnail(_arg1:String):void{
            if (Boolean(_arg1)){
                if (_arg1 != existThumbnailPath){
                    _thumbnailBg.visible = true;
                    TweensyZero.fromTo(no_image_instance, {alpha:1}, {alpha:0});
                    SmartLoader.getIntance().closeAll();
                    SmartLoader.getIntance().load(new URLRequest(_arg1), {
                        onComplete:completeHandler,
                        onFailure:failHandler,
                        onIoError:ioErrorHandler
                    });
                    existThumbnailPath = _arg1;
                };
            } else {
                existThumbnailPath = null;
                _thumbnailBg.visible = false;
                no_image_instance.visible = true;
                if (Boolean(_thumbnailBitmap.bitmapData)){
                    _thumbnailBitmap.bitmapData.dispose();
                    _thumbnailBitmap.bitmapData = null;
                };
                TweensyZero.fromTo(no_image_instance, {alpha:0}, {alpha:1});
            };
        }
        public function showFoldButton(_arg1:Boolean):void{
            fold_play_list_button_instance.visible = _arg1;
            expand_play_list_button_instance.visible = !(_arg1);
        }
        public function getIsHighQualitySong():Boolean{
            var _local1:Boolean;
            if (Boolean(highqualityMusicIcon)){
                if (highqualityMusicIcon.alpha == 0){
                    _local1 = false;
                } else {
                    _local1 = true;
                };
            };
            return (_local1);
        }
        private function showHideExistInfoField(_arg1:Boolean):void{
            album_info_area.visible = _arg1;
            artist_info_area2.visible = _arg1;
            purchase_mp3_button_instance.visible = _arg1;
            bookmark_button_instance.visible = _arg1;
            send_to_me2day_button_instance.visible = _arg1;
        }
        public function updateTotalTime():void{
            var _local1:String;
            var _local2:String;
            var _local5:Number;
            _totalTimeField.text = "";
            var _local3:int = (totalTime / 60);
            var _local4:int = (totalTime % 60);
            _local1 = _local3.toString();
            _local2 = _local4.toString();
            if (_local3 < 10){
                _local1 = ("0" + _local3.toString());
            };
            if (_local4 < 10){
                _local2 = ("0" + _local4.toString());
            };
            _totalTimeField.text = ((_local1 + ":") + _local2);
            if (Boolean(playerModel.userInfo)){
                switch (playerModel.userInfo.isAuth){
                    case 0:
                        progress_bar_slider.initProgressData();
                        progress_bar_slider.updateLimitArea(-1);
                        progress_bar_slider.drawLimitAreaForce();
                        break;
                    case 1:
                        _local5 = ((100 * MINUTE) / totalTime);
                        if (totalTime <= (MINUTE - 20)){
                            _local5 = 132;
                        };
                        if (displayTime > 60){
                            _local5 = 132;
                        };
                        progress_bar_slider.updateLimitArea(_local5);
                        break;
                };
            };
        }
        private function notiErrorOccured(_arg1:String):void{
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, true);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        private function requestArtistEndPage(_arg1:MouseEvent=null):void{
            var _local2:NaverMusicPlayerBasicEvent;
            var _local3:String;
            var _local4:String;
            var _local5:SongInfoServiceObject;
            var _local6:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local5 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    _local3 = _local5.getArtistid();
                    if (_local3 == "0"){
                        return;
                    };
                    if (_arg1){
                        _local4 = _local5.getArtistid(artist_info_area2.index);
                    } else {
                        _local4 = _local5.getArtistid();
                    };
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, true);
                    _local2.data = {artistid:_local4};
                    dispatchEvent(_local2);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local6 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local6){
                        _local3 = _local6.getArtistid();
                        if (_local3 == "0"){
                            return;
                        };
                        if (_arg1){
                            _local4 = _local5.getArtistid(artist_info_area2.index);
                        } else {
                            _local4 = _local5.getArtistid();
                        };
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, true);
                        _local2.data = {artistid:_local4};
                        dispatchEvent(_local2);
                    };
                };
            };
            if (Boolean(_arg1)){
                callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_ALBUM_ARTIST, _local3);
            };
        }
        public function updateExistInfo():void{
            var _local1:String = ControlSettingManager.getInstance().currentPlayedBitrate;
            if (playerModel.activeNode){
                showEmptyCase(false);
                if (ControlSettingManager.getInstance().songAlubmURL){
                    loadAlbumJacketThumbnail(ControlSettingManager.getInstance().songAlubmURL);
                };
                if (ControlSettingManager.getInstance().songTitle){
                    updateAlbumTitle(ControlSettingManager.getInstance().songTitle, ControlSettingManager.getInstance().artistName, ControlSettingManager.getInstance().albumName);
                };
                updateCurrentSongLength(ControlSettingManager.getInstance().currentTime);
                if (_local1 == WebPlayerCoreProperties.BITRATE_TYPE_HIGH){
                    setIsHighQualitySong(true, false);
                } else {
                    setIsHighQualitySong(false, true);
                };
            } else {
                if (playerModel.musicPlayListAsArray.length > 0){
                    if (playerModel.playingSongNode){
                        showEmptyCase(false);
                        if (ControlSettingManager.getInstance().songAlubmURL){
                            loadAlbumJacketThumbnail(ControlSettingManager.getInstance().songAlubmURL);
                        };
                        if (ControlSettingManager.getInstance().songTitle){
                            updateAlbumTitle(ControlSettingManager.getInstance().songTitle, ControlSettingManager.getInstance().artistName, ControlSettingManager.getInstance().albumName);
                        };
                        updateCurrentSongLength(ControlSettingManager.getInstance().currentTime);
                    };
                } else {
                    showHideExistInfoField(false);
                    showEmptyCase(true);
                    loadAlbumJacketThumbnail(null);
                };
            };
        }
        private function ioErrorHandler(_arg1:IOErrorEvent):void{
            _thumbnailBg.visible = false;
            if (Boolean(_thumbnailBitmap.bitmapData)){
                _thumbnailBitmap.bitmapData.dispose();
                _thumbnailBitmap.bitmapData = null;
            };
            no_image_instance.visible = true;
            TweensyZero.fromTo(no_image_instance, {alpha:0}, {alpha:1});
        }
        private function checkState(_arg1:CSliderEvent):void{
            ignoreUpdate = true;
            currentTimes = ((_arg1.target.value * totalTime) / progress_bar_slider.maxValue);
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
        }
        public function updateLoginLogoutButtonState():void{
            var _local1:UserInfo;
            if (playerModel.userInfo){
                _local1 = playerModel.userInfo;
                if (_local1.isLogin === UserInfo.IS_LOGIN){
                    updateLoginLogoutButton(LOG_OUT_BTN);
                } else {
                    if (_local1.isLogin === UserInfo.IS_NOT_LOGIN){
                        updateLoginLogoutButton(LOG_IN_BTN);
                    };
                };
            };
        }
        private function seekingByKeyboard(_arg1:Number):void{
            var _local5:CSlider;
            var _local6:int;
            var _local7:Number;
            var _local8:NaverMusicPlayerBasicEvent;
            ignoreUpdate = false;
            var _local2:Number = ((progress_bar_slider.value * totalTime) / progress_bar_slider.maxValue);
            var _local3:Number = ((100 * (_local2 + _arg1)) / totalTime);
            progress_bar_slider.value = _local3;
            var _local4:Number = (_local3 / 100);
            if (Boolean(playerModel.activeNode)){
                _local5 = progress_bar_slider;
                progress_bar_slider.moveThumbFromValue(_local4);
                _local7 = progress_bar_slider.value;
                if (_local5.isFull){
                    _local6 = ((_local7 * totalTime) / progress_bar_slider.maxValue);
                    updatePlayingTime(SIXTY_SECOND);
                    curState = VALID_STATE;
                } else {
                    _local6 = ((_local7 * totalTime) / progress_bar_slider.maxValue);
                    if (_local6 > currentTimes){
                        curState = UPPER_STATE;
                    } else {
                        if (_local6 < currentTimes){
                            curState = DOWNER_STATE;
                        } else {
                            curState = VALID_STATE;
                        };
                    };
                    currentTimes = _local6;
                    updatePlayingTime();
                };
                ControlSettingManager.getInstance().progressSliderValue = _local6;
                _local8 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, true);
                _local8.data = {
                    trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID(),
                    seek:_local6,
                    auto:false
                };
                dispatchEvent(_local8);
            };
        }
        public function changeAlert(_arg1:int=3):void{
            descriptionPanel.changeFrameAs(_arg1);
        }
        public function set playerModel(_arg1:MusicPlayerBasicModel):void{
            this._playerModel = _arg1;
        }
        public function checkVolumeState():void{
            var _local4:SongInfoServiceObject;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local1:int = (volumn_button_instance as MovieClip).currentFrame;
            var _local2:int = _local1;
            var _local3:Number = volumn_ctrl_slider.value;
            switch (_local1){
                case 2:
                case 3:
                case 4:
                    _prevVolume = _local1;
                    ControlSettingManager.getInstance().prevVolume = _local3;
                    _local2 = 1;
                    _local3 = 0;
                    break;
                case 1:
                    if (_prevVolume == 0){
                        _local2 = 2;
                        _local3 = ControlSettingManager.getInstance().prevVolume;
                    };
                    _local2 = _prevVolume;
                    switch (_local2){
                        case 2:
                        case 3:
                        case 4:
                            _local3 = ControlSettingManager.getInstance().prevVolume;
                            break;
                    };
                    break;
            };
            if (playerModel.activeNode){
                _local4 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local4)){
                    ControlSettingManager.getInstance().volumeButtonFrameValue = _local2;
                    (volumn_button_instance as MovieClip).gotoAndStop(_local2);
                    volumn_ctrl_slider.moveThumbFromValue(_local3);
                    _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
                    _local5.data = {
                        trackId:_local4.getTrackID(),
                        volume:_local3
                    };
                    dispatchEvent(_local5);
                };
            };
        }
        private function requestNaverHome(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_HOME, true);
            dispatchEvent(_local2);
        }
        public function resizeDeemedLayer(_arg1:Boolean):void{
            var _local2:Number = 0;
            var _local3:Number = 0;
            var _local4:Number = 165;
            var _local5:Number = 353;
            deemedWhole = true;
            if (_arg1){
                _local2 = PROGRESSBAR_SLIDE_RECT.x;
                _local3 = PROGRESSBAR_SLIDE_RECT.y;
                _local4 = PROGRESSBAR_SLIDE_RECT.width;
                _local5 = PROGRESSBAR_SLIDE_RECT.height;
                deemedWhole = false;
            };
            if (deemedLayer){
                deemedLayer.graphics.clear();
                deemedLayer.graphics.beginFill(0xCCCCCC, 0);
                deemedLayer.graphics.drawRect(_local2, _local3, _local4, _local5);
                deemedLayer.graphics.endFill();
            };
        }
        public function updatePlayingTime(_arg1:Number=-1):void{
            var _local3:String;
            var _local4:String;
            _playingTimeField.text = "";
            var _local2:Number = ((progress_bar_slider.value * totalTime) / 100);
            if (_arg1 != -1){
                _local2 = _arg1;
            };
            ControlSettingManager.getInstance().currentTime = _local2;
            var _local5:int = (_local2 / 60);
            var _local6:int = (_local2 % 60);
            _local3 = _local5.toString();
            _local4 = _local6.toString();
            if (_local5 < 10){
                _local3 = ("0" + _local5.toString());
            };
            if (_local6 < 10){
                _local4 = ("0" + _local6.toString());
            };
            _playingTimeField.text = ((_local3 + ":") + _local4);
        }
        private function checkRepeatState():void{
            var _local3:int;
            var _local1:MovieClip = (repeat_button_instance as MovieClip);
            ControlSettingManager.getInstance().loopCount = 0;
            var _local2:TooltipManager = TooltipManager.getInstance();
            if (Boolean(_local1)){
                _local3 = _local1.currentFrame;
                playerModel.repeatOption = _local3;
                switch (_local3){
                    case 1:
                        _local1.gotoAndStop(2);
                        _local2.setText(NaverMusicPlayerProperty.REPEAT_ALL);
                        ControlSettingManager.getInstance().repeatButtonFrameValue = 2;
                        break;
                    case 2:
                        _local1.gotoAndStop(3);
                        _local2.setText(NaverMusicPlayerProperty.REPEAT_ONE);
                        ControlSettingManager.getInstance().repeatButtonFrameValue = 3;
                        break;
                    case 3:
                        _local1.gotoAndStop(1);
                        _local2.setText(NaverMusicPlayerProperty.REPEAT_NONE);
                        ControlSettingManager.getInstance().repeatButtonFrameValue = 1;
                        break;
                };
            };
        }
        private function checkBookmarkSong(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent;
            var _local3:String;
            var _local4:SongInfoServiceObject;
            var _local5:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local4 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local4)){
                    _local3 = _local4.getTrackID();
                    _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.BOOKMARK_CURRENT_SONG, true);
                    _local2.data = {trackIds:[_local4.getTrackID()]};
                    dispatchEvent(_local2);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local5 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local5){
                        _local3 = _local4.getTrackID();
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.BOOKMARK_CURRENT_SONG, true);
                        _local2.data = {trackIds:[_local5.getTrackID()]};
                        dispatchEvent(_local2);
                    };
                };
            };
            if (Boolean(_arg1)){
                callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_BOOKMARKING, _local3);
            };
        }
        public function updateLoginLogoutButton(_arg1:String):void{
            switch (_arg1){
                case LOG_IN_BTN:
                    login_btn_instance.visible = true;
                    logout_btn_intance.visible = false;
                    break;
                case LOG_OUT_BTN:
                    logout_btn_intance.visible = true;
                    login_btn_instance.visible = false;
            };
        }
        public function deemOnOff(_arg1:Boolean):void{
            if (deemedLayer){
                deemedLayer.visible = _arg1;
            };
            resizeDeemedLayer(false);
        }
        private function volumeControlByKeyboard(_arg1:Number):void{
            var _local3:Number;
            var _local4:NaverMusicPlayerBasicEvent;
            isForcedVolumeControlState = true;
            var _local2:Number = volumn_ctrl_slider.value;
            _local2 = (_local2 + _arg1);
            if (_local2 >= 1){
                _local2 = 1;
            };
            if (_local2 <= 0){
                _local2 = 0;
            };
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            if (Boolean(playerModel.activeNode)){
                _local3 = fixInterval(_local2);
                volumn_ctrl_slider.moveThumbFromValue(_local3);
                ControlSettingManager.getInstance().volumeSliderValue = _local3;
                _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
                _local4.data = {
                    trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID(),
                    volume:_local3
                };
                dispatchEvent(_local4);
                isForcedVolumeControlState = false;
            };
        }
        public function updateCurrentVolume():void{
            volumnSliderHandler();
        }
        public function get displayTime():Number{
            return (_displayTime);
        }
        private function hideThumb(_arg1:MouseEvent=null):void{
            TweensyZero.to(progress_bar_slider._thumb, {alpha:0});
        }
        public function isFolding():Boolean{
            return (expand_play_list_button_instance.visible);
        }
        public function showEmptyCase(_arg1:Boolean):void{
            if (_arg1){
                descriptionPanel.changeFrameAs(3);
            };
            descriptionPanel.showInfo(_arg1);
            deemOnOff(_arg1);
            if (_arg1){
                TweensyZero.fromTo(descriptionPanel, {alpha:0}, {alpha:1});
                _totalTime = 0;
                displayTime = 0;
                updateTotalTime();
                updatePlayingTime(0);
                progress_bar_slider.moveThumbFromValue(0);
            } else {
                TweensyZero.fromTo(descriptionPanel, {alpha:1}, {alpha:0});
            };
        }
        public function hideLoginoutButton(_arg1:Boolean):void{
            var _local2:UserInfo;
            if (_arg1){
                login_btn_instance.visible = false;
                logout_btn_intance.visible = false;
            } else {
                if (playerModel.userInfo){
                    _local2 = playerModel.userInfo;
                    if (_local2.isLogin === UserInfo.IS_LOGIN){
                        login_btn_instance.visible = false;
                        logout_btn_intance.visible = true;
                    } else {
                        if (_local2.isLogin === UserInfo.IS_NOT_LOGIN){
                            login_btn_instance.visible = true;
                            logout_btn_intance.visible = false;
                        };
                    };
                };
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            NClicks.sendLog(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        private function showVolumeThumb():void{
            TweensyZero.to(volumn_ctrl_slider._thumb, {alpha:1});
        }
        private function npodWheelOutHandler(_arg1:MouseEvent):void{
            NPhotoScrollManager.getInstance().scrollHandler = null;
            volumn_ctrl_slider.unregisterWheel();
            volumn_ctrl_slider.wheel = null;
            stage.removeEventListener(KeyboardEvent.KEY_UP, keyHandler);
        }
        public function get playerModel():MusicPlayerBasicModel{
            return (_playerModel);
        }
        private function requestAlbumEndPage(_arg1:MouseEvent=null, _arg2:Boolean=true):void{
            var _local3:NaverMusicPlayerBasicEvent;
            var _local4:String;
            var _local5:SongInfoServiceObject;
            var _local6:SongInfoServiceObject;
            if (playerModel.activeNode){
                _local5 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    if (_arg2){
                        _local4 = _local5.getAlbumid();
                    } else {
                        _local4 = _local5.getTrackID();
                    };
                    _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
                    _local3.data = {albumid:_local5.getAlbumid()};
                    dispatchEvent(_local3);
                };
            } else {
                if (playerModel.playingSongNode){
                    _local6 = (playerModel.playingSongNode.data as SongInfoServiceObject);
                    if (_local6){
                        if (_arg2){
                            _local4 = _local6.getAlbumid();
                        } else {
                            _local4 = _local6.getTrackID();
                        };
                        _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, true);
                        _local3.data = {albumid:_local6.getAlbumid()};
                        dispatchEvent(_local3);
                    };
                };
            };
            if (Boolean(_arg1)){
                if (_arg2){
                    callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_ALBUM_JACKET, _local4);
                } else {
                    callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_LPA_TRACK, _local4);
                };
            };
        }
        private function releaseIgnore():void{
            ignoreUpdate = false;
        }
        private function npodWheelOverHandler(_arg1:MouseEvent):void{
            NPhotoScrollManager.getInstance().scrollHandler = supportWheel;
            stage.addEventListener(KeyboardEvent.KEY_UP, keyHandler);
        }
        private function volumnSliderHandler(_arg1:CSliderEvent=null):void{
            var _local2:Number;
            var _local3:NaverMusicPlayerBasicEvent;
            var _local4:NaverMusicPlayerBasicEvent;
            if (!isForcedVolumeControlState){
                if (Boolean(_arg1)){
                    ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
                };
                if (Boolean(playerModel.activeNode)){
                    _local2 = volumn_ctrl_slider.value;
                    _local2 = fixInterval();
                    ControlSettingManager.getInstance().volumeSliderValue = _local2;
                    _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
                    _local3.data = {
                        trackId:(playerModel.activeNode.data as SongInfoServiceObject).getTrackID(),
                        volume:_local2
                    };
                    dispatchEvent(_local3);
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RECORD_CURRENT_PLAYING_VOLUME, true);
                    _local4.data = {volume:_local2};
                    dispatchEvent(_local4);
                };
            };
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local5:int;
            var _local6:String;
            if (((deemedLayer.visible) && (deemedWhole))){
                return;
            };
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(0, 20);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case FORWARD_BUTTON:
                        _local6 = NaverMusicPlayerProperty.NEXT_TEXT;
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case REWIND_BUTTON:
                        _local6 = NaverMusicPlayerProperty.PREV_TEXT;
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case SHUFFLE_BUTTON:
                        _local5 = (_local2 as MovieClip).currentFrame;
                        switch (_local5){
                            case 1:
                                _local6 = NaverMusicPlayerProperty.SEQUENCE_PLAY;
                                break;
                            case 2:
                                _local6 = NaverMusicPlayerProperty.RANDOME_PLAY;
                                break;
                        };
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case REPEAT_BUTTON:
                        _local5 = (_local2 as MovieClip).currentFrame;
                        switch (_local5){
                            case 1:
                                _local6 = NaverMusicPlayerProperty.REPEAT_NONE;
                                break;
                            case 2:
                                _local6 = NaverMusicPlayerProperty.REPEAT_ALL;
                                break;
                            case 3:
                                _local6 = NaverMusicPlayerProperty.REPEAT_ONE;
                                break;
                        };
                        _local3.setText(_local6);
                        _local3.setOffsetPoint(10, 5);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                };
            };
        }
        public function removeAsset():void{
            unregistEventHandler();
            if (descriptionPanel){
                removeChild(descriptionPanel);
                descriptionPanel = null;
            };
            if (Boolean(deemedLayer)){
                removeChild(deemedLayer);
                deemedLayer = null;
            };
            if (Boolean(login_btn_instance)){
                removeChild(login_btn_instance);
                login_btn_instance = null;
            };
            if (Boolean(logout_btn_intance)){
                removeChild(logout_btn_intance);
                logout_btn_intance = null;
            };
            if (Boolean(overRect)){
                removeChild(overRect);
                overRect = null;
            };
            if (Boolean(npod_bg_instance)){
                removeChild(npod_bg_instance);
                npod_bg_instance = null;
            };
            if (Boolean(shadow)){
                removeChild(shadow);
                shadow = null;
            };
            if (header_title_instance){
                removeChild(header_title_instance);
                header_title_naver.removeEventListener(MouseEvent.CLICK, requestNaverHome);
                header_title_music.removeEventListener(MouseEvent.CLICK, requestNaverMusicHome);
                header_title_instance = null;
            };
            if (expand_play_list_button_instance){
                expand_play_list_button_instance = null;
            };
            if (fold_play_list_button_instance){
                fold_play_list_button_instance = null;
            };
            if (_thumbnailBg){
                removeChild(_thumbnailBg);
                _thumbnailBg = null;
            };
            if (no_image_instance){
                removeChild(no_image_instance);
                no_image_instance = null;
            };
            if (main_jacket_instance){
                removeChild(main_jacket_instance);
                main_jacket_instance.removeEventListener(MouseEvent.CLICK, requestAlbumEndPage);
                main_jacket_instance = null;
            };
            if (progress_bar_instance){
                progress_bar_instance = null;
            };
            if (progress_bar_slider){
                removeChild(progress_bar_slider);
                progress_bar_slider.removeEventListener(MouseEvent.MOUSE_OVER, showThumb);
                progress_bar_slider.removeEventListener(MouseEvent.MOUSE_OUT, hideThumb);
                progress_bar_slider.removeEventListener(CSliderEvent.THUMB_DRAG_START, checkState);
                progress_bar_slider.removeEventListener(CSliderEvent.TRACK_CLICK_START, checkState);
                progress_bar_slider.removeEventListener(CSliderEvent.THUMB_DRAG_END, progressSliderHandler);
                progress_bar_slider.removeEventListener(CSliderEvent.TRACK_CLICK_END, progressSliderHandler);
                progress_bar_slider = null;
            };
            if (album_info_area){
                album_info_area.releaseMemory();
                album_info_area.removeEventListener(MouseEvent.CLICK, showEndPage);
                removeChild(album_info_area);
                album_info_area = null;
            };
            if (Boolean(highqualityMusicIcon)){
                removeChild(highqualityMusicIcon);
                highqualityMusicIcon = null;
            };
            if (artist_info_area2){
                artist_info_area2.releaseMemory();
                artist_info_area2.removeEventListener(MouseEvent.CLICK, showEndPage);
                removeChild(artist_info_area2);
                artist_info_area2 = null;
            };
            if (purchase_mp3_button_instance){
                removeChild(purchase_mp3_button_instance);
                purchase_mp3_button_instance = null;
            };
            if (bookmark_button_instance){
                if (this.contains(bookmark_button_instance)){
                    removeChild(bookmark_button_instance);
                };
                bookmark_button_instance = null;
            };
            if (send_to_me2day_button_instance){
                if (contains(send_to_me2day_button_instance)){
                    removeChild(send_to_me2day_button_instance);
                };
                send_to_me2day_button_instance = null;
            };
            if (rewind_button_instance){
                removeChild(rewind_button_instance);
                rewind_button_instance = null;
            };
            if (pause_play_button_instance){
                removeChild(pause_play_button_instance);
                rewind_button_instance = null;
            };
            if (play_pause_button_instance){
                removeChild(play_pause_button_instance);
                play_pause_button_instance = null;
            };
            if (forward_button_instance){
                removeChild(forward_button_instance);
                forward_button_instance = null;
            };
            if (volumn_button_instance){
                removeChild(volumn_button_instance);
                volumn_button_instance = null;
            };
            if (volumn_ctrl_instance){
                volumn_ctrl_instance = null;
            };
            if (volumn_ctrl_slider){
                removeChild(volumn_ctrl_slider);
                volumn_ctrl_slider.removeEventListener(CSliderEvent.SLIDER_CHANGE, volumnSliderHandler);
                volumn_ctrl_slider = null;
            };
            if (shuffle_button_instance){
                removeChild(shuffle_button_instance);
                shuffle_button_instance = null;
            };
            if (repeat_button_instance){
                removeChild(repeat_button_instance);
                repeat_button_instance = null;
            };
            if (_playingTimeField){
                removeChild(_playingTimeField);
                _playingTimeField = null;
            };
            if (_totalTimeField){
                removeChild(_totalTimeField);
                _totalTimeField = null;
            };
        }
        private function requestNaverMusicHome(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_HOME, true);
            dispatchEvent(_local2);
        }
        private function showThumb(_arg1:MouseEvent=null):void{
            TweensyZero.to(progress_bar_slider._thumb, {alpha:1});
        }
        public function updateCurrentSongLength(_arg1:Number):void{
            var _local2:Number;
            var _local3:Number;
            if (ControlSettingManager.getInstance().currentTime == _arg1){
                return;
            };
            if (!ignoreUpdate){
                _local2 = ((100 * _arg1) / totalTime);
                progress_bar_slider.value = _local2;
                _local3 = (_local2 / 100);
                switch (curState){
                    case UPPER_STATE:
                        if (_arg1 < currentTimes){
                            return;
                        };
                        curState = VALID_STATE;
                        progress_bar_slider.moveThumbFromValue(_local3);
                        updatePlayingTime(_arg1);
                        break;
                    case DOWNER_STATE:
                        if (_arg1 > currentTimes){
                            return;
                        };
                        curState = VALID_STATE;
                        progress_bar_slider.moveThumbFromValue(_local3);
                        updatePlayingTime(_arg1);
                        break;
                    case VALID_STATE:
                        progress_bar_slider.moveThumbFromValue(_local3);
                        updatePlayingTime(_arg1);
                        break;
                };
            };
        }
        protected function registEventHandler():void{
            expand_play_list_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            fold_play_list_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            forward_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            rewind_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            pause_play_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            play_pause_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            purchase_mp3_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            bookmark_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            shuffle_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            repeat_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            volumn_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
            login_btn_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            logout_btn_intance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler);
            send_to_me2day_button_instance.addEventListener(MouseEvent.CLICK, handleNpodEventHandler, false, 0, true);
        }
        private function completeHandler(_arg1:SmartLoaderEvent):void{
            if (Boolean(_thumbnailBitmap.bitmapData)){
                _prevBitmap.bitmapData = _thumbnailBitmap.bitmapData;
                if ((((_thumbnailBitmap.width >= 132)) || ((_thumbnailBitmap.height >= 132)))){
                    _prevBitmap.width = 132;
                    _prevBitmap.height = 132;
                } else {
                    _prevBitmap.width = _prevBitmap.bitmapData.width;
                    _prevBitmap.height = _prevBitmap.bitmapData.height;
                };
                _prevBitmap.x = ((735 / 2) - (_prevBitmap.width / 2));
                _prevBitmap.y = ((490 / 2) - (_prevBitmap.height / 2));
            };
            TweensyZero.fromTo(_prevBitmap, {alpha:1}, {alpha:0});
            var _local2:Bitmap = (_arg1.content as Bitmap);
            _thumbnailBitmap.bitmapData = _local2.bitmapData;
            if ((((_thumbnailBitmap.width > 132)) || ((_thumbnailBitmap.height > 132)))){
                _thumbnailBitmap.width = 132;
                _thumbnailBitmap.height = 132;
            } else {
                _thumbnailBitmap.width = _local2.bitmapData.width;
                _thumbnailBitmap.height = _local2.bitmapData.height;
            };
            _thumbnailBitmap.x = ((735 / 2) - (_thumbnailBitmap.width / 2));
            _thumbnailBitmap.y = ((490 / 2) - (_thumbnailBitmap.height / 2));
            _thumbnailBitmap.name = "mainThumb";
            TweensyZero.fromTo(_thumbnailBitmap, {alpah:0}, {alpha:1}, 0.3, null, 0, null);
        }
        public function setIsHighQualitySong(_arg1:Boolean, _arg2:Boolean=false):void{
            if (Boolean(highqualityMusicIcon)){
                if (_arg2){
                    if (_arg1){
                        TweensyZero.to(highqualityMusicIcon, {alpha:1});
                    } else {
                        TweensyZero.to(highqualityMusicIcon, {alpha:0});
                    };
                } else {
                    if (_arg1){
                        highqualityMusicIcon.alpha = 1;
                    } else {
                        highqualityMusicIcon.alpha = 0;
                    };
                };
            };
        }
        public function updateFoldExpandButton():void{
            fold_play_list_button_instance.visible = true;
            expand_play_list_button_instance.visible = false;
        }
        private function fixInterval(_arg1:Number=-1):Number{
            var _local2:Number = _arg1;
            if (_arg1 < 0){
                _local2 = volumn_ctrl_slider.value;
            };
            var _local3:int;
            if (_local2 == 0){
                _local2 = 0;
                _local3 = 1;
            } else {
                if ((((_local2 > 0)) && ((_local2 <= 0.3)))){
                    _local3 = 2;
                } else {
                    if ((((_local2 > 0.3)) && ((_local2 <= 0.6)))){
                        _local3 = 3;
                    } else {
                        if (_local2 > 0.6){
                            _local3 = 4;
                        };
                    };
                };
            };
            (volumn_button_instance as MovieClip).gotoAndStop(_local3);
            ControlSettingManager.getInstance().volumeButtonFrameValue = _local3;
            return (_local2);
        }
        public function updateAlbumTitle(_arg1:String, _arg2:String, _arg3:String):void{
            if (Boolean(_arg3)){
                album_info_area.text = _arg1;
                album_info_area.x = ((npod_bg_instance.width / 2) - (album_info_area.width / 2));
            };
            if (Boolean(artist_info_area2)){
                artist_info_area2.text = "";
                artist_info_area2.appendList(_arg2.split(", "));
                artist_info_area2.update();
                artist_info_area2.x = ((npod_bg_instance.width / 2) - (artist_info_area2.width / 2));
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import fl.controls.*;
    import com.nhn.nclicks.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NPodPlayListFooter extends Sprite implements ILayoutFooterButtonList {

        public static const MOVE_SELECTED_SONG_UPPER_BUTTON:String = "MOVE_SELECTED_SONG_UPPER_BUTTON";
        public static const PUT_SELECTED_SONGS_IN_ALBUM_BUTTON:String = "PUT_SELECTED_SONGS_IN_ALBUM_BUTTON";
        public static const REMOVE_SELECTED_SONG_BUTTON:String = "REMOVE_SELECTED_SONG_BUTTON";
        public static const SELECT_ALL_SONG_BUTTON:String = "SELECT_ALL_SONG_BUTTON";
        public static const PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON:String = "PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON";
        private static const vrulePositionArr:Array = [new Point(60, 10), new Point(99, 10)];
        public static const MOVE_SELECTED_SONG_DOWNER_BUTTON:String = "MOVE_SELECTED_SONG_DOWNER_BUTTON";
        public static const FOOTER_NAME:String = "NPodPlayListFooter";
        public static const POST_SELECTED_SONG_BUTTON:String = "POST_SELECTED_SONG_BUTTON";
        private static const buttonPositionArr:Array = [new Point(12, 9), new Point(29, 9), new Point(110, 9), new Point(154, 9), new Point(82, 9), new Point(68, 10), new Point(247, 9), new Point(270, 9)];

        private static var put_mp3_of_selected_song_in_cart_btn:Class;
        private static var vruleColor:int = 10921643;
        private static var selected_icon:Class;
        private static var put_selected_songs_in_album_btn:Class;
        private static var remove_select_music_btn:Class;
        private static var checkBox_icon:Class;
        private static var footer_button_list:Class;
        private static var select_All_btn:Class;
        private static var select_down_btn:Class;
        private static var do_posting_btn:Class;
        private static var select_up_btn:Class;

        private var checkBox_btn:CheckBox;
        private var select_up_btn_instance;
        private var base;
        private var put_selected_song_in_album_btn_instance;
        private var select_down_btn_instance;
        private var remove_select_music_btn_instance;
        private var footer_vrule_instance;
        private var do_posting_btn_instance;
        private var put_mp3_of_selected_song_in_cart_btn_instance;
        private var footer_button_list_instance;
        private var buttonList:Array;
        private var vrule:Sprite;
        private var select_All_btn_instance;

        public function NPodPlayListFooter(){
            buttonList = new Array();
        }
        public static function updateStyle(_arg1):void{
            vruleColor = _arg1.FOOTER_VRULE_COLOR;
        }
        public static function updateAsset(_arg1):void{
            footer_button_list = _arg1.getDefinition("footer_button_layer");
            select_All_btn = _arg1.getDefinition("selectAll_btn");
            remove_select_music_btn = _arg1.getDefinition("removeSelectMusic_btn");
            select_up_btn = _arg1.getDefinition("select_up_btn");
            select_down_btn = _arg1.getDefinition("select_down_btn");
            do_posting_btn = _arg1.getDefinition("doPosting_btn");
            put_selected_songs_in_album_btn = _arg1.getDefinition("putSelectedMusicInAlbum");
            put_mp3_of_selected_song_in_cart_btn = _arg1.getDefinition("putMp3OfSelectedMusicInCart");
            checkBox_icon = _arg1.getDefinition("checkBox_icon");
            selected_icon = _arg1.getDefinition("selected_icon");
        }

        private function playlistFooterButtonClickHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:NaverMusicPlayerBasicEvent;
            var _local5:CheckBox;
            var _local6:Boolean;
            var _local7:InternalUIHandlerEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                _local4 = null;
                switch (_local3){
                    case PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, false, false);
                        _local4.data = {mosueEvent:_arg1};
                        break;
                    case PUT_SELECTED_SONGS_IN_ALBUM_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, false, false);
                        _local4.data = {mouseEvent:_arg1};
                        break;
                    case SELECT_ALL_SONG_BUTTON:
                        _local5 = (_arg1.target as CheckBox);
                        if (Boolean(_local5)){
                            _local6 = !(_local5.selected);
                            _local7 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                            _local7.data = {
                                isAll:_local6,
                                mouseEvent:_arg1
                            };
                            dispatchEvent(_local7);
                        };
                        break;
                    case REMOVE_SELECTED_SONG_BUTTON:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_DELETE);
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REMOVE_SELECTED_SONG_BUTTON, true, false);
                        break;
                    case MOVE_SELECTED_SONG_DOWNER_BUTTON:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_DOWN);
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.MOVE_SELECTED_SONG_DOWNER_BUTTON, true, false);
                        break;
                    case MOVE_SELECTED_SONG_UPPER_BUTTON:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_PIP_UP);
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.MOVE_SELECTED_SONG_UPPER_BUTTON, true, false);
                        break;
                    case POST_SELECTED_SONG_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, true, false);
                        _local4.data = {mosueEvent:_arg1};
                        break;
                };
                if (Boolean(_local4)){
                    dispatchEvent(_local4);
                };
            };
        }
        public function setFooterBackgroundSkin(_arg1:Class=null):void{
            base = new footer_button_list();
            base.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            base.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            (base as MovieClip).gotoAndStop(1);
            addChild(base);
        }
        public function drawFooterButtonList():void{
            var _local5:Sprite;
            checkBox_btn = new CheckBox();
            checkBox_btn.name = SELECT_ALL_SONG_BUTTON;
            checkBox_btn.move(7, 10);
            checkBox_btn.setSize(10, 10);
            checkBox_btn.setStyle("downIcon", checkBox_icon);
            checkBox_btn.setStyle("upIcon", checkBox_icon);
            checkBox_btn.setStyle("overIcon", checkBox_icon);
            checkBox_btn.setStyle("selectedDownIcon", selected_icon);
            checkBox_btn.setStyle("selectedOverIcon", selected_icon);
            checkBox_btn.setStyle("selectedUpIcon", selected_icon);
            checkBox_btn.addEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler, false, 0, true);
            checkBox_btn.label = "";
            base.addChild(checkBox_btn);
            var _local1:int = buttonList.length;
            var _local2:DisplayObject;
            var _local3:Point;
            var _local4 = 1;
            while (_local4 < _local1) {
                _local2 = (buttonList[_local4] as DisplayObject);
                if ((_local2 is MovieClip)){
                    (_local2 as MovieClip).gotoAndStop(1);
                };
                _local2.addEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                _local3 = vrulePositionArr[_local4];
                if (Boolean(_local3)){
                    _local5 = new Sprite();
                    _local5.graphics.lineStyle(1, vruleColor);
                    _local5.graphics.moveTo(0, 0);
                    _local5.graphics.lineTo(0, 10);
                    _local5.x = _local3.x;
                    _local5.y = _local3.y;
                    _local3 = null;
                };
                base.addChild(_local2);
                _local4++;
            };
        }
        public function removeAsset():void{
            if (Boolean(checkBox_btn)){
                base.removeChild(checkBox_btn);
                checkBox_btn.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                checkBox_btn = null;
            };
            if (Boolean(put_mp3_of_selected_song_in_cart_btn_instance)){
                base.removeChild(put_mp3_of_selected_song_in_cart_btn_instance);
                put_mp3_of_selected_song_in_cart_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                put_mp3_of_selected_song_in_cart_btn_instance = null;
            };
            if (Boolean(put_selected_song_in_album_btn_instance)){
                base.removeChild(put_selected_song_in_album_btn_instance);
                put_selected_song_in_album_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                put_selected_song_in_album_btn_instance = null;
            };
            if (Boolean(select_All_btn_instance)){
                select_All_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                select_All_btn_instance = null;
            };
            if (Boolean(remove_select_music_btn_instance)){
                base.removeChild(remove_select_music_btn_instance);
                remove_select_music_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                remove_select_music_btn_instance = null;
            };
            if (Boolean(select_down_btn_instance)){
                base.removeChild(select_down_btn_instance);
                select_down_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                select_down_btn_instance = null;
            };
            if (Boolean(select_up_btn_instance)){
                base.removeChild(select_up_btn_instance);
                select_up_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                select_up_btn_instance = null;
            };
            if (Boolean(do_posting_btn_instance)){
                base.removeChild(do_posting_btn_instance);
                do_posting_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                do_posting_btn_instance = null;
            };
            if (Boolean(vrule)){
                vrule = null;
            };
            if (Boolean(base)){
                removeChild(base);
                base.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
                base.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
                base = null;
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(0, 20);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case POST_SELECTED_SONG_BUTTON:
                        _local3.setText(NaverMusicPlayerProperty.SEND_TO_POSTING);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case MOVE_SELECTED_SONG_DOWNER_BUTTON:
                        _local3.setText(NaverMusicPlayerProperty.DOWNER_TEXT);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                    case MOVE_SELECTED_SONG_UPPER_BUTTON:
                        _local3.setText(NaverMusicPlayerProperty.UPPER_TEXT);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                };
            };
        }
        public function setFooterVerticalRuleAsset(_arg1:Class):void{
        }
        public function getFooterAssetFromLibrary():Array{
            var _local1:Array = new Array();
            select_All_btn_instance = new select_All_btn();
            select_All_btn_instance.name = NPodPlayListFooter.SELECT_ALL_SONG_BUTTON;
            _local1.push(select_All_btn_instance);
            remove_select_music_btn_instance = new remove_select_music_btn();
            remove_select_music_btn_instance.name = NPodPlayListFooter.REMOVE_SELECTED_SONG_BUTTON;
            _local1.push(remove_select_music_btn_instance);
            put_mp3_of_selected_song_in_cart_btn_instance = new put_mp3_of_selected_song_in_cart_btn();
            put_mp3_of_selected_song_in_cart_btn_instance.name = NPodPlayListFooter.PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON;
            _local1.push(put_mp3_of_selected_song_in_cart_btn_instance);
            put_selected_song_in_album_btn_instance = new put_selected_songs_in_album_btn();
            put_selected_song_in_album_btn_instance.name = NPodPlayListFooter.PUT_SELECTED_SONGS_IN_ALBUM_BUTTON;
            _local1.push(put_selected_song_in_album_btn_instance);
            select_down_btn_instance = new select_down_btn();
            select_down_btn_instance.name = NPodPlayListFooter.MOVE_SELECTED_SONG_DOWNER_BUTTON;
            _local1.push(select_down_btn_instance);
            select_up_btn_instance = new select_up_btn();
            select_up_btn_instance.name = NPodPlayListFooter.MOVE_SELECTED_SONG_UPPER_BUTTON;
            _local1.push(select_up_btn_instance);
            do_posting_btn_instance = new do_posting_btn();
            do_posting_btn_instance.name = NPodPlayListFooter.POST_SELECTED_SONG_BUTTON;
            _local1.push(do_posting_btn_instance);
            return (_local1);
        }
        public function updateCheckBox(_arg1:Boolean):void{
            checkBox_btn.selected = _arg1;
            checkBox_btn.drawNow();
        }
        private function checkBoxChangeHandler(_arg1:Event):void{
            var _local3:Boolean;
            var _local4:InternalUIHandlerEvent;
            var _local2:CheckBox = (_arg1.target as CheckBox);
            if (Boolean(_local2)){
                _local3 = _local2.selected;
                _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                _local4.data = {isAll:_local3};
                dispatchEvent(_local4);
            };
        }
        public function layoutButtonList():void{
            var _local1:int = buttonList.length;
            var _local2:DisplayObject;
            var _local3:Point;
            var _local4 = 1;
            while (_local4 < _local1) {
                _local2 = buttonList[_local4];
                _local2.x = buttonPositionArr[_local4].x;
                _local2.y = buttonPositionArr[_local4].y;
                _local3 = vrulePositionArr[_local4];
                if (Boolean(_local3)){
                };
                _local4++;
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            NClicks.sendLog(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function setFooterButtonList(_arg1:Array):void{
            buttonList = _arg1;
            if (Boolean(buttonList)){
                drawFooterButtonList();
                layoutButtonList();
            };
        }
        public function move(_arg1:Number, _arg2:Number):void{
            this.x = _arg1;
            this.y = _arg2;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import fl.controls.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NPodTop100ListFooter extends Sprite implements ILayoutFooterButtonList {

        public static const PUT_SELECTED_SONGS_IN_ALBUM_BUTTON:String = "TOP100_PUT_SELECTED_SONGS_IN_ALBUM_BUTTON";
        public static const SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON:String = "SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON";
        public static const PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON:String = "TOP100_PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON";
        public static const SELECT_ALL_SONG_BUTTON:String = "NPodTop100ListFooterSELECT_ALL_SONG_BUTTON";
        private static const vrulePositionArr:Array = [new Point(59, 10)];
        public static const FOOTER_NAME:String = "NPodTop100ListFooter";
        private static const buttonPositionArr:Array = [new Point(12, 9), new Point(29, 9), new Point(68, 9), new Point(112, 9), new Point(204, 9), new Point(247, 9)];
        public static const POST_SELECTED_SONG_BUTTON:String = "NPodTop100ListFooterPOST_SELECTED_SONG_BUTTON";

        private static var send_to_playlist_prototype:Class;
        private static var put_mp3_of_selected_song_in_cart_btn:Class;
        private static var vruleColor:int = 10921643;
        private static var select_All_btn:Class;
        private static var checkBox_icon:Class;
        private static var selected_icon:Class;
        private static var put_selected_songs_in_album_btn:Class;
        private static var footer_button_list:Class;
        private static var do_posting_btn:Class;

        private var checkBox_btn:CheckBox;
        private var put_selected_song_in_album_btn_instance;
        private var base;
        private var do_posting_btn_instance;
        private var put_mp3_of_selected_song_in_cart_btn_instance;
        private var buttonList:Array;
        private var vrule:Sprite;
        private var send_to_playlist_instance;
        private var select_All_btn_instance;

        public function NPodTop100ListFooter(){
            buttonList = new Array();
        }
        public static function updateStyle(_arg1):void{
            vruleColor = _arg1.FOOTER_VRULE_COLOR;
        }
        public static function updateAsset(_arg1):void{
            select_All_btn = _arg1.getDefinition("selectAll_btn");
            send_to_playlist_prototype = _arg1.getDefinition("sendtoPlaylist_btn");
            do_posting_btn = _arg1.getDefinition("doPosting_btn");
            footer_button_list = _arg1.getDefinition("footer_button_layer");
            checkBox_icon = _arg1.getDefinition("checkBox_icon");
            selected_icon = _arg1.getDefinition("selected_icon");
            put_selected_songs_in_album_btn = _arg1.getDefinition("putSelectedMusicInAlbum");
            put_mp3_of_selected_song_in_cart_btn = _arg1.getDefinition("putMp3OfSelectedMusicInCart");
        }

        private function playlistFooterButtonClickHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:NaverMusicPlayerBasicEvent;
            var _local5:CheckBox;
            var _local6:Boolean;
            var _local7:InternalUIHandlerEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                _local4 = null;
                switch (_local3){
                    case PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, false, false);
                        _local4.data = {mosueEvent:_arg1};
                        break;
                    case PUT_SELECTED_SONGS_IN_ALBUM_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, false, false);
                        _local4.data = {mouseEvent:_arg1};
                        break;
                    case SELECT_ALL_SONG_BUTTON:
                        _local5 = (_arg1.target as CheckBox);
                        if (Boolean(_local5)){
                            _local6 = !(_local5.selected);
                            _local7 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                            _local7.data = {
                                isAll:_local6,
                                mouseEvent:_arg1
                            };
                            dispatchEvent(_local7);
                        };
                        break;
                    case SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON, true, false);
                        _local4.data = {mosueEvent:_arg1};
                        break;
                    case POST_SELECTED_SONG_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, true, false);
                        break;
                };
                if (Boolean(_local4)){
                    dispatchEvent(_local4);
                };
            };
        }
        public function setFooterBackgroundSkin(_arg1:Class=null):void{
            base = new footer_button_list();
            base.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            base.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            (base as MovieClip).gotoAndStop(2);
            addChild(base);
        }
        public function updateCheckBox(_arg1:Boolean):void{
            checkBox_btn.selected = _arg1;
            checkBox_btn.drawNow();
        }
        public function drawFooterButtonList():void{
            var _local4:int;
            checkBox_btn = new CheckBox();
            checkBox_btn.name = SELECT_ALL_SONG_BUTTON;
            checkBox_btn.move(7, 10);
            checkBox_btn.setSize(10, 10);
            checkBox_btn.setStyle("downIcon", checkBox_icon);
            checkBox_btn.setStyle("upIcon", checkBox_icon);
            checkBox_btn.setStyle("overIcon", checkBox_icon);
            checkBox_btn.setStyle("selectedDownIcon", selected_icon);
            checkBox_btn.setStyle("selectedOverIcon", selected_icon);
            checkBox_btn.setStyle("selectedUpIcon", selected_icon);
            checkBox_btn.addEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
            checkBox_btn.label = "";
            base.addChild(checkBox_btn);
            var _local1:int = buttonList.length;
            var _local2:DisplayObject;
            var _local3:Point;
            _local4 = 1;
            while (_local4 < _local1) {
                _local2 = (buttonList[_local4] as DisplayObject);
                if ((_local2 is MovieClip)){
                    (_local2 as MovieClip).gotoAndStop(1);
                };
                _local2.addEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                _local2.x = buttonPositionArr[_local4].x;
                _local2.y = buttonPositionArr[_local4].y;
                _local3 = vrulePositionArr[_local4];
                if (Boolean(_local3)){
                    vrule = new Sprite();
                    vrule.graphics.lineStyle(1, vruleColor);
                    vrule.graphics.moveTo(0, 0);
                    vrule.graphics.lineTo(0, 10);
                    vrule.x = _local3.x;
                    vrule.y = _local3.y;
                    _local3 = null;
                };
                base.addChild(_local2);
                _local4++;
            };
        }
        private function checkBoxChangeHandler(_arg1:Event):void{
            var _local3:Boolean;
            var _local4:InternalUIHandlerEvent;
            var _local2:CheckBox = (_arg1.target as CheckBox);
            if (Boolean(_local2)){
                _local3 = _local2.selected;
                _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                _local4.data = {isAll:_local3};
                dispatchEvent(_local4);
            };
        }
        public function removeAsset():void{
            if (Boolean(checkBox_btn)){
                base.removeChild(checkBox_btn);
                checkBox_btn.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                checkBox_btn = null;
            };
            if (Boolean(put_mp3_of_selected_song_in_cart_btn_instance)){
                base.removeChild(put_mp3_of_selected_song_in_cart_btn_instance);
                put_mp3_of_selected_song_in_cart_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                put_mp3_of_selected_song_in_cart_btn_instance = null;
            };
            if (Boolean(put_selected_song_in_album_btn_instance)){
                base.removeChild(put_selected_song_in_album_btn_instance);
                put_selected_song_in_album_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                put_selected_song_in_album_btn_instance = null;
            };
            if (Boolean(select_All_btn_instance)){
                select_All_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                select_All_btn_instance = null;
            };
            if (Boolean(send_to_playlist_instance)){
                base.removeChild(send_to_playlist_instance);
                send_to_playlist_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                send_to_playlist_instance = null;
            };
            if (Boolean(do_posting_btn_instance)){
                base.removeChild(do_posting_btn_instance);
                do_posting_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                do_posting_btn_instance = null;
            };
            if (Boolean(vrule)){
                vrule = null;
            };
            if (Boolean(base)){
                removeChild(base);
                base.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
                base.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
                base = null;
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(0, 20);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case POST_SELECTED_SONG_BUTTON:
                        _local3.setText(NaverMusicPlayerProperty.SEND_TO_POSTING);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                };
            };
        }
        public function setFooterVerticalRuleAsset(_arg1:Class):void{
            vrule = new Sprite();
            vrule.graphics.lineStyle(1, vruleColor);
            vrule.graphics.moveTo(0, 0);
            vrule.graphics.lineTo(0, 10);
            addChild(vrule);
        }
        public function setFooterButtonList(_arg1:Array):void{
            buttonList = _arg1;
            if (Boolean(buttonList)){
                drawFooterButtonList();
            };
        }
        public function layoutButtonList():void{
        }
        public function getTop100ListFooterAssetFromLibrary():Array{
            var _local1:Array = new Array();
            select_All_btn_instance = new select_All_btn();
            select_All_btn_instance.name = NPodTop100ListFooter.SELECT_ALL_SONG_BUTTON;
            _local1.push(select_All_btn_instance);
            send_to_playlist_instance = new send_to_playlist_prototype();
            send_to_playlist_instance.name = NPodTop100ListFooter.SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON;
            _local1.push(send_to_playlist_instance);
            if (put_mp3_of_selected_song_in_cart_btn){
                put_mp3_of_selected_song_in_cart_btn_instance = new put_mp3_of_selected_song_in_cart_btn();
                put_mp3_of_selected_song_in_cart_btn_instance.name = PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON;
                _local1.push(put_mp3_of_selected_song_in_cart_btn_instance);
            };
            if (put_selected_songs_in_album_btn){
                put_selected_song_in_album_btn_instance = new put_selected_songs_in_album_btn();
                put_selected_song_in_album_btn_instance.name = PUT_SELECTED_SONGS_IN_ALBUM_BUTTON;
                _local1.push(put_selected_song_in_album_btn_instance);
            };
            do_posting_btn_instance = new do_posting_btn();
            do_posting_btn_instance.name = NPodTop100ListFooter.POST_SELECTED_SONG_BUTTON;
            _local1.push(do_posting_btn_instance);
            return (_local1);
        }
        public function move(_arg1:Number, _arg2:Number):void{
            this.x = _arg1;
            this.y = _arg2;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.nclicks.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NaverBasicPostingPromotionGuide extends Sprite {

        private static const CHALLENGE_DJ_CONTEST:String = "challenge_dj_yes_btn";
        private static const GET_FREE_DAILY_TICKET:String = "support_daily_free_btn";
        private static const PROMOTION_PANEL:String = "promotion_panel";

        private static var baseContainer;

        private var base;

        public static function updateAsset(_arg1):void{
            baseContainer = _arg1.getDefinition(PROMOTION_PANEL);
        }

        private function mouseDownHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:MusicPlayerPromotionEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case GET_FREE_DAILY_TICKET:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PROMOTION_BOTTOM_BANNER_BLOG_DJ_EVENT);
                        _local4 = new MusicPlayerPromotionEvent(MusicPlayerPromotionEvent.BLOG_DJ_EVENT, true);
                        break;
                    case CHALLENGE_DJ_CONTEST:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PROMOTION_BOTTOM_BANNER_BLOG_DJ);
                        _local4 = new MusicPlayerPromotionEvent(MusicPlayerPromotionEvent.BLOG_DJ_CHALLENGE, true);
                        break;
                };
                if (Boolean(_local4)){
                    dispatchEvent(_local4);
                };
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            var e:* = _arg1;
            var area:String = _arg2;
            var cid:String = _arg3;
            var rank:int = _arg4;
            var linkURL:String = _arg5;
            try {
                NClicks.sendLog(e, area, cid, rank, linkURL);
            } catch(error:Error) {
            };
        }
        public function createChildren():void{
            base = new baseContainer();
            addChild(base);
            base.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NaverBasicPostingPlayerGuideFooter extends NaverBasicPlayerGuideFooter {

        public static const NOT_LOGIN_USER_GUIDE_FOOTER:String = "NOT_LOGIN_USER_GUIDE_FOOTER";
        public static const LOG_OUT_BUTTON:String = "LOG_OUT_BUTTON";
        public static const PAID_USER_GUIDE_FOOTER:String = "PAID_USER_GUIDE_FOOTER";
        public static const NOT_PAID_USER_GUIDE_FOOTER:String = "NOT_PAID_USER_GUIDE_FOOTER";
        public static const LOG_IN_BUTTON:String = "LOG_IN_BUTTON";
        public static const POST_SELECTED_SONG_BUTTON:String = "POST_SELECTED_SONG_BUTTON";

        public static var postingMenu:Class;
        private static var _overedHelpTextColor:int = 0x333333;
        public static var vruleColor:int = 15264233;
        private static var guide_base_prototype:Class;
        private static var _defaultUnderlineColor:int = 12895686;
        private static var _bgColor:int = 16251128;
        private static var _helpTextColor:int = 0x666666;
        private static var _overedUnderlineColor:int = 12895686;
        private static var _guideTextColor:int = 0x9A9A9A;

        private var postin_instance;

        public function NaverBasicPostingPlayerGuideFooter(){
            createBase();
            createBaseRect();
            createAllResource();
            createButtonInstance();
        }
        public static function get helpTextColor():int{
            return (_helpTextColor);
        }
        public static function get overedHelpTextColor():int{
            return (_overedHelpTextColor);
        }
        public static function set overedHelpTextColor(_arg1:int):void{
        }
        public static function get defaultUnderlineColor():int{
            return (_defaultUnderlineColor);
        }
        public static function get guideTextColor():int{
            return (_guideTextColor);
        }
        public static function set overedUnderlineColor(_arg1:int):void{
        }
        public static function get bgColor():int{
            return (_bgColor);
        }
        public static function updateAsset(_arg1):void{
            postingMenu = _arg1.getDefinition("doPosting_btn");
            guide_base_prototype = _arg1.getDefinition("guideTextPanel");
        }
        public static function updateStyle(_arg1):void{
            vruleColor = _arg1.GUIDE_FOOTER_VRULE_COLOR;
            _bgColor = _arg1.GUIDE_FOOTER_BG_COLOR;
            _defaultUnderlineColor = _arg1.GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR;
            _guideTextColor = _arg1.GUIDE_FOOTER_GUIDE_TEXT_COLOR;
            _helpTextColor = _arg1.GUIDE_FOOTER_HELP_TEXT_COLOR;
            _overedHelpTextColor = _arg1.GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR;
            _overedUnderlineColor = _arg1.GUIDE_FOOTER_OVERED_UNDERLINE_COLOR;
        }
        public static function set helpTextColor(_arg1:int):void{
        }
        public static function get overedUnderlineColor():int{
            return (_overedUnderlineColor);
        }
        public static function set defaultUnderlineColor(_arg1:int):void{
        }
        public static function set guideTextColor(_arg1:int):void{
        }
        public static function set bgColor(_arg1:int):void{
        }

        override public function drawPaidUserGuide():void{
            guide_base.guide_text_line.visible = true;
            guide_base.purchase_small_mp3_guide_text.visible = true;
            guide_base.purchase_small_guide_text.visible = false;
            (guide_base.guide_text_line as MovieClip).gotoAndStop(3);
            guide_base.guide_text_line.x = 52.5;
            guide_base.purchase_small_mp3_guide_text.x = 200.5;
            guide_base.purchase_small_mp3_guide_text.y = 9;
        }
        override public function createAllResource():void{
            postin_instance = new postingMenu();
            postin_instance.name = POST_SELECTED_SONG_BUTTON;
            postin_instance.x = 271;
            postin_instance.y = 8;
            postin_instance.addEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
            postin_instance.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            postin_instance.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
        }
        override public function createButtonInstance():void{
        }
        private function playlistFooterButtonClickHandler(_arg1:MouseEvent):void{
            var _local3:NaverMusicPlayerBasicEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, true, false);
                dispatchEvent(_local3);
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        override public function removeAsset():void{
            if (postin_instance){
                postin_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                postin_instance.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
                postin_instance.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
                postin_instance = null;
            };
            if (guide_base){
                removeChild(guide_base);
                guide_base = null;
            };
            super.removeAsset();
        }
        override protected function createBase():void{
            guide_base = new guide_base_prototype();
            if (guide_base.guide_text_line){
                (guide_base.guide_text_line as MovieClip).gotoAndStop(1);
            };
            addChild(guide_base);
        }
        override public function drawNonLoginUserGuide():void{
            guide_base.guide_text_line.visible = true;
            guide_base.purchase_small_mp3_guide_text.visible = false;
            guide_base.purchase_small_guide_text.visible = true;
            (guide_base.guide_text_line as MovieClip).gotoAndStop(1);
            guide_base.guide_text_line.x = 54.5;
        }
        override public function drawDefaultUserGuide():void{
            guide_base.guide_text_line.visible = true;
            guide_base.purchase_small_mp3_guide_text.visible = false;
            guide_base.purchase_small_guide_text.visible = true;
            (guide_base.guide_text_line as MovieClip).gotoAndStop(2);
            guide_base.guide_text_line.x = 54.5;
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(-300, -15);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case POST_SELECTED_SONG_BUTTON:
                        _local3.setText(NaverMusicPlayerProperty.SEND_ALL_TO_POSTING);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                };
            };
        }
        override public function showPropertGuideView(_arg1:UserInfo):void{
            if (!_arg1){
                return;
            };
            if (_arg1.isLogin === UserInfo.IS_LOGIN){
                if (_arg1.hasTicket === UserInfo.HAS_TICKET){
                    drawPaidUserGuide();
                } else {
                    if (_arg1.hasTicket === UserInfo.DOES_NOT_HAVE_TICKET){
                        drawDefaultUserGuide();
                    };
                };
            } else {
                if (_arg1.isLogin === UserInfo.IS_NOT_LOGIN){
                    drawNonLoginUserGuide();
                };
            };
        }
        override public function drawPropertGuide(_arg1:String):void{
            switch (_arg1){
                case PAID_USER_GUIDE_FOOTER:
                    drawPaidUserGuide();
                    break;
                case NOT_LOGIN_USER_GUIDE_FOOTER:
                    drawNonLoginUserGuide();
                    break;
                case NOT_PAID_USER_GUIDE_FOOTER:
                    drawDefaultUserGuide();
                    break;
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import flash.text.*;
    import com.nhn.nclicks.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NaverBasicPlayerGuideFooter extends Sprite {

        public static const NOT_LOGIN_USER_GUIDE_FOOTER:String = "NOT_LOGIN_USER_GUIDE_FOOTER";
        public static const LOG_OUT_BUTTON:String = "LOG_OUT_BUTTON";
        public static const PAID_USER_GUIDE_FOOTER:String = "PAID_USER_GUIDE_FOOTER";
        public static const NOT_PAID_USER_GUIDE_FOOTER:String = "NOT_PAID_USER_GUIDE_FOOTER";
        public static const LOG_IN_BUTTON:String = "LOG_IN_BUTTON";

        private static var logout_btn_prototype:Class;
        private static var _overedUnderlineColor:int = 12895686;
        public static var vruleColor:int = 15264233;
        private static var guide_base_prototype:Class;
        private static var _defaultUnderlineColor:int = 12895686;
        private static var _overedHelpTextColor:int = 0x333333;
        private static var _bgColor:int = 16251128;
        private static var login_btn_prototype:Class;
        private static var _helpTextColor:int = 0x666666;
        private static var _guideTextColor:int = 0x9A9A9A;

        protected var linkBase:Sprite;
        protected var _helpUnderline:Sprite;
        protected var _helpTextField:TextField;
        protected var _guideTextField:TextField;
        protected var _mp3TextField:TextField;
        protected var _ticketTextField:TextField;
        private var logout_btn_instance:DisplayObject;
        private var login_btn_instance:DisplayObject;
        protected var vrule:Sprite;
        protected var _linkUnderline:Sprite;
        protected var guide_base;
        protected var helpBase:Sprite;
        protected var linkTextField:TextField;

        public function NaverBasicPlayerGuideFooter(){
            createBase();
            createBaseRect();
            createAllResource();
            createButtonInstance();
        }
        public static function get overedHelpTextColor():int{
            return (_overedHelpTextColor);
        }
        public static function set overedHelpTextColor(_arg1:int):void{
        }
        public static function get defaultUnderlineColor():int{
            return (_defaultUnderlineColor);
        }
        public static function get guideTextColor():int{
            return (_guideTextColor);
        }
        public static function get bgColor():int{
            return (_bgColor);
        }
        public static function set overedUnderlineColor(_arg1:int):void{
        }
        public static function updateAsset(_arg1):void{
            login_btn_prototype = _arg1.getDefinition("login_btn");
            logout_btn_prototype = _arg1.getDefinition("logout_btn");
            guide_base_prototype = _arg1.getDefinition("guideTextPanel");
        }
        public static function updateStyle(_arg1):void{
            vruleColor = _arg1.GUIDE_FOOTER_VRULE_COLOR;
            _bgColor = _arg1.GUIDE_FOOTER_BG_COLOR;
            _defaultUnderlineColor = _arg1.GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR;
            _guideTextColor = _arg1.GUIDE_FOOTER_GUIDE_TEXT_COLOR;
            _helpTextColor = _arg1.GUIDE_FOOTER_HELP_TEXT_COLOR;
            _overedHelpTextColor = _arg1.GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR;
            _overedUnderlineColor = _arg1.GUIDE_FOOTER_OVERED_UNDERLINE_COLOR;
        }
        public static function set helpTextColor(_arg1:int):void{
        }
        public static function set defaultUnderlineColor(_arg1:int):void{
        }
        public static function set guideTextColor(_arg1:int):void{
        }
        public static function get helpTextColor():int{
            return (_helpTextColor);
        }
        public static function get overedUnderlineColor():int{
            return (_overedUnderlineColor);
        }
        public static function set bgColor(_arg1:int):void{
        }

        protected function helpTextMouseClickHandler(_arg1:MouseEvent):void{
            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_HELP, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_HELP_CID);
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_PLAYER_HELP, true);
            dispatchEvent(_local2);
        }
        public function createButtonInstance():void{
            login_btn_instance = new login_btn_prototype();
            login_btn_instance.name = LOG_IN_BUTTON;
            login_btn_instance.addEventListener(MouseEvent.CLICK, logInOutButtonHandler);
            login_btn_instance.x = 280;
            login_btn_instance.y = 4;
            login_btn_instance.visible = false;
            addChild(login_btn_instance);
            logout_btn_instance = new logout_btn_prototype();
            logout_btn_instance.name = LOG_OUT_BUTTON;
            logout_btn_instance.addEventListener(MouseEvent.CLICK, logInOutButtonHandler);
            logout_btn_instance.x = 280;
            logout_btn_instance.y = 4;
            logout_btn_instance.visible = false;
            addChild(logout_btn_instance);
        }
        public function createAllResource():void{
        }
        public function drawNonLoginUserGuide():void{
            guide_base.guide_text_line.visible = true;
            login_btn_instance.visible = true;
            logout_btn_instance.visible = false;
            guide_base.purchase_small_mp3_guide_text.visible = false;
            guide_base.purchase_small_guide_text.visible = true;
            (guide_base.guide_text_line as MovieClip).gotoAndStop(1);
        }
        public function removeAsset():void{
            if (guide_base){
                guide_base.purchase_small_mp3_guide_text.removeEventListener(MouseEvent.CLICK, mp3TextFieldMouseClickHandler);
                guide_base.purchase_small_guide_text.removeEventListener(MouseEvent.CLICK, ticketMouseClickHandler);
                guide_base.help_guide_text.removeEventListener(MouseEvent.CLICK, helpTextMouseClickHandler);
                removeChild(guide_base);
                guide_base = null;
            };
            if (login_btn_instance){
                removeChild(login_btn_instance);
                login_btn_instance.removeEventListener(MouseEvent.CLICK, logInOutButtonHandler);
                login_btn_instance = null;
            };
            if (logout_btn_instance){
                removeChild(logout_btn_instance);
                logout_btn_instance.removeEventListener(MouseEvent.CLICK, logInOutButtonHandler);
                logout_btn_instance = null;
            };
        }
        public function drawDefaultUserGuide():void{
            guide_base.guide_text_line.visible = true;
            login_btn_instance.visible = false;
            logout_btn_instance.visible = true;
            guide_base.purchase_small_mp3_guide_text.visible = false;
            guide_base.purchase_small_guide_text.visible = true;
            (guide_base.guide_text_line as MovieClip).gotoAndStop(2);
        }
        protected function logInOutButtonHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:NaverMusicPlayerBasicEvent;
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case LOG_IN_BUTTON:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_LOGIN, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_LOGIN_CID);
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_LOG_IN, true);
                        break;
                    case LOG_OUT_BUTTON:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_LOGOUT, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_LOGOUT_CID);
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_LOG_OUT, true);
                        break;
                };
                if (Boolean(_local4)){
                    dispatchEvent(_local4);
                };
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            NClicks.sendLog(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function showPropertGuideView(_arg1:UserInfo):void{
            if (!Boolean(_arg1)){
                return;
            };
            if (_arg1.isLogin === UserInfo.IS_LOGIN){
                if (_arg1.hasTicket === UserInfo.HAS_TICKET){
                    drawPaidUserGuide();
                } else {
                    if (_arg1.hasTicket === UserInfo.DOES_NOT_HAVE_TICKET){
                        drawDefaultUserGuide();
                    };
                };
            } else {
                if (_arg1.isLogin === UserInfo.IS_NOT_LOGIN){
                    drawNonLoginUserGuide();
                };
            };
        }
        protected function mp3TextFieldMouseClickHandler(_arg1:MouseEvent):void{
            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_BUY, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_BUY_CID);
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, true);
            dispatchEvent(_local2);
        }
        public function drawPaidUserGuide():void{
            guide_base.guide_text_line.visible = true;
            login_btn_instance.visible = false;
            logout_btn_instance.visible = true;
            guide_base.purchase_small_mp3_guide_text.visible = true;
            guide_base.purchase_small_guide_text.visible = false;
            (guide_base.guide_text_line as MovieClip).gotoAndStop(3);
        }
        protected function createBaseRect():void{
            guide_base.help_guide_text.addEventListener(MouseEvent.CLICK, helpTextMouseClickHandler);
            guide_base.purchase_small_mp3_guide_text.addEventListener(MouseEvent.CLICK, mp3TextFieldMouseClickHandler);
            guide_base.purchase_small_guide_text.addEventListener(MouseEvent.CLICK, ticketMouseClickHandler);
            guide_base.purchase_small_mp3_guide_text.visible = false;
            guide_base.purchase_small_guide_text.visible = false;
            guide_base.guide_text_line.visible = false;
        }
        protected function ticketMouseClickHandler(_arg1:MouseEvent):void{
            callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_BUY, NClickPropertyForMusicPlayer.MUSIC_PLAYER_FOT_BUY_CID);
            ControlSettingManager.getInstance().noneInteractionCheckHandler(true);
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, true);
            dispatchEvent(_local2);
        }
        protected function createBase():void{
            guide_base = new guide_base_prototype();
            addChild(guide_base);
        }
        public function drawPropertGuide(_arg1:String):void{
            switch (_arg1){
                case PAID_USER_GUIDE_FOOTER:
                    drawPaidUserGuide();
                    break;
                case NOT_LOGIN_USER_GUIDE_FOOTER:
                    drawNonLoginUserGuide();
                    break;
                case NOT_PAID_USER_GUIDE_FOOTER:
                    drawDefaultUserGuide();
                    break;
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel {
    import flash.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.geom.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.customComponent.tooltips.*;
    import fl.controls.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NPodPostingPlayerFooter extends Sprite implements ILayoutFooterButtonList {

        public static const PUT_SELECTED_SONGS_IN_ALBUM_BUTTON:String = "TOP100_PUT_SELECTED_SONGS_IN_ALBUM_BUTTON";
        public static const SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON:String = "SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON";
        public static const PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON:String = "TOP100_PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON";
        public static const SELECT_ALL_SONG_BUTTON:String = "NPodTop100ListFooterSELECT_ALL_SONG_BUTTON";
        private static const vrulePositionArr:Array = [new Point(59, 10)];
        public static const FOOTER_NAME:String = "NPodTop100ListFooter";
        private static const buttonPositionArr:Array = [new Point(28, 9), new Point(73, 9), new Point(258, 9)];
        public static const POST_SELECTED_SONG_BUTTON:String = "NPodTop100ListFooterPOST_SELECTED_SONG_BUTTON";

        private static var send_to_playlist_prototype:Class;
        private static var put_mp3_of_selected_song_in_cart_btn:Class;
        private static var vruleColor:int = 10921643;
        private static var select_All_btn:Class;
        private static var checkBox_icon:Class;
        private static var selected_icon:Class;
        private static var put_selected_songs_in_album_btn:Class;
        private static var footer_button_list:Class;
        private static var do_posting_btn:Class;

        private var checkBox_btn:CheckBox;
        private var put_selected_song_in_album_btn_instance;
        private var base;
        private var do_posting_btn_instance;
        private var put_mp3_of_selected_song_in_cart_btn_instance;
        private var buttonList:Array;
        private var vrule:Sprite;
        private var send_to_playlist_instance;
        private var select_All_btn_instance;

        public function NPodPostingPlayerFooter(){
            buttonList = new Array();
        }
        public static function updateStyle(_arg1):void{
            vruleColor = _arg1.FOOTER_VRULE_COLOR;
        }
        public static function updateAsset(_arg1):void{
            do_posting_btn = _arg1.getDefinition("doPosting_btn");
            footer_button_list = _arg1.getDefinition("footer_button_layer");
            checkBox_icon = _arg1.getDefinition("checkBox_icon");
            selected_icon = _arg1.getDefinition("selected_icon");
            put_selected_songs_in_album_btn = _arg1.getDefinition("putSelectedMusicInAlbum");
            put_mp3_of_selected_song_in_cart_btn = _arg1.getDefinition("putMp3OfSelectedMusicInCart");
        }

        private function playlistFooterButtonClickHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:NaverMusicPlayerBasicEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                _local4 = null;
                switch (_local3){
                    case PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, false, false);
                        break;
                    case PUT_SELECTED_SONGS_IN_ALBUM_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, false, false);
                        _local4.data = {mouseEvent:_arg1};
                        break;
                    case SELECT_ALL_SONG_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SELECT_ALL_SONG_BUTTON, true, false);
                        break;
                    case SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON, true, false);
                        break;
                    case POST_SELECTED_SONG_BUTTON:
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, false, false);
                        break;
                };
                if (Boolean(_local4)){
                    dispatchEvent(_local4);
                };
            };
        }
        public function setFooterBackgroundSkin(_arg1:Class=null):void{
            base = new footer_button_list();
            base.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
            base.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
            (base as MovieClip).gotoAndStop(2);
            addChild(base);
        }
        public function updateCheckBox(_arg1:Boolean):void{
            checkBox_btn.selected = _arg1;
            checkBox_btn.drawNow();
        }
        public function drawFooterButtonList():void{
            checkBox_btn = new CheckBox();
            checkBox_btn.move(7, 10);
            checkBox_btn.setSize(10, 10);
            checkBox_btn.setStyle("downIcon", checkBox_icon);
            checkBox_btn.setStyle("upIcon", checkBox_icon);
            checkBox_btn.setStyle("overIcon", checkBox_icon);
            checkBox_btn.setStyle("selectedDownIcon", selected_icon);
            checkBox_btn.setStyle("selectedOverIcon", selected_icon);
            checkBox_btn.setStyle("selectedUpIcon", selected_icon);
            checkBox_btn.addEventListener(Event.CHANGE, checkBoxChangeHandler, false, 0, true);
            checkBox_btn.label = "";
            base.addChild(checkBox_btn);
            var _local1:int = buttonList.length;
            var _local2:DisplayObject;
            var _local3:Point;
            var _local4:int;
            while (_local4 < _local1) {
                _local2 = (buttonList[_local4] as DisplayObject);
                if ((_local2 is MovieClip)){
                    (_local2 as MovieClip).gotoAndStop(1);
                };
                _local2.addEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                _local2.x = buttonPositionArr[_local4].x;
                _local2.y = buttonPositionArr[_local4].y;
                _local3 = vrulePositionArr[_local4];
                if (Boolean(_local3)){
                    vrule = new Sprite();
                    vrule.graphics.lineStyle(1, vruleColor);
                    vrule.graphics.moveTo(0, 0);
                    vrule.graphics.lineTo(0, 10);
                    vrule.x = _local3.x;
                    vrule.y = _local3.y;
                    _local3 = null;
                };
                base.addChild(_local2);
                _local4++;
            };
        }
        private function checkBoxChangeHandler(_arg1:Event):void{
            var _local3:Boolean;
            var _local4:InternalUIHandlerEvent;
            var _local2:CheckBox = (_arg1.target as CheckBox);
            if (Boolean(_local2)){
                _local3 = _local2.selected;
                _local4 = new InternalUIHandlerEvent(InternalUIHandlerEvent.IS_SELECTED_ALL);
                _local4.data = {isAll:_local3};
                dispatchEvent(_local4);
            };
        }
        public function removeAsset():void{
            if (Boolean(checkBox_btn)){
                base.removeChild(checkBox_btn);
                checkBox_btn.removeEventListener(Event.CHANGE, checkBoxChangeHandler);
                checkBox_btn = null;
            };
            if (Boolean(put_mp3_of_selected_song_in_cart_btn_instance)){
                base.removeChild(put_mp3_of_selected_song_in_cart_btn_instance);
                put_mp3_of_selected_song_in_cart_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                put_mp3_of_selected_song_in_cart_btn_instance = null;
            };
            if (Boolean(put_selected_song_in_album_btn_instance)){
                base.removeChild(put_selected_song_in_album_btn_instance);
                put_selected_song_in_album_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                put_selected_song_in_album_btn_instance = null;
            };
            if (Boolean(select_All_btn_instance)){
                select_All_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                select_All_btn_instance = null;
            };
            if (Boolean(send_to_playlist_instance)){
                base.removeChild(send_to_playlist_instance);
                send_to_playlist_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                send_to_playlist_instance = null;
            };
            if (Boolean(do_posting_btn_instance)){
                base.removeChild(do_posting_btn_instance);
                do_posting_btn_instance.removeEventListener(MouseEvent.CLICK, playlistFooterButtonClickHandler);
                do_posting_btn_instance = null;
            };
            if (Boolean(vrule)){
                vrule = null;
            };
            if (Boolean(base)){
                removeChild(base);
                base.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
                base.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
                base = null;
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            var _local2:TooltipManager = TooltipManager.getInstance();
            _local2.hide();
        }
        private function overHandler(_arg1:MouseEvent):void{
            var _local3:TooltipManager;
            var _local4:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = TooltipManager.getInstance();
                _local3.setOffsetPoint(0, 20);
                _local3.fadeInDuration = 0.4;
                _local4 = _local2.name;
                switch (_local4){
                    case POST_SELECTED_SONG_BUTTON:
                        _local3.setText(NaverMusicPlayerProperty.SEND_ALL_TO_POSTING);
                        _local3.setHorizontalAlign(HorizontalAlignment.RIGHT);
                        _local3.setVerticalAlign(VerticalAlignment.BOTTOM);
                        _local3.show();
                        break;
                };
            };
        }
        public function setFooterVerticalRuleAsset(_arg1:Class):void{
            vrule = new Sprite();
            vrule.graphics.lineStyle(1, vruleColor);
            vrule.graphics.moveTo(0, 0);
            vrule.graphics.lineTo(0, 10);
            addChild(vrule);
        }
        public function setFooterButtonList(_arg1:Array):void{
            buttonList = _arg1;
            if (Boolean(buttonList)){
                drawFooterButtonList();
            };
        }
        public function layoutButtonList():void{
        }
        public function getTop100ListFooterAssetFromLibrary():Array{
            var _local1:Array = new Array();
            if (put_mp3_of_selected_song_in_cart_btn){
                put_mp3_of_selected_song_in_cart_btn_instance = new put_mp3_of_selected_song_in_cart_btn();
                put_mp3_of_selected_song_in_cart_btn_instance.name = PUT_MP3_OF_SELECTED_SONGS_IN_CART_BUTTON;
                _local1.push(put_mp3_of_selected_song_in_cart_btn_instance);
            };
            if (put_selected_songs_in_album_btn){
                put_selected_song_in_album_btn_instance = new put_selected_songs_in_album_btn();
                put_selected_song_in_album_btn_instance.name = PUT_SELECTED_SONGS_IN_ALBUM_BUTTON;
                _local1.push(put_selected_song_in_album_btn_instance);
            };
            do_posting_btn_instance = new do_posting_btn();
            do_posting_btn_instance.name = NPodTop100ListFooter.POST_SELECTED_SONG_BUTTON;
            _local1.push(do_posting_btn_instance);
            return (_local1);
        }
        public function move(_arg1:Number, _arg2:Number):void{
            this.x = _arg1;
            this.y = _arg2;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent {

    public class NaverMusicPlayerProperty {

        public static const NPOD_NOT_LOGIN_USER_NOTI:String = ("  비로그인 이용자는 1분\n" + "  듣기제공");
        public static const TICKET_NOTI_ALERT:String = "이용권 구매";
        public static const NPOD_UNPAID_USER_NOTI:String = ("  이용권 구매 후 전곡을\n" + "  즐기세요");
        public static const EMPTY_ARTIST_ALERT:String = "듣고 싶은 곡을 추가해보세요.";
        public static const NONE_LYRICS:String = "이 곡은 등록된 가사가 없습니다.";
        public static const EMPTY_PLAYLIST_ALERT:String = "재생할 곡이 없습니다.";
        public static const EMPTY_LIST:String = ("     재생할 곡이 없습니다.\n" + "듣고 싶은 곡을 추가해보세요.");
        public static const EMPTY_LYRICS_STATE:String = "재생 중인 곡이 없습니다.";
        public static const CONFIG_TOOL_TIP_TEXT:String = "곡 추가 위치 설정";

        public static var PREV_TEXT:String = "이전곡";
        public static var COLOR_SELECT_TEXT:String = "설정변경";
        public static var UPPER_TEXT:String = "위로";
        public static var REPEAT_NONE:String = "반복듣기 해제";
        public static var REPEAT_ALL:String = "전곡 반복듣기";
        public static var TOP_100_DAY:String = "2009.11.29";
        public static var REPEAT_ONE:String = "1곡 반복듣기";
        public static var DOWNER_TEXT:String = "아래로";
        public static var RANDOME_PLAY:String = "랜덤재생";
        public static var SEQUENCE_PLAY:String = "순차재생";
        public static var SEND_ALL_TO_POSTING:String = "전체 리스트를 블로그/카페로 담아갈 수 있습니다.";
        public static var SEND_TO_POSTING:String = "선택한 곡을 블로그/카페로 담아갈 수 있습니다.";
        public static var NEXT_TEXT:String = "다음곡";

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent {

    public class NClickPropertyForMusicPlayer {

        public static const MUSIC_PLAYER_FOT_LOGOUT:String = "fot.logout";
        public static const MUSIC_PLAYER_LPA_ALBUM_MP3_PURCHASE:String = "lpa.mp3";
        public static const MUSIC_PROMOTION_BOTTOM_BANNER_BLOG_DJ:String = "ban.blogdj";
        public static const MUSIC_PLAYER_PIP_ALBUM_CID:String = "";
        public static const MUSIC_PLAYER_PLT_BLOG:String = "plt.blog";
        public static const MUSIC_PLAYER_FOT_BUY:String = "fot.buy";
        public static const MUSIC_PLAYER_LPA_SHUFFLE:String = "lpa.random";
        public static const MUSIC_PLAYER_PLT_CAFE:String = "plt.cafe";
        public static const MUSIC_PLAYER_FOT_HELP_CID:String = "";
        public static const MUSIC_PLAYER_PIP_CHECK_CID:String = "";
        public static const MUSIC_PLAYER_LPA_FORWARD_CID:String = "";
        public static const MUSIC_PLAYER_TPS_LYRICS_CID:String = "";
        public static const MUSIC_PLAYER_PLT_TRACK:String = "plt.track";
        public static const MUSIC_PLAYER_PIP_MP3_CID:String = "";
        public static const MUSIC_PLAYER_TPS_PLAYLIST:String = "tps.playlist";
        public static const MUSIC_PLAYER_PLT_ALBUM_CID:String = "";
        public static const MUSIC_PLAYER_PLT_MP3:String = "plt.buymp3";
        public static const MUSIC_PROMOTION_FLOATING_POPUP_BLOG_DJ_EVENT:String = "pop.scrap";
        public static const MUSIC_PLAYER_FOT_LOGIN_CID:String = "";
        public static const MUSIC_PLAYER_PIP_CHECK:String = "plp.check";
        public static const MUSIC_PLAYER_LPA_REPEAT:String = "lpa.repeat";
        public static const MUSIC_PLAYER_PIP_MP3:String = "plp.buymp3";
        public static const MUSIC_PLAYER_TPS_LYRICS:String = "tps.lyrics";
        public static const MUSIC_PROMOTION_FLOATING_POPUP:String = "pop";
        public static const MUSIC_PLAYER_LPA_PAUSE_CID:String = "";
        public static const MUSIC_PROMOTION_FLOATING_POPUP_FREE_TICKET:String = "pop.1dayticket";
        public static const MUSIC_PROMOTION_BOTTOM_BANNER_FREE_TICKET:String = "ban.1dayticket";
        public static const MUSIC_PLAYER_LPA_SHUFFLE_CID:String = "";
        public static const MUSIC_PLAYER_PLT_ALBUM:String = "plt.album";
        public static const MUSIC_PLAYER_PLT_CHECK_CID:String = "";
        public static const MUSIC_PLAYER_LPA_TIME_CID:String = "";
        public static const MUSIC_PROMOTION_FLOATING_POPUP_BLOG_DJ:String = "pop.buyticket";
        public static const MUSIC_PLAYER_LPA_ALBUM_ARTIST:String = "lpa.artist";
        public static const MUSIC_PLAYER_LPA_REWIND:String = "lpa.left";
        public static const NSC_CODE:String = "music.player";
        public static const MUSIC_PLAYER_LPA_PAUSE:String = "lpa.stop";
        public static const MUSIC_PLAYER_TPS_TADDO:String = "tps.taddo";
        public static const MUSIC_PLAYER_TPS_COLOR:String = "tps.color";
        public static const MUSIC_PLAYER_PLT_LISTEN:String = "plt.listen";
        public static const MUSIC_PLAYER_TPS_REPLAYN:String = "tps.replayn";
        public static const MUSIC_PLAYER_PIP_TRACK:String = "plp.track";
        public static const MUSIC_PLAYER_PLT_MP3_CID:String = "";
        public static const MUSIC_PLAYER_LPA_SOUND:String = "lpa.sound";
        public static const MUSIC_PLAYER_PLT_CHECKALL:String = "plt.checkall";
        public static const MUSIC_PLAYER_PLP_CAFE:String = "plp.cafe";
        public static const MUSIC_PLAYER_TPS_REPLAYY:String = "tps.replayy";
        public static const MUSIC_PLAYER_TPS_TADDT:String = "tps.taddt";
        public static const MUSIC_PLAYER_PIP_MP3S:String = "plp.mp3";
        public static const MUSIC_PLAYER_PLP_BLOG:String = "plp.blog";
        public static const MUSIC_PLAYER_LPA_SOUND_OFF:String = "lpa.off";
        public static const MUSIC_PLAYER_LPA_REPEAT_CID:String = "";
        public static const MUSIC_PLAYER_PIP_ALBUM:String = "plp.album";
        public static const MUSIC_PLAYER_PLT_ADD:String = "plt.add";
        public static const MUSIC_PLAYER_FOT_HELP:String = "fot.help";
        public static const MUSIC_PLAYER_LPA_ALBUM_ARTIST_CID:String = "artistID";
        public static const MUSIC_PLAYER_LPA_FORWARD:String = "lpa.right";
        public static const MUSIC_PLAYER_LPA_REWIND_CID:String = "";
        public static const MUSIC_PLAYER_LPA_ALBUM_JACKET_CID:String = "albumID";
        public static const MUSIC_PLAYER_LPA_TRACK:String = "lpa.track";
        public static const MUSIC_PLAYER_TPS_TOP100_CID:String = "";
        public static const MUSIC_PLAYER_FOT_BUY_CID:String = "";
        public static const MUSIC_PLAYER_PIP_UP:String = "plp.up";
        public static const MUSIC_PLAYER_FOT_LOGIN:String = "fot.login";
        public static const MUSIC_PLAYER_PIP_CHECKALL:String = "plp.checkall";
        public static const MUSIC_PLAYER_PIP_DOWN:String = "plp.down";
        public static const MUSIC_PLAYER_TPS_COLOR_CID:String = "";
        public static const MUSIC_PROMOTION_BOTTOM_BANNER_BLOG_DJ_EVENT:String = "ban.scrap";
        public static const MUSIC_PROMOTION_BOTTOM_BANNER:String = "ban";
        public static const MUSIC_PLAYER_PLT_CHECK:String = "plt.check";
        public static const MUSIC_PLAYER_PIP_TRACK_CID:String = "";
        public static const MUSIC_PLAYER_FOT_LOGOUT_CID:String = "";
        public static const MUSIC_PLAYER_LPA_ALBUM_JACKET:String = "lpa.image";
        public static const MUSIC_PLAYER_LPA_ALBUM_MP3_PURCHASE_CID:String = "trackID";
        public static const MUSIC_PLAYER_LPA_SOUND_CID:String = "";
        public static const MUSIC_PLAYER_LPA_BOOKMARKING:String = "lpa.favo";
        public static const MUSIC_PLAYER_TPS_TOP100:String = "tps.top100";
        public static const MUSIC_PLAYER_LPA_TIME:String = "lpa.time";
        public static const MUSIC_PLAYER_PIP_ADD:String = "plp.add";
        public static const MUSIC_PLAYER_LPA_SOUND_OFF_CID:String = "";
        public static const MUSIC_PLAYER_PIP_DELETE:String = "plp.delete";
        public static const MUSIC_PLAYER_PLT_MP3S:String = "plt.mp3";
        public static const MUSIC_PLAYER_TPS_PLAYLIST_CID:String = "";
        public static const MUSIC_PLAYER_PLT_TRACK_CID:String = "";

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.flashdynamix.motion.*;

    public class SkinSelectPopup extends Sprite {

        private static const COLOR_SET:Array = [[0xFFFFFF, 8047444], [16187223, 7718341], [16755923, 9080470], [962559, 0x292929]];
        private static const COL_COUNT:int = 2;
        private static const ROW_COUNT:int = 4;
        private static const INDEX_SET:Array = [[1, 5], [2, 6], [3, 7], [4, 8]];

        private static var skin_pop:Class;
        private static var _borderColor:int = 0xBFBFBF;
        private static var _bgColor:int = 0xFEFEFE;

        private var skin_pop_instance;
        private var colorSet1;
        private var colorSet2;
        private var colorSet3;
        private var colorSet4;
        private var colorSet5;
        private var colorSet6;
        private var colorSet7;
        private var colorSet8;
        private var currentSkinFrame:String;

        public function SkinSelectPopup(){
            addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
            drawAsset();
        }
        public static function updateAsset(_arg1):void{
            skin_pop = _arg1.getDefinition("skin_popup_aseet");
        }
        public static function updateStyle(_arg1):void{
            _bgColor = _arg1.SKIN_SELECT_POPUP_BG_COLOR;
            _borderColor = _arg1.SKIN_SELECT_POPUP_BORDER_COLOR;
        }
        public static function get bgColor():int{
            return (_bgColor);
        }
        public static function set borderColor(_arg1:int):void{
        }
        public static function get borderColor():int{
            return (_borderColor);
        }
        public static function set bgColor(_arg1:int):void{
        }

        private function complete():void{
            visible = false;
        }
        public function drawAsset():void{
            skin_pop_instance = new skin_pop();
            addChild(skin_pop_instance);
        }
        public function hidePopup():void{
            TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.4, null, 0, null, complete);
        }
        public function createColorSet(_arg1:String=null):void{
            var _local3:String;
            var _local4:*;
            _arg1 = ControlSettingManager.getInstance().skinFrame;
            var _local2:int;
            while (_local2 < 10) {
                _local3 = ("color_" + (_local2 + 1));
                _local4 = skin_pop_instance[_local3];
                if (((Boolean(_arg1)) && ((_arg1 == (_local2 + 1).toString())))){
                    currentSkinFrame = _local3;
                    _local4.gotoAndStop(2);
                } else {
                    _local4.gotoAndStop(1);
                };
                _local4.addEventListener(MouseEvent.CLICK, setColorHandler);
                _local4.addEventListener(MouseEvent.MOUSE_OVER, overHandler);
                _local4.addEventListener(MouseEvent.MOUSE_OUT, outHandler);
                _local2++;
            };
        }
        private function outHandler(_arg1:MouseEvent):void{
            _arg1.stopPropagation();
            var _local2:* = (_arg1.target as DisplayObject);
            if (((Boolean(_local2)) && (!((_local2.name == currentSkinFrame))))){
                _local2.gotoAndStop(1);
            };
        }
        private function overHandler(_arg1:MouseEvent):void{
            _arg1.stopPropagation();
            var _local2:* = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local2.gotoAndStop(2);
            };
        }
        private function mouseOutHandler(_arg1:MouseEvent):void{
        }
        private function setColorHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:NaverMusicPlayerBasicEvent;
            _arg1.stopPropagation();
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name.slice(6, 8);
                _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CHANGE_SKIN_TYPE);
                _local4.data = {key:_local3};
                dispatchEvent(_local4);
                hidePopup();
                this.parent.visible = false;
            };
        }
        public function showPopup():void{
            visible = true;
            TweensyZero.fromTo(this, {alpha:0}, {alpha:1});
        }
        public function removeAsset():void{
            var _local3:*;
            var _local1:int = numChildren;
            var _local2:int;
            while (_local2 < _local1) {
                _local3 = (getChildAt(0) as DisplayObject);
                if (Boolean(_local3)){
                    _local3.removeEventListener(MouseEvent.CLICK, setColorHandler);
                    _local3.removeEventListener(MouseEvent.MOUSE_OVER, overHandler);
                    _local3.removeEventListener(MouseEvent.MOUSE_OUT, outHandler);
                    removeChild(_local3);
                    _local3 = null;
                };
                _local2++;
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.display.*;

    public class CanMoveIcon extends Sprite {

        private static var icons:Class;

        private var icon_instance:DisplayObject;

        public function CanMoveIcon(){
            createInstance();
        }
        public static function updateAsset(_arg1):void{
            icons = _arg1.getDefinition("can_move_icon");
        }

        private function createInstance():void{
            icon_instance = new icons();
            addChild(icon_instance);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.flashdynamix.motion.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class NpodNotifyAlert extends Sprite {

        private static var _bgColor:int = 0xFEFEFE;
        private static var closebtn_prototype:Class = NpodNotifyAlert_closebtn_prototype;
        private static var _ticketTextColor:int = 0x666666;
        private static var _underlineColor:int = 12895686;
        private static var _overedTicketTextColor:int = 0x333333;
        private static var _alertTextColor:int = 0x666666;
        private static var _borderColor:int = 0xC0C0C0;
        private static var _overedUnderlineColor:int = 9606036;

        private var underline:Sprite;
        private var ticketTextFiled:TextField;
        private var closebtn_instance:DisplayObject;
        private var alertTextField:TextField;
        private var mouseOver:Sprite;
        private var textBitmap:Bitmap;

        public function NpodNotifyAlert(){
            removeAsset();
            createAsset();
        }
        public static function get underlineColor():int{
            return (_underlineColor);
        }
        public static function get overedUnderlineColor():int{
            return (_overedUnderlineColor);
        }
        public static function set underlineColor(_arg1:int):void{
        }
        public static function set overedUnderlineColor(_arg1:int):void{
        }
        public static function get overedTicketTextColor():int{
            return (_overedTicketTextColor);
        }
        public static function set tickeTextColor(_arg1:int):void{
            _ticketTextColor = _ticketTextColor;
        }
        public static function get bgColor():int{
            return (_bgColor);
        }
        public static function get borderColor():int{
            return (_borderColor);
        }
        public static function updateAsset(_arg1):void{
            closebtn_prototype = _arg1.getDefinition("x_close_btn");
        }
        public static function updateStyle(_arg1):void{
            _bgColor = _arg1.ALERT_POPUP_BG_COLOR;
            _borderColor = _arg1.ALERT_POPUP_BORDER_COLOR;
            _alertTextColor = _arg1.ALERT_POPUP_TEXT_COLOR;
            _ticketTextColor = _arg1.ALERT_POPUP_TICKET_TEXT_COLOR;
            _underlineColor = _arg1.ALERT_POPUP_UNDERLINE_COLOR;
            _overedUnderlineColor = _arg1.ALERT_POPUP_OVERED_UNDERLINE_COLOR;
            _overedTicketTextColor = _arg1.ALERT_POPUP_OVERED_TICKET_TEXT_COLOR;
        }
        public static function set borderColor(_arg1:int):void{
        }
        public static function set alertTextColor(_arg1:int):void{
        }
        public static function set overedTicketTextColor(_arg1:int):void{
        }
        public static function get alertTextColor():int{
            return (_alertTextColor);
        }
        public static function set bgColor(_arg1:int):void{
        }
        public static function get tickeTextColor():int{
            return (_ticketTextColor);
        }

        private function closeHandler(_arg1:MouseEvent):void{
            hidePopup();
            if (!ControlSettingManager.getInstance().isPure){
                ControlSettingManager.getInstance().isPure = true;
            };
        }
        public function removeAsset():void{
            if (Boolean(closebtn_instance)){
                removeChild(closebtn_instance);
                closebtn_instance.removeEventListener(MouseEvent.CLICK, closeHandler);
                closebtn_instance = null;
            };
            if (Boolean(alertTextField)){
                alertTextField = null;
            };
            if (Boolean(textBitmap)){
                textBitmap.bitmapData.dispose();
                removeChild(textBitmap);
                textBitmap = null;
            };
            if (Boolean(ticketTextFiled)){
                ticketTextFiled = null;
            };
        }
        private function showTicketLing(_arg1:MouseEvent):void{
            dispatchEvent(new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG));
        }
        private function completeHandler():void{
            visible = false;
        }
        public function hidePopup():void{
            ticketTextFiled.visible = false;
            visible = false;
            TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.4, null, 0, null, completeHandler);
        }
        public function createAsset():void{
            closebtn_instance = new closebtn_prototype();
            closebtn_instance.addEventListener(MouseEvent.CLICK, closeHandler);
            closebtn_instance.x = 132;
            closebtn_instance.y = 4;
            addChild(closebtn_instance);
            alertTextField = new TextField();
            alertTextField.selectable = false;
            alertTextField.x = 2;
            alertTextField.y = 16;
            ticketTextFiled = new TextField();
            ticketTextFiled.selectable = false;
            underline = new Sprite();
            mouseOver = new Sprite();
            mouseOver.buttonMode = true;
            mouseOver.graphics.beginFill(0, 0);
            mouseOver.graphics.drawRect(0, 0, 66, 18);
            mouseOver.graphics.endFill();
            mouseOver.addEventListener(MouseEvent.CLICK, showTicketLing);
        }
        public function showPopup():void{
            visible = true;
            ticketTextFiled.visible = true;
            TweensyZero.fromTo(this, {alpha:0}, {alpha:1});
        }
        public function drawAsset(_arg1:String):void{
            graphics.clear();
            graphics.beginFill(bgColor);
            graphics.drawRect(0, 0, 142, 55);
            graphics.endFill();
            graphics.lineStyle(1, borderColor, 1, false, "none");
            graphics.drawRect(0, 0, 142, 55);
            var _local2:TextFormat = new TextFormat();
            _local2.font = "돋움,AppleGothic";
            _local2.size = 11;
            _local2.color = alertTextColor;
            alertTextField.defaultTextFormat = _local2;
            alertTextField.text = _arg1;
            alertTextField.width = (alertTextField.textWidth + 5);
            alertTextField.height = (alertTextField.textHeight + 5);
            textBitmap = new Bitmap();
            var _local3:BitmapData = new BitmapData((alertTextField.width - 1), alertTextField.height, true, bgColor);
            _local3.draw(alertTextField);
            textBitmap.bitmapData = _local3;
            textBitmap.x = alertTextField.x;
            textBitmap.y = alertTextField.y;
            addChild(textBitmap);
            var _local4:TextFormat = new TextFormat();
            _local4.font = "돋움,AppleGothic";
            _local4.size = 11;
            _local4.color = _ticketTextColor;
            ticketTextFiled.defaultTextFormat = _local4;
            ticketTextFiled.text = NaverMusicPlayerProperty.TICKET_NOTI_ALERT;
            ticketTextFiled.x = ((textBitmap.width / 2) + 4);
            ticketTextFiled.y = ((textBitmap.y + (textBitmap.height / 2)) - 2.5);
            ticketTextFiled.height = (ticketTextFiled.textHeight + 2);
            addChild(ticketTextFiled);
            underline.graphics.lineStyle(1, _underlineColor);
            underline.graphics.moveTo((ticketTextFiled.x - 0.5), ((ticketTextFiled.y + ticketTextFiled.textHeight) + 2));
            underline.graphics.lineTo(((ticketTextFiled.x + ticketTextFiled.textWidth) + 1.5), ((ticketTextFiled.y + ticketTextFiled.textHeight) + 2));
            addChild(underline);
            addChild(mouseOver);
            mouseOver.x = ticketTextFiled.x;
            mouseOver.y = ticketTextFiled.y;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import com.nhn.application.modules.webplayererrorhandling.*;

    public class TicketPopup extends Sprite {

        public static const LOG_IN_USER:String = "LOG_IN_USER";
        public static const NOT_LOG_IN_USER:String = "NOT_LOG_IN_USER";

        private static var ticket_guide_prototype:Class;
        private static var ticket_login_user_guide_porototype:Class;

        private var ticket_login_user_guide_instance;
        private var ticket_guide_intance;

        public static function updateAsset(_arg1):void{
            ticket_guide_prototype = _arg1.getDefinition("ticket_guide_popup");
            ticket_login_user_guide_porototype = _arg1.getDefinition("ticket_guide_popup2");
        }

        private function mouseOutHandler(_arg1:MouseEvent):void{
        }
        private function mouseClickHandler(_arg1:MouseEvent):void{
            var _local2:MusicPlayerBasicModel;
            var _local3:UserInfo;
            var _local4:String;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:Boolean;
            if (_arg1.target){
                _local2 = MusicPlayerBasicModel.getInstance();
                _local3 = _local2.userInfo;
                _local4 = _arg1.target.name;
                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET, true);
                switch (_local4){
                    case "purchase_1":
                        _local6 = false;
                        if (_local3.isTeam === UserInfo.IS_TEAM){
                            _local5 = null;
                            notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                        } else {
                            _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.NONE_MP3_LISTENING_ALL_3000};
                        };
                        break;
                    case "purchase_2":
                        _local6 = false;
                        if (_local3.isTeam === UserInfo.IS_TEAM){
                            _local5 = null;
                            notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                        } else {
                            _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.MP3_40_NOT_LISTENING_5000};
                        };
                        break;
                    case "purchase_3":
                        _local6 = false;
                        if (_local3.isTeam === UserInfo.IS_TEAM){
                            _local5 = null;
                            notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                        } else {
                            _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.MP3_40_LISTENING_ALL_7000};
                        };
                        break;
                    case "show_more_ticket":
                        _local6 = false;
                        _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE};
                        break;
                    case "middle_close_x_btn":
                        _local6 = false;
                        _local5 = null;
                        break;
                    default:
                        _local6 = true;
                        _local5 = null;
                };
                if (_local5){
                    dispatchEvent(_local5);
                };
                if (!_local6){
                    this.visible = false;
                    this.parent.visible = false;
                };
            };
        }
        public function hidePopup():void{
            visible = false;
            if (parent){
                parent.visible = false;
            };
        }
        public function showPopup():void{
            if (parent){
                parent.visible = true;
            };
            visible = true;
        }
        private function mouseOverHandler(_arg1:MouseEvent):void{
        }
        public function createAsset():void{
            ticket_guide_intance = new ticket_guide_prototype();
            ticket_guide_intance.addEventListener(MouseEvent.CLICK, mouseClickHandler);
            addChild(ticket_guide_intance);
            ticket_login_user_guide_instance = new ticket_login_user_guide_porototype();
            ticket_login_user_guide_instance.addEventListener(MouseEvent.CLICK, loginUserMouseClickHandler);
            addChild(ticket_login_user_guide_instance);
        }
        public function selectPopup(_arg1:String):void{
            switch (_arg1){
                case LOG_IN_USER:
                    ticket_guide_intance.visible = false;
                    ticket_login_user_guide_instance.visible = true;
                    break;
                case NOT_LOG_IN_USER:
                    ticket_guide_intance.visible = true;
                    ticket_login_user_guide_instance.visible = false;
                    break;
            };
        }
        private function notiErrorOccured(_arg1:String):void{
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, true);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        private function loginUserMouseClickHandler(_arg1:MouseEvent):void{
            var _local2:MusicPlayerBasicModel;
            var _local3:UserInfo;
            var _local4:String;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local6:Boolean;
            if (_arg1.target){
                _local2 = MusicPlayerBasicModel.getInstance();
                _local3 = _local2.userInfo;
                _local4 = _arg1.target.name;
                _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET, true);
                switch (_local4){
                    case "purchase_case1":
                        _local6 = false;
                        if (_local3.isTeam === UserInfo.IS_TEAM){
                            _local5 = null;
                            notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                        } else {
                            _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.MP3_40_NOT_LISTENING_5000};
                        };
                        break;
                    case "purchase_case2":
                        _local6 = false;
                        if (_local3.isTeam === UserInfo.IS_TEAM){
                            _local5 = null;
                            notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                        } else {
                            _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.MP3_40_LISTENING_ALL_7000};
                        };
                        break;
                    case "purchase_case3":
                        _local6 = false;
                        if (_local3.isTeam === UserInfo.IS_TEAM){
                            _local5 = null;
                            notiErrorOccured(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                        } else {
                            _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.MP3_150_NOT_LISTENING};
                        };
                        break;
                    case "show_more_ticket":
                        _local6 = false;
                        _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE};
                        break;
                    case "middle_close_x_btn":
                        _local6 = false;
                        _local5 = null;
                        break;
                    default:
                        _local6 = true;
                        _local5 = null;
                };
                if (_local5){
                    dispatchEvent(_local5);
                };
                if (!_local6){
                    this.visible = false;
                    this.parent.visible = false;
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.popupservicevo {

    public class ConfigurationInfoParam {

        public static const IS_GENERAL_QUALITY:String = "IS_GENERAL_QUALITY";
        public static const IS_HIGH_QUALITY:String = "IS_HIGH_QUALITY";

        private var _pcolor:String;
        private var _bitrate:String;

        public function ConfigurationInfoParam(_arg1:String, _arg2:String){
            this._pcolor = _arg1;
            this._bitrate = _arg2;
        }
        public function set bitrate(_arg1:String):void{
            if (this._bitrate){
                this._bitrate = null;
            };
            this._bitrate = _arg1;
        }
        public function set pcolor(_arg1:String):void{
            if (this._pcolor){
                this._pcolor = null;
            };
            this._pcolor = _arg1;
        }
        public function get pcolor():String{
            return (_pcolor);
        }
        public function get bitrate():String{
            return (_bitrate);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.popupservicevo 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.flashdynamix.motion.*;
    import de.aggro.utils.*;

    public class PromotionCheckout extends Sprite {

        private static const SHOW_MORE_TIECKET:String = "show_tickets_main_page_btn";
        private static const PROMOTION_POPUP:String = "promotion_popup";
        private static const GET_FREE_TICKET:String = "support_yes_btn";
        private static const HIDE_CHECK_BOX:String = "popup_check_box";
        private static const CLOSE_BUTTON:String = "close_yes_btn";

        private static var isCreateOrder:Boolean = false;
        private static var tempChecked:Boolean = false;
        private static var tempCreateFunc:Function = null;
        private static var baseContainer;

        private var base;

        public static function updateAsset(_arg1):void{
            baseContainer = _arg1.getDefinition(PROMOTION_POPUP);
            if (isCreateOrder){
                if (Boolean(tempCreateFunc)){
                    tempCreateFunc(tempChecked);
                };
            };
        }

        private function completeHandler():void{
            removeResource();
        }
        private function hideChildren():void{
            base.popup_check_box.gotoAndStop(2);
            mouseEnabled = false;
            mouseChildren = false;
            visible = false;
        }
        private function removeResource():void{
            tempCreateFunc = null;
            baseContainer = null;
            if (base.hasEventListener(MouseEvent.MOUSE_DOWN)){
                base.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            };
            removeChild(base);
            base = null;
            if (parent){
                parent.removeChild(this);
            };
        }
        private function mouseDownHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:MusicPlayerPromotionEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case CLOSE_BUTTON:
                        if (base.hasEventListener(MouseEvent.MOUSE_DOWN)){
                            base.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
                        };
                        TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.05, null, 0.5, null, completeHandler);
                        break;
                    case GET_FREE_TICKET:
                        if (base.hasEventListener(MouseEvent.MOUSE_DOWN)){
                            base.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
                        };
                        CookieUtil.setCookie(ControlSettingManager.POPIP_HIDE_OPTION_CHECKOUT_PROMOTION, "true", ControlSettingManager.CONSISTAN_INIFINITE_DAYS);
                        _local4 = new MusicPlayerPromotionEvent(MusicPlayerPromotionEvent.CHECK_OUT_EVENT, true);
                        dispatchEvent(_local4);
                        TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.05, null, 0.5, null, completeHandler);
                        break;
                    case HIDE_CHECK_BOX:
                        if (base.hasEventListener(MouseEvent.MOUSE_DOWN)){
                            base.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
                        };
                        (_local2 as MovieClip).gotoAndStop(2);
                        CookieUtil.setCookie(ControlSettingManager.POPIP_HIDE_OPTION_CHECKOUT_PROMOTION, "true", ControlSettingManager.CONSISTANT_DAYS_7);
                        TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.05, null, 0.5, null, completeHandler);
                        break;
                    case SHOW_MORE_TIECKET:
                        break;
                };
            };
        }
        public function createChildren(_arg1:Boolean=false):void{
            if (((Boolean(baseContainer)) && (!((baseContainer == null))))){
                isCreateOrder = false;
                graphics.beginFill(0xFFFFFF, 0);
                graphics.drawRect(0, 0, 500, 400);
                graphics.endFill();
                base = new baseContainer();
                base.x = 25;
                base.y = 20;
                base.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
                addChild(base);
                base.popup_check_box.gotoAndStop(1);
                base.popup_check_box.useHandCursor = true;
                base.popup_check_box.buttonMode = true;
                if (_arg1){
                    base.popup_check_box.gotoAndStop(2);
                    mouseEnabled = false;
                    mouseChildren = false;
                    visible = false;
                };
            } else {
                isCreateOrder = true;
                tempChecked = _arg1;
                tempCreateFunc = createChildren;
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            var e:* = _arg1;
            var area:String = _arg2;
            var cid:String = _arg3;
            var rank:int = _arg4;
            var linkURL:String = _arg5;
            try {
            } catch(error:Error) {
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets.*;

    public class PostingPopup extends Sprite {

        private static const MAX_CHARS:int = 30;
        public static const BA:String = "BA";
        public static const COMMIT_POSTING_CONFIG:String = "COMMIT_POSTING_CONFIG";
        public static const BLOG:String = "B";
        public static const SHOW_CREATOR_LINK_YES:String = "Y";
        private static const DEFAULT_TITLE:String = "나만의 음악리스트";
        public static const CAFE_TYPE:String = "CAFE_TYPE";
        public static const CAFE:String = "C";
        public static const CANCEL_POSTING_CONFIG:String = "CANCEL_POSTING_CONFIG";
        public static const AL:String = "AL";
        public static const MAX_CHAR:int = 30;
        public static const BLOG_TYPE:String = "BLOG_TYPE";
        public static const SHOW_CREATOR_LINK_NO:String = "N";

        private static var posting_To_target_prototype:Class;

        public var showCreatorOption:String = "Y";
        private var colorFrame:int = 0;
        private var titleTextField:TextField;
        private var posting_type:String = "basic_btn";
        private var title:String;
        private var posting_popup_instance;
        public var TYPE:String;
        private var selected_color:String;

        public static function udpateAsset(_arg1):void{
            posting_To_target_prototype = _arg1.getDefinition("posting_setting_popup_layer");
        }

        public function setConfig(_arg1:String):void{
            TYPE = _arg1;
        }
        public function removeAsset():void{
            if (posting_popup_instance){
                removeChild(posting_popup_instance);
                posting_popup_instance.removeEventListener(MouseEvent.CLICK, checkTarget);
                posting_popup_instance.removeEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
                posting_popup_instance.removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
                posting_popup_instance = null;
            };
        }
        private function configPostingParam():Object{
            var _local1:Object = new Object();
            return (_local1);
        }
        public function createAsset():void{
            posting_popup_instance = new posting_To_target_prototype();
            posting_popup_instance.addEventListener(MouseEvent.CLICK, checkTarget);
            posting_popup_instance.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
            posting_popup_instance.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
            addChild(posting_popup_instance);
            createTitleTextField();
            initScene();
        }
        public function hidePopup():void{
            visible = false;
            if (parent){
                parent.visible = false;
            };
        }
        public function initScene():void{
            posting_popup_instance.creator_link_yes.gotoAndStop(2);
            posting_popup_instance.creator_link_no.gotoAndStop(1);
            showCreatorOption = SHOW_CREATOR_LINK_YES;
            posting_popup_instance.creator_link_yes.buttonMode = true;
            posting_popup_instance.creator_link_yes.useHandCursort = true;
            posting_popup_instance.creator_link_no.buttonMode = true;
            posting_popup_instance.creator_link_no.useHandCursort = true;
            posting_popup_instance.basic_btn.gotoAndStop(2);
            posting_popup_instance.album_btn.gotoAndStop(1);
            posting_type = "basic_btn";
            posting_popup_instance.color1_btn.gotoAndStop(1);
            posting_popup_instance.color2_btn.gotoAndStop(1);
            posting_popup_instance.color3_btn.gotoAndStop(1);
            posting_popup_instance.color4_btn.gotoAndStop(1);
            posting_popup_instance.color5_btn.gotoAndStop(1);
            posting_popup_instance.color6_btn.gotoAndStop(1);
            posting_popup_instance.color7_btn.gotoAndStop(1);
            posting_popup_instance.color8_btn.gotoAndStop(1);
            posting_popup_instance.color5_1_btn.gotoAndStop(1);
            posting_popup_instance.color6_1_btn.gotoAndStop(1);
            posting_popup_instance.color7_1_btn.gotoAndStop(1);
            posting_popup_instance.basic_btn.buttonMode = true;
            posting_popup_instance.album_btn.buttonMode = true;
            posting_popup_instance.color1_btn.buttonMode = true;
            posting_popup_instance.color2_btn.buttonMode = true;
            posting_popup_instance.color3_btn.buttonMode = true;
            posting_popup_instance.color4_btn.buttonMode = true;
            posting_popup_instance.color5_btn.buttonMode = true;
            posting_popup_instance.color6_btn.buttonMode = true;
            posting_popup_instance.color7_btn.buttonMode = true;
            posting_popup_instance.color8_btn.buttonMode = true;
            posting_popup_instance.color5_1_btn.buttonMode = true;
            posting_popup_instance.color6_1_btn.buttonMode = true;
            posting_popup_instance.color7_1_btn.buttonMode = true;
            posting_popup_instance.color5_1_btn.visible = false;
            posting_popup_instance.color6_1_btn.visible = false;
            posting_popup_instance.color7_1_btn.visible = false;
            posting_popup_instance.basic_posting.visible = true;
            posting_popup_instance.album_posting.visible = false;
            posting_popup_instance.noti_sample.visible = true;
            titleTextField.text = "";
            title = "";
            selected_color = null;
            var _local1:Class = AssetLoadManager.getInstance().signiture;
            switch (_local1){
                case WhiteColorSet:
                    colorFrame = 1;
                    break;
                case GrayColorSet:
                    colorFrame = 2;
                    break;
                case MouseColorSet:
                    colorFrame = 4;
                    break;
                case BlueBlueColorSet:
                    colorFrame = 3;
                    break;
                case BlackPinkColorSet:
                    colorFrame = 5;
                    break;
                case GreenColorSet:
                    colorFrame = 6;
                    break;
                case SBlackColorSet:
                    colorFrame = 7;
                    break;
                case BlackColorSet:
                    colorFrame = 8;
                    break;
            };
            updateSelectedPosting(colorFrame);
            postingPreviewChange(true);
        }
        public function updateSelectedPosting(_arg1:int):void{
            var _local2:String;
            colorFrame = _arg1;
            if (posting_popup_instance.basic_posting.visible){
                posting_popup_instance.color5_btn.visible = true;
                posting_popup_instance.color6_btn.visible = true;
                posting_popup_instance.color7_btn.visible = true;
                posting_popup_instance.color5_1_btn.visible = false;
                posting_popup_instance.color6_1_btn.visible = false;
                posting_popup_instance.color7_1_btn.visible = false;
                _local2 = (("color" + _arg1) + "_btn");
            } else {
                if (posting_popup_instance.album_posting.visible){
                    posting_popup_instance.color5_1_btn.visible = true;
                    posting_popup_instance.color6_1_btn.visible = true;
                    posting_popup_instance.color7_1_btn.visible = true;
                    posting_popup_instance.color5_btn.visible = false;
                    posting_popup_instance.color6_btn.visible = false;
                    posting_popup_instance.color7_btn.visible = false;
                    if ((((_arg1 >= 5)) && ((_arg1 <= 7)))){
                        _local2 = (("color" + _arg1) + "_1_btn");
                    } else {
                        _local2 = (("color" + _arg1) + "_btn");
                    };
                };
            };
            selected_color = _local2;
            if (posting_popup_instance[selected_color]){
                posting_popup_instance[selected_color].gotoAndStop(2);
            };
        }
        private function configCreatorOption():String{
            var _local1:String;
            switch (showCreatorOption){
                case SHOW_CREATOR_LINK_YES:
                    posting_popup_instance.creator_link_yes.gotoAndStop(2);
                    posting_popup_instance.creator_link_no.gotoAndStop(1);
                    break;
                case SHOW_CREATOR_LINK_NO:
                    posting_popup_instance.creator_link_yes.gotoAndStop(1);
                    posting_popup_instance.creator_link_no.gotoAndStop(2);
                    break;
            };
            _local1 = showCreatorOption;
            return (_local1);
        }
        private function mouseOutHandler(_arg1:MouseEvent):void{
            if (_arg1.target){
                switch (_arg1.target.name){
                    case "color1_btn":
                    case "color2_btn":
                    case "color3_btn":
                    case "color4_btn":
                    case "color5_btn":
                    case "color6_btn":
                    case "color7_btn":
                    case "color8_btn":
                    case "color5_1_btn":
                    case "color6_1_btn":
                    case "color7_1_btn":
                        if (_arg1.target.name != selected_color){
                            (_arg1.target as MovieClip).gotoAndStop(1);
                        };
                        break;
                };
            };
        }
        private function configType():String{
            var _local1:String;
            switch (posting_type){
                case "basic_btn":
                    _local1 = BA;
                    break;
                case "album_btn":
                    _local1 = AL;
                    break;
            };
            return (_local1);
        }
        private function configSite():String{
            var _local1:String;
            switch (TYPE){
                case CAFE_TYPE:
                    _local1 = CAFE;
                    posting_popup_instance.target_text_mc.gotoAndStop(2);
                    break;
                case BLOG_TYPE:
                    _local1 = BLOG;
                    posting_popup_instance.target_text_mc.gotoAndStop(1);
                    break;
            };
            return (_local1);
        }
        public function setPostingPreviewCorrectFrame(_arg1:DisplayObject, _arg2:int):void{
            (_arg1 as MovieClip).gotoAndStop(_arg2);
        }
        private function textChangeEventHandler(_arg1:Event):void{
            title = titleTextField.text;
        }
        public function showPopup():void{
            this.visible = true;
            if (parent){
                parent.visible = true;
            };
        }
        private function createTitleTextField():void{
            titleTextField = new TextField();
            titleTextField.alwaysShowSelection = true;
            titleTextField.maxChars = MAX_CHARS;
            titleTextField.addEventListener(Event.CHANGE, textChangeEventHandler);
            titleTextField.border = true;
            titleTextField.borderColor = 0xCCCCCC;
            titleTextField.name = "POSTING_TITLE";
            titleTextField.type = TextFieldType.INPUT;
            titleTextField.selectable = true;
            titleTextField.x = 171;
            titleTextField.y = 47;
            titleTextField.width = 300;
            titleTextField.height = 17;
            var _local1:TextFormat = new TextFormat();
            _local1.font = "돋움,AppleGothic";
            _local1.size = 11;
            _local1.color = 0;
            titleTextField.defaultTextFormat = _local1;
            posting_popup_instance.addChild(titleTextField);
        }
        private function completeConfigSetting(_arg1:String=null):void{
            if (((!(Boolean(title))) || ((title.length == 0)))){
                title = "";
            };
            var _local2:String = ("C0" + colorFrame);
            var _local3:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SET_POSTING_CONFIG_END);
            _local3.data = {
                action:_arg1,
                pcolor:_local2,
                title:this.title,
                ptype:configType(),
                site:configSite(),
                linkYn:configCreatorOption()
            };
            if (_arg1 == CANCEL_POSTING_CONFIG){
                dispatchEvent(_local3);
            } else {
                if (_arg1 == COMMIT_POSTING_CONFIG){
                    dispatchEvent(_local3);
                };
            };
        }
        public function updateHeader(_arg1:String):void{
            switch (_arg1){
                case BLOG_TYPE:
                    posting_popup_instance.target_text_mc.gotoAndStop(1);
                    break;
                case CAFE_TYPE:
                    posting_popup_instance.target_text_mc.gotoAndStop(2);
                    break;
            };
        }
        private function mouseOverHandler(_arg1:MouseEvent):void{
            if (_arg1.target){
                switch (_arg1.target.name){
                    case "color1_btn":
                    case "color2_btn":
                    case "color3_btn":
                    case "color4_btn":
                    case "color5_btn":
                    case "color6_btn":
                    case "color7_btn":
                    case "color8_btn":
                    case "color5_1_btn":
                    case "color6_1_btn":
                    case "color7_1_btn":
                        (_arg1.target as MovieClip).gotoAndStop(2);
                        break;
                };
            };
        }
        private function checkTarget(_arg1:MouseEvent):void{
            var _local2:String;
            var _local3:int;
            if (((_arg1.target) && (_arg1.target.name))){
                switch (_arg1.target.name){
                    case "POSTING_TITLE":
                        posting_popup_instance.noti_sample.visible = false;
                        break;
                    case "noti_sample":
                        _arg1.target.visible = false;
                        break;
                    case "basic_btn":
                        posting_type = "basic_btn";
                        posting_popup_instance.basic_btn.gotoAndStop(2);
                        posting_popup_instance.album_btn.gotoAndStop(1);
                        postingPreviewChange(true);
                        break;
                    case "album_btn":
                        posting_type = "album_btn";
                        posting_popup_instance.basic_btn.gotoAndStop(1);
                        posting_popup_instance.album_btn.gotoAndStop(2);
                        postingPreviewChange(false);
                        break;
                    case "large_ok_btn":
                        completeConfigSetting(COMMIT_POSTING_CONFIG);
                        break;
                    case "large_cc_btn":
                        completeConfigSetting(CANCEL_POSTING_CONFIG);
                        break;
                    case "large_close_btn":
                        completeConfigSetting(CANCEL_POSTING_CONFIG);
                        break;
                    case "creator_link_yes":
                        showCreatorOption = SHOW_CREATOR_LINK_YES;
                        configCreatorOption();
                        break;
                    case "creator_link_no":
                        showCreatorOption = SHOW_CREATOR_LINK_NO;
                        configCreatorOption();
                        break;
                    case "color1_btn":
                    case "color2_btn":
                    case "color3_btn":
                    case "color4_btn":
                    case "color5_btn":
                    case "color6_btn":
                    case "color7_btn":
                    case "color8_btn":
                    case "color5_1_btn":
                    case "color6_1_btn":
                    case "color7_1_btn":
                        if (selected_color){
                            posting_popup_instance[selected_color].gotoAndStop(1);
                        };
                        selected_color = _arg1.target.name;
                        _local2 = selected_color.slice(5, 6);
                        _local3 = int(_local2);
                        updateSelectedPosting(_local3);
                        setPostingPreviewCorrectFrame(posting_popup_instance.basic_posting, colorFrame);
                        setPostingPreviewCorrectFrame(posting_popup_instance.album_posting, colorFrame);
                        break;
                };
            };
        }
        public function postingPreviewChange(_arg1:Boolean):void{
            var _local2:String;
            var _local3:String;
            posting_popup_instance.basic_posting.visible = _arg1;
            posting_popup_instance.album_posting.visible = !(_arg1);
            if (posting_popup_instance.basic_posting.visible){
                posting_popup_instance.color5_btn.visible = true;
                posting_popup_instance.color6_btn.visible = true;
                posting_popup_instance.color7_btn.visible = true;
                posting_popup_instance.color5_1_btn.visible = false;
                posting_popup_instance.color6_1_btn.visible = false;
                posting_popup_instance.color7_1_btn.visible = false;
                if ((((colorFrame >= 5)) && ((colorFrame <= 7)))){
                    _local3 = (("color" + colorFrame) + "_1_btn");
                    posting_popup_instance[_local3].gotoAndStop(1);
                };
                _local2 = (("color" + colorFrame) + "_btn");
            } else {
                if (posting_popup_instance.album_posting.visible){
                    posting_popup_instance.color5_1_btn.visible = true;
                    posting_popup_instance.color6_1_btn.visible = true;
                    posting_popup_instance.color7_1_btn.visible = true;
                    posting_popup_instance.color5_btn.visible = false;
                    posting_popup_instance.color6_btn.visible = false;
                    posting_popup_instance.color7_btn.visible = false;
                    if ((((colorFrame >= 5)) && ((colorFrame <= 7)))){
                        _local3 = (("color" + colorFrame) + "_btn");
                        posting_popup_instance[_local3].gotoAndStop(1);
                        _local2 = (("color" + colorFrame) + "_1_btn");
                    } else {
                        _local2 = (("color" + colorFrame) + "_btn");
                    };
                };
            };
            selected_color = _local2;
            if (posting_popup_instance[selected_color]){
                posting_popup_instance[selected_color].gotoAndStop(2);
                setPostingPreviewCorrectFrame(posting_popup_instance.basic_posting, colorFrame);
                setPostingPreviewCorrectFrame(posting_popup_instance.album_posting, colorFrame);
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.flashdynamix.motion.*;
    import com.nhn.nclicks.*;
    import de.aggro.utils.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.*;

    public class PromotionPopup extends Sprite {

        private static const SHOW_MORE_TIECKET:String = "show_tickets_main_page_btn";
        private static const PROMOTION_POPUP:String = "promotion_popup";
        private static const GET_FREE_TICKET:String = "support_yes_btn";
        private static const HIDE_CHECK_BOX:String = "popup_check_box";
        private static const CLOSE_BUTTON:String = "close_yes_btn";

        private static var baseContainer;

        private var base;

        public static function updateAsset(_arg1):void{
            baseContainer = _arg1.getDefinition(PROMOTION_POPUP);
        }

        private function completeHandler():void{
            removeResource();
        }
        private function hideChildren():void{
            base.popup_check_box.gotoAndStop(2);
            mouseEnabled = false;
            mouseChildren = false;
            visible = false;
        }
        private function removeResource():void{
            baseContainer = null;
            base.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            removeChild(base);
            base = null;
            if (parent){
                parent.removeChild(this);
            };
        }
        private function mouseDownHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local4:MusicPlayerPromotionEvent;
            var _local5:NaverMusicPlayerBasicEvent;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case CLOSE_BUTTON:
                        TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.05, null, 0.5, null, completeHandler);
                        break;
                    case GET_FREE_TICKET:
                        callNClicks(_arg1, NClickPropertyForMusicPlayer.MUSIC_PROMOTION_FLOATING_POPUP_BLOG_DJ_EVENT);
                        CookieUtil.setCookie(ControlSettingManager.POPUP_HIDE_OPTION, "true", ControlSettingManager.CONSISTAN_INIFINITE_DAYS);
                        _local4 = new MusicPlayerPromotionEvent(MusicPlayerPromotionEvent.BLOG_DJ_EVENT, true);
                        dispatchEvent(_local4);
                        TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.05, null, 0.5, null, completeHandler);
                        break;
                    case HIDE_CHECK_BOX:
                        (_local2 as MovieClip).gotoAndStop(2);
                        CookieUtil.setCookie(ControlSettingManager.POPUP_HIDE_OPTION, "true", ControlSettingManager.CONSISTANT_DAYS);
                        TweensyZero.fromTo(this, {alpha:1}, {alpha:0}, 0.05, null, 0.5, null, completeHandler);
                        break;
                    case SHOW_MORE_TIECKET:
                        _local5 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET, true);
                        _local5.data = {ticketKind:NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE};
                        dispatchEvent(_local5);
                        break;
                };
            };
        }
        public function createChildren(_arg1:Boolean=false):void{
            graphics.beginFill(0xFFFFFF, 0);
            graphics.drawRect(0, 0, 500, 400);
            graphics.endFill();
            base = new baseContainer();
            base.x = 25;
            base.y = 20;
            base.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler, false, 0, true);
            addChild(base);
            base.popup_check_box.gotoAndStop(1);
            base.popup_check_box.useHandCursor = true;
            base.popup_check_box.buttonMode = true;
            if (_arg1){
                base.popup_check_box.gotoAndStop(2);
                mouseEnabled = false;
                mouseChildren = false;
                visible = false;
            };
        }
        private function callNClicks(_arg1:MouseEvent, _arg2:String="", _arg3:String="", _arg4:Number=-1, _arg5:String="about:blank"):void{
            var e:* = _arg1;
            var area:String = _arg2;
            var cid:String = _arg3;
            var rank:int = _arg4;
            var linkURL:String = _arg5;
            try {
                NClicks.sendLog(e, area, cid, rank, linkURL);
            } catch(error:Error) {
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.popupservicevo.*;
    import com.nhn.application.modules.webplayercore.*;

    public class MusicPlayerConfigurationPanel extends Sprite {

        private static const GENERAL_QUALITY_OPTION_AREA_NAME:String = "PanelGeneralQualityOptionArea";
        private static const GENERAL_QUALITY_OPTION_BUTTON_NAME:String = "PanelGeneralQualityOptionButton";
        public static const COMPLETE_SETTING_SKIN_AND_QUALITY:String = "COMPLETE_SETTING_SKIN_AND_QUALITY";
        private static const HIGH_QUALITY_OPTION_BUTTON_NAME:String = "PanelHighQualityOptionButton";
        private static const HIGH_QUALITY_OPTION_AREA_NAME:String = "PanelHighlQualityOptionArea";
        private static const CLOSE_BUTTON_NAME:String = "PanelCloseButton";
        private static const CANCEL_BUTTON_NAME:String = "PanelCancelButton";
        public static const CANCLE_SETTING_SKIN_AND_QUALITY:String = "CANCLE_SETTING_SKIN_AND_QUALITY";
        private static const CONFIRM_BUTTON_NAME:String = "PanelConfirmButton";

        private static var skinAndQualityConfigPanelPrototype:Class;

        private var _tmpHighQuality:Boolean;
        private var _tmpPColor:String;
        private var _configurationPanel;
        private var _prevActivatedSkinColorSet:MovieClip;
        private var _bitrate:String;
        private var _pColor:String;

        public static function updateAsset(_arg1):void{
            skinAndQualityConfigPanelPrototype = _arg1.getDefinition("SkinAndQualityConfigPanel");
        }

        public function release():void{
            if (skinAndQualityConfigPanelPrototype){
                skinAndQualityConfigPanelPrototype = null;
            };
            if (_configurationPanel){
                _configurationPanel.removeEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
                _configurationPanel.removeEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
                _configurationPanel.removeEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
                removeChild(_configurationPanel);
                _configurationPanel = null;
            };
        }
        public function createAssetInstance():void{
            if (skinAndQualityConfigPanelPrototype){
                _configurationPanel = new skinAndQualityConfigPanelPrototype();
                addChild((_configurationPanel as DisplayObject));
                _configurationPanel.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
                _configurationPanel.addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
                _configurationPanel.addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
                initView();
            };
        }
        public function updateInitOption(_arg1:ConfigurationInfoParam=null):void{
            var _local2:String;
            var _local3:String;
            var _local4:MovieClip;
            initView();
            if (Boolean(_arg1)){
                _local2 = unDecorateColorType(_arg1.pcolor);
                _local3 = _arg1.bitrate;
            } else {
                _local2 = unDecorateColorType(ControlSettingManager.getInstance().pcolorOfConfig);
                _local3 = ControlSettingManager.getInstance().bitrate;
            };
            if (Boolean(_local2)){
                _tmpPColor = _local2.substr(6, 2);
            };
            if (Boolean(_local3)){
                _bitrate = _local3;
            };
            if (_configurationPanel){
                _local4 = (_configurationPanel[_local2] as MovieClip);
                if (Boolean(_local4)){
                    _local4.gotoAndStop(2);
                    _prevActivatedSkinColorSet = _local4;
                };
                if (_local3 == WebPlayerCoreProperties.BITRATE_TYPE_HIGH){
                    (_configurationPanel.PanelHighQualityOptionButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelGeneralQualityOptionButton as MovieClip).gotoAndStop(2);
                } else {
                    (_configurationPanel.PanelHighQualityOptionButton as MovieClip).gotoAndStop(2);
                    (_configurationPanel.PanelGeneralQualityOptionButton as MovieClip).gotoAndStop(1);
                };
            };
        }
        public function get pColor():String{
            return (_pColor);
        }
        private function initView():void{
            var _local1:String;
            var _local2:String;
            var _local3:int;
            if (_configurationPanel){
                _local1 = "color_";
                _local3 = 1;
                while (_local3 <= 10) {
                    _local2 = (_local1 + _local3);
                    if (_configurationPanel[_local2]){
                        (_configurationPanel[_local2] as MovieClip).buttonMode = true;
                        (_configurationPanel[_local2] as MovieClip).gotoAndStop(1);
                    };
                    _local3++;
                };
                if (_configurationPanel.PanelHighQualityOptionButton){
                    (_configurationPanel.PanelHighQualityOptionButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelHighQualityOptionButton as MovieClip).buttonMode = true;
                };
                if (_configurationPanel.PanelGeneralQualityOptionButton){
                    (_configurationPanel.PanelGeneralQualityOptionButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelGeneralQualityOptionButton as MovieClip).buttonMode = true;
                };
                if (_configurationPanel.PanelCloseButton){
                    (_configurationPanel.PanelCloseButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelCloseButton as MovieClip).buttonMode = true;
                };
                if (_configurationPanel.PanelConfirmButton){
                    (_configurationPanel.PanelConfirmButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelConfirmButton as MovieClip).buttonMode = true;
                };
                if (_configurationPanel.PanelCancelButton){
                    (_configurationPanel.PanelCancelButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelCancelButton as MovieClip).buttonMode = true;
                };
                if (_configurationPanel[HIGH_QUALITY_OPTION_AREA_NAME]){
                    (_configurationPanel[HIGH_QUALITY_OPTION_AREA_NAME] as MovieClip).buttonMode = true;
                };
                if (_configurationPanel[GENERAL_QUALITY_OPTION_AREA_NAME]){
                    (_configurationPanel[GENERAL_QUALITY_OPTION_AREA_NAME] as MovieClip).buttonMode = true;
                };
            };
        }
        private function unDecorateColorType(_arg1:String):String{
            var _local2 = "color_";
            var _local3:String = _arg1.substr(1, 2);
            if (_local3.charAt(0) == "0"){
                _local3 = _local3.substr(1, 1);
                _local2 = (_local2 + _local3);
            } else {
                _local2 = (_local2 + _local3);
            };
            return (_local2);
        }
        public function set bitrate(_arg1:String):void{
            if (this._bitrate){
                this._bitrate = null;
            };
            this._bitrate = _arg1;
        }
        private function mouseOutHandler(_arg1:MouseEvent):void{
            var _local4:MovieClip;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            var _local3:String = _local2.name;
            if (_local3){
                if (_local3.substr(0, 5) == "color"){
                    _local4 = (_configurationPanel[_local3] as MovieClip);
                    if (_prevActivatedSkinColorSet != _local4){
                        _local4.gotoAndStop(1);
                    };
                };
            };
        }
        public function mouseDownHandler(_arg1:MouseEvent):void{
            var _local4:String;
            var _local5:String;
            var _local6:ConfigurationInfoParam;
            var _local7:NaverMusicPlayerBasicEvent;
            var _local8:ConfigurationInfoParam;
            var _local9:MovieClip;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            var _local3:String = _local2.name;
            switch (_local3){
                case HIGH_QUALITY_OPTION_AREA_NAME:
                case HIGH_QUALITY_OPTION_BUTTON_NAME:
                    (_configurationPanel.PanelHighQualityOptionButton as MovieClip).gotoAndStop(1);
                    (_configurationPanel.PanelGeneralQualityOptionButton as MovieClip).gotoAndStop(2);
                    _bitrate = WebPlayerCoreProperties.BITRATE_TYPE_HIGH;
                    break;
                case GENERAL_QUALITY_OPTION_AREA_NAME:
                case GENERAL_QUALITY_OPTION_BUTTON_NAME:
                    (_configurationPanel.PanelHighQualityOptionButton as MovieClip).gotoAndStop(2);
                    (_configurationPanel.PanelGeneralQualityOptionButton as MovieClip).gotoAndStop(1);
                    _bitrate = WebPlayerCoreProperties.BITRATE_TYPE_LOW;
                    break;
                case CONFIRM_BUTTON_NAME:
                    _local4 = _bitrate;
                    _local5 = decorateColorType(_tmpPColor);
                    _local6 = new ConfigurationInfoParam(_local5, _local4);
                    _local7 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CHANGE_SKIN_TYPE, false);
                    _local7.data = {
                        param:_local6,
                        key:_tmpPColor
                    };
                    dispatchEvent(_local7);
                    break;
                case CANCEL_BUTTON_NAME:
                case CLOSE_BUTTON_NAME:
                    this.visible = false;
                    this.parent.visible = false;
                    _local8 = new ConfigurationInfoParam(ControlSettingManager.getInstance().pcolorOfConfig, ControlSettingManager.getInstance().bitrate);
                    updateInitOption(_local8);
                    break;
                default:
                    if (_local3.substr(0, 5) == "color"){
                        _local9 = (_configurationPanel[_local3] as MovieClip);
                        if (_prevActivatedSkinColorSet != _local9){
                            _local9.gotoAndStop(2);
                            _tmpPColor = _local3.substr(6, 2);
                            if (_prevActivatedSkinColorSet){
                                _prevActivatedSkinColorSet.gotoAndStop(1);
                            };
                            _prevActivatedSkinColorSet = _local9;
                        };
                    };
            };
        }
        public function set pColor(_arg1:String):void{
            if (this._pColor){
                this._pColor = null;
            };
            this._pColor = _arg1;
        }
        public function get bitrate():String{
            return (_bitrate);
        }
        private function decorateColorType(_arg1:String):String{
            var _local2 = "C";
            var _local3:Number = Number(_arg1);
            if (_local3 <= 9){
                _local2 = (_local2 + ("0" + _local3.toString()));
            } else {
                _local2 = (_local2 + _local3.toString());
            };
            return (_local2);
        }
        private function mouseOverHandler(_arg1:MouseEvent):void{
            var _local4:MovieClip;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            var _local3:String = _local2.name;
            if (_local3){
                if (_local3.substr(0, 5) == "color"){
                    _local4 = (_configurationPanel[_local3] as MovieClip);
                    if (_prevActivatedSkinColorSet != _local4){
                        _local4.gotoAndStop(2);
                    };
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer {
    import flash.display.*;
    import mx.core.*;

    public class NpodNotifyAlert_closebtn_prototype extends ButtonAsset {

        public var do_cancle:DisplayObject;
        public var seconde_option:DisplayObject;
        public var first_option:DisplayObject;
        public var do_close:DisplayObject;
        public var do_confirm:DisplayObject;
        public var select_1:DisplayObject;
        public var headerTitle:DisplayObject;
        public var select_2:DisplayObject;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.layercomponent {
    import flash.events.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;

    public class PopMenu extends Sprite {

        private static var posting_popup_prototype:Class;

        private var posting_popup_instance;

        public static function udpateAsset(_arg1):void{
            posting_popup_prototype = _arg1.getDefinition("posting_popup_menu");
        }

        public function hidePopup():void{
            visible = false;
            if (parent){
                parent.visible = false;
            };
        }
        public function createAsset():void{
            posting_popup_instance = new posting_popup_prototype();
            posting_popup_instance.addEventListener(MouseEvent.CLICK, checkTarget);
            addChild(posting_popup_instance);
        }
        private function checkTarget(_arg1:MouseEvent):void{
            var _local2:NaverMusicPlayerBasicEvent;
            if (((_arg1.target) && (_arg1.target.name))){
                switch (_arg1.target.name){
                    case "send_to_cafe":
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_CAFE);
                        _local2.data = {mouseEvent:_arg1};
                        break;
                    case "send_to_blog":
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_BLOG);
                        _local2.data = {mouseEvent:_arg1};
                        break;
                };
                dispatchEvent(_local2);
            };
        }
        public function removeAsset():void{
            if (posting_popup_instance){
                removeChild(posting_popup_instance);
                posting_popup_instance.removeEventListener(MouseEvent.CLICK, checkTarget);
                posting_popup_instance = null;
            };
        }
        public function showPopup():void{
            this.visible = true;
            if (parent){
                parent.visible = true;
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.layercomponent 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class MouseColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 10264227;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0xB5B5B5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 10264227;
        public static const USER_ID_COLOR:int = 10922156;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 6974838;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 6053992;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 4123394;
        public static const DEFAULT_BUTTON_OUTTER:int = 6251371;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 6712178;
        public static const SKIN_BG_COLOR:int = 6053992;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 10987948;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 5471040;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 4123394;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 6974838;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 4123394;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0xFFFFFF;
        public static const FOOTER_VRULE_COLOR:int = 0x4E4E4E;
        public static const TITLE_COLOR:int = 14408926;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0xFFFFFF;
        public static const NPOD_LIMIT_LINE_COLOR:int = 9672350;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "MouseColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 14408926;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 9672350;
        public static const OVERED_SONG_INDEX_COLOR:int = 4123394;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0xA3A3A3;
        public static const OVERED_SONG_TITLE_COLOR:int = 4123394;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 6974838;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0xFFFFFF;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 4123394;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0xFFFFFF;
        public static const SELECT_BG_COLOR:int = 5396063;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xFFFFFF;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 4123394;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 6053992;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 10264227;
        public static const BUTTON_OUTTER:int = 4606290;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 6053992;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0xFFFFFF;
        public static const TRACK_OUTTER_LINE_COLOR:int = 5593184;
        public static const OVERED_SONG_SINGER_COLOR:int = 4123394;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 4123394;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 10922156;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 0x37D400;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 14014168;
        public static const MOUSE_OVERED_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class NewBlackAndWhite {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x777777;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x696969;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const USER_ID_COLOR:int = 0x8A8A8A;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0xCDCDCD;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 0xFFFFFF;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 48158;
        public static const DEFAULT_BUTTON_OUTTER:int = 14343392;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 13487831;
        public static const SKIN_BG_COLOR:int = 0xFFFFFF;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 9276840;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0xFFFFFF;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 48158;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0xCCCCCC;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 48158;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x666666;
        public static const FOOTER_VRULE_COLOR:int = 0x4E4E4E;
        public static const TITLE_COLOR:int = 0xFFFFFF;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0xFFFFFF;
        public static const NPOD_LIMIT_LINE_COLOR:int = 6776694;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "NewBlackAndWhite";
        public static const NPOD_AREA_VRULE_COLOR:int = 2875413;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0x4E4E4E;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 5328993;
        public static const OVERED_SONG_INDEX_COLOR:int = 48158;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x919191;
        public static const OVERED_SONG_TITLE_COLOR:int = 48158;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0xCCCCCC;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 48158;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x666666;
        public static const SELECT_BG_COLOR:int = 14606570;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 48158;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 0xFFFFFF;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x777777;
        public static const BUTTON_OUTTER:int = 12304840;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 0xF4F4F4;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x848484;
        public static const TRACK_OUTTER_LINE_COLOR:int = 14343392;
        public static const OVERED_SONG_SINGER_COLOR:int = 48158;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 48158;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x8A8A8A;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 2875413;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 0x848484;
        public static const MOUSE_OVERED_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class NewPurppleColor {

        public static const SELECTED_SONG_SINGER_COLOR:int = 9606052;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 4606570;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 9606052;
        public static const USER_ID_COLOR:int = 0x8A8A8A;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 13158866;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 15790324;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 6053058;
        public static const DEFAULT_BUTTON_OUTTER:int = 12369607;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 13487831;
        public static const SKIN_BG_COLOR:int = 15790324;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 10067644;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0xFFFFFF;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 6053058;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 13158866;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 6053058;
        public static const SELECTED_SONG_TITLE_COLOR:int = 5921647;
        public static const SELECTED_SONG_INDEX_COLOR:int = 5921647;
        public static const FOOTER_VRULE_COLOR:int = 0x4E4E4E;
        public static const TITLE_COLOR:int = 0xFFFFFF;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0xFFFFFF;
        public static const NPOD_LIMIT_LINE_COLOR:int = 10067644;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "NewPurppleColor";
        public static const NPOD_AREA_VRULE_COLOR:int = 2875413;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0xFFFFFF;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 10067644;
        public static const OVERED_SONG_INDEX_COLOR:int = 6053058;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 9276829;
        public static const OVERED_SONG_TITLE_COLOR:int = 6053058;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 13158866;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 5329508;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 6053058;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 5921647;
        public static const SELECT_BG_COLOR:int = 14803436;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 5921647;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 6053058;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 15790324;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 9606052;
        public static const BUTTON_OUTTER:int = 11645626;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 15790324;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x848484;
        public static const TRACK_OUTTER_LINE_COLOR:int = 14803436;
        public static const OVERED_SONG_SINGER_COLOR:int = 6053058;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 6053058;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x8A8A8A;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 3988484;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 0x848484;
        public static const MOUSE_OVERED_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class GrayColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x777777;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x5F5F5F;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const USER_ID_COLOR:int = 8355714;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0xBCBCBC;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 14277084;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 10658473;
        public static const LYRICSPANEL_TITLE_COLOR:int = 16138753;
        public static const DEFAULT_BUTTON_OUTTER:int = 11908537;
        public static const ALERT_POPUP_BORDER_COLOR:int = 10658473;
        public static const LYRICSPANEL_HRULE_COLOR:int = 13290190;
        public static const SKIN_BG_COLOR:int = 14277084;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 7171439;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0x909090;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 16138753;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0xBCBCBC;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 16138753;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x666666;
        public static const FOOTER_VRULE_COLOR:int = 10921643;
        public static const TITLE_COLOR:int = 5395027;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 15263978;
        public static const ALERT_POPUP_BG_COLOR:int = 15263978;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0x222222;
        public static const NPOD_LIMIT_LINE_COLOR:int = 8224133;
        public static const GUIDE_FOOTER_BG_COLOR:int = 13421777;
        public static const NAME:String = "GrayColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 5395027;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 8947854;
        public static const OVERED_SONG_INDEX_COLOR:int = 16138753;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x878787;
        public static const OVERED_SONG_TITLE_COLOR:int = 16138753;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0xBCBCBC;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0x333333;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 16138753;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x666666;
        public static const SELECT_BG_COLOR:int = 13421777;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 16138753;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 10921643;
        public static const LYRICSPANEL_BG_COLOR:int = 14277084;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x777777;
        public static const BUTTON_OUTTER:int = 10987438;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 14277084;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x666666;
        public static const TRACK_OUTTER_LINE_COLOR:int = 13421777;
        public static const OVERED_SONG_SINGER_COLOR:int = 16138753;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 16138753;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 8355714;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 0xFFFFFF;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 0x555555;
        public static const MOUSE_OVERED_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class WhiteColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x666666;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x696969;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const USER_ID_COLOR:int = 0x939393;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0xCCCCCC;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 12895686;
        public static const DEFAULT_BG_COLOR:int = 0xFFFFFF;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0xBFBFBF;
        public static const LYRICSPANEL_TITLE_COLOR:int = 0x32C100;
        public static const DEFAULT_BUTTON_OUTTER:int = 0xCFCFCF;
        public static const ALERT_POPUP_BORDER_COLOR:int = 0xC0C0C0;
        public static const LYRICSPANEL_HRULE_COLOR:int = 15527663;
        public static const SKIN_BG_COLOR:int = 0xFFFFFF;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 0x909090;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0x909090;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 0x32C100;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0x666666;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 0x32C100;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0x666666;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x666666;
        public static const FOOTER_VRULE_COLOR:int = 10921643;
        public static const TITLE_COLOR:int = 0x333333;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0xFEFEFE;
        public static const ALERT_POPUP_BG_COLOR:int = 0xFEFEFE;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0x222222;
        public static const NPOD_LIMIT_LINE_COLOR:int = 12501700;
        public static const GUIDE_FOOTER_BG_COLOR:int = 16251128;
        public static const NAME:String = "WhiteColorSet";
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0x333333;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 0xC0C0C0;
        public static const OVERED_SONG_INDEX_COLOR:int = 0x32C100;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x969696;
        public static const OVERED_SONG_TITLE_COLOR:int = 0x32C100;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0xCCCCCC;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0x333333;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0x333333;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 0x32C100;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x666666;
        public static const SELECT_BG_COLOR:int = 0xF5F5F5;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 0x32C100;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 0xFFFFFF;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x777777;
        public static const BUTTON_OUTTER:int = 12434878;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x9A9A9A;
        public static const OPTIONAL_BG_COLOR:int = 0xFFFFFF;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x666666;
        public static const TRACK_OUTTER_LINE_COLOR:int = 0xDDDDDD;
        public static const OVERED_SONG_SINGER_COLOR:int = 0x32C100;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 0x32C100;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x939393;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 3258625;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 12895686;
        public static const INDICATOR_COLOR:int = 0x555555;
        public static const MOUSE_OVERED_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class BlackColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0xB5B5B5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const USER_ID_COLOR:int = 0x8A8A8A;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0x565656;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_BUTTON_OUTTER:int = 0x3D3D3D;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 0x3F3F3F;
        public static const SKIN_BG_COLOR:int = 0x363636;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 0x818181;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 5471040;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 1038592;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 1038592;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x848484;
        public static const FOOTER_VRULE_COLOR:int = 0x4E4E4E;
        public static const TITLE_COLOR:int = 0xDDDDDD;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0xFFFFFF;
        public static const NPOD_LIMIT_LINE_COLOR:int = 0x5B5B5B;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "BlackColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0xDDDDDD;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 0x5B5B5B;
        public static const OVERED_SONG_INDEX_COLOR:int = 1038592;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x919191;
        public static const OVERED_SONG_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0xBCBCBC;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 1038592;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 1038592;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 0x363636;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x8A8A8A;
        public static const BUTTON_OUTTER:int = 0x2A2A2A;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 0x363636;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x848484;
        public static const TRACK_OUTTER_LINE_COLOR:int = 0x303030;
        public static const OVERED_SONG_SINGER_COLOR:int = 1038592;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 1038592;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x8A8A8A;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 1038592;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 0x848484;
        public static const MOUSE_OVERED_COLOR:int = 1038592;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class BlueBlueColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x777777;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 7180186;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x777777;
        public static const USER_ID_COLOR:int = 0x666666;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0xBCBCBC;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 14478321;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 10793657;
        public static const LYRICSPANEL_TITLE_COLOR:int = 16138753;
        public static const DEFAULT_BUTTON_OUTTER:int = 12571094;
        public static const ALERT_POPUP_BORDER_COLOR:int = 10793657;
        public static const LYRICSPANEL_HRULE_COLOR:int = 13228253;
        public static const SKIN_BG_COLOR:int = 14478321;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 7175297;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0x909090;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 15615064;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0xCCCCCC;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 15615064;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x666666;
        public static const FOOTER_VRULE_COLOR:int = 10921643;
        public static const TITLE_COLOR:int = 0x333333;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 14938356;
        public static const ALERT_POPUP_BG_COLOR:int = 14938356;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0x222222;
        public static const NPOD_LIMIT_LINE_COLOR:int = 8826295;
        public static const GUIDE_FOOTER_BG_COLOR:int = 13886697;
        public static const NAME:String = "BlueBlueColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0x333333;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 8497587;
        public static const OVERED_SONG_INDEX_COLOR:int = 15615064;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 9086382;
        public static const OVERED_SONG_TITLE_COLOR:int = 15615064;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0xBCBCBC;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0x333333;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0x333333;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 15615064;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x666666;
        public static const SELECT_BG_COLOR:int = 13492711;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 15615064;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 14478321;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x777777;
        public static const BUTTON_OUTTER:int = 11387850;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 14478321;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x666666;
        public static const TRACK_OUTTER_LINE_COLOR:int = 12965336;
        public static const OVERED_SONG_SINGER_COLOR:int = 15615064;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 15615064;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x666666;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 0xFFFFFF;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10266023;
        public static const INDICATOR_COLOR:int = 0x555555;
        public static const MOUSE_OVERED_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class BlackPinkColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0xB5B5B5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const USER_ID_COLOR:int = 0x8A8A8A;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0x565656;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 0x999999;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 16688582;
        public static const DEFAULT_BUTTON_OUTTER:int = 0x3D3D3D;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 0x3F3F3F;
        public static const SKIN_BG_COLOR:int = 0x363636;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 9465723;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0x222222;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 16688582;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 16688582;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x848484;
        public static const FOOTER_VRULE_COLOR:int = 10921643;
        public static const TITLE_COLOR:int = 0xDDDDDD;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0x222222;
        public static const NPOD_LIMIT_LINE_COLOR:int = 14386337;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "BlackPinkColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x9A9A9A;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0xDDDDDD;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 13861533;
        public static const OVERED_SONG_INDEX_COLOR:int = 16688582;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x919191;
        public static const OVERED_SONG_TITLE_COLOR:int = 16688582;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0xCCCCCC;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0xBCBCBC;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 16688582;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 16688582;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 8422282;
        public static const LYRICSPANEL_BG_COLOR:int = 0x363636;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x8A8A8A;
        public static const BUTTON_OUTTER:int = 0x2A2A2A;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x707070;
        public static const OPTIONAL_BG_COLOR:int = 0x363636;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x848484;
        public static const TRACK_OUTTER_LINE_COLOR:int = 0x303030;
        public static const OVERED_SONG_SINGER_COLOR:int = 16688582;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 16688582;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x8A8A8A;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 0xFFFFFF;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 0x777777;
        public static const INDICATOR_COLOR:int = 0x848484;
        public static const MOUSE_OVERED_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class GreenColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0xB5B5B5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const USER_ID_COLOR:int = 0x8A8A8A;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0x565656;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_BUTTON_OUTTER:int = 0x3D3D3D;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 0x3F3F3F;
        public static const SKIN_BG_COLOR:int = 0x363636;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 4878904;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 0x222222;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 1038592;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 1038592;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x848484;
        public static const FOOTER_VRULE_COLOR:int = 0x4E4E4E;
        public static const TITLE_COLOR:int = 0xDDDDDD;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0x222222;
        public static const NPOD_LIMIT_LINE_COLOR:int = 5409336;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "GreenColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0xDDDDDD;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 5474873;
        public static const OVERED_SONG_INDEX_COLOR:int = 1038592;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x919191;
        public static const OVERED_SONG_TITLE_COLOR:int = 1038592;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0xBCBCBC;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 1038592;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 1038592;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 0x363636;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x8A8A8A;
        public static const BUTTON_OUTTER:int = 0x2A2A2A;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 0x363636;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x848484;
        public static const TRACK_OUTTER_LINE_COLOR:int = 0x303030;
        public static const OVERED_SONG_SINGER_COLOR:int = 1038592;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 1038592;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x8A8A8A;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 0xFFFFFF;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 0x848484;
        public static const MOUSE_OVERED_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets {

    public class SBlackColorSet {

        public static const SELECTED_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const ACTIVATED_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0xB5B5B5;
        public static const DEFAULT_SONG_SINGER_COLOR:int = 0x8A8A8A;
        public static const USER_ID_COLOR:int = 0x8A8A8A;
        public static const LYRICSPANEL_DELEMETER_COLOR:int = 0x565656;
        public static const GUIDE_FOOTER_OVERED_UNDERLINE_COLOR:int = 9606036;
        public static const DEFAULT_BG_COLOR:int = 0x363636;
        public static const SKIN_SELECT_POPUP_BORDER_COLOR:int = 0x202020;
        public static const LYRICSPANEL_TITLE_COLOR:int = 3400932;
        public static const DEFAULT_BUTTON_OUTTER:int = 0x3D3D3D;
        public static const ALERT_POPUP_BORDER_COLOR:int = 8356747;
        public static const LYRICSPANEL_HRULE_COLOR:int = 0x3F3F3F;
        public static const SKIN_BG_COLOR:int = 0x363636;
        public static const NPOD_AREA_ARTIST_TITLE_COLOR:int = 4878705;
        public static const NPOD_AREA_TRACK_TITLE_COLOR:int = 5471040;
        public static const ACTIVE_SONG_INDEX_COLOR:int = 3400932;
        public static const SELECTED_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const ACTIVE_SONG_TITLE_COLOR:int = 3400932;
        public static const SELECTED_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const SELECTED_SONG_INDEX_COLOR:int = 0x848484;
        public static const FOOTER_VRULE_COLOR:int = 0x4E4E4E;
        public static const TITLE_COLOR:int = 0xDDDDDD;
        public static const SKIN_SELECT_POPUP_BG_COLOR:int = 0x535353;
        public static const ALERT_POPUP_BG_COLOR:int = 6909042;
        public static const NPOD_AREA_ALBUM_TITLE_COLOR:int = 0x222222;
        public static const NPOD_LIMIT_LINE_COLOR:int = 4821651;
        public static const GUIDE_FOOTER_BG_COLOR:int = 0x424242;
        public static const NAME:String = "SBlackColorSet";
        public static const NPOD_AREA_VRULE_COLOR:int = 10921643;
        public static const GUIDE_FOOTER_HELP_TEXT_COLOR:int = 0x666666;
        public static const BASIC_POSTION_RIGHT_TITLE_COLOR:int = 0xDDDDDD;
        public static const NPOD_AREA_TOTAL_TIME_COLOR:int = 4821651;
        public static const OVERED_SONG_INDEX_COLOR:int = 3400932;
        public static const DEFAULT_TOTAL_SONG_COUNT_TEXT_ON_PLAYLIST_TAB_BUTTON:int = 0x919191;
        public static const OVERED_SONG_TITLE_COLOR:int = 3400932;
        public static const DEFAULT_SONG_DELIMETER_COLOR:int = 0x464646;
        public static const GUIDE_FOOTER_OVERED_HELP_TEXT_COLOR:int = 0;
        public static const LYRICSPANEL_LYRICS_COLOR:int = 0xBCBCBC;
        public static const OVERED_SONG_DELIMETER_COLOR:int = 3400932;
        public static const DEFAULT_SONG_INDEX_COLOR:int = 0x848484;
        public static const SELECT_BG_COLOR:int = 0x2E2E2E;
        public static const DEFAULT_SONG_TITLE_COLOR:int = 0xDDDDDD;
        public static const ACTIVE_SONG_SINGER_COLOR:int = 3400932;
        public static const GUIDE_FOOTER_VRULE_COLOR:int = 15264233;
        public static const LYRICSPANEL_BG_COLOR:int = 0x363636;
        public static const LYRICSPANEL_ARTIST_COLOR:int = 0x8A8A8A;
        public static const BUTTON_OUTTER:int = 0x2A2A2A;
        public static const GUIDE_FOOTER_GUIDE_TEXT_COLOR:int = 0x888888;
        public static const OPTIONAL_BG_COLOR:int = 0x363636;
        public static const NOTIFY_TEXT_SENTENCE_COLOR:int = 0x848484;
        public static const TRACK_OUTTER_LINE_COLOR:int = 0x303030;
        public static const OVERED_SONG_SINGER_COLOR:int = 3400932;
        public static const ACTIVE_SONG_DELIMETER_COLOR:int = 3400932;
        public static const BASIC_POSTION_RIGHT_USER_ID_COLOR:int = 0x8A8A8A;
        public static const NPOD_AREA_PLAYING_TIME_COLOR:int = 0xFFFFFF;
        public static const GUIDE_FOOTER_DEFAULT_UNDERLINE_COLOR:int = 10592676;
        public static const INDICATOR_COLOR:int = 0x848484;
        public static const MOUSE_OVERED_COLOR:int = 0xFFFFFF;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.flashdynamix.motion.*;
    import fl.data.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.layercomponent.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.*;
    import de.aggro.utils.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets.*;
    import flash.external.*;

    public class NaverBasicPostingPlayerBaseView extends NaverMusicPlayerView {

        public static const NPOD_PLAYER_AREA:String = "NPOD_PLAYER_AREA";
        public static const LYRICSPANELLIST:String = "LYRICSPANELLIST";
        public static const NAVERMUSICPLAYERLIST:String = "NAVERMUSICPLAYERLIST";
        private static const UP:String = "UP";
        public static const SONG_LIST_AREA:String = "SONG_LIST_AREA";
        private static const MAX_MAIN_PANEL_COUNT:int = 3;
        private static const MAX_FOOTER_TAB_COUNT:int = 2;
        private static const VALID_TIME_INTERVAL:Number = 500;
        public static const TOP100PLAYLIST:String = "TOP100PLAYLIST";
        private static const MAX_TOTAL:int = 200;
        private static const DOWN:String = "DOWN";
        private static const POPUP_LAYER:String = "POPUP_LAYER";

        private static var TEST_COUNT:int = 0;
        public static var CURRENT_STATE:String = "NAVERMUSICPLAYERLIST";

        private var activeSongChanged:Boolean;
        private var popupLayer:Sprite;
        private var mainPanelList:Array;
        private var tooltipLayer:Sprite;
        private var npod:NpodPostingPlayerArea;
        private var playingSongIndex:int;
        private var leftArea:Sprite;
        private var currentPanelName:String;
        protected var isPure:Boolean;
        private var pop:PopMenu;
        private var activeMainPanel:NaverPostingMusicPlayerList;
        private var guidePanel:NaverBasicPostingPlayerGuideFooter;
        private var previewLayer:Sprite;
        private var header:NaverPostingPlayerHeader;
        private var footer:NPodPostingPlayerFooter;
        private var ticketPop:TicketPopup;
        private var postingPop:PostingPopup;
        private var npodNotiAlert:NpodNotifyAlert;
        private var timeHandler:Timer;
        private var playerModel:MusicPlayerBasicModel;
        private var rightArea:Sprite;
        private var bools:Boolean = false;
        private var allListIsAdult:Boolean;
        private var footerList:Array;

        public function NaverBasicPostingPlayerBaseView(){
            addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            playerModel = MusicPlayerBasicModel.getInstance();
            ControlSettingManager.getInstance().addEventListener(InternalPlayRestrictViloationEvent.NONE_INTERACTION_VIOLATION, handleViolation);
            ControlSettingManager.getInstance().addEventListener(InternalPlayRestrictViloationEvent.REPEAT_POLICY_VIOLATION, handleViolation);
        }
        private function removeExistResource():void{
            if (!Boolean(mainPanelList)){
                return;
            };
            if (Boolean(mainPanelList[NAVERMUSICPLAYERLIST])){
                mainPanelList[NAVERMUSICPLAYERLIST].removeAsset();
                rightArea.removeChild(mainPanelList[NAVERMUSICPLAYERLIST]);
            };
            if (Boolean(npod)){
                npod.removeAsset();
                leftArea.removeChild(npod);
            };
            if (Boolean(guidePanel)){
                guidePanel.removeAsset();
                guidePanel.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, showTicketGuide);
                rightArea.removeChild(guidePanel);
            };
            if (npodNotiAlert){
                npodNotiAlert.removeAsset();
            };
            if (ticketPop){
                popupLayer.removeChild(ticketPop);
                ticketPop = null;
            };
            if (popupLayer){
                removeChild(popupLayer);
            };
            if (leftArea){
                removeChild(leftArea);
            };
            if (tooltipLayer){
                removeChild(tooltipLayer);
                tooltipLayer = null;
            };
        }
        private function getProperList():DLinkedList{
            var _local1:DLinkedList;
            _local1 = playerModel.musicPlayList;
            return (_local1);
        }
        private function properFooter(_arg1:String):void{
            switch (_arg1){
                case NAVERMUSICPLAYERLIST:
                    changeFooterVisible(NPodPlayListFooter.FOOTER_NAME);
                    break;
            };
        }
        private function playingSongOff():void{
            if (activeMainPanel){
                if (activeMainPanel.playingSongRenderer){
                    activeMainPanel.playingSongRenderer.isPlaying = false;
                    activeMainPanel.invalidateList();
                };
                playerModel.activeNode = null;
            };
        }
        private function showPostSettingPop(_arg1:NaverMusicPlayerBasicEvent):void{
            pop.showPopup();
        }
        private function manageAdultSong(_arg1:NHNMusicStreamInfodto):void{
            var _local3:SongInfoServiceObject;
            var _local2:UserInfo = playerModel.userInfo;
            if (Boolean(_local2)){
                if ((((_local2.isAdult == UserInfo.IS_NOT_ADULT)) && (allListIsAdult))){
                };
                if ((((_local2.isAdult == UserInfo.IS_NOT_ADULT)) && ((_arg1.trackAdult == UserInfo.IS_ADULT)))){
                    if (playerModel.activeNode){
                        _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                        if (_local3){
                            _local3.isValid = false;
                        };
                    };
                } else {
                    if ((((_local2.isAdult == UserInfo.IS_ADULT)) && ((_arg1.trackAdult == UserInfo.IS_ADULT)))){
                        if (playerModel.activeNode){
                            _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                            updatePlayingSongCellRenderer();
                            if (((_local3) && (!(_local3.isValid)))){
                                _local3.isValid = true;
                                playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(_local3);
                                activeMainPanel.invalidateList();
                            };
                        };
                    };
                };
                if (_arg1.serviceflag == "N"){
                    if (playerModel.activeNode){
                        _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                        if (_local3){
                            _local3.updateServiceFlag = _arg1.serviceflag;
                            _local3.isServiced = false;
                            activeMainPanel.invalidateList();
                        };
                    };
                };
            };
        }
        private function showTicketGuide(_arg1:NaverMusicPlayerBasicEvent):void{
            npodNotiAlert.visible = false;
            if (playerModel.checkUserIsPaid()){
                ticketPop.selectPopup(TicketPopup.LOG_IN_USER);
            } else {
                ticketPop.selectPopup(TicketPopup.NOT_LOG_IN_USER);
            };
            ticketPop.showPopup();
        }
        public function updatePlayListModel(_arg1:Object=null):void{
            mainPanelList[NAVERMUSICPLAYERLIST].dataProvider.removeAll();
            mainPanelList[NAVERMUSICPLAYERLIST].dataProvider = new DataProvider(_arg1);
            mainPanelList[NAVERMUSICPLAYERLIST].drawNow();
        }
        override public function updateTop100SongList(_arg1:SongList):void{
        }
        private function checkPlayingSongRemovedState():void{
            if (activeSongChanged){
                activeSongChanged = false;
                playerModel.activeNode = playerModel.tmpNextNode;
                if (Boolean(playerModel.activeNode)){
                    playerModel.activeNode = playerModel.searchVaildSongObject(playerModel.activeNode.data);
                    if (Boolean(playerModel.activeNode)){
                        playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(playerModel.activeNode.data);
                    };
                    playMusic(true);
                    updatePlayingSongCellRenderer();
                };
            };
        }
        private function createChildren():void{
            rightArea = new Sprite();
            rightArea.x = 165;
            rightArea.y = 0;
            rightArea.name = SONG_LIST_AREA;
            addChild(rightArea);
            leftArea = new Sprite();
            leftArea.x = 0;
            leftArea.y = 0;
            leftArea.name = NPOD_PLAYER_AREA;
            addChild(leftArea);
        }
        private function createPopupLayer():void{
            popupLayer = new Sprite();
            popupLayer.name = POPUP_LAYER;
            popupLayer.graphics.beginFill(0xCCCCCC, 0);
            popupLayer.graphics.drawRect(0, 0, 500, 353);
            popupLayer.graphics.endFill();
            popupLayer.visible = false;
            popupLayer.addEventListener(MouseEvent.MOUSE_DOWN, popupMouseDownHandler);
            addChild(popupLayer);
            npodNotiAlert = new NpodNotifyAlert();
            npodNotiAlert.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, showTicketGuide);
            npodNotiAlert.hidePopup();
            npodNotiAlert.x = 10;
            npodNotiAlert.y = 203;
        }
        private function sendSongToPosting():void{
            if (pop){
                popupLayer.visible = true;
                pop.showPopup();
            };
        }
        override public function notifyCurrentSongWasCompleted():void{
            var _local1:NaverMusicPlayerBasicEvent;
            npod.initAllState();
            if (Boolean(playerModel.playingSongNode)){
                if (((!(ControlSettingManager.getInstance().isValid)) && (!(playerModel.isValidNextPlayState())))){
                    notiForceFinishEvent();
                    ControlSettingManager.getInstance().repeatCheck();
                    return;
                };
                if ((((playerModel.userInfo.isAdult == UserInfo.IS_NOT_ADULT)) && (allListIsAdult))){
                    notiForceFinishEvent();
                    return;
                };
                if (!playerModel.isValidNextPlayState()){
                    notiForceFinishEvent();
                    return;
                };
                if (playerModel.setNextSongAsCurrentActiveSong(getProperList())){
                    playMusic(true);
                    if (((playerModel.activeNode) && ((playerModel.activeNode.data as SongInfoServiceObject).isValid))){
                        updatePlayingSongCellRenderer();
                    };
                };
            } else {
                _local1 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
                _local1.data = {auto:true};
                dispatchEvent(_local1);
            };
        }
        private function getSelectedItemArr():Array{
            var _local2:DataProvider;
            var _local3:SongInfoServiceObject;
            var _local4:int;
            var _local1:Array = new Array();
            if (Boolean(activeMainPanel)){
                _local2 = mainPanelList[NAVERMUSICPLAYERLIST].dataProvider;
                _local4 = 0;
                while (_local4 < _local2.length) {
                    _local3 = (_local2.getItemAt(_local4) as SongInfoServiceObject);
                    _local1.push(_local3.getTrackID());
                    _local4++;
                };
            };
            return (_local1);
        }
        private function finishForce():void{
            npod.initAllState();
            activeMainPanel.playingSongRenderer.isPlaying = false;
            activeMainPanel.invalidateList();
            playerModel.activeNode = null;
            npod.updateAllInfomationOfSong();
            notiForceFinishEvent();
        }
        private function selectAllSongOfMusicList():void{
            activeMainPanel.selectAllItem();
        }
        private function createNewResource():void{
            createChildren();
            createNpodArea();
            createMainPanel();
            createHeader();
            createFooter();
            createGuide();
            createPopupLayer();
            createLayerPopup();
            var _local1:String = NAVERMUSICPLAYERLIST;
            if (currentPanelName){
                _local1 = currentPanelName;
            };
            changeMainPanelVisible(_local1);
            properFooter(_local1);
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER);
            dispatchEvent(_local2);
        }
        public function updateTotalPlayTime(_arg1:Number):void{
        }
        private function createMainPanel():void{
            var _local2:Shape;
            var _local3:Shape;
            mainPanelList = new Array();
            var _local1:NaverPostingMusicPlayerList = new NaverPostingMusicPlayerList();
            _local1.rowHeight = 19;
            _local1.name = NAVERMUSICPLAYERLIST;
            _local1.playerModel = playerModel;
            _local1.dragEnable = true;
            _local1.move(0, 27);
            _local1.setSize(335, 270);
            _local1.addEventListener(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, handleListEventHandler);
            _local1.addEventListener(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED, itemDoubleClickCheck);
            _local1.addEventListener(InternalUIHandlerEvent.IS_SELECTED_ALL, updateFooterCheckBoxButton);
            _local1.setStyle("cellRenderer", NaverBasicPostingPlayerCellRenderer);
            playerModel.activeMusicList = playerModel.musicPlayList.concat();
            allListIsAdult = playerModel.allListAdultCheck();
            mainPanelList[NAVERMUSICPLAYERLIST] = _local1;
            activeMainPanel = _local1;
            rightArea.addChild(_local1);
            if (AssetLoadManager.getInstance().signiture.NAME == "WhiteColorSet"){
                _local2 = new Shape();
                _local2.graphics.lineStyle(1, 0xDDDDDD, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                _local2.graphics.moveTo(0, 0);
                _local2.graphics.lineTo(499, 0);
                _local2.graphics.lineTo(499, 27);
                _local2.graphics.moveTo(0, 0);
                _local2.graphics.lineTo(0, 352);
                _local2.graphics.moveTo(0, 352);
                _local2.graphics.lineTo(499, 352);
                _local2.graphics.lineTo(499, 296);
                addChild(_local2);
                _local3 = new Shape();
                _local3.x = 334;
                _local3.y = 0;
                _local3.graphics.lineStyle(1, 0xDDDDDD, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                _local3.graphics.moveTo(0, 0);
                _local3.graphics.lineTo(0, 300);
                _local1.addChildAt(_local3, 0);
            };
            setTimeout(mainPanelList[NAVERMUSICPLAYERLIST].updateMouseEnableState, 1000);
        }
        private function handleSendingPostingConfig(_arg1:NaverMusicPlayerBasicEvent):void{
            pop.hidePopup();
            var _local2:String = _arg1.type;
            var _local3:int = activeMainPanel.selectedItems.length;
            if ((((_local3 > 0)) && ((_local3 < activeMainPanel.dataProvider.length)))){
                selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114);
            };
            var _local4:PostingSettingClass = PostingSettingClass.getInstance();
            switch (_local2){
                case NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_BLOG:
                    _local4.site = PostingPopup.BLOG;
                    break;
                case NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_CAFE:
                    _local4.site = PostingPopup.CAFE;
                    break;
            };
            var _local5:Object = {
                pcolor:_local4.pcolor,
                title:_local4.title,
                ptype:_local4.ptype,
                site:_local4.site,
                trackId:getSelectedItemArr()
            };
            var _local6:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEND_POSTING_SETTING_CONFIGURATION, true);
            _local6.data = _local5;
            dispatchEvent(_local6);
        }
        private function itemDoubleClickCheck(_arg1:NaverMusicPlayerBasicEvent):void{
            var _local4:NaverPostingMusicPlayerList;
            var _local5:NaverPostingMusicPlayerList;
            var _local6:DLinkedList;
            var _local2:NaverBasicPostingPlayerCellRenderer = (_arg1.data.renderer as NaverBasicPostingPlayerCellRenderer);
            var _local3:String = _arg1.data.target;
            var _local7:SongInfoServiceObject = (_local2.data as SongInfoServiceObject);
            CURRENT_STATE = _local3;
            switch (_local3){
                case NAVERMUSICPLAYERLIST:
                    npod.initAllState();
                    _local4 = mainPanelList[TOP100PLAYLIST];
                    _local5 = mainPanelList[NAVERMUSICPLAYERLIST];
                    playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    allListIsAdult = playerModel.allListAdultCheck();
                    _local5.changeCurrentActiveRenderer(_local2, _local3);
                    break;
            };
        }
        public function updatePlayingSongCellRenderer():void{
            var _local1:NaverPostingMusicPlayerList;
            _local1 = mainPanelList[NAVERMUSICPLAYERLIST];
            _local1.changeRendererViewAsPlaying();
        }
        private function popupMouseDownHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case POPUP_LAYER:
                        pop.hidePopup();
                        ticketPop.hidePopup();
                        _local2.visible = false;
                        break;
                };
            };
        }
        private function showRightArea(_arg1:Boolean):void{
            if (_arg1){
                TweensyZero.fromTo(rightArea, {alpha:0}, {alpha:1}, 0.2);
                this.rightArea.visible = true;
            } else {
                TweensyZero.fromTo(rightArea, {alpha:1}, {alpha:0}, 0.2);
                this.rightArea.visible = false;
            };
        }
        private function selectedEmptyState(_arg1:String):void{
            if (!Boolean(_arg1)){
                return;
            };
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        override public function initializeView():void{
            AssetLoadManager.getInstance().assetInterpreter = new NaverPostingPlayerInterpreter();
            loadAsset(AssetLoadManager.TEST_NEW01_ASSET_URL, NewBlackAndWhite);
            TEST_COUNT++;
        }
        private function handleListEventHandler(_arg1:NaverMusicPlayerBasicEvent):void{
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG:
                    npod.checkPlayPauseButtonState(true);
                    playMusic(true, false);
                    break;
            };
        }
        private function validSongCheck():void{
            var _local3:SongInfoServiceObject;
            var _local1:DListIterator = playerModel.musicPlayList.getListIterator();
            var _local2:UserInfo = playerModel.userInfo;
            if (Boolean(_local1)){
                while (_local1.hasNext()) {
                    _local3 = (_local1.node.data as SongInfoServiceObject);
                    if ((((_local2.isAdult == UserInfo.IS_NOT_ADULT)) && (_local3.isAdultSong()))){
                        _local3.isValid = false;
                    } else {
                        if ((((_local2.isAdult == UserInfo.IS_ADULT)) && (_local3.isAdultSong()))){
                            if (!_local3.isValid){
                                _local3.isValid = true;
                            };
                        };
                    };
                    if (_local3.isInvalidServiceFlag()){
                        _local3.isServiced = false;
                    };
                    _local1.next();
                };
            };
        }
        override public function initializeAuth(_arg1:Authorization):void{
            playerModel.userInfo.hasTicket = _arg1.hasticket;
            playerModel.userInfo.isLogin = _arg1.islogin;
            playerModel.userInfo.isAdult = _arg1.isadult;
            playerModel.userInfo.isTeam = _arg1.isteam;
            updateViewPanel();
            validSongCheck();
        }
        private function createPromotionCheckOutPopup():void{
            var _local1:Object;
            var _local2:String;
            if (ExternalInterface.available){
                _local1 = CookieUtil.getCookie(ControlSettingManager.POPIP_HIDE_OPTION_CHECKOUT_PROMOTION);
                if (Boolean(_local1)){
                    _local2 = _local1.toString();
                    switch (_local2){
                        case "true":
                            break;
                        case "false":
                            makePromotionCheckOutPopup(false);
                            break;
                    };
                    return;
                };
                makePromotionCheckOutPopup(false);
            };
        }
        private function createNpodArea():void{
            npod = new NpodPostingPlayerArea();
            npod.playerModel = playerModel;
            npod.createAssetInstance();
            npod.updateLayout();
            npod.addEventListener(NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.HIDE_SONG_LIST, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PLAY_NEXT_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PLAY_PREV_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, npodButtonClickHandler);
            leftArea.addChild(npod);
        }
        private function requestLyrics():void{
        }
        private function createGuide():void{
            guidePanel = new NaverBasicPostingPlayerGuideFooter();
            guidePanel.x = 0;
            guidePanel.y = 326;
            guidePanel.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, showTicketGuide);
            guidePanel.addEventListener(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, showPostSettingPop);
            rightArea.addChild(guidePanel);
        }
        private function playMusic(_arg1:Boolean, _arg2:Boolean=true):void{
            var _local4:NaverMusicPlayerBasicEvent;
            var _local5:DLinkedList;
            var _local6:DListIterator;
            var _local3:DListNode = playerModel.activeNode;
            if (Boolean(_local3)){
                if (_arg1){
                    npod.updateAllInfomationOfSong();
                    npod.checkPlayPauseButtonState(true);
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                } else {
                    npod.checkPlayPauseButtonState(false);
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, true);
                };
                _local4.data = {
                    trackId:(_local3.data as SongInfoServiceObject).getTrackID(),
                    auto:_arg2
                };
                dispatchEvent(_local4);
            } else {
                _local5 = getProperList();
                _local6 = _local5.getListIterator();
                if (Boolean(_local6)){
                    _local6.start();
                    playerModel.activeNode = _local6.node;
                    playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    allListIsAdult = playerModel.allListAdultCheck();
                    playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList((playerModel.activeNode.data as SongInfoServiceObject));
                    if (Boolean(playerModel.playingSongNode)){
                        npod.checkPlayPauseButtonState(true);
                        _local3 = playerModel.activeNode;
                        npod.updateAllInfomationOfSong();
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                        _local4.data = {
                            trackId:(_local3.data as SongInfoServiceObject).getTrackID(),
                            auto:_arg2
                        };
                        dispatchEvent(_local4);
                    };
                };
            };
            requestLyrics();
        }
        private function npodButtonClickHandler(_arg1:NaverMusicPlayerBasicEvent):void{
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST:
                    showRightArea(true);
                    break;
                case NaverMusicPlayerBasicEvent.HIDE_SONG_LIST:
                    showRightArea(false);
                    break;
                case NaverMusicPlayerBasicEvent.PLAY_NEXT_SONG:
                    if (((!(ControlSettingManager.getInstance().isValid)) && (!(playerModel.isValidNextPlayState())))){
                        notiForceFinishEvent();
                        ControlSettingManager.getInstance().repeatCheck();
                        return;
                    };
                    if (playerModel.setNextSongAsCurrentActiveSong(getProperList(), true)){
                        npod.initAllState();
                        playMusic(true, false);
                        updatePlayingSongCellRenderer();
                    };
                    break;
                case NaverMusicPlayerBasicEvent.PLAY_PREV_SONG:
                    if (playerModel.setPrevSongAsCurrentActiveSong(getProperList(), true)){
                        npod.initAllState();
                        playMusic(true, false);
                        updatePlayingSongCellRenderer();
                    };
                    break;
                case NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3:
                    break;
                case NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG:
                    resumeMusic(false);
                    updatePlayingSongCellRenderer();
                    break;
                case NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG:
                    playMusic(false, false);
                    break;
            };
        }
        private function checkMaxTotal():Boolean{
            var _local1:Boolean;
            var _local2:int = playerModel.musicPlayListAsArray.length;
            if (_local2 >= MAX_TOTAL){
                _local1 = true;
            };
            return (_local1);
        }
        private function changeFooterVisible(_arg1:String):void{
            var _local2:Object;
            for (_local2 in footerList) {
                if (_local2.toString() === _arg1){
                    footerList[_local2].visible = true;
                } else {
                    footerList[_local2].visible = false;
                };
            };
        }
        private function changePlayingSongAsFirst(_arg1:Boolean=true):void{
            var _local3:SongInfoServiceObject;
            var _local2:DListIterator = playerModel.musicPlayList.getListIterator();
            if (_local2){
                _local2.start();
                playerModel.activeNode = _local2.node;
                if (playerModel.activeNode){
                    _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                    if (_local3){
                        playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(_local3);
                        playMusic(true, _arg1);
                        updatePlayingSongCellRenderer();
                    };
                };
            };
        }
        private function updateFooterCheckBox(_arg1:InternalUIHandlerEvent):void{
            selectAllSongOfMusicList();
        }
        private function sendMP3OfSelectedSongList():void{
            var _local1:Array;
            var _local2:int;
            var _local3:SongInfoServiceObject;
            var _local4:Boolean;
            var _local5:int;
            var _local6:Array;
            var _local7:UserInfo;
            var _local8:int;
            var _local9:NaverMusicPlayerBasicEvent;
            var _local10:Boolean;
            var _local11:String;
            if (Boolean(activeMainPanel)){
                _local1 = activeMainPanel.selectedItems;
                _local2 = _local1.length;
                if (_local2 <= 0){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110);
                    return;
                };
                _local4 = true;
                _local5 = 0;
                _local6 = new Array();
                _local7 = playerModel.userInfo;
                if (_local7.isTeam == UserInfo.IS_TEAM){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                    return;
                };
                _local8 = 0;
                while (_local8 < _local2) {
                    _local3 = (_local1[_local8] as SongInfoServiceObject);
                    _local10 = false;
                    if (Boolean(_local3)){
                        _local11 = _local3.getTrackID();
                        if (((_local11) && ((_local11.length > 0)))){
                            if (!_local3.hasMp3File()){
                                _local4 = false;
                                _local5++;
                            } else {
                                if (_local3.adultProperty === "Y"){
                                    if (_local7.isAdult === UserInfo.IS_ADULT){
                                        _local6.push(_local11);
                                    } else {
                                        _local4 = false;
                                        _local10 = true;
                                        _local5++;
                                    };
                                } else {
                                    _local6.push(_local11);
                                };
                                if (!_local3.isServiced){
                                    _local4 = false;
                                    _local5++;
                                };
                            };
                        };
                    };
                    _local8++;
                };
                if (((!(_local4)) && ((_local5 == _local2)))){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111);
                    return;
                };
                if (((!(_local4)) && (!((_local5 == _local2))))){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112);
                };
                _local9 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, false, false);
                _local9.data = {trackIds:_local6};
                dispatchEvent(_local9);
            };
        }
        private function updateViewPanel(_arg1:UserInfoPropertyEvent=null):void{
            if (((activeMainPanel) && (guidePanel))){
                validSongCheck();
                activeMainPanel.invalidateList();
                npod.updateMp3ActiveState();
                guidePanel.showPropertGuideView(playerModel.userInfo);
            };
        }
        private function updateFooterCheckBoxButton(_arg1:InternalUIHandlerEvent):void{
            var _local3:Boolean;
            var _local2:NaverPostingMusicPlayerList = (_arg1.target as NaverPostingMusicPlayerList);
            if (_local2){
                _local3 = _arg1.data.isAll;
                footer.updateCheckBox(_local3);
            };
        }
        private function addedToStageHandler(_arg1:Event):void{
            AssetLoadManager.full_path = (("http://" + loaderInfo.loaderURL.split("/")[2]) + "/");
            stage.addEventListener(MouseEvent.MOUSE_UP, stageMouseUpHandler);
        }
        private function stageMouseUpHandler(_arg1:MouseEvent):void{
            if (((((super.isLoadComplete) && (mainPanelList))) && (mainPanelList[NAVERMUSICPLAYERLIST]))){
                mainPanelList[NAVERMUSICPLAYERLIST].tryDragging = false;
                mainPanelList[NAVERMUSICPLAYERLIST].isDragging = false;
                mainPanelList[NAVERMUSICPLAYERLIST].dragInit = false;
                mainPanelList[NAVERMUSICPLAYERLIST].initMouseDrag();
            };
        }
        private function createHeader():void{
            header = new NaverPostingPlayerHeader();
            rightArea.addChild(header);
            header.updateHeaderData(PostingSettingClass.getInstance().title, PostingSettingClass.getInstance().userid);
        }
        override public function updateCurrentPlayTime(_arg1:Number):void{
            npod.updateCurrentSongLength(_arg1);
        }
        private function createFooter():void{
            footer = new NPodPostingPlayerFooter();
            footer.move(0, 296);
            footer.setFooterBackgroundSkin();
            footer.setFooterButtonList(footer.getTop100ListFooterAssetFromLibrary());
            footer.addEventListener(NaverMusicPlayerBasicEvent.SELECT_ALL_SONG_BUTTON, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, footerMenuActionHandler);
            footer.addEventListener(InternalUIHandlerEvent.IS_SELECTED_ALL, updateFooterCheckBox);
            rightArea.addChild(footer);
        }
        private function footerMenuActionHandler(_arg1:NaverMusicPlayerBasicEvent):void{
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.SELECT_ALL_SONG_BUTTON:
                    selectAllSongOfMusicList();
                    break;
                case NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON:
                    sendSongToPosting();
                    break;
                case NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM:
                    sendSelectedSongListToCustomAlbum();
                    break;
                case NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3:
                    sendMP3OfSelectedSongList();
                    break;
            };
        }
        override public function removeAllView():void{
            removeExistResource();
        }
        private function stageMouseOutHandler(_arg1:MouseEvent):void{
        }
        private function handleOption(_arg1:int):void{
            switch ((_arg1 & 0xFF)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_NONE_TRACK:
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_FRONT_TRACK:
                    ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_FIRST;
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK:
                    ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_LAST;
                    break;
                default:
                    throw (new Error("invalid adding Options!"));
            };
            switch ((_arg1 & 0xFF00)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_OLD_FIRST_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK:
                    ControlSettingManager.getInstance().playOption = (_arg1 & 0xFF00);
                    break;
                default:
                    throw (new Error("invalid playing option!"));
            };
        }
        private function requestCurrentMP3():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
            _local1.data = {};
            dispatchEvent(_local1);
        }
        private function makePromotionCheckOutPopup(_arg1:Boolean):void{
            var _local2:PromotionCheckout = new PromotionCheckout();
            _local2.x = 0;
            _local2.y = 0;
            _local2.createChildren(_arg1);
            addChild(_local2);
        }
        override public function configPostingPlayerInformation(_arg1:Article):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.START_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local2);
            var _local3:PostingSettingClass = PostingSettingClass.getInstance();
            _local3.pcolor = _arg1.pcolor;
            _local3.title = _arg1.title;
            _local3.ptype = _arg1.ptype;
            _local3.mylist_seq = _arg1.mylist_seq;
            _local3.userid = _arg1.userid;
            _local3.linkYn = _arg1.linkyn;
            _local3.link = _arg1.link;
            AssetLoadManager.getInstance().assetInterpreter = new NaverPostingPlayerInterpreter();
            SettingInterpreter.getInstance().updateSkinSetting(_local3.pcolor, true);
        }
        private function handleViolation(_arg1:InternalPlayRestrictViloationEvent):void{
            switch (_arg1.type){
                case InternalPlayRestrictViloationEvent.NONE_INTERACTION_VIOLATION:
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100);
                    break;
                case InternalPlayRestrictViloationEvent.REPEAT_POLICY_VIOLATION:
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108);
                    break;
            };
        }
        private function removeScrollBarEvent(_arg1:Event):void{
        }
        override protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLETE_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local2);
            removeAllView();
            createNewResource();
            updatePlayListModel(playerModel.musicPlayListAsArray);
            super.isLoadComplete = true;
            updateViewPanel();
        }
        private function sortSelectedItems(_arg1:Boolean=false):Array{
            return (mainPanelList[NaverMusicPlayerList.NAME].sortSelectedItems(_arg1));
        }
        override public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
            var _local9:Boolean;
            if (!Boolean(_arg1)){
                return;
            };
            var _local3 = 30;
            var _local4:Array = _arg1.list;
            if (!_arg1.list){
                return;
            };
            handleOption(_arg2);
            var _local5:int = playerModel.musicPlayListAsArray.length;
            playingSongIndex = _local5;
            var _local6:int = _arg1.length;
            var _local7:Song;
            var _local8:SongInfoServiceObject;
            if (ControlSettingManager.getInstance().controlOption === ControlSettingManager.INSERT_AT_FIRST){
                _local4.reverse();
                _local9 = true;
            };
            var _local10:String = ControlSettingManager.getInstance().controlOption;
            var _local11:int;
            while (_local11 < _local6) {
                _local7 = _local4[_local11];
                _local8 = new SongInfoServiceObject(_local7);
                switch (_local10){
                    case ControlSettingManager.INSERT_AT_FIRST:
                        playerModel.addSingleSongToPlayListAtFirst(_local8);
                        break;
                    case ControlSettingManager.INSERT_AT_LAST:
                        playerModel.addSingleSongToPlayListAtLast(_local8);
                        break;
                };
                _local11++;
            };
            playerModel.activeMusicList = playerModel.musicPlayList.concat();
            allListIsAdult = playerModel.allListAdultCheck();
            if (playerModel.isShuffled){
                playerModel.shuffleActiveList();
            };
            if (isLoadComplete){
                validateViewNow();
            } else {
                if (timeHandler){
                    timeHandler.removeEventListener(TimerEvent.TIMER, checkVaild);
                    timeHandler = null;
                };
                timeHandler = new Timer(VALID_TIME_INTERVAL, 0);
                timeHandler.addEventListener(TimerEvent.TIMER, checkVaild);
                timeHandler.start();
            };
        }
        public function updateCurrentSongServiceObjectList(_arg1:Object):void{
            var _local2:String;
            if (Boolean(_arg1)){
                if (Boolean(activeMainPanel)){
                    _local2 = activeMainPanel.name;
                    switch (_local2){
                        case TOP100PLAYLIST:
                            break;
                        case NAVERMUSICPLAYERLIST:
                            break;
                    };
                };
            };
        }
        private function checkVaild(_arg1:TimerEvent):void{
            if (isLoadComplete){
                isLoadComplete = false;
                timeHandler.stop();
                timeHandler.removeEventListener(TimerEvent.TIMER, checkVaild);
                timeHandler = null;
                validateViewNow();
            };
        }
        private function notiForceFinishEvent():void{
            npod.initAllState();
            playingSongOff();
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
            _local1.data = {auto:true};
            dispatchEvent(_local1);
        }
        private function sendSelectedSongListToCustomAlbum():void{
            var _local1:Array;
            var _local2:int;
            var _local3:SongInfoServiceObject;
            var _local4:Array;
            var _local5:int;
            var _local6:NaverMusicPlayerBasicEvent;
            var _local7:String;
            if (Boolean(activeMainPanel)){
                _local1 = activeMainPanel.selectedItems;
                _local2 = _local1.length;
                if (_local2 <= 0){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113);
                    return;
                };
                _local4 = new Array();
                _local5 = 0;
                while (_local5 < _local2) {
                    _local3 = (_local1[_local5] as SongInfoServiceObject);
                    if (Boolean(_local3)){
                        _local7 = _local3.getTrackID();
                        if (((_local7) && ((_local7.length > 0)))){
                            _local4.push(_local7);
                        };
                    };
                    _local5++;
                };
                _local6 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, false, false);
                _local6.data = {trackIds:_local4};
                dispatchEvent(_local6);
            };
        }
        private function createLayerPopup():void{
            pop = new PopMenu();
            pop.x = 394;
            pop.y = 0xFF;
            pop.createAsset();
            pop.hidePopup();
            pop.addEventListener(NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_BLOG, handleSendingPostingConfig);
            pop.addEventListener(NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_CAFE, handleSendingPostingConfig);
            popupLayer.addChild(pop);
            ticketPop = new TicketPopup();
            ticketPop.x = 164;
            ticketPop.y = 177;
            ticketPop.createAsset();
            ticketPop.hidePopup();
            popupLayer.addChild(ticketPop);
            tooltipLayer = new Sprite();
            tooltipLayer.mouseEnabled = false;
            tooltipLayer.mouseChildren = false;
            addChild(tooltipLayer);
            TooltipManager.getInstance().init(tooltipLayer);
            TooltipManager.getInstance().setOffsetPoint(0, 10);
            TooltipManager.getInstance().hide();
        }
        private function resumeMusic(_arg1:Boolean=true):void{
            var _local3:NaverMusicPlayerBasicEvent;
            var _local4:DLinkedList;
            var _local5:DListIterator;
            var _local2:DListNode = playerModel.activeNode;
            if (Boolean(_local2)){
                ControlSettingManager.getInstance().noneInteractionCheckHandler(false);
                npod.updateAllInfomationOfSong();
                npod.checkPlayPauseButtonState(true);
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
                _local3.data = {trackId:(_local2.data as SongInfoServiceObject).getTrackID()};
                dispatchEvent(_local3);
                requestLyrics();
            } else {
                _local4 = getProperList();
                _local5 = playerModel.activeMusicList.getListIterator();
                if (Boolean(_local5)){
                    _local5.start();
                    playerModel.playingSongNode = _local5.node;
                    if (Boolean(playerModel.playingSongNode)){
                        ControlSettingManager.getInstance().noneInteractionCheckHandler(false);
                        npod.checkPlayPauseButtonState(true);
                        playerModel.activeNode = playerModel.searchVaildSongObject(playerModel.playingSongNode.data, _local4);
                        _local2 = playerModel.activeNode;
                        npod.updateAllInfomationOfSong();
                        _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
                        _local3.data = {trackId:(_local2.data as SongInfoServiceObject).getTrackID()};
                        dispatchEvent(_local3);
                        requestLyrics();
                    };
                };
            };
        }
        override public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            var _local2:SongInfoServiceObject;
            playerModel.userInfo.isAuth = _arg1.isAuth;
            playerModel.userInfo.isTeam = _arg1.isTeam;
            playerModel.userInfo.hasTicket = _arg1.hasTicket;
            npod.displayTime = _arg1.displayTime;
            npod.totalTime = _arg1.length;
            if (playerModel.activeNode){
                _local2 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (_local2){
                    if (_local2.adultProperty != _arg1.trackAdult){
                        throw (new Error(((((" adult property of NHNMusicStreamInfodto is different from existing song data in list!!!" + "[NHNMusicStreamInfodto:: ") + _arg1.isAdult) + "][song data in list:: ") + _local2.adultProperty)));
                    };
                    manageAdultSong(_arg1);
                };
            };
            return (null);
        }
        private function validateViewNow():void{
            var _local1:DListIterator;
            validSongCheck();
            if (Boolean(playerModel.activeNode)){
                playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(playerModel.activeNode.data);
                npod.updateAllInfomationOfSong();
            } else {
                _local1 = playerModel.musicPlayList.getListIterator();
                if (_local1){
                    _local1.start();
                    playerModel.activeNode = _local1.node;
                    playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    allListIsAdult = playerModel.allListAdultCheck();
                    playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList((playerModel.activeNode.data as SongInfoServiceObject));
                    npod.updateAllInfomationOfSong();
                };
            };
            npod.deemOnOff(true);
            npod.resizeDeemedLayer(true);
            if (Boolean(this.mainPanelList[NAVERMUSICPLAYERLIST].dataProvider)){
                this.mainPanelList[NAVERMUSICPLAYERLIST].dataProvider.removeAll();
            };
            this.mainPanelList[NAVERMUSICPLAYERLIST].isSelectAll = false;
            this.mainPanelList[NAVERMUSICPLAYERLIST].dataProvider = new DataProvider(playerModel.musicPlayListAsArray);
            this.mainPanelList[NAVERMUSICPLAYERLIST].drawNow();
        }
        private function processPostingSetting(_arg1:NaverMusicPlayerBasicEvent):void{
            var _local2:Object = _arg1.data;
            var _local3:String = _local2.action;
            var _local4:String = _local2.postingType;
            var _local5:String = _local2.color;
            var _local6:String = _local2.title;
            switch (_local3){
                case PostingPopup.COMMIT_POSTING_CONFIG:
                    break;
                case PostingPopup.CANCEL_POSTING_CONFIG:
                    break;
            };
        }
        private function changeMainPanelVisible(_arg1:String):void{
            var _local2:Object;
            for (_local2 in mainPanelList) {
                if (_local2.toString() === _arg1){
                    mainPanelList[_local2].visible = true;
                    currentPanelName = _arg1;
                    if ((mainPanelList[_local2] is NaverPostingMusicPlayerList)){
                        activeMainPanel = mainPanelList[_local2];
                    };
                } else {
                    mainPanelList[_local2].visible = false;
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayercore.*;
    import flash.external.*;

    public class NaverBasicPlayerBaseView extends NaverMusicPlayerView {

        private static const MAX_LOAD_LIMIT_HOUR:int = 3000;
        public static const CALL_CALLBACK:String = "request";
        public static const LYRICSPANELLIST:String = "LYRICSPANELLIST";
        private static const MAX_QUEUE_LENGTH:int = 3;
        public static const TRACK_IS_PLAYING_START:Number = 2;
        public static const PLAYING:String = "nmp_playing";
        public static const RESUME_CALLBACK:String = "resume";
        public static const ABORT:String = "nmp_abort";
        public static const CLEAR_CALLBACK:String = "clear";
        public static const SEEK_CALLBACK:String = "seek";
        public static const PROGRESS:String = "nmp_progress";
        public static const SEEKED:String = "nmp_seeked";
        public static const TRACK_IS_STOPPED:Number = 5;
        public static const PLAY:String = "nmp_play";
        public static const STALLED:String = "nmp_stalled";
        public static const RESUME:String = "nmp_resume";
        public static const END_CALLBACK:String = "end";
        public static const SEEKING:String = "nmp_seeking";
        public static const SUSPEND:String = "nmp_suspend";
        public static const TRACK_IS_WATING:Number = 0;
        public static const CAN_PLAY:String = "nmp_can_play";
        public static const CHECK_LOAD_CALLBACK:String = "isLoaded";
        public static const TOP100PLAYLIST:String = "TOP100PLAYLIST";
        private static const PLAY_INTERVAL:int = 10;
        public static const VOLUME_CHANGE:String = "nmp_volume_change";
        public static const REQUEST_TRACKLIST:String = "nmp_track_list";
        public static const EMPTIED:String = "nmp_emptied";
        public static const LOAD_CALLBACK:String = "load";
        public static const TRACK_IS_PLAYING:Number = 3;
        public static const PAUSE_CALLBACK:String = "pause";
        public static const ENDED:String = "nmp_ended";
        public static const REQUEST_HOSTINFORMATION:String = "nmp_host_info";
        public static const LOADED_DATA:String = "nmp_loaded_data";
        public static const PLAYER_READY:String = "nmp_ready";
        public static const TRACK_IS_LOADED:Number = 1;
        public static const LOAD_START:String = "nmp_load_start";
        public static const ADDSONGLIST:String = "nmp_addsong";
        public static const DURATION_CHANGE:String = "nmp_duration_change";
        public static const UPDATE_USER_INFO:String = "nmp_user_info";
        public static const CAN_PLAY_THROUGH:String = "nmp_can_play_through";
        public static const VOLUME_CALLBACK:String = "volume";
        public static const TRACK_IS_PAUSED:Number = 4;
        public static const PAUSE:String = "nmp_pause";
        public static const NAVERMUSICPLAYERLIST:String = "NAVERMUSICPLAYERLIST";
        public static const TIMEUPDATE:String = "nmp_timeupdate";
        public static const ERROR:String = "nmp_error";
        public static const ON_LOAD_SWF:String = "___nmp_core_onload___";
        public static const RATE_CHANGE:String = "nmp_rate_change";
        public static const PLAY_CALLBACK:String = "plays";

        public static var CURRENT_STATE:String = "NAVERMUSICPLAYERLIST";
        public static var ON_INTERFACE_CALL_EVENT:String = "___response___";
        public static var ON_STREAMING_STATUS_UPDATE_EVENT:String = "___musicBroadCast___";

        private var launchOption:int;
        private var existTrackIdList:String = "";
        private var oConfigurationData:ConfigurationData;
        private var bStreamingInfoLoaded:Boolean = false;
        private var oUserData:UserData;
        private var _requestQueue:Array = null;
        private var _loadInterval:Number = 0;
        private var bNMPCoreLoaded:Boolean = false;
        private var requestTrackIdOnce:Boolean = false;
        private var bIsPlaying:Boolean = false;
        private var oInputData:InputData;
        private var prevPlayingTime:Number = 0;
        private var bStreamingInfoLoading:Boolean = false;
        private var bIsPaused:Boolean = false;
        private var oStreamingData:StreamingData;

        public function NaverBasicPlayerBaseView(){
            _requestQueue = [];
            oStreamingData = new StreamingData();
            oConfigurationData = new ConfigurationData();
            oUserData = new UserData();
            oInputData = new InputData();
        }
        public function request(_arg1:String):Object{
            var _local3:String;
            var _local2:Object = {};
            switch (_arg1){
                case NaverBasicPlayerBaseView.REQUEST_TRACKLIST:
                    _local3 = "";
                    trace(("trackId....: " + existTrackIdList));
                    if (((existTrackIdList) && ((existTrackIdList.length > 0)))){
                        _local3 = existTrackIdList;
                    };
                    _local2 = _local3;
                    break;
                case NaverBasicPlayerBaseView.REQUEST_HOSTINFORMATION:
                    _local2.serviceApiUrl = ("http://" + WebPlayerCoreProperties.musicServerAPIHost);
                    _local2.playerApiUrl = WebPlayerCoreProperties.playerServerAPIHost;
                    break;
            };
            return (_local2);
        }
        public function volume(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Number = _arg1.nVolume;
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
            _local4.data = {
                trackId:_local2,
                volume:_local3
            };
            dispatchEvent(_local4);
            this.oConfigurationData.nVolume = _local3;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.VOLUME_CHANGE, this.oConfigurationData.getData());
            };
        }
        override public function addSongTrackIdsAndLaunchOption(_arg1:String, _arg2:int):void{
            trace((((">>>> launch: " + _arg1) + " option: ") + _arg2));
            if (ExternalInterface.available){
                ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.ADDSONGLIST, {
                    commaSeparatedTrackIDs:_arg1,
                    launchOption:_arg2
                });
            };
        }
        override public function notifyCurrentSongWasCompleted():void{
            if (ExternalInterface.available){
                bIsPlaying = false;
                bIsPaused = false;
                bStreamingInfoLoaded = false;
                bStreamingInfoLoading = false;
                this.oStreamingData.nCurrentPlayingTime = 0;
                this.oStreamingData.nTotalTime = 0;
                this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_WATING;
                ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.ENDED, this.oStreamingData.getData());
            };
        }
        public function resume(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Boolean = _arg1.bIsAuto;
            bIsPlaying = true;
            bIsPaused = false;
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
            _local4.data = {
                trackId:_local2,
                auto:_local3
            };
            dispatchEvent(_local4);
            this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_PLAYING_START;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.RESUME, this.oStreamingData.getData());
            };
        }
        override public function registerAdditionalCallBack():void{
            if (ExternalInterface.available){
                ExternalInterface.addCallback("requestTrackIdList", requestTrackIdList);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.CALL_CALLBACK, request);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.PLAY_CALLBACK, play);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.PAUSE_CALLBACK, pause);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.RESUME_CALLBACK, resume);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.LOAD_CALLBACK, load);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.SEEK_CALLBACK, seek);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.VOLUME_CALLBACK, volume);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.END_CALLBACK, end);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.CLEAR_CALLBACK, clear);
                ExternalInterface.addCallback(NaverBasicPlayerBaseView.CHECK_LOAD_CALLBACK, checkLoaded);
                try {
                    ExternalInterface.call(NaverBasicPlayerBaseView.ON_LOAD_SWF, {});
                    ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.PLAYER_READY, {});
                } catch(e:Error) {
                };
            };
        }
        override public function updateCurrentPlayTime(_arg1:Number):void{
            _arg1 = Math.floor(_arg1);
            _arg1 = (_arg1 * 1000);
            if (prevPlayingTime != _arg1){
                if (ExternalInterface.available){
                    prevPlayingTime = _arg1;
                    this.oStreamingData.nCurrentPlayingTime = _arg1;
                    this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_PLAYING;
                    ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.TIMEUPDATE, this.oStreamingData.getData());
                };
            };
        }
        public function play(_arg1:Object):void{
            var _local4:int;
            var _local2:int = _requestQueue.length;
            var _local3:int;
            if (MAX_QUEUE_LENGTH > _local2){
                trace(">>> length is less than MAX_QUEUE_LENGTH so push data");
                _requestQueue.push(_arg1);
            } else {
                trace(">>> length is overed! so shift data");
                _local3 = ((_local2 - MAX_QUEUE_LENGTH) + 1);
                _local4 = 0;
                while (_local4 < _local3) {
                    _requestQueue.shift();
                    _local4++;
                };
                _requestQueue.push(_arg1);
            };
            setTimeout(requestPlayInternal, PLAY_INTERVAL);
        }
        private function notifyCompleteLoading():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER);
            dispatchEvent(_local1);
        }
        public function checkLoaded():Boolean{
            return (bNMPCoreLoaded);
        }
        public function addCallBackMethod():void{
        }
        public function requestPlayInternal():void{
            var _local2:Object;
            var _local4:String;
            var _local5:Boolean;
            var _local6:NaverMusicPlayerBasicEvent;
            var _local1:int;
            var _local3:int;
            _local1 = _requestQueue.length;
            trace((">>> current queue length: " + _local1));
            if (((!(bStreamingInfoLoaded)) && (bStreamingInfoLoading))){
                trace(">>>>>>> exsiting request was not completed! please waiting...");
            } else {
                if (_local1 >= 1){
                    _local2 = _requestQueue.shift();
                    bStreamingInfoLoaded = false;
                    bStreamingInfoLoading = true;
                    this.oStreamingData.sTrackId = _local2.sTrackId;
                    this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_WATING;
                    this.oConfigurationData.nSeek = 0;
                    this.oConfigurationData.nVolume = 0;
                    if (_local2.oInputData){
                        this.oInputData.data = _local2.oInputData;
                    };
                    ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.LOAD_START, this.oStreamingData.getData());
                    clearTimeout(_loadInterval);
                    _loadInterval = setTimeout(checkLoadComplete, MAX_LOAD_LIMIT_HOUR);
                    _local4 = ((_local2.sTrackId) || (this.oStreamingData.sTrackId));
                    _local5 = _local2.bIsAuto;
                    _local6 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                    _local6.data = {
                        trackId:_local4,
                        auto:_local5
                    };
                    dispatchEvent(_local6);
                };
            };
        }
        public function clear():void{
            var _local1:int;
            if (_requestQueue.length > 0){
                _local1 = 0;
                while (_local1 < _requestQueue.length) {
                    _requestQueue[_local1] = null;
                    _local1++;
                };
                _requestQueue.splice(0, _requestQueue.length);
            };
            bStreamingInfoLoaded = false;
            bStreamingInfoLoading = false;
        }
        public function end(_arg1:Object):void{
            var _local3:NaverMusicPlayerBasicEvent;
            var _local2:Boolean;
            if (_arg1.hasOwnProperty("bIsAuto")){
                _local2 = _arg1.bIsAuto;
            };
            if (_local2){
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
                _local3.data = {auto:_local2};
                dispatchEvent(_local3);
            };
            notifyCurrentSongWasCompleted();
        }
        override public function configPlayerSkin(_arg1:String):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.START_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local2);
            var _local3:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLETE_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local3);
            setTimeout(notifyCompleteLoading, 1000);
        }
        override public function initializeAuth(_arg1:Authorization):void{
            this.oUserData.sHasTicket = _arg1.hasticket;
            this.oUserData.sIsAdult = _arg1.isadult;
            this.oUserData.sIsLogin = _arg1.islogin;
            this.oUserData.sEncryptedUserId = _arg1.encuserid;
        }
        public function load(_arg1:Object):void{
        }
        override public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            bStreamingInfoLoaded = true;
            bStreamingInfoLoading = false;
            clearTimeout(_loadInterval);
            if (ExternalInterface.available){
                if (!Boolean(_arg1)){
                    ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.ERROR, {msg:"음원로드하였으나, 음원 정보가 없습니다."});
                    setTimeout(requestPlayInternal, PLAY_INTERVAL);
                } else {
                    this.oStreamingData.nTotalTime = (_arg1.length * 1000);
                    this.oStreamingData.nCurrentPlayingTime = 0;
                    this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_LOADED;
                    this.oStreamingData.nDisplayTime = (_arg1.displayTime * 1000);
                    if (_arg1.isUsingPlatformLimit){
                        this.oStreamingData.isUsingPlatformLimit = _arg1.isUsingPlatformLimit;
                    };
                    this.oUserData.sHasTicket = _arg1.hasTicket;
                    this.oUserData.sIsAdult = _arg1.isAdult;
                    this.oUserData.sIsLogin = _arg1.isLogin;
                    this.oUserData.nAuth = _arg1.isAuth;
                    this.oUserData.sEncryptedUserId = _arg1.userid;
                    prevPlayingTime = 0;
                    ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.LOADED_DATA, {
                        oStreamData:this.oStreamingData.getData(),
                        oAuthData:this.oUserData.getData(),
                        oInputData:this.oInputData.getData()
                    });
                    if (bStreamingInfoLoaded){
                        bIsPlaying = true;
                        this.oStreamingData.nTotalTime = (_arg1.length * 1000);
                        this.oStreamingData.nDisplayTime = (_arg1.displayTime * 1000);
                        this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_PLAYING_START;
                        ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.PLAY, this.oStreamingData.getData());
                        setTimeout(requestPlayInternal, PLAY_INTERVAL);
                    };
                };
            };
            return ("TEST_PLAYER");
        }
        public function requestTrackIdList():String{
            var _local1 = "2429397, 2429397, 3143224,3153451,3199140,3201927,3201430,3205755,3205756,3205757,3205758,3205759,3192857,3205760,3205695,3182429,3205731, 3177663, 3182429,3205731, 3177663, 3182429";
            return (_local1);
        }
        public function pause(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Boolean = _arg1.bIsAuto;
            bIsPlaying = false;
            bIsPaused = true;
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, true);
            _local4.data = {
                trackId:_local2,
                auto:_local3
            };
            dispatchEvent(_local4);
            this.oStreamingData.nStatus = NaverBasicPlayerBaseView.TRACK_IS_PAUSED;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.PAUSE, this.oStreamingData.getData());
            };
        }
        public function seek(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Number = _arg1.nTime;
            _local3 = (_local3 / 1000);
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, true);
            _local4.data = {
                trackId:_local2,
                seek:_local3,
                auto:false
            };
            dispatchEvent(_local4);
            this.oConfigurationData.nSeek = _local3;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverBasicPlayerBaseView.ON_STREAMING_STATUS_UPDATE_EVENT, NaverBasicPlayerBaseView.SEEKED, this.oConfigurationData.getData());
            };
        }
        private function checkLoadComplete():void{
            if (((!(bStreamingInfoLoaded)) && (bStreamingInfoLoading))){
                bStreamingInfoLoaded = false;
                bStreamingInfoLoading = false;
                if (ExternalInterface.available){
                    ExternalInterface.call("___musicBroadCast___", "nmp_error", {
                        resultCode:"1000",
                        resultMessage:"알 수 없는 이유로 트랙을 로드하지 못했습니다."
                    });
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase 

class StreamingData {

    public var nStatus:Number;
    public var nDisplayTime:Number;
    public var nTotalTime:Number;
    public var isUsingPlatformLimit:String;
    public var nCurrentPlayingTime:Number;
    public var sTrackId:String;

    public function StreamingData(){
        nCurrentPlayingTime = 0;
        nTotalTime = 0;
        nStatus = NaverBasicPlayerBaseView.TRACK_IS_WATING;
        sTrackId = null;
        isUsingPlatformLimit = null;
    }
    public function getData():Object{
        return ({
            nCurrentPlayingTime:this.nCurrentPlayingTime,
            nTotalTime:this.nTotalTime,
            nStatus:this.nStatus,
            sTrackId:this.sTrackId,
            nDisplayTime:this.nDisplayTime,
            isUsingPlatformLimit:this.isUsingPlatformLimit
        });
    }

}
class UserData {

    public var nAuth:int;
    public var sEncryptedUserId:String;
    public var sHasTicket:String;
    public var sIsLogin:String;
    public var sIsAdult:String;

    public function UserData(){
    }
    public function getData():Object{
        return ({
            sHasTicket:this.sHasTicket,
            sIsAdult:this.sIsAdult,
            sIsLogin:this.sIsLogin,
            nAuth:this.nAuth,
            sEncryptedUserId:this.sEncryptedUserId
        });
    }

}
class InputData {

    public var data:Object;

    public function InputData(){
    }
    public function getData():Object{
        return (data);
    }

}
class ConfigurationData {

    public var nSeek:Number = 0;
    public var nVolume:Number = 0;

    public function ConfigurationData(){
    }
    public function getData():Object{
        return ({
            nVolume:this.nVolume,
            nSeek:this.nSeek
        });
    }

}
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.flashdynamix.motion.*;
    import fl.data.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.renderer.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.layercomponent.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.footerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.headerPanel.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.popupLayer.*;
    import de.aggro.utils.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.assets.*;
    import flash.external.*;

    public class NaverBasicPostingViewForPromotion extends NaverMusicPlayerView {

        public static const NPOD_PLAYER_AREA:String = "NPOD_PLAYER_AREA";
        public static const LYRICSPANELLIST:String = "LYRICSPANELLIST";
        public static const NAVERMUSICPLAYERLIST:String = "NAVERMUSICPLAYERLIST";
        private static const UP:String = "UP";
        public static const SONG_LIST_AREA:String = "SONG_LIST_AREA";
        private static const MAX_MAIN_PANEL_COUNT:int = 3;
        private static const MAX_FOOTER_TAB_COUNT:int = 2;
        private static const VALID_TIME_INTERVAL:Number = 500;
        public static const TOP100PLAYLIST:String = "TOP100PLAYLIST";
        private static const MAX_TOTAL:int = 200;
        private static const DOWN:String = "DOWN";
        private static const POPUP_LAYER:String = "POPUP_LAYER";

        private static var TEST_COUNT:int = 0;
        public static var CURRENT_STATE:String = "NAVERMUSICPLAYERLIST";

        private var activeSongChanged:Boolean;
        private var popupLayer:Sprite;
        private var mainPanelList:Array;
        private var tooltipLayer:Sprite;
        private var npod:NpodPostingPlayerArea;
        private var playingSongIndex:int;
        private var leftArea:Sprite;
        private var currentPanelName:String;
        protected var isPure:Boolean;
        private var pop:PopMenu;
        private var activeMainPanel:NaverPostingMusicPlayerList;
        private var previewLayer:Sprite;
        private var guidePanel:NaverBasicPostingPlayerGuideFooter;
        private var header:NaverPostingPlayerHeader;
        private var footer:NPodPostingPlayerFooter;
        private var ticketPop:TicketPopup;
        private var npodNotiAlert:NpodNotifyAlert;
        private var timeHandler:Timer;
        private var playerModel:MusicPlayerBasicModel;
        private var rightArea:Sprite;
        private var bools:Boolean = false;
        private var footerList:Array;
        private var allListIsAdult:Boolean;

        public function NaverBasicPostingViewForPromotion(){
            addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);
            playerModel = MusicPlayerBasicModel.getInstance();
            ControlSettingManager.getInstance().addEventListener(InternalPlayRestrictViloationEvent.NONE_INTERACTION_VIOLATION, handleViolation);
            ControlSettingManager.getInstance().addEventListener(InternalPlayRestrictViloationEvent.REPEAT_POLICY_VIOLATION, handleViolation);
        }
        private function removeExistResource():void{
            if (!Boolean(mainPanelList)){
                return;
            };
            if (Boolean(mainPanelList[NAVERMUSICPLAYERLIST])){
                mainPanelList[NAVERMUSICPLAYERLIST].removeAsset();
                rightArea.removeChild(mainPanelList[NAVERMUSICPLAYERLIST]);
            };
            if (Boolean(npod)){
                npod.removeAsset();
                leftArea.removeChild(npod);
            };
            if (Boolean(guidePanel)){
                guidePanel.removeAsset();
                guidePanel.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, showTicketGuide);
                rightArea.removeChild(guidePanel);
            };
            if (npodNotiAlert){
                npodNotiAlert.removeAsset();
            };
            if (ticketPop){
                popupLayer.removeChild(ticketPop);
                ticketPop = null;
            };
            if (popupLayer){
                removeChild(popupLayer);
            };
            if (leftArea){
                removeChild(leftArea);
            };
            if (tooltipLayer){
                removeChild(tooltipLayer);
                tooltipLayer = null;
            };
        }
        private function getProperList():DLinkedList{
            var _local1:DLinkedList;
            _local1 = playerModel.musicPlayList;
            return (_local1);
        }
        private function properFooter(_arg1:String):void{
            switch (_arg1){
                case NAVERMUSICPLAYERLIST:
                    changeFooterVisible(NPodPlayListFooter.FOOTER_NAME);
                    break;
            };
        }
        private function playingSongOff():void{
            if (activeMainPanel){
                if (activeMainPanel.playingSongRenderer){
                    activeMainPanel.playingSongRenderer.isPlaying = false;
                    activeMainPanel.invalidateList();
                };
                playerModel.activeNode = null;
            };
        }
        private function showPostSettingPop(_arg1:NaverMusicPlayerBasicEvent):void{
            pop.showPopup();
        }
        private function manageAdultSong(_arg1:NHNMusicStreamInfodto):void{
            var _local3:SongInfoServiceObject;
            var _local2:UserInfo = playerModel.userInfo;
            if (Boolean(_local2)){
                if ((((_local2.isAdult == UserInfo.IS_NOT_ADULT)) && (allListIsAdult))){
                };
                if ((((_local2.isAdult == UserInfo.IS_NOT_ADULT)) && ((_arg1.trackAdult == UserInfo.IS_ADULT)))){
                    if (playerModel.activeNode){
                        _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                        if (_local3){
                            _local3.isValid = false;
                        };
                    };
                } else {
                    if ((((_local2.isAdult == UserInfo.IS_ADULT)) && ((_arg1.trackAdult == UserInfo.IS_ADULT)))){
                        if (playerModel.activeNode){
                            _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                            updatePlayingSongCellRenderer();
                            if (((_local3) && (!(_local3.isValid)))){
                                _local3.isValid = true;
                                playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(_local3);
                                activeMainPanel.invalidateList();
                            };
                        };
                    };
                };
                if (_arg1.serviceflag == "N"){
                    if (playerModel.activeNode){
                        _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                        if (_local3){
                            _local3.updateServiceFlag = _arg1.serviceflag;
                            _local3.isServiced = false;
                            activeMainPanel.invalidateList();
                        };
                    };
                };
            };
        }
        private function showTicketGuide(_arg1:NaverMusicPlayerBasicEvent):void{
            npodNotiAlert.visible = false;
            if (playerModel.checkUserIsPaid()){
                ticketPop.selectPopup(TicketPopup.LOG_IN_USER);
            } else {
                ticketPop.selectPopup(TicketPopup.NOT_LOG_IN_USER);
            };
            ticketPop.showPopup();
        }
        public function updatePlayListModel(_arg1:Object=null):void{
            mainPanelList[NAVERMUSICPLAYERLIST].dataProvider.removeAll();
            mainPanelList[NAVERMUSICPLAYERLIST].dataProvider = new DataProvider(_arg1);
            mainPanelList[NAVERMUSICPLAYERLIST].drawNow();
        }
        override public function updateTop100SongList(_arg1:SongList):void{
        }
        override public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
            var _local9:Boolean;
            if (!Boolean(_arg1)){
                return;
            };
            var _local3:Array = _arg1.list;
            if (!_arg1.list){
                return;
            };
            handleOption(_arg2);
            var _local4:int = playerModel.musicPlayListAsArray.length;
            playingSongIndex = _local4;
            var _local5:int = (MAX_TOTAL - _local4);
            _local5 = 30;
            var _local6:int = _arg1.length;
            var _local7:Song;
            var _local8:SongInfoServiceObject;
            if (ControlSettingManager.getInstance().controlOption === ControlSettingManager.INSERT_AT_FIRST){
                _local3.reverse();
                _local9 = true;
            };
            var _local10:String = ControlSettingManager.getInstance().controlOption;
            var _local11:int;
            while (_local11 < _local6) {
                _local7 = _local3[_local11];
                _local8 = new SongInfoServiceObject(_local7);
                switch (_local10){
                    case ControlSettingManager.INSERT_AT_FIRST:
                        playerModel.addSingleSongToPlayListAtFirst(_local8);
                        break;
                    case ControlSettingManager.INSERT_AT_LAST:
                        playerModel.addSingleSongToPlayListAtLast(_local8);
                        break;
                };
                _local11++;
            };
            playerModel.activeMusicList = playerModel.musicPlayList.concat();
            allListIsAdult = playerModel.allListAdultCheck();
            if (playerModel.isShuffled){
                playerModel.shuffleActiveList();
            };
            if (isLoadComplete){
                validateViewNow();
            } else {
                if (timeHandler){
                    timeHandler.removeEventListener(TimerEvent.TIMER, checkVaild);
                    timeHandler = null;
                };
                timeHandler = new Timer(VALID_TIME_INTERVAL, 0);
                timeHandler.addEventListener(TimerEvent.TIMER, checkVaild);
                timeHandler.start();
            };
        }
        private function createChildren():void{
            rightArea = new Sprite();
            rightArea.x = 165;
            rightArea.y = 0;
            rightArea.name = SONG_LIST_AREA;
            addChild(rightArea);
            leftArea = new Sprite();
            leftArea.x = 0;
            leftArea.y = 0;
            leftArea.name = NPOD_PLAYER_AREA;
            addChild(leftArea);
        }
        private function createPopupLayer():void{
            popupLayer = new Sprite();
            popupLayer.name = POPUP_LAYER;
            popupLayer.graphics.beginFill(0xCCCCCC, 0);
            popupLayer.graphics.drawRect(0, 0, 500, 353);
            popupLayer.graphics.endFill();
            popupLayer.visible = false;
            popupLayer.addEventListener(MouseEvent.MOUSE_DOWN, popupMouseDownHandler);
            addChild(popupLayer);
            npodNotiAlert = new NpodNotifyAlert();
            npodNotiAlert.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, showTicketGuide);
            npodNotiAlert.hidePopup();
            npodNotiAlert.x = 10;
            npodNotiAlert.y = 203;
        }
        private function sendSongToPosting():void{
            if (pop){
                popupLayer.visible = true;
                pop.showPopup();
            };
        }
        override public function notifyCurrentSongWasCompleted():void{
            var _local1:NaverMusicPlayerBasicEvent;
            npod.initAllState();
            if (Boolean(playerModel.playingSongNode)){
                if (((!(ControlSettingManager.getInstance().isValid)) && (!(playerModel.isValidNextPlayState())))){
                    notiForceFinishEvent();
                    ControlSettingManager.getInstance().repeatCheck();
                    return;
                };
                if ((((playerModel.userInfo.isAdult == UserInfo.IS_NOT_ADULT)) && (allListIsAdult))){
                    notiForceFinishEvent();
                    return;
                };
                if (!playerModel.isValidNextPlayState()){
                    notiForceFinishEvent();
                    return;
                };
                if (playerModel.setNextSongAsCurrentActiveSong(getProperList())){
                    playMusic(true);
                    if (((playerModel.activeNode) && ((playerModel.activeNode.data as SongInfoServiceObject).isValid))){
                        updatePlayingSongCellRenderer();
                    };
                };
            } else {
                _local1 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
                _local1.data = {auto:true};
                dispatchEvent(_local1);
            };
        }
        private function getSelectedItemArr():Array{
            var _local2:DataProvider;
            var _local3:SongInfoServiceObject;
            var _local4:int;
            var _local1:Array = new Array();
            if (Boolean(activeMainPanel)){
                _local2 = mainPanelList[NAVERMUSICPLAYERLIST].dataProvider;
                _local4 = 0;
                while (_local4 < _local2.length) {
                    _local3 = (_local2.getItemAt(_local4) as SongInfoServiceObject);
                    _local1.push(_local3.getTrackID());
                    _local4++;
                };
            };
            return (_local1);
        }
        private function finishForce():void{
            npod.initAllState();
            activeMainPanel.playingSongRenderer.isPlaying = false;
            activeMainPanel.invalidateList();
            playerModel.activeNode = null;
            npod.updateAllInfomationOfSong();
            notiForceFinishEvent();
        }
        private function selectAllSongOfMusicList():void{
            activeMainPanel.selectAllItem();
        }
        private function createNewResource():void{
            createChildren();
            createNpodArea();
            createMainPanel();
            createHeader();
            createFooter();
            createGuide();
            createPopupLayer();
            createLayerPopup();
            createPromotionPanel();
            var _local1:String = NAVERMUSICPLAYERLIST;
            if (currentPanelName){
                _local1 = currentPanelName;
            };
            changeMainPanelVisible(_local1);
            properFooter(_local1);
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER);
            dispatchEvent(_local2);
        }
        public function updateTotalPlayTime(_arg1:Number):void{
        }
        private function createMainPanel():void{
            var _local2:Shape;
            var _local3:Shape;
            mainPanelList = new Array();
            var _local1:NaverPostingMusicPlayerList = new NaverPostingMusicPlayerList();
            _local1.rowHeight = 19;
            _local1.name = NAVERMUSICPLAYERLIST;
            _local1.playerModel = playerModel;
            _local1.dragEnable = true;
            _local1.move(0, 27);
            _local1.setSize(335, 270);
            _local1.addEventListener(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, handleListEventHandler);
            _local1.addEventListener(NaverMusicPlayerBasicEvent.ITEM_DOUBLE_CLICKED, itemDoubleClickCheck);
            _local1.addEventListener(InternalUIHandlerEvent.IS_SELECTED_ALL, updateFooterCheckBoxButton);
            _local1.setStyle("cellRenderer", NaverBasicPostingPlayerCellRenderer);
            playerModel.activeMusicList = playerModel.musicPlayList.concat();
            allListIsAdult = playerModel.allListAdultCheck();
            mainPanelList[NAVERMUSICPLAYERLIST] = _local1;
            activeMainPanel = _local1;
            rightArea.addChild(_local1);
            if (AssetLoadManager.getInstance().signiture.NAME == "WhiteColorSet"){
                _local2 = new Shape();
                _local2.graphics.lineStyle(1, 0xDDDDDD, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                _local2.graphics.moveTo(0, 0);
                _local2.graphics.lineTo(499, 0);
                _local2.graphics.lineTo(499, 27);
                _local2.graphics.moveTo(0, 0);
                _local2.graphics.lineTo(0, 352);
                _local2.graphics.moveTo(0, 352);
                _local2.graphics.lineTo(499, 352);
                _local2.graphics.lineTo(499, 296);
                addChild(_local2);
                _local3 = new Shape();
                _local3.x = 334;
                _local3.y = 0;
                _local3.graphics.lineStyle(1, 0xDDDDDD, 1, false, "none", CapsStyle.NONE, JointStyle.MITER, 3);
                _local3.graphics.moveTo(0, 0);
                _local3.graphics.lineTo(0, 300);
                _local1.addChildAt(_local3, 0);
            };
            setTimeout(mainPanelList[NAVERMUSICPLAYERLIST].updateMouseEnableState, 1000);
        }
        private function handleSendingPostingConfig(_arg1:NaverMusicPlayerBasicEvent):void{
            pop.hidePopup();
            var _local2:String = _arg1.type;
            var _local3:int = activeMainPanel.selectedItems.length;
            if ((((_local3 > 0)) && ((_local3 < activeMainPanel.dataProvider.length)))){
                selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114);
            };
            var _local4:PostingSettingClass = PostingSettingClass.getInstance();
            switch (_local2){
                case NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_BLOG:
                    _local4.site = PostingPopup.BLOG;
                    break;
                case NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_CAFE:
                    _local4.site = PostingPopup.CAFE;
                    break;
            };
            var _local5:Object = {
                pcolor:_local4.pcolor,
                title:_local4.title,
                ptype:_local4.ptype,
                site:_local4.site,
                trackId:getSelectedItemArr()
            };
            var _local6:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEND_POSTING_SETTING_CONFIGURATION, true);
            _local6.data = _local5;
            dispatchEvent(_local6);
        }
        private function createPromotionPanel():void{
            var _local1:NaverBasicPostingPromotionGuide = new NaverBasicPostingPromotionGuide();
            _local1.createChildren();
            _local1.x = 0;
            _local1.y = 353;
            addChild(_local1);
        }
        public function updatePlayingSongCellRenderer():void{
            var _local1:NaverPostingMusicPlayerList;
            _local1 = mainPanelList[NAVERMUSICPLAYERLIST];
            _local1.changeRendererViewAsPlaying();
        }
        private function popupMouseDownHandler(_arg1:MouseEvent):void{
            var _local3:String;
            var _local2:DisplayObject = (_arg1.target as DisplayObject);
            if (Boolean(_local2)){
                _local3 = _local2.name;
                switch (_local3){
                    case POPUP_LAYER:
                        pop.hidePopup();
                        ticketPop.hidePopup();
                        _local2.visible = false;
                        break;
                };
            };
        }
        private function itemDoubleClickCheck(_arg1:NaverMusicPlayerBasicEvent):void{
            var _local4:NaverPostingMusicPlayerList;
            var _local5:NaverPostingMusicPlayerList;
            var _local6:DLinkedList;
            var _local2:NaverBasicPostingPlayerCellRenderer = (_arg1.data.renderer as NaverBasicPostingPlayerCellRenderer);
            var _local3:String = _arg1.data.target;
            var _local7:SongInfoServiceObject = (_local2.data as SongInfoServiceObject);
            CURRENT_STATE = _local3;
            switch (_local3){
                case NAVERMUSICPLAYERLIST:
                    npod.initAllState();
                    _local4 = mainPanelList[TOP100PLAYLIST];
                    _local5 = mainPanelList[NAVERMUSICPLAYERLIST];
                    playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    allListIsAdult = playerModel.allListAdultCheck();
                    _local5.changeCurrentActiveRenderer(_local2, _local3);
                    break;
            };
        }
        private function showRightArea(_arg1:Boolean):void{
            if (_arg1){
                TweensyZero.fromTo(rightArea, {alpha:0}, {alpha:1}, 0.2);
                this.rightArea.visible = true;
            } else {
                TweensyZero.fromTo(rightArea, {alpha:1}, {alpha:0}, 0.2);
                this.rightArea.visible = false;
            };
        }
        private function selectedEmptyState(_arg1:String):void{
            if (!Boolean(_arg1)){
                return;
            };
            var _local2:MusicPlayerNotifyVilolateInternalPolicyEvent = new MusicPlayerNotifyVilolateInternalPolicyEvent(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED);
            _local2.data = {resultCode:_arg1};
            dispatchEvent(_local2);
        }
        override public function initializeView():void{
            AssetLoadManager.getInstance().assetInterpreter = new NaverPostingPlayerInterpreter();
            loadAsset(AssetLoadManager.TEST_WHITE_ASSET_URL, WhiteColorSet);
            TEST_COUNT++;
        }
        private function handleListEventHandler(_arg1:NaverMusicPlayerBasicEvent):void{
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG:
                    npod.checkPlayPauseButtonState(true);
                    playMusic(true, false);
                    break;
            };
        }
        private function makePromotionPopup(_arg1:Boolean):void{
            var _local2:PromotionPopup = new PromotionPopup();
            _local2.x = 0;
            _local2.y = 0;
            _local2.createChildren(_arg1);
            addChild(_local2);
        }
        override public function initializeAuth(_arg1:Authorization):void{
            playerModel.userInfo.hasTicket = _arg1.hasticket;
            playerModel.userInfo.isLogin = _arg1.islogin;
            playerModel.userInfo.isAdult = _arg1.isadult;
            playerModel.userInfo.isTeam = _arg1.isteam;
            updateViewPanel();
            validSongCheck();
        }
        private function createPromotionCheckOutPopup():void{
            var _local1:Object;
            var _local2:String;
            if (ExternalInterface.available){
                _local1 = CookieUtil.getCookie(ControlSettingManager.POPIP_HIDE_OPTION_CHECKOUT_PROMOTION);
                if (Boolean(_local1)){
                    _local2 = _local1.toString();
                    switch (_local2){
                        case "true":
                            break;
                        case "false":
                            makePromotionCheckOutPopup(false);
                            break;
                    };
                    return;
                };
                makePromotionCheckOutPopup(false);
            };
        }
        private function createNpodArea():void{
            npod = new NpodPostingPlayerArea();
            npod.playerModel = playerModel;
            npod.createAssetInstance();
            npod.updateLayout();
            npod.addEventListener(NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.HIDE_SONG_LIST, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PLAY_NEXT_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PLAY_PREV_SONG, npodButtonClickHandler);
            npod.addEventListener(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, npodButtonClickHandler);
            leftArea.addChild(npod);
        }
        private function requestLyrics():void{
        }
        private function validSongCheck():void{
            var _local3:SongInfoServiceObject;
            var _local1:DListIterator = playerModel.musicPlayList.getListIterator();
            var _local2:UserInfo = playerModel.userInfo;
            if (Boolean(_local1)){
                while (_local1.hasNext()) {
                    _local3 = (_local1.node.data as SongInfoServiceObject);
                    if ((((_local2.isAdult == UserInfo.IS_NOT_ADULT)) && (_local3.isAdultSong()))){
                        _local3.isValid = false;
                    } else {
                        if ((((_local2.isAdult == UserInfo.IS_ADULT)) && (_local3.isAdultSong()))){
                            if (!_local3.isValid){
                                _local3.isValid = true;
                            };
                        };
                    };
                    if (_local3.isInvalidServiceFlag()){
                        _local3.isServiced = false;
                    };
                    _local1.next();
                };
            };
        }
        private function createGuide():void{
            guidePanel = new NaverBasicPostingPlayerGuideFooter();
            guidePanel.x = 0;
            guidePanel.y = 326;
            guidePanel.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_MUSIC_SERVICE_CATALOG, showTicketGuide);
            guidePanel.addEventListener(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, showPostSettingPop);
            rightArea.addChild(guidePanel);
        }
        private function npodButtonClickHandler(_arg1:NaverMusicPlayerBasicEvent):void{
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST:
                    showRightArea(true);
                    break;
                case NaverMusicPlayerBasicEvent.HIDE_SONG_LIST:
                    showRightArea(false);
                    break;
                case NaverMusicPlayerBasicEvent.PLAY_NEXT_SONG:
                    if (((!(ControlSettingManager.getInstance().isValid)) && (!(playerModel.isValidNextPlayState())))){
                        notiForceFinishEvent();
                        ControlSettingManager.getInstance().repeatCheck();
                        return;
                    };
                    if (playerModel.setNextSongAsCurrentActiveSong(getProperList(), true)){
                        npod.initAllState();
                        playMusic(true, false);
                        updatePlayingSongCellRenderer();
                    };
                    break;
                case NaverMusicPlayerBasicEvent.PLAY_PREV_SONG:
                    if (playerModel.setPrevSongAsCurrentActiveSong(getProperList(), true)){
                        npod.initAllState();
                        playMusic(true, false);
                        updatePlayingSongCellRenderer();
                    };
                    break;
                case NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3:
                    break;
                case NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG:
                    resumeMusic(false);
                    updatePlayingSongCellRenderer();
                    break;
                case NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG:
                    playMusic(false, false);
                    break;
            };
        }
        private function playMusic(_arg1:Boolean, _arg2:Boolean=true):void{
            var _local4:NaverMusicPlayerBasicEvent;
            var _local5:DLinkedList;
            var _local6:DListIterator;
            var _local3:DListNode = playerModel.activeNode;
            if (Boolean(_local3)){
                if (_arg1){
                    npod.updateAllInfomationOfSong();
                    npod.checkPlayPauseButtonState(true);
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                } else {
                    npod.checkPlayPauseButtonState(false);
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, true);
                };
                _local4.data = {
                    trackId:(_local3.data as SongInfoServiceObject).getTrackID(),
                    auto:_arg2
                };
                dispatchEvent(_local4);
            } else {
                _local5 = getProperList();
                _local6 = _local5.getListIterator();
                if (Boolean(_local6)){
                    _local6.start();
                    playerModel.activeNode = _local6.node;
                    playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    allListIsAdult = playerModel.allListAdultCheck();
                    playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList((playerModel.activeNode.data as SongInfoServiceObject));
                    if (Boolean(playerModel.playingSongNode)){
                        npod.checkPlayPauseButtonState(true);
                        _local3 = playerModel.activeNode;
                        npod.updateAllInfomationOfSong();
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                        _local4.data = {
                            trackId:(_local3.data as SongInfoServiceObject).getTrackID(),
                            auto:_arg2
                        };
                        dispatchEvent(_local4);
                    };
                };
            };
            requestLyrics();
        }
        private function checkMaxTotal():Boolean{
            var _local1:Boolean;
            var _local2:int = playerModel.musicPlayListAsArray.length;
            if (_local2 >= MAX_TOTAL){
                _local1 = true;
            };
            return (_local1);
        }
        private function changeFooterVisible(_arg1:String):void{
            var _local2:Object;
            for (_local2 in footerList) {
                if (_local2.toString() === _arg1){
                    footerList[_local2].visible = true;
                } else {
                    footerList[_local2].visible = false;
                };
            };
        }
        private function changePlayingSongAsFirst(_arg1:Boolean=true):void{
            var _local3:SongInfoServiceObject;
            var _local2:DListIterator = playerModel.musicPlayList.getListIterator();
            if (_local2){
                _local2.start();
                playerModel.activeNode = _local2.node;
                if (playerModel.activeNode){
                    _local3 = (playerModel.activeNode.data as SongInfoServiceObject);
                    if (_local3){
                        playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(_local3);
                        playMusic(true, _arg1);
                        updatePlayingSongCellRenderer();
                    };
                };
            };
        }
        private function updateFooterCheckBox(_arg1:InternalUIHandlerEvent):void{
            selectAllSongOfMusicList();
        }
        private function sendMP3OfSelectedSongList():void{
            var _local1:Array;
            var _local2:int;
            var _local3:SongInfoServiceObject;
            var _local4:Boolean;
            var _local5:int;
            var _local6:Array;
            var _local7:UserInfo;
            var _local8:int;
            var _local9:NaverMusicPlayerBasicEvent;
            var _local10:Boolean;
            var _local11:String;
            if (Boolean(activeMainPanel)){
                _local1 = activeMainPanel.selectedItems;
                _local2 = _local1.length;
                if (_local2 <= 0){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110);
                    return;
                };
                _local4 = true;
                _local5 = 0;
                _local6 = new Array();
                _local7 = playerModel.userInfo;
                if (_local7.isTeam == UserInfo.IS_TEAM){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109);
                    return;
                };
                _local8 = 0;
                while (_local8 < _local2) {
                    _local3 = (_local1[_local8] as SongInfoServiceObject);
                    _local10 = false;
                    if (Boolean(_local3)){
                        _local11 = _local3.getTrackID();
                        if (((_local11) && ((_local11.length > 0)))){
                            if (!_local3.hasMp3File()){
                                _local4 = false;
                                _local5++;
                            } else {
                                if (_local3.adultProperty === "Y"){
                                    if (_local7.isAdult === UserInfo.IS_ADULT){
                                        _local6.push(_local11);
                                    } else {
                                        _local4 = false;
                                        _local10 = true;
                                        _local5++;
                                    };
                                } else {
                                    _local6.push(_local11);
                                };
                                if (!_local3.isServiced){
                                    _local4 = false;
                                    _local5++;
                                };
                            };
                        };
                    };
                    _local8++;
                };
                if (((!(_local4)) && ((_local5 == _local2)))){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111);
                    return;
                };
                if (((!(_local4)) && (!((_local5 == _local2))))){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112);
                };
                _local9 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, false, false);
                _local9.data = {trackIds:_local6};
                dispatchEvent(_local9);
            };
        }
        private function updateViewPanel(_arg1:UserInfoPropertyEvent=null):void{
            if (((activeMainPanel) && (guidePanel))){
                validSongCheck();
                activeMainPanel.invalidateList();
                npod.updateMp3ActiveState();
                guidePanel.showPropertGuideView(playerModel.userInfo);
            };
        }
        private function updateFooterCheckBoxButton(_arg1:InternalUIHandlerEvent):void{
            var _local3:Boolean;
            var _local2:NaverPostingMusicPlayerList = (_arg1.target as NaverPostingMusicPlayerList);
            if (_local2){
                _local3 = _arg1.data.isAll;
                footer.updateCheckBox(_local3);
            };
        }
        private function addedToStageHandler(_arg1:Event):void{
            AssetLoadManager.full_path = (("http://" + loaderInfo.loaderURL.split("/")[2]) + "/");
            stage.addEventListener(MouseEvent.MOUSE_UP, stageMouseUpHandler);
        }
        private function stageMouseUpHandler(_arg1:MouseEvent):void{
            if (((((super.isLoadComplete) && (mainPanelList))) && (mainPanelList[NAVERMUSICPLAYERLIST]))){
                mainPanelList[NAVERMUSICPLAYERLIST].tryDragging = false;
                mainPanelList[NAVERMUSICPLAYERLIST].isDragging = false;
                mainPanelList[NAVERMUSICPLAYERLIST].dragInit = false;
                mainPanelList[NAVERMUSICPLAYERLIST].initMouseDrag();
            };
        }
        private function createHeader():void{
            header = new NaverPostingPlayerHeader();
            rightArea.addChild(header);
            header.updateHeaderData(PostingSettingClass.getInstance().title, PostingSettingClass.getInstance().userid);
        }
        override public function updateCurrentPlayTime(_arg1:Number):void{
            npod.updateCurrentSongLength(_arg1);
        }
        private function createFooter():void{
            footer = new NPodPostingPlayerFooter();
            footer.move(0, 296);
            footer.setFooterBackgroundSkin();
            footer.setFooterButtonList(footer.getTop100ListFooterAssetFromLibrary());
            footer.addEventListener(NaverMusicPlayerBasicEvent.SELECT_ALL_SONG_BUTTON, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, footerMenuActionHandler);
            footer.addEventListener(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, footerMenuActionHandler);
            footer.addEventListener(InternalUIHandlerEvent.IS_SELECTED_ALL, updateFooterCheckBox);
            rightArea.addChild(footer);
        }
        private function footerMenuActionHandler(_arg1:NaverMusicPlayerBasicEvent):void{
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.SELECT_ALL_SONG_BUTTON:
                    selectAllSongOfMusicList();
                    break;
                case NaverMusicPlayerBasicEvent.POST_SELECTED_SONG_BUTTON:
                    sendSongToPosting();
                    break;
                case NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM:
                    sendSelectedSongListToCustomAlbum();
                    break;
                case NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3:
                    sendMP3OfSelectedSongList();
                    break;
            };
        }
        override public function removeAllView():void{
            removeExistResource();
        }
        private function stageMouseOutHandler(_arg1:MouseEvent):void{
        }
        private function handleOption(_arg1:int):void{
            switch ((_arg1 & 0xFF)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_NONE_TRACK:
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_FRONT_TRACK:
                    ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_FIRST;
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK:
                    ControlSettingManager.getInstance().controlOption = ControlSettingManager.INSERT_AT_LAST;
                    break;
                default:
                    throw (new Error("invalid adding Options!"));
            };
            switch ((_arg1 & 0xFF00)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_OLD_FIRST_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK:
                    ControlSettingManager.getInstance().playOption = (_arg1 & 0xFF00);
                    break;
                default:
                    throw (new Error("invalid playing option!"));
            };
        }
        private function requestCurrentMP3():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, true);
            _local1.data = {};
            dispatchEvent(_local1);
        }
        private function makePromotionCheckOutPopup(_arg1:Boolean):void{
            var _local2:PromotionCheckout = new PromotionCheckout();
            _local2.x = 0;
            _local2.y = 0;
            _local2.createChildren(_arg1);
            addChild(_local2);
        }
        override public function configPostingPlayerInformation(_arg1:Article):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.START_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local2);
            var _local3:PostingSettingClass = PostingSettingClass.getInstance();
            _local3.pcolor = _arg1.pcolor;
            _local3.title = _arg1.title;
            _local3.ptype = _arg1.ptype;
            _local3.mylist_seq = _arg1.mylist_seq;
            _local3.userid = _arg1.userid;
            _local3.linkYn = _arg1.linkyn;
            _local3.link = _arg1.link;
            AssetLoadManager.getInstance().assetInterpreter = new NaverPostingPlayerInterpreter();
            SettingInterpreter.getInstance().updateSkinSetting(_local3.pcolor, true);
        }
        private function handleViolation(_arg1:InternalPlayRestrictViloationEvent):void{
            switch (_arg1.type){
                case InternalPlayRestrictViloationEvent.NONE_INTERACTION_VIOLATION:
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100);
                    break;
                case InternalPlayRestrictViloationEvent.REPEAT_POLICY_VIOLATION:
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108);
                    break;
            };
        }
        private function removeScrollBarEvent(_arg1:Event):void{
        }
        override protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            var _local2:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLETE_LOAD_VIEW_RESOURCES);
            dispatchEvent(_local2);
            removeAllView();
            createNewResource();
            updatePlayListModel(playerModel.musicPlayListAsArray);
            super.isLoadComplete = true;
            updateViewPanel();
        }
        private function createPromotionPopup():void{
            var _local1:Object;
            var _local2:String;
            var _local3:String;
            var _local4:Object;
            var _local5:String;
            var _local6:int;
            var _local7:String;
            var _local8:Object;
            var _local9:String;
            if (ExternalInterface.available){
                _local1 = ExternalInterface.call("function(){return parent.document.referrer;}");
                trace(("Referrer Check:: " + _local1));
                if (Boolean(_local1)){
                    _local2 = _local1.toString();
                    _local3 = decodeURIComponent(_local2);
                    if ((((((((_local2 == "http://www.naver.com/")) || ((_local2 == "http://www.naver.com")))) || ((_local2 == "http://naver.com/")))) || ((_local2 == "http://naver.com")))){
                        _local4 = CookieUtil.getCookie(ControlSettingManager.POPUP_HIDE_OPTION);
                        if (Boolean(_local4)){
                            _local5 = _local4.toString();
                            switch (_local5){
                                case "true":
                                    break;
                                case "false":
                                    makePromotionPopup(false);
                                    break;
                            };
                            return;
                        };
                        makePromotionPopup(false);
                    } else {
                        _local6 = _local3.search("topReferer");
                        _local7 = _local3.slice((_local6 + 11), (_local6 + 32));
                        trace((_local7 + " ::these case"));
                        if (((((Boolean(_local7)) && ((_local7 == "http://www.naver.com/")))) || ((_local7 == "http://naver.com/")))){
                            _local8 = CookieUtil.getCookie(ControlSettingManager.POPUP_HIDE_OPTION);
                            if (Boolean(_local8)){
                                _local9 = _local8.toString();
                                switch (_local9){
                                    case "true":
                                        break;
                                    case "false":
                                        makePromotionPopup(false);
                                        break;
                                };
                                return;
                            };
                            makePromotionPopup(false);
                        };
                    };
                };
            };
        }
        private function sortSelectedItems(_arg1:Boolean=false):Array{
            return (mainPanelList[NaverMusicPlayerList.NAME].sortSelectedItems(_arg1));
        }
        public function updateCurrentSongServiceObjectList(_arg1:Object):void{
            var _local2:String;
            if (Boolean(_arg1)){
                if (Boolean(activeMainPanel)){
                    _local2 = activeMainPanel.name;
                    switch (_local2){
                        case TOP100PLAYLIST:
                            break;
                        case NAVERMUSICPLAYERLIST:
                            break;
                    };
                };
            };
        }
        private function checkVaild(_arg1:TimerEvent):void{
            if (isLoadComplete){
                isLoadComplete = false;
                timeHandler.stop();
                timeHandler.removeEventListener(TimerEvent.TIMER, checkVaild);
                timeHandler = null;
                validateViewNow();
            };
        }
        private function notiForceFinishEvent():void{
            npod.initAllState();
            playingSongOff();
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
            _local1.data = {auto:true};
            dispatchEvent(_local1);
        }
        private function checkPlayingSongRemovedState():void{
            if (activeSongChanged){
                activeSongChanged = false;
                playerModel.activeNode = playerModel.tmpNextNode;
                if (Boolean(playerModel.activeNode)){
                    playerModel.activeNode = playerModel.searchVaildSongObject(playerModel.activeNode.data);
                    if (Boolean(playerModel.activeNode)){
                        playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(playerModel.activeNode.data);
                    };
                    playMusic(true);
                    updatePlayingSongCellRenderer();
                };
            };
        }
        private function sendSelectedSongListToCustomAlbum():void{
            var _local1:Array;
            var _local2:int;
            var _local3:SongInfoServiceObject;
            var _local4:Array;
            var _local5:int;
            var _local6:NaverMusicPlayerBasicEvent;
            var _local7:String;
            if (Boolean(activeMainPanel)){
                _local1 = activeMainPanel.selectedItems;
                _local2 = _local1.length;
                if (_local2 <= 0){
                    selectedEmptyState(WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113);
                    return;
                };
                _local4 = new Array();
                _local5 = 0;
                while (_local5 < _local2) {
                    _local3 = (_local1[_local5] as SongInfoServiceObject);
                    if (Boolean(_local3)){
                        _local7 = _local3.getTrackID();
                        if (((_local7) && ((_local7.length > 0)))){
                            _local4.push(_local7);
                        };
                    };
                    _local5++;
                };
                _local6 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, false, false);
                _local6.data = {trackIds:_local4};
                dispatchEvent(_local6);
            };
        }
        private function changeMainPanelVisible(_arg1:String):void{
            var _local2:Object;
            for (_local2 in mainPanelList) {
                if (_local2.toString() === _arg1){
                    mainPanelList[_local2].visible = true;
                    currentPanelName = _arg1;
                    if ((mainPanelList[_local2] is NaverPostingMusicPlayerList)){
                        activeMainPanel = mainPanelList[_local2];
                    };
                } else {
                    mainPanelList[_local2].visible = false;
                };
            };
        }
        private function resumeMusic(_arg1:Boolean=true):void{
            var _local3:NaverMusicPlayerBasicEvent;
            var _local4:DLinkedList;
            var _local5:DListIterator;
            var _local2:DListNode = playerModel.activeNode;
            if (Boolean(_local2)){
                ControlSettingManager.getInstance().noneInteractionCheckHandler(false);
                npod.updateAllInfomationOfSong();
                npod.checkPlayPauseButtonState(true);
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
                _local3.data = {trackId:(_local2.data as SongInfoServiceObject).getTrackID()};
                dispatchEvent(_local3);
                requestLyrics();
            } else {
                _local4 = getProperList();
                _local5 = playerModel.activeMusicList.getListIterator();
                if (Boolean(_local5)){
                    _local5.start();
                    playerModel.playingSongNode = _local5.node;
                    if (Boolean(playerModel.playingSongNode)){
                        ControlSettingManager.getInstance().noneInteractionCheckHandler(false);
                        npod.checkPlayPauseButtonState(true);
                        playerModel.activeNode = playerModel.searchVaildSongObject(playerModel.playingSongNode.data, _local4);
                        _local2 = playerModel.activeNode;
                        npod.updateAllInfomationOfSong();
                        _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
                        _local3.data = {trackId:(_local2.data as SongInfoServiceObject).getTrackID()};
                        dispatchEvent(_local3);
                        requestLyrics();
                    };
                };
            };
        }
        override public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            var _local2:SongInfoServiceObject;
            playerModel.userInfo.isAuth = _arg1.isAuth;
            playerModel.userInfo.isTeam = _arg1.isTeam;
            playerModel.userInfo.hasTicket = _arg1.hasTicket;
            npod.displayTime = _arg1.displayTime;
            npod.totalTime = _arg1.length;
            if (playerModel.activeNode){
                _local2 = (playerModel.activeNode.data as SongInfoServiceObject);
                if (_local2){
                    if (_local2.adultProperty != _arg1.trackAdult){
                        throw (new Error(((((" adult property of NHNMusicStreamInfodto is different from existing song data in list!!!" + "[NHNMusicStreamInfodto:: ") + _arg1.isAdult) + "][song data in list:: ") + _local2.adultProperty)));
                    };
                    manageAdultSong(_arg1);
                };
            };
            return (null);
        }
        private function validateViewNow():void{
            var _local1:DListIterator;
            validSongCheck();
            if (Boolean(playerModel.activeNode)){
                playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList(playerModel.activeNode.data);
                npod.updateAllInfomationOfSong();
            } else {
                _local1 = playerModel.musicPlayList.getListIterator();
                if (_local1){
                    _local1.start();
                    playerModel.activeNode = _local1.node;
                    playerModel.activeMusicList = playerModel.musicPlayList.concat();
                    allListIsAdult = playerModel.allListAdultCheck();
                    playerModel.playingSongNode = playerModel.searchVaildSongObjectFromPlayingList((playerModel.activeNode.data as SongInfoServiceObject));
                    npod.updateAllInfomationOfSong();
                };
            };
            npod.deemOnOff(true);
            npod.resizeDeemedLayer(true);
            if (Boolean(this.mainPanelList[NAVERMUSICPLAYERLIST].dataProvider)){
                this.mainPanelList[NAVERMUSICPLAYERLIST].dataProvider.removeAll();
            };
            this.mainPanelList[NAVERMUSICPLAYERLIST].isSelectAll = false;
            this.mainPanelList[NAVERMUSICPLAYERLIST].dataProvider = new DataProvider(playerModel.musicPlayListAsArray);
            this.mainPanelList[NAVERMUSICPLAYERLIST].drawNow();
        }
        private function processPostingSetting(_arg1:NaverMusicPlayerBasicEvent):void{
            var _local2:Object = _arg1.data;
            var _local3:String = _local2.action;
            var _local4:String = _local2.postingType;
            var _local5:String = _local2.color;
            var _local6:String = _local2.title;
        }
        private function createLayerPopup():void{
            pop = new PopMenu();
            pop.x = 394;
            pop.y = 0xFF;
            pop.createAsset();
            pop.hidePopup();
            pop.addEventListener(NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_BLOG, handleSendingPostingConfig);
            pop.addEventListener(NaverMusicPlayerBasicEvent.SET_POSTING_TYPE_CAFE, handleSendingPostingConfig);
            popupLayer.addChild(pop);
            ticketPop = new TicketPopup();
            ticketPop.x = 164;
            ticketPop.y = 177;
            ticketPop.createAsset();
            ticketPop.hidePopup();
            popupLayer.addChild(ticketPop);
            tooltipLayer = new Sprite();
            tooltipLayer.mouseEnabled = false;
            tooltipLayer.mouseChildren = false;
            addChild(tooltipLayer);
            TooltipManager.getInstance().init(tooltipLayer);
            TooltipManager.getInstance().setOffsetPoint(0, 10);
            TooltipManager.getInstance().hide();
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;

    public class NaverMusicPlayerView extends Sprite implements IMusicPlayListManager {

        protected var isLoadComplete:Boolean;

        public function NaverMusicPlayerView(){
            var _local1:AssetLoadManager = AssetLoadManager.getInstance();
            _local1.assetInterpreter = new NaverBasicMusicPlayerInterpreter();
            _local1.addEventListener(AssetControlEvent.COMPLETE_LOAD_ASSET, completeHandler);
            _local1.addEventListener(AssetControlEvent.FAIL_LOAD_ASSET, errorHandler);
            _local1.addEventListener(AssetControlEvent.COMPETE_ASSIGN_NEW_ASSET, assetAssignCompleteHandler);
        }
        protected function registAssetInterpreter(_arg1:IAssetInterpreter):void{
            AssetLoadManager.getInstance().assetInterpreter = _arg1;
        }
        public function removeAllView():void{
        }
        public function configPlayerSongQualityOption(_arg1:String):void{
        }
        public function updateLylicsOfCurrentPlayingSong(_arg1:Song):void{
        }
        public function updateStateAndPlaySong():void{
        }
        public function configPostingPlayerInformation(_arg1:Article):void{
        }
        protected function errorHandler(_arg1:AssetControlEvent):void{
        }
        public function configPlayerShuffleOption(_arg1:int):void{
        }
        public function initializeView():void{
        }
        public function updateTop100SongList(_arg1:SongList):void{
        }
        public function configPlayerSongListPlayOption(_arg1:String):void{
        }
        public function configPlayerSkin(_arg1:String):void{
        }
        protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            isLoadComplete = true;
        }
        public function configPlayerRepeatOption(_arg1:int):void{
        }
        public function addSongTrackIdsAndLaunchOption(_arg1:String, _arg2:int):void{
        }
        public function updateTop100UpdatedDate(_arg1:String):void{
        }
        public function configPlayerSongListSaveOption(_arg1:String):void{
        }
        public function drawProperGuideFooter(_arg1:String):void{
        }
        public function loadAsset(_arg1:String, _arg2:Class=null, _arg3:Boolean=false):void{
            isLoadComplete = false;
            AssetLoadManager.getInstance().loadAsset(_arg1, _arg2, _arg3);
        }
        public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
        }
        public function notifyCurrentSongWasCompleted():void{
        }
        public function updateCurrentPlayTime(_arg1:Number):void{
        }
        public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            return (null);
        }
        public function registerAdditionalCallBack():void{
        }
        public function initializeAuth(_arg1:Authorization):void{
        }
        public function configPlayerVolumeValue(_arg1:Number):void{
        }
        protected function completeHandler(_arg1:AssetControlEvent):void{
        }
        public function initPlayingSongView():void{
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.errors {

    public class InstanceIOError extends Error {

        public function InstanceIOError(_arg1:Object){
            super(((_arg1.toString() + "::") + "FAIL CREATE INSTANCE"), "500");
        }
    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.errors 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces {

    public interface IAssetInterpreter {

        function updateAsset(_arg1, _arg2):void;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces {

    public interface ILayoutFooterButtonList {

        function move(_arg1:Number, _arg2:Number):void;
        function setFooterVerticalRuleAsset(_arg1:Class):void;
        function setFooterBackgroundSkin(_arg1:Class=null):void;
        function layoutButtonList():void;
        function setFooterButtonList(_arg1:Array):void;
        function drawFooterButtonList():void;

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.webapis.ns.*;

    public class SongInfoServiceObject {

        private var _isSelected:Boolean;
        private var _isDragOver:Boolean;
        public var abstractedTitle:String;
        private var _isChecked:Boolean;
        private var _isPlaying:Boolean;
        public var originalLength:Number;
        private var _isValid:Boolean = true;
        private var _isServiced:Boolean = true;
        private var _songServiceObject:Song;
        public var isEmpty:Boolean = false;
        public var soIndex:int = -1;
        public var _icon;
        public var isAbstract:Boolean;
        private var _label:String;

        public function SongInfoServiceObject(_arg1:Song=null, _arg2:Boolean=false){
            if (Boolean(_arg1)){
                songServiceObject = _arg1;
                label = _arg1.track.tracktitle;
                this.isEmpty = _arg2;
            };
        }
        public function set icon(_arg1):void{
            this._icon = _arg1;
        }
        public function release():void{
            _icon = null;
            _label = null;
            if (Boolean(_songServiceObject)){
                _songServiceObject.releaseMemory();
                _songServiceObject = null;
            };
        }
        public function hasMp3File():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.hasmp3){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function getAlbumid():String{
            var _local1:String;
            var _local2:Album;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.albumid;
            };
            return (_local1);
        }
        public function updateLyric(_arg1:Song):Boolean{
            var _local3:Boolean;
            var _local2:Song = songServiceObject;
            if (Boolean(_local2)){
                _local3 = true;
            };
            return (_local3);
        }
        public function getArtistid(_arg1:int=0):String{
            var _local2:String;
            var _local3:Artist;
            if (Boolean(songServiceObject)){
                if ((((songServiceObject.artistlist.list.length <= _arg1)) || ((0 > _arg1)))){
                    _arg1 = 0;
                };
                _local3 = (songServiceObject.artistlist.list[_arg1] as Artist);
                if (Boolean(_local3)){
                    _local2 = _local3.artistid;
                };
            };
            return (_local2);
        }
        public function get isServiced():Boolean{
            return (_isServiced);
        }
        public function get icon(){
            return (_icon);
        }
        public function get isChecked():Boolean{
            return (_isChecked);
        }
        public function getAlbumTitle():String{
            var _local2:Album;
            var _local1:String;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.albumtitle;
                if (!Boolean(_local1)){
                    _local1 = "dasdasdasfsdjfhjksdfhkshfkhksdfdasd";
                };
            };
            return (_local1);
        }
        public function isInvalidServiceFlag():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.serviceflag){
                    case "N":
                        _local1 = true;
                        break;
                    case "Y":
                        _local1 = false;
                        break;
                };
            };
            return (_local1);
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get adultProperty():String{
            if (!Boolean(songServiceObject)){
                throw (new Error("Song data is null!!!"));
            };
            return (songServiceObject.adult);
        }
        public function set isServiced(_arg1:Boolean):void{
            this._isServiced = _arg1;
        }
        public function get songServiceObject():Song{
            return (_songServiceObject);
        }
        public function set isChecked(_arg1:Boolean):void{
            this._isChecked = _arg1;
        }
        public function getAlbumJacketThumbURL():String{
            var _local1:String;
            var _local2:Album;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.imageurl;
            };
            return (_local1);
        }
        public function set isPlaying(_arg1:Boolean):void{
            this._isPlaying = _arg1;
        }
        public function set isSelected(_arg1:Boolean):void{
            this._isSelected = _arg1;
        }
        public function getTrackTitle():String{
            var _local1:String;
            var _local2:Track;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.track;
                if (!Boolean(_local2)){
                    throw (new Error("Track is empty!"));
                };
                _local1 = _local2.tracktitle;
            };
            return (_local1);
        }
        public function clone():SongInfoServiceObject{
            var _local1:Song = songServiceObject.clone();
            var _local2:SongInfoServiceObject = new SongInfoServiceObject(_local1);
            _local2.isPlaying = false;
            _local2.isEmpty = isEmpty;
            _local2.isChecked = false;
            _local2.soIndex = soIndex;
            return (_local2);
        }
        public function set isValid(_arg1:Boolean):void{
            this._isValid = _arg1;
        }
        public function get isSelected():Boolean{
            return (_isSelected);
        }
        public function set label(_arg1:String):void{
            this._label = _arg1;
        }
        public function set isDragOver(_arg1:Boolean):void{
            this._isDragOver = _arg1;
        }
        public function canAcquireMP3File():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.free){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function getArtistName():String{
            return (singer);
        }
        public function set updateServiceFlag(_arg1:String):void{
            songServiceObject.nhn_music_ns::serviceflag = _arg1;
        }
        public function get isDragOver():Boolean{
            return (_isDragOver);
        }
        public function get label():String{
            return (_label);
        }
        public function get isValid():Boolean{
            return (_isValid);
        }
        public function get singer():String{
            var _local1 = "";
            if (((((!(Boolean(songServiceObject.artistlist))) || (!(Boolean(songServiceObject.artistlist.list))))) || ((songServiceObject.artistlist.length == 0)))){
                return ("V.A ");
            };
            var _local2:Array = songServiceObject.artistlist.list;
            var _local3:int = _local2.length;
            var _local4:int;
            while (_local4 < _local3) {
                _local1 = (_local1 + _local2[_local4].artistname);
                if ((((_local3 > 1)) && (!((_local4 == (_local3 - 1)))))){
                    _local1 = (_local1 + ", ");
                };
                _local4++;
            };
            return (_local1);
        }
        public function isAdultSong():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.adult){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function set songServiceObject(_arg1:Song):void{
            if (Boolean(this._songServiceObject)){
                this._songServiceObject.releaseMemory();
                this._songServiceObject = null;
            };
            this._songServiceObject = _arg1;
        }
        public function getTrackID():String{
            var _local1:String;
            var _local2:Track;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.track;
                if (!Boolean(_local2)){
                    throw (new Error("Track is empty!"));
                };
                _local1 = _local2.trackid;
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject {
    import flash.events.*;

    public class UserInfo extends EventDispatcher {

        public static const AUTH_WHOLE:uint = 0;
        public static const IS_ADULT:String = "Y";
        public static const AUTH_ONE_MINUTE:uint = 1;
        public static const IS_NOT_TEAM:String = "N";
        public static const AUTH_NONE:uint = 2;
        public static const HAS_TICKET:String = "Y";
        public static const IS_TEAM:String = "Y";
        public static const IS_LOGIN:String = "Y";
        public static const IS_NOT_LOGIN:String = "N";
        public static const DOES_NOT_HAVE_TICKET:String = "N";
        public static const IS_NOT_ADULT:String = "N";

        private var _isTeam:String = "N";
        private var _hasTicket:String = "N";
        private var _isLogin:String = "N";
        private var _isAdult:String = "N";
        private var _isAuth:uint = 2;

        public function set isAdult(_arg1:String):void{
            this._isAdult = _arg1;
        }
        public function set isAuth(_arg1:uint):void{
            this._isAuth = _arg1;
        }
        public function get hasTicket():String{
            return (_hasTicket);
        }
        public function set hasTicket(_arg1:String):void{
            this._hasTicket = _arg1;
        }
        public function get isAdult():String{
            return (_isAdult);
        }
        public function get isAuth():uint{
            return (_isAuth);
        }
        public function get isTeam():String{
            return (_isTeam);
        }
        public function set isTeam(_arg1:String):void{
            this._isTeam = _arg1;
        }
        public function set isLogin(_arg1:String):void{
            this._isLogin = _arg1;
        }
        public function get isLogin():String{
            return (_isLogin);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.manager.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObject.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.viewBase.*;
    import com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.mainPlayerPanel.*;

    public class MusicPlayerBasicModel extends EventDispatcher {

        public static const VISIBLE_ROW_COUNT:int = 14;

        private static var _instance:MusicPlayerBasicModel;

        private var _top100MusicList:DLinkedList;
        private var _tmpNextNode:DListNode;
        private var _musicPlayList:DLinkedList;
        private var _activeMusicList:DLinkedList;
        private var _playingSongNode:DListNode;
        private var _activeNode:DListNode;
        private var _tmpPrevNode:DListNode;
        private var _repeatOption:int;
        private var _isShuffled:Boolean;
        private var _userInfo:UserInfo;

        public function MusicPlayerBasicModel(){
            _repeatOption = NpodPlayerArea.NO_REPEAT;
            super();
            _musicPlayList = new DLinkedList();
            _top100MusicList = new DLinkedList();
            _activeMusicList = new DLinkedList();
            _userInfo = new UserInfo();
        }
        public static function getInstance():MusicPlayerBasicModel{
            if (!Boolean(_instance)){
                _instance = new (MusicPlayerBasicModel)();
            };
            return (_instance);
        }

        public function get top100MusicListAsArray():Array{
            var _local1:Array = _top100MusicList.toArray();
            if (_local1.length == 0){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function checkUserIsPaid():Boolean{
            if ((((userInfo.isLogin === UserInfo.IS_NOT_LOGIN)) || ((userInfo.hasTicket === UserInfo.DOES_NOT_HAVE_TICKET)))){
                return (false);
            };
            return (true);
        }
        public function unShuffleActiveList():void{
            var _local1:Boolean;
            isShuffled = false;
            activeMusicList = propertList;
            if (Boolean(activeNode)){
                playingSongNode = searchVaildSongObjectFromPlayingList(activeNode.data);
            };
        }
        public function get playingSongNode():DListNode{
            return (_playingSongNode);
        }
        public function setNextSongAsCurrentActiveSong(_arg1:DLinkedList=null, _arg2:Boolean=false):Boolean{
            var _local3:Boolean;
            var _local4:DListNode;
            if (Boolean(playingSongNode)){
                if (!_arg2){
                    _local4 = nextSong;
                } else {
                    _local4 = nextSongProperly;
                };
                if (Boolean(_local4)){
                    _local3 = true;
                    playingSongNode = _local4;
                    activeNode = searchVaildSongObject(playingSongNode.data, _arg1);
                };
            };
            return (_local3);
        }
        public function get activeMusicListAsArray():Array{
            var _local1:Array = _activeMusicList.toArray();
            if (_local1.length == 0){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function shufflePlayList():void{
        }
        public function getActivePlayListTrackInformation():void{
            var _local2:SongInfoServiceObject;
            var _local1:DListIterator = activeMusicList.getListIterator();
            if (Boolean(_local1)){
                _local1.start();
                while (_local1.node) {
                    _local2 = (_local1.node.data as SongInfoServiceObject);
                    if (Boolean(_local2)){
                    };
                    _local1.next();
                };
            };
        }
        public function set playingSongNode(_arg1:DListNode):void{
            this._playingSongNode = _arg1;
        }
        public function addSingleSongToPlayListAtFirst(_arg1):void{
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _musicPlayList.prepend(_arg1);
            };
        }
        public function get tmpPrevNode():DListNode{
            return (_tmpPrevNode);
        }
        public function set top100MusicList(_arg1:DLinkedList):void{
            this._top100MusicList = _arg1;
        }
        public function removeAllPlayList():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._musicPlayList)){
                _local1 = this._musicPlayList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3.release();
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
            };
        }
        public function get musicPlayListAsArray():Array{
            var _local1:Array = _musicPlayList.toArray();
            if (((!(Boolean(_local1))) || ((_local1.length == 0)))){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function set tmpPrevNode(_arg1:DListNode):void{
            this._tmpPrevNode = _arg1;
        }
        public function get userInfo():UserInfo{
            return (_userInfo);
        }
        public function set tmpNextNode(_arg1:DListNode):void{
            this._tmpNextNode = _arg1;
        }
        public function searchVaildSongObject(_arg1:SongInfoServiceObject, _arg2:DLinkedList=null):DListNode{
            var _local3:DListIterator;
            if (!Boolean(_arg2)){
                _local3 = (musicPlayList.nodeOf(_arg1) as DListIterator);
            } else {
                _local3 = (_arg2.nodeOf(_arg1) as DListIterator);
            };
            var _local4:DListNode;
            if (Boolean(_local3)){
                _local4 = _local3.node;
            };
            return (_local4);
        }
        public function shuffleActiveList():void{
            var _local2:int;
            var _local3:int;
            var _local4:int;
            var _local6:int;
            var _local7:int;
            var _local8:Array;
            var _local9:Array;
            var _local10:Array;
            var _local11:DListIterator;
            isShuffled = true;
            var _local1:Boolean;
            activeMusicList = propertList;
            var _local5:SongInfoServiceObject;
            if (Boolean(activeNode)){
                playingSongNode = searchVaildSongObjectFromPlayingList(activeNode.data);
                if (Boolean(playingSongNode)){
                    _local6 = getIndexOfSongObject(playingSongNode.data);
                    _local7 = 0;
                    if (_local6 >= 0){
                        _local8 = new Array();
                        _local9 = new Array();
                        if (_local6 == 0){
                        } else {
                            _local8 = activeMusicList.toArray().slice(0, _local6);
                        };
                        _local10 = activeMusicList.toArray();
                        if (_local6 < _local10.length){
                            _local9 = _local10.slice((_local6 + 1), activeMusicList.size);
                        };
                        this.activeMusicList.clear();
                        if (_local9.length > 1){
                            Math.random();
                            _local3 = 0;
                            while (_local3 < _local9.length) {
                                _local4 = (_local3 + (Math.random() * (_local9.length - _local3)));
                                swap(_local9, _local3, _local4);
                                _local3++;
                            };
                            _local2 = 0;
                            while (_local2 < _local9.length) {
                                _local5 = _local9[_local2];
                                activeMusicList.append(_local5);
                                _local2++;
                            };
                            _local3 = 0;
                            while (_local3 < _local8.length) {
                                _local4 = (_local3 + (Math.random() * (_local8.length - _local3)));
                                swap(_local8, _local3, _local4);
                                _local3++;
                            };
                            _local2 = 0;
                            while (_local2 < _local8.length) {
                                _local5 = _local8[_local2];
                                activeMusicList.append(_local5);
                                _local2++;
                            };
                        } else {
                            Math.random();
                            _local3 = 0;
                            while (_local3 < _local8.length) {
                                _local4 = (_local3 + (Math.random() * (_local8.length - _local3)));
                                swap(_local8, _local3, _local4);
                                _local3++;
                            };
                            _local2 = 0;
                            while (_local2 < _local8.length) {
                                _local5 = _local8[_local2];
                                activeMusicList.append(_local5);
                                _local2++;
                            };
                            _local3 = 0;
                            while (_local3 < _local9.length) {
                                _local4 = (_local3 + (Math.random() * (_local9.length - _local3)));
                                swap(_local9, _local3, _local4);
                                _local3++;
                            };
                            _local2 = 0;
                            while (_local2 < _local9.length) {
                                _local5 = _local9[_local2];
                                activeMusicList.append(_local5);
                                _local2++;
                            };
                        };
                        _local1 = true;
                    } else {
                        existShuffleMusic();
                    };
                };
            } else {
                existShuffleMusic();
            };
            if (_local1){
                activeMusicList.prepend(playingSongNode.data);
                playingSongNode = searchVaildSongObjectFromPlayingList(playingSongNode.data);
                dispatchEvent(new Event("initializeView"));
            } else {
                if (playingSongNode){
                    _local11 = activeMusicList.nodeOf(playingSongNode.data);
                    if (Boolean(_local11)){
                        activeMusicList.remove(_local11);
                    };
                    existShuffleMusic();
                    activeMusicList.prepend(playingSongNode.data);
                    playingSongNode = searchVaildSongObjectFromPlayingList(playingSongNode.data);
                };
            };
        }
        public function get nextSongProperly():DListNode{
            var _local1:DListNode;
            var _local2:NaverMusicPlayerBasicEvent;
            switch (repeatOption){
                case NpodPlayerArea.REPEAT_ONE_SONG:
                    _local1 = playingSongNode.next;
                    if (!Boolean(_local1)){
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE);
                        _local1 = activeMusicList.head;
                        ControlSettingManager.getInstance().loopCount = 0;
                    };
                    break;
                case NpodPlayerArea.NO_REPEAT:
                case NpodPlayerArea.REPEAT_ALL_SONG:
                    _local1 = playingSongNode.next;
                    if (!Boolean(_local1)){
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE);
                        _local1 = activeMusicList.head;
                        ControlSettingManager.getInstance().repeatPolicyCheckHandler();
                    };
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
            return (_local1);
        }
        public function removeAllTop100List():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._top100MusicList)){
                _local1 = this._top100MusicList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3.release();
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
            };
        }
        private function getIndexOfSongObject(_arg1:SongInfoServiceObject):int{
            var _local2 = -1;
            var _local3:DListNode = activeMusicList.head;
            var _local4:DListNode = activeMusicList.tail;
            var _local5:SongInfoServiceObject;
            var _local6:int;
            while (_local3 != _local4) {
                _local5 = (_local3.data as SongInfoServiceObject);
                if (((Boolean(_local5)) && ((_local5 == _arg1)))){
                    _local2 = _local6;
                    break;
                };
                _local3 = _local3.next;
                _local6++;
            };
            return (_local2);
        }
        public function get activeNode():DListNode{
            return (_activeNode);
        }
        public function set isShuffled(_arg1:Boolean):void{
            this._isShuffled = _arg1;
        }
        private function swap(_arg1:Array, _arg2:int, _arg3:int):void{
            var _local4:Object = _arg1[_arg2];
            _arg1[_arg2] = _arg1[_arg3];
            _arg1[_arg3] = _local4;
        }
        public function searchVaildSongObjectBySongObject(_arg1:Song, _arg2:DLinkedList):DListNode{
            var _local3:DListNode;
            var _local5:SongInfoServiceObject;
            var _local4:DListIterator = _arg2.getListIterator();
            _local4.start();
            while (_local4.hasNext()) {
                _local5 = (_local4.node.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    if (_local5.songServiceObject.compare(_arg1)){
                        break;
                    };
                };
                _local4.next();
            };
            return (_local4.node);
        }
        public function get nextSong():DListNode{
            var _local1:DListNode;
            var _local2:NaverMusicPlayerBasicEvent;
            switch (repeatOption){
                case NpodPlayerArea.REPEAT_ONE_SONG:
                    _local1 = playingSongNode;
                    if (_local1.data.isValid){
                        ControlSettingManager.getInstance().repeatPolicyCheckHandler();
                    } else {
                        _local1 = playingSongNode.next;
                        if (!Boolean(_local1)){
                            _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE);
                            _local1 = activeMusicList.head;
                        };
                        ControlSettingManager.getInstance().loopCount = 0;
                    };
                    break;
                case NpodPlayerArea.NO_REPEAT:
                case NpodPlayerArea.REPEAT_ALL_SONG:
                    _local1 = playingSongNode.next;
                    if (!Boolean(_local1)){
                        _local2 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE);
                        _local1 = activeMusicList.head;
                        ControlSettingManager.getInstance().repeatPolicyCheckHandler();
                    };
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
            return (_local1);
        }
        public function set userInfo(_arg1:UserInfo):void{
            this._userInfo = _arg1;
        }
        public function addSingleSongToPlayListAtIndex(_arg1, _arg2:int):void{
            var _local3:int;
            var _local4:DListIterator;
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _local3 = 1;
                _local4 = _musicPlayList.getListIterator();
                _local4.start();
                while (_local4.hasNext()) {
                    if (_arg2 === _local3){
                        break;
                    };
                    _local3++;
                    _local4.next();
                };
                musicPlayList.insertAfter(_local4, _arg1);
            };
        }
        public function get musicPlayList():DLinkedList{
            return (_musicPlayList);
        }
        public function allListAdultCheck():Boolean{
            var _local1:Boolean;
            var _local4:SongInfoServiceObject;
            var _local5:Song;
            var _local6:Boolean;
            var _local2:DLinkedList = activeMusicList;
            var _local3:DListIterator = _local2.getListIterator();
            if (_local3){
                _local6 = false;
                while (_local3.hasNext()) {
                    _local4 = (_local3.node.data as SongInfoServiceObject);
                    if (_local4){
                        if (((_local4.isValid) && (_local4.isServiced))){
                            _local6 = true;
                            break;
                        };
                        if (((((!(_local6)) && (((!(_local4.isValid)) || (!(_local4.isServiced)))))) && (((!(Boolean(_local3.node.next))) || ((_local3.node.next == _local2.head)))))){
                            _local1 = true;
                        };
                    };
                    _local3.next();
                };
            };
            return (_local1);
        }
        public function isValidNextPlayState():Boolean{
            var _local1:Boolean;
            if (!ControlSettingManager.getInstance().isValid){
                if ((((repeatOption == NpodPlayerArea.NO_REPEAT)) || ((repeatOption == NpodPlayerArea.REPEAT_ALL_SONG)))){
                    if (((Boolean(playingSongNode)) && (!(Boolean(playingSongNode.next))))){
                        return (false);
                    };
                } else {
                    if (repeatOption == NpodPlayerArea.REPEAT_ONE_SONG){
                        return (false);
                    };
                };
            };
            if (repeatOption == NpodPlayerArea.NO_REPEAT){
                if (((Boolean(playingSongNode)) && (!(Boolean(playingSongNode.next))))){
                    return (false);
                };
            };
            return (true);
        }
        private function existShuffleMusic():void{
            var _local2:int;
            var _local3:int;
            var _local4:int;
            var _local5:SongInfoServiceObject;
            var _local1:Array = activeMusicList.toArray();
            Math.random();
            _local2 = 0;
            while (_local2 < _local1.length) {
                _local4 = (_local2 + (Math.random() * (_local1.length - _local2)));
                swap(_local1, _local2, _local4);
                _local2++;
            };
            this.activeMusicList.clear();
            _local3 = 0;
            while (_local3 < _local1.length) {
                _local5 = _local1[_local3];
                activeMusicList.append(_local5);
                _local3++;
            };
        }
        public function get tmpNextNode():DListNode{
            return (_tmpNextNode);
        }
        public function get top100MusicList():DLinkedList{
            return (_top100MusicList);
        }
        public function set activeNode(_arg1:DListNode):void{
            this._activeNode = _arg1;
        }
        public function addSingleSongToTargetListAtLast(_arg1:DLinkedList, _arg2):void{
            if (((Boolean(_arg2)) && (Boolean(_arg1)))){
                _arg1.append(_arg2);
            };
        }
        public function get isShuffled():Boolean{
            return (_isShuffled);
        }
        public function removeAllActiveSongList():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._activeMusicList)){
                _local1 = this._activeMusicList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
                this._activeMusicList.clear();
            };
        }
        public function setPrevSongAsCurrentActiveSong(_arg1:DLinkedList=null, _arg2:Boolean=false):Boolean{
            var _local3:Boolean;
            var _local4:DListNode;
            if (Boolean(playingSongNode)){
                _local4 = prevSong;
                if (!_arg2){
                    _local4 = prevSong;
                } else {
                    _local4 = prevSongProperly;
                };
                if (Boolean(_local4)){
                    playingSongNode = _local4;
                    activeNode = searchVaildSongObject(playingSongNode.data, _arg1);
                    _local3 = true;
                };
            };
            return (_local3);
        }
        public function addSingleSongToTargetListAtFirst(_arg1:DLinkedList, _arg2):void{
            if (((Boolean(_arg2)) && (Boolean(_arg1)))){
                _arg1.prepend(_arg2);
            };
        }
        public function set repeatOption(_arg1:int):void{
            this._repeatOption = _arg1;
        }
        public function get propertList():DLinkedList{
            var _local1:DLinkedList;
            switch (NaverBasicPlayerBaseView.CURRENT_STATE){
                case NaverBasicPlayerBaseView.NAVERMUSICPLAYERLIST:
                    _local1 = musicPlayList.concat();
                    break;
                case NaverBasicPlayerBaseView.TOP100PLAYLIST:
                    _local1 = top100MusicList.concat();
                    break;
            };
            return (_local1);
        }
        public function get prevSongProperly():DListNode{
            var _local1:DListNode;
            switch (repeatOption){
                case NpodPlayerArea.REPEAT_ONE_SONG:
                    _local1 = playingSongNode.prev;
                    if (!_local1){
                        _local1 = activeMusicList.tail;
                        ControlSettingManager.getInstance().loopCount = 0;
                    };
                    break;
                case NpodPlayerArea.NO_REPEAT:
                case NpodPlayerArea.REPEAT_ALL_SONG:
                    _local1 = playingSongNode.prev;
                    if (!Boolean(_local1)){
                        _local1 = activeMusicList.tail;
                        ControlSettingManager.getInstance().repeatPolicyCheckHandler();
                    };
                    break;
            };
            return (_local1);
        }
        public function searchVaildSongObjectFromPlayingList(_arg1:SongInfoServiceObject):DListNode{
            var _local2:DListIterator = (activeMusicList.nodeOf(_arg1) as DListIterator);
            var _local3:DListNode;
            if (Boolean(_local2)){
                _local3 = _local2.node;
            };
            return (_local3);
        }
        public function releaseModel():void{
            removeAllPlayList();
            _musicPlayList = null;
        }
        public function changeSongIndex(_arg1:SongInfoServiceObject, _arg2:Array, _arg3:int=-1, _arg4:Boolean=false):void{
            var _local6:int;
            var _local7:int;
            var _local8:int;
            var _local5:DListIterator = _musicPlayList.nodeOf(_arg1);
            if (Boolean(_local5)){
                _local6 = _arg2.length;
                if (!_arg4){
                    _local7 = 0;
                    while (_local7 < _local6) {
                        _musicPlayList.insertAfter(_local5, _arg2[_local7]);
                        _local7++;
                    };
                } else {
                    _local8 = (_local6 - 1);
                    while (_local8 >= 0) {
                        _musicPlayList.insertBefore(_local5, _arg2[_local8]);
                        _local8--;
                    };
                };
            };
        }
        public function set musicPlayList(_arg1:DLinkedList):void{
            removeAllPlayList();
            this._musicPlayList = _arg1;
        }
        public function get prevSong():DListNode{
            var _local1:DListNode;
            switch (repeatOption){
                case NpodPlayerArea.REPEAT_ONE_SONG:
                    _local1 = playingSongNode;
                    ControlSettingManager.getInstance().repeatPolicyCheckHandler();
                    break;
                case NpodPlayerArea.NO_REPEAT:
                case NpodPlayerArea.REPEAT_ALL_SONG:
                    _local1 = playingSongNode.prev;
                    if (!Boolean(_local1)){
                        _local1 = activeMusicList.tail;
                        ControlSettingManager.getInstance().repeatPolicyCheckHandler();
                    };
                    break;
            };
            return (_local1);
        }
        public function removeExistNode(_arg1):void{
            var _local2:DListIterator = _musicPlayList.nodeOf(_arg1);
            if (((Boolean(_local2)) && (Boolean(_local2.node)))){
                _local2.remove();
            };
        }
        public function addSingleSongToTargetListAtIndex(_arg1:DLinkedList, _arg2, _arg3:int):void{
            var _local4:int;
            var _local5:DListIterator;
            if (((Boolean(_arg1)) && (Boolean(_arg2)))){
                _local4 = 1;
                _local5 = _musicPlayList.getListIterator();
                _local5.start();
                while (_local5.hasNext()) {
                    if (_arg3 === _local4){
                        break;
                    };
                    _local4++;
                    _local5.next();
                };
                musicPlayList.insertAfter(_local5, _arg2);
            };
        }
        public function set activeMusicList(_arg1:DLinkedList):void{
            removeAllActiveSongList();
            this._activeMusicList = _arg1;
        }
        public function addSingleSongToPlayListAtLast(_arg1):void{
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _musicPlayList.append(_arg1);
            };
        }
        public function get activeMusicList():DLinkedList{
            return (_activeMusicList);
        }
        public function get repeatOption():int{
            return (_repeatOption);
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.data.serviceObjectList 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class InternalUIHandlerEvent extends Event {

        public static const APPLY_HOT_KEY_OF_SPACE:String = "APPLY_HOT_KEY_OF_SPACE";
        public static const IS_SELECTED_ALL:String = "IS_SELECT_ALL";

        private var _data:Object;

        public function InternalUIHandlerEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class AssetControlEvent extends Event {

        public static const FAIL_LOAD_ASSET:String = "FAIL_LOAD_ASSET";
        public static const COMPETE_ASSIGN_NEW_ASSET:String = "COMPETE_ASSIGN_NEW_ASSET";
        public static const COMPLETE_LOAD_ASSET:String = "COMPLETE_LOAD_ASSET";

        private var _data:Object;

        public function AssetControlEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class PlaylistDragControlEvent extends Event {

        public static const SHOW_CAN_NOT_MOVE_ICON:String = "SHOW_CAN_NOT_MOVE_ICON";
        public static const HIDE_CAND_NOT_MOVE_ICON:String = "HIDE_CAND_NOT_MOVE_ICON";

        public function PlaylistDragControlEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class InternalPlayRestrictViloationEvent extends Event {

        public static const NONE_INTERACTION_VIOLATION:String = "NONE_INTERACTION_VIOLATION";
        public static const REPEAT_POLICY_VIOLATION:String = "REPEAT_POLICY_VIOLATION";

        public function InternalPlayRestrictViloationEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class UserInfoPropertyEvent extends Event {

        public static const USER_INFO_CHANGED:String = "USER_INFO_CHANGED";

        public function UserInfoPropertyEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayerbasic.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayererrorhandling.notifications {

    public class WebPlayerErrorHandlingNotifications {

        public static const INTERACT_ALERT_UI:String = "NOTI_WEBPLAYERERRORHANDLING_INTERACT_ALERT_UI";
        public static const RESPOND_GET_ALERT_CANVAS_UI:String = "NOTI_WEBPLAYERERRORHANDLING_RESPOND_GET_ALERT_CANVAS_UI";
        public static const OPEN_ALERT_UI:String = "NOTI_WEBPLAYERERRORHANDLING_OPEN_ALERT_UI";
        public static const REQUEST_GET_ALERT_CANVAS_UI:String = "NOTI_WEBPLAYERERRORHANDLING_REQUEST_GET_ALERT_CANVAS_UI";

    }
}//package com.nhn.application.modules.webplayererrorhandling.notifications 
﻿package com.nhn.application.modules.webplayererrorhandling {
    import com.nhn.application.modules.webplayercore.*;

    public class WebPlayerErrorHandlingProperties {

        public static const ALERT_UI_BORDER_ALPHA_BASIC:Number = 1;
        public static const ALERT_UI_BACKGROUND_HMARGIN_BASIC:uint = 18;
        public static const ALERT_CANVAS_UI_CANVAS_WIDTH_BASIC_PROMO:uint = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO;
        public static const ALERT_UI_CLOSE_BUTTON_Right_MARGIN_MINI:int = 9;
        public static const ALERT_UI_BACKGROUND_ALPHA_BASIC:Number = 1;
        public static const ALERT_UI_BORDER_THICKNESS_MINI:Number = 1;
        public static const ALERT_CANVAS_UI_CANVAS_HEIGHT_MINI:uint = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
        public static const ALERT_UI_BORDER_THICKNESS_BASIC_PROMO:Number = 1;
        public static const ALERT_CANVAS_UI_CANVAS_ALPHA_MINI:Number = 0.2;
        public static const ALERT_UI_BORDER_THICKNESS_BASIC:Number = 1;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_BOTTOM_MARGIN_MINI:int = 15;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_TOP_MARGIN_MINI:int = 12;
        public static const ALERT_CANVAS_UI_CANVAS_COLOR_BASIC_PROMO:uint = 0;
        public static const ALERT_CANVAS_UI_CANVAS_COLOR_MINI:uint = 0;
        public static const ALERT_UI_BACKGROUND_WIDTH_MINI:uint = 216;
        public static const ALERT_UI_CLOSE_BUTTON_TOP_MARGIN_MINI:int = 9;
        public static const ALERT_UI_CLOSE_BUTTON_TOP_MARGIN_BASIC:int = 9;
        public static const ALERT_UI_BORDER_COLOR_BASIC:uint = 0x888888;
        public static const ALERT_UI_BACKGROUND_COLOR_BASIC:uint = 0xFFFFFF;
        public static const ALERT_CANVAS_UI_CANVAS_HEIGHT_BASIC:uint = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_BOTTOM_MARGIN_BASIC_PROMO:int = 15;
        public static const ALERT_UI_BACKGROUND_WIDTH_BASIC_PROMO:uint = 286;
        public static const ALERT_UI_CLOSE_BUTTON_Right_MARGIN_BASIC:int = 9;
        public static const ALERT_UI_MESSAGE_STYLE_MINI:Object = {
            fontFamily:"Dotum,돋움,AppleGothic,_sans",
            fontSize:"12",
            color:"#333333",
            letterSpacing:"-1",
            leading:"7"
        };
        public static const ALERT_UI_BACKGROUND_WIDTH_BASIC:uint = 286;
        public static const ALERT_CANVAS_UI_CANVAS_ALPHA_BASIC:Number = 0.2;
        public static const ALERT_UI_BORDER_ALPHA_BASIC_PROMO:Number = 1;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_TOP_MARGIN_BASIC:int = 12;
        public static const ALERT_UI_CLOSE_BUTTON_TOP_MARGIN_BASIC_PROMO:int = 9;
        public static const ALERT_UI_BACKGROUND_COLOR_BASIC_PROMO:uint = 0xFFFFFF;
        public static const ALERT_UI_CLOSE_BUTTON_BOTTOM_MARGIN_BASIC_PROMO:int = 6;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_HGAP_BASIC_PROMO:int = 5;
        public static const ALERT_CANVAS_UI_CANVAS_ALPHA_BASIC_PROMO:Number = 0.2;
        public static const ALERT_UI_BACKGROUND_ALPHA_MINI:Number = 1;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_TOP_MARGIN_BASIC_PROMO:int = 12;
        public static const ALERT_UI_BACKGROUND_HMARGIN_MINI:uint = 18;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_BOTTOM_MARGIN_BASIC:int = 15;
        public static const ALERT_CANVAS_UI_CANVAS_WIDTH_MINI:uint = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
        public static const ALERT_CANVAS_UI_CANVAS_COLOR_BASIC:uint = 0;
        public static const ALERT_UI_MESSAGE_STYLE_BASIC_PROMO:Object = {
            fontFamily:"Dotum,돋움,AppleGothic,_sans",
            fontSize:"12",
            color:"#333333",
            letterSpacing:"0",
            leading:"7"
        };
        public static const ALERT_UI_MESSAGE_STYLE_BASIC:Object = {
            fontFamily:"Dotum,돋움,AppleGothic,_sans",
            fontSize:"12",
            color:"#333333",
            letterSpacing:"0",
            leading:"7"
        };
        public static const ALERT_UI_BACKGROUND_COLOR_MINI:uint = 0xFFFFFF;
        public static const ALERT_UI_CLOSE_BUTTON_Right_MARGIN_BASIC_PROMO:int = 9;
        public static const ALERT_UI_CLOSE_BUTTON_BOTTOM_MARGIN_BASIC:int = 6;
        public static const ALERT_CANVAS_UI_CANVAS_WIDTH_BASIC:uint = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC;
        public static const ALERT_CANVAS_UI_CANVAS_HEIGHT_BASIC_PROMO:uint = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_HGAP_MINI:int = 5;
        public static const ALERT_UI_ALIGNABLE_BUTTONS_HGAP_BASIC:int = 5;
        public static const ALERT_UI_BORDER_ALPHA_MINI:Number = 1;
        public static const ALERT_UI_BACKGROUND_HMARGIN_BASIC_PROMO:uint = 18;
        public static const ALERT_UI_BACKGROUND_ALPHA_BASIC_PROMO:Number = 1;
        public static const ALERT_UI_BORDER_COLOR_BASIC_PROMO:uint = 0x888888;
        public static const ALERT_UI_CLOSE_BUTTON_BOTTOM_MARGIN_MINI:int = 6;
        public static const ALERT_UI_BORDER_COLOR_MINI:uint = 0x888888;

        public static function get alertCanvasUIEnabled():Boolean{
            var _local1:Boolean;
            if ((((WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP)) || ((WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING)))){
                _local1 = true;
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling 
﻿package com.nhn.application.modules.webplayererrorhandling {
    import flash.system.*;
    import com.nhn.application.modules.webplayercore.*;
    import flash.external.*;

    public class WebPlayerErrorHandlingJeagleye {

        public static var USER_ID:String = "";
        public static var SONG_TRACK_ID:String = "";

        private static function message(_arg1:String, _arg2:String):String{
            var _local3 = "";
            var _local4 = (("(" + Capabilities.version) + ")");
            switch (_arg2){
                case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                case WebPlayerCoreProperties.PLAYER_TYPE_PV:
                case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    break;
            };
            switch (_arg1){
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR:
                    _local3 = ("IOError" + _local4);
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_SECURITY_ERROR:
                    _local3 = ("SecurityError" + _local4);
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_000:
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_001:
                    _local3 = "Not Login";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101:
                    _local3 = ("Unknown Error" + _local4);
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_102:
                    _local3 = "Not Exist Params";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_103:
                    _local3 = "Not Exist Result";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_104:
                    _local3 = "Not Play Auth";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_105:
                    _local3 = "Not Play Adult";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_106:
                    _local3 = "Not Exist Track Info";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_107:
                    _local3 = "Not Exist Track Path";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_108:
                    _local3 = "Not Service Song";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                    _local3 = "Not Session Auth";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_111:
                    _local3 = "Not All Info";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112:
                    _local3 = "No Part Info";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_113:
                    _local3 = "GEO filtered";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_900:
                    _local3 = "connectionRejected";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_901:
                    _local3 = "connectionFail";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_902:
                    _local3 = "connectionClosed";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_903:
                    _local3 = "applicationShoutdown";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_904:
                    _local3 = "invalidApplication";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_905:
                    _local3 = "connectionCallFailed";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_906:
                    _local3 = "streamIoerror";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_907:
                    _local3 = "serviceIoerror";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_908:
                    _local3 = "serverCommunicationerror";
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2000:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2001:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2003:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2004:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2005:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2006:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2007:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2101:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2102:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2103:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2104:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2105:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2106:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2107:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2118:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000:
                    break;
            };
            return (_local3);
        }
        public static function sendMessage(_arg1:String, _arg2:String=null):void{
            var _local3:String = WebPlayerErrorHandlingJeagleye.message(_arg1, WebPlayerCoreProperties.playerType);
            if (_local3 == ""){
                return;
            };
            _local3 = (_local3 + ("," + WebPlayerErrorHandlingJeagleye.SONG_TRACK_ID));
            _local3 = (_local3 + ("," + WebPlayerErrorHandlingJeagleye.USER_ID));
            if (((!((_arg2 == null))) && ((_arg1 == WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR)))){
                _local3 = (_local3 + ("," + _arg2.toString()));
            };
            var _local4:String = ("http://" + WebPlayerCoreProperties.playerServerAPIHost);
            ExternalInterface.call("errorReport", _local3, _local4, _arg1);
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling 
﻿package com.nhn.application.modules.webplayererrorhandling {

    public class WebPlayerErrorHandlingResultUIDefines {

        public static const RESULT_UI_DEFINE_CLIENT_2117:Object = {
            animationEnabled:false,
            autoCloseEnabled:true
        };
        public static const RESULT_UI_DEFINE_CLIENT_2118:Object = {
            animationEnabled:false,
            autoCloseEnabled:true
        };
        public static const RESULT_UI_DEFINE_CLIENT_2000:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2002:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2004:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2006:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2001:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2003:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_COMMON_SECURITY_ERROR:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2005:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2007:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_COMMON_IO_ERROR:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_101:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_102:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_103:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_104:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_105:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_106:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_107:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_108:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_3000:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_110:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_111:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_112:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_113:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_900:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_901:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_902:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_903:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_904:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_906:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_907:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_908:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_FMS_905:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_000:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_001:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_WAS_002:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2100:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2101:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2102:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2103:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2104:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2105:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2106:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2107:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2108:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2109:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2110:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2112:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2113:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2114:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };
        public static const RESULT_UI_DEFINE_CLIENT_2115:Object = {
            animationEnabled:false,
            autoCloseEnabled:true
        };
        public static const RESULT_UI_DEFINE_CLIENT_2116:Object = {
            animationEnabled:false,
            autoCloseEnabled:true
        };
        public static const RESULT_UI_DEFINE_CLIENT_2111:Object = {
            animationEnabled:false,
            autoCloseEnabled:false
        };

    }
}//package com.nhn.application.modules.webplayererrorhandling 
﻿package com.nhn.application.modules.webplayererrorhandling {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;
    import com.nhn.application.modules.webplayererrorhandling.notifications.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.command.*;

    public class WebPlayerErrorHandlingModule extends PipeInterchangeableModule {

        public static const NAME_BASE:String = "WebPlayerErrorHandlingModule";

        public function WebPlayerErrorHandlingModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getType()){
                case DataTransferProtocol.TYPE:
                    switch (_arg1.getHeaderByIMessageHeader().name){
                        case WebPlayerErrorHandlingPipeMessages.REQUEST_GET_ALERT_CANVAS_UI.name:
                            facade.sendNotification(WebPlayerErrorHandlingNotifications.REQUEST_GET_ALERT_CANVAS_UI, _arg1.getBody(), null);
                            break;
                        case WebPlayerErrorHandlingPipeMessages.OPEN_ALERT_UI.name:
                            facade.sendNotification(WebPlayerErrorHandlingNotifications.OPEN_ALERT_UI, _arg1.getBody(), null);
                            break;
                        default:
                            throw (new Error(("WebPlayerErrorHandlingModule : " + "message.getHeaderByIMessageHeader().name is not valid.")));
                    };
                    break;
                default:
                    super.handlePipeMessage(_arg1);
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(WebPlayerErrorHandlingPipeMessages.REQUEST_GET_ALERT_CANVAS_UI.name);
            _local1.push(WebPlayerErrorHandlingPipeMessages.OPEN_ALERT_UI.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling 
﻿package com.nhn.application.modules.webplayererrorhandling {
    import com.nhn.application.modules.webplayercore.*;

    public class WebPlayerErrorHandlingResultMessages {

        public static const RESULT_MESSAGE_FMS_907_BASIC:String = ("서비스 접근이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_FMS_904_MINI:String = ("음원 연결에 오류가 발생하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_CLIENT_2003_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>MP3 다운로드 받을 곡을 선택해 주세요.");
        public static const RESULT_MESSAGE_CLIENT_2107_BASIC:String = ((RESULT_MESSAGE_PREFIX_01_BASIC + "<BR>") + RESULT_MESSAGE_SUFFIX_03_BASIC);
        public static const RESULT_MESSAGE_WAS_102_MINI:String = ("음악 재생이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_107_BASIC:String = ("음원 경로로 접근이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2005_MINI:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_WAS_110_MINI:String = (("다른 기기에서 동일 아이디로<BR>" + "접속하여 플레이어가 종료됩니다.<BR>") + RESULT_MESSAGE_SUFFIX_01_MINI);
        private static const RESULT_MESSAGE_SUFFIX_05_BASIC:String = "<B>최대 30곡까지</B> 선택할 수 있습니다.";
        private static const RESULT_MESSAGE_PREFIX_02_BASIC:String = "<B>반복듣기는 5번까지 실행됩니다.</B>";
        public static const RESULT_MESSAGE_CLIENT_2118_MINI:String = "인터넷 연결 상태에 따라<BR>음악 재생이 원활하지 않을 수 있습니다.";
        public static const RESULT_MESSAGE_CLIENT_2110_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>MP3 다운로드 받을 곡을 선택해 주세요.");
        public static const RESULT_MESSAGE_FMS_901_MINI:String = ("서버 접속이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_WAS_110_BASIC:String = ("다른 기기에서 동일 아이디로 접속하여 플레이어가 종료됩니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2118_BASIC:String = "인터넷 연결 상태에 따라<BR>음악 재생이 원활하지 않을 수 있습니다.";
        private static const RESULT_MESSAGE_PREFIX_03_MINI:String = "선택한 곡이 없습니다.";
        public static const RESULT_MESSAGE_CLIENT_2115_MINI:String = "선택한 곡을 관심음악에 추가하였습니다.";
        public static const RESULT_MESSAGE_CLIENT_2002_MINI:String = "단체 ID로는 뮤직이용권<BR>구입이 불가능합니다.<BR>개인 ID로 이용해 주세요.";
        public static const RESULT_MESSAGE_FMS_904_BASIC:String = ("음원 연결에 오류가 발생하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2107_MINI:String = ((RESULT_MESSAGE_PREFIX_01_MINI + "<BR>") + RESULT_MESSAGE_SUFFIX_03_MINI);
        public static const RESULT_MESSAGE_CLIENT_2000_BASIC:String = ((RESULT_MESSAGE_PREFIX_01_BASIC + "<BR>") + RESULT_MESSAGE_SUFFIX_03_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2104_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>이동할 곡을 선택해주세요.");
        public static const RESULT_MESSAGE_WAS_000_BASIC:String = "성공";
        public static const RESULT_MESSAGE_WAS_104_BASIC:String = ("재생 권한 확인이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2104_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>이동할 곡을 선택해주세요.");
        private static const RESULT_MESSAGE_SUFFIX_02_BASIC:String = "잠시 뒤에 다시 시도해주세요.";
        public static const RESULT_MESSAGE_CLIENT_2112_MINI:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_CLIENT_2115_BASIC:String = (("선택한 곡을 관심음악에 추가하였습니다.<BR><A HREF='http://" + WebPlayerCoreProperties.musicServerAPIHost) + "/myMusic/favorite.nhn'  TARGET='_blank'><FONT COLOR='#129F33'>마이뮤직>내 관심음악</FONT></A>에서 확인하실 수 있습니다.");
        public static const RESULT_MESSAGE_FMS_901_BASIC:String = ("서버 접속이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        public static const RESULT_MESSAGE_FMS_908_MINI:String = ("알 수 없는 오류로 재생이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_CLIENT_2101_MINI:String = ("블로그나, 카페에 보내고 싶은 곡을 선택하세요.<BR>" + RESULT_MESSAGE_SUFFIX_05_MINI);
        private static const RESULT_MESSAGE_SUFFIX_04_MINI:String = "재생 버튼을 클릭하면<BR>다시 들을 수 있습니다.";
        public static const RESULT_MESSAGE_CLIENT_2101_BASIC:String = ("블로그나, 카페에 보내고 싶은 곡을 선택하세요.<BR>" + RESULT_MESSAGE_SUFFIX_05_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2005_BASIC:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_WAS_106_MINI:String = ("음원 정보로 접근이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_101_BASIC:String = ("알 수 없는 오류가 발생하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_WAS_001_MINI:String = "성공";
        public static const RESULT_MESSAGE_CLIENT_2109_BASIC:String = "단체 ID로는 뮤직이용권 구입이 불가능합니다.<BR>개인 ID로 이용해 주세요.";
        private static const RESULT_MESSAGE_SUFFIX_01_MINI:String = "문제가 지속될 경우,<BR>고객센터로 문의해 주십시오.";
        public static const RESULT_MESSAGE_FMS_905_MINI:String = ("음원 연결에 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_CLIENT_2112_BASIC:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_WAS_112_BASIC:String = "재생 불가능한 곡을 제외하고<BR>리스트에 추가하였습니다.";
        public static const RESULT_MESSAGE_WAS_103_MINI:String = ("해당 음악을 재생할 수 없습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_111_MINI:String = "선택한 곡 중에<BR>재생 가능한 곡이 없습니다.";
        public static const RESULT_MESSAGE_CLIENT_2006_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>마이앨범에 담을 음악을 선택해 주세요.");
        public static const RESULT_MESSAGE_FMS_906_BASIC:String = ("장애가 발생하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        private static const RESULT_MESSAGE_SUFFIX_04_BASIC:String = "재생 버튼을 클릭하면 다시 들을 수 있습니다.";
        public static const RESULT_MESSAGE_FMS_902_MINI:String = ("서버 접속이 종료되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_CLIENT_2002_BASIC:String = "단체 ID로는 뮤직이용권 구입이 불가능합니다.<BR>개인 ID로 이용해 주세요.";
        public static const RESULT_MESSAGE_CLIENT_2106_BASIC:String = "플레이리스트는<BR><B>최대 200곡까지</B> 담을 수 있습니다.";
        public static const RESULT_MESSAGE_WAS_002_BASIC:String = "정기점검";
        public static const RESULT_MESSAGE_COMMON_SECURITY_ERROR_BASIC:String = ("서버 통신이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2108_MINI:String = ((RESULT_MESSAGE_PREFIX_02_MINI + "<BR>") + RESULT_MESSAGE_SUFFIX_04_MINI);
        public static const RESULT_MESSAGE_WAS_106_BASIC:String = ("음원 정보로 접근이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2003_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>MP3 다운로드 받을 곡을 선택해 주세요.");
        public static const RESULT_MESSAGE_CLIENT_2116_MINI:String = "이미 관심음악으로 추가된 곡입니다.";
        private static const RESULT_MESSAGE_PREFIX_01_MINI:String = "선택한 곡은 <B>19세 미만</B>의 청소년은<BR>이용할 수 없습니다.";
        private static const RESULT_MESSAGE_PREFIX_01_BASIC:String = "선택한 곡은 <B>19세 미만</B>의 청소년은 이용할 수 없습니다.";
        public static const RESULT_MESSAGE_CLIENT_2117_BASIC:String = "곡 관심음악 등록개수를 초과하였습니다.";
        public static const RESULT_MESSAGE_CLIENT_2105_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>플레이리스트로 보낼 곡을 선택해주세요.");
        public static const RESULT_MESSAGE_CLIENT_2113_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>마이앨범에 담을 음악을 선택해 주세요.");
        public static const RESULT_MESSAGE_CLIENT_2000_MINI:String = ((RESULT_MESSAGE_PREFIX_01_MINI + "<BR>") + RESULT_MESSAGE_SUFFIX_03_MINI);
        public static const RESULT_MESSAGE_FMS_903_BASIC:String = ("음원 연결이 종료되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2103_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>삭제할 곡을 선택해주세요.");
        public static const RESULT_MESSAGE_CLIENT_2007_BASIC:String = "본문에 포함된 플레이리스트를<BR>음악보내기 할 경우<BR>전체 리스트가 담겨집니다.";
        public static const RESULT_MESSAGE_WAS_103_BASIC:String = ("해당 음악을 재생할 수 없습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2102_MINI:String = ("현재 30곡을 초과하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_05_MINI);
        private static const RESULT_MESSAGE_SUFFIX_01_BASIC:String = "문제가 지속될 경우, 고객센터로 문의해 주십시오.";
        private static const RESULT_MESSAGE_SUFFIX_05_MINI:String = "<B>최대 30곡까지</B> 선택할 수 있습니다.";
        public static const RESULT_MESSAGE_CLIENT_2110_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>MP3 다운로드 받을 곡을 선택해 주세요.");
        public static const RESULT_MESSAGE_CLIENT_2114_BASIC:String = "본문에 포함된 플레이리스트를 음악보내기 할 경우<BR>전체 리스트가 담겨집니다.";
        public static const RESULT_MESSAGE_WAS_107_MINI:String = ("음원 경로로 접근이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_002_MINI:String = "정기점검";
        public static const RESULT_MESSAGE_COMMON_SECURITY_ERROR_MINI:String = ("서버 통신이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_COMMON_IO_ERROR_BASIC:String = ("서버 통신이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_FMS_900_BASIC:String = ("서버 접속이 거절되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        private static const RESULT_MESSAGE_SUFFIX_02_MINI:String = "잠시 뒤에 다시 시도해주세요.";
        public static const RESULT_MESSAGE_FMS_908_BASIC:String = ("알 수 없는 오류로 재생이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        public static const RESULT_MESSAGE_FMS_906_MINI:String = ("장애가 발생하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_CLIENT_2100_BASIC:String = ("<B>장시간 사용자 조작이 없어 정지되었습니다.</B><BR>" + RESULT_MESSAGE_SUFFIX_04_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2004_BASIC:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_CLIENT_2108_BASIC:String = ((RESULT_MESSAGE_PREFIX_02_BASIC + "<BR>") + RESULT_MESSAGE_SUFFIX_04_BASIC);
        public static const RESULT_MESSAGE_WAS_104_MINI:String = ("재생 권한 확인이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_112_MINI:String = "재생 불가능한 곡을 제외하고<BR>리스트에 추가하였습니다.";
        public static const RESULT_MESSAGE_CLIENT_2007_MINI:String = "본문에 포함된 플레이리스트를<BR>음악보내기 할 경우<BR>전체 리스트가 담겨집니다.";
        public static const RESULT_MESSAGE_WAS_108_BASIC:String = "선택한 곡은<BR>현재 서비스 되지 않는 곡입니다.";
        private static const RESULT_MESSAGE_PREFIX_03_BASIC:String = "선택한 곡이 없습니다.";
        public static const RESULT_MESSAGE_CLIENT_3000_BASIC:String = "로그인이 필요한 서비스입니다.<BR>로그인하시겠습니까?";
        public static const RESULT_MESSAGE_FMS_903_MINI:String = ("음원 연결이 종료되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_CLIENT_2111_BASIC:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_WAS_111_BASIC:String = "선택한 곡 중에<BR>재생 가능한 곡이 없습니다.";
        public static const RESULT_MESSAGE_WAS_101_MINI:String = ("알 수 없는 오류가 발생하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_CLIENT_2117_MINI:String = "관심음악의 곡 등록개수를 초과하였습니다.";
        public static const RESULT_MESSAGE_FMS_905_BASIC:String = ("음원 연결에 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2004_MINI:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_CLIENT_2109_MINI:String = "단체 ID로는 뮤직이용권<BR>구입이 불가능합니다.<BR>개인 ID로 이용해 주세요.";
        private static const RESULT_MESSAGE_SUFFIX_03_BASIC:String = "성인은 로그인 후 이용해 주세요.";
        public static const RESULT_MESSAGE_CLIENT_2001_BASIC:String = ((RESULT_MESSAGE_PREFIX_02_BASIC + "<BR>") + RESULT_MESSAGE_SUFFIX_04_BASIC);
        public static const RESULT_MESSAGE_FMS_900_MINI:String = ("서버 접속이 거절되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_MINI);
        public static const RESULT_MESSAGE_CLIENT_2105_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>플레이리스트로 보낼 곡을 선택해주세요.");
        public static const RESULT_MESSAGE_WAS_001_BASIC:String = "성공";
        public static const RESULT_MESSAGE_WAS_105_BASIC:String = ((RESULT_MESSAGE_PREFIX_01_BASIC + "<BR>") + RESULT_MESSAGE_SUFFIX_03_BASIC);
        private static const RESULT_MESSAGE_PREFIX_02_MINI:String = "<B>반복듣기는 5번까지 실행됩니다.</B>";
        public static const RESULT_MESSAGE_CLIENT_2001_MINI:String = ((RESULT_MESSAGE_PREFIX_02_MINI + "<BR>") + RESULT_MESSAGE_SUFFIX_04_MINI);
        public static const RESULT_MESSAGE_CLIENT_2106_MINI:String = "플레이리스트는<BR><B>최대 200곡까지</B> 담을 수 있습니다.";
        public static const RESULT_MESSAGE_CLIENT_2114_MINI:String = "본문에 포함된 플레이리스트를 음악보내기 할 경우<BR>전체 리스트가 담겨집니다.";
        public static const RESULT_MESSAGE_CLIENT_2116_BASIC:String = (("이미 곡 관심음악에 추가된 곡입니다.<BR><A HREF='http://" + WebPlayerCoreProperties.musicServerAPIHost) + "/myMusic/favorite.nhn' TARGET='_blank'><FONT COLOR='#129F33'>마이뮤직>내 관심음악</FONT></A>에서 확인하실 수 있습니다.");
        public static const RESULT_MESSAGE_FMS_902_BASIC:String = ("서버 접속이 종료되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_02_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2103_MINI:String = (RESULT_MESSAGE_PREFIX_03_MINI + "<BR>삭제할 곡을 선택해주세요.");
        public static const RESULT_MESSAGE_CLIENT_2111_MINI:String = "선택한 곡 중<BR>MP3 다운로드 가능한 곡만 받습니다.";
        public static const RESULT_MESSAGE_CLIENT_2102_BASIC:String = ("현재 30곡을 초과하였습니다.<BR>" + RESULT_MESSAGE_SUFFIX_05_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2006_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>마이앨범에 담을 음악을 선택해 주세요.");
        public static const RESULT_MESSAGE_WAS_102_BASIC:String = ("음악 재생이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_BASIC);
        public static const RESULT_MESSAGE_CLIENT_2100_MINI:String = ("장시간 사용자 조작이 없어 정지되었습니다.<BR>" + RESULT_MESSAGE_SUFFIX_04_MINI);
        private static const RESULT_MESSAGE_SUFFIX_03_MINI:String = "성인은 로그인 후 이용해 주세요.";
        public static const RESULT_MESSAGE_FMS_907_MINI:String = ("서비스 접근이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_108_MINI:String = "선택한 곡은<BR>현재 서비스 되지 않는 곡입니다.";
        public static const RESULT_MESSAGE_CLIENT_2113_BASIC:String = (RESULT_MESSAGE_PREFIX_03_BASIC + "<BR>마이앨범에 담을 음악을 선택해 주세요.");
        public static const RESULT_MESSAGE_COMMON_IO_ERROR_MINI:String = ("서버 통신이 원활하지 않습니다.<BR>" + RESULT_MESSAGE_SUFFIX_01_MINI);
        public static const RESULT_MESSAGE_WAS_105_MINI:String = ((RESULT_MESSAGE_PREFIX_01_MINI + "<BR>") + RESULT_MESSAGE_SUFFIX_03_MINI);
        public static const RESULT_MESSAGE_WAS_113_BASIC:String = ("<B><FONT COLOR='#FF0000'>KOREA Only</FONT> 죄송합니다.</B><BR>" + "해당 서비스는 음원 관리자의 요청에 의해<BR>한국 내에서만 이용 가능합니다.");
        public static const RESULT_MESSAGE_WAS_113_MINI:String = ("<B><FONT COLOR='#406DC8'>KOREA Only</FONT> 죄송합니다.</B><BR>" + "해당 서비스는 음원 관리자의<BR>요청에 의해 한국 내에서만<BR>이용 가능합니다.");
        public static const RESULT_MESSAGE_WAS_000_MINI:String = "성공";
        public static const RESULT_MESSAGE_CLIENT_3000_MINI:String = "로그인이 필요한 서비스입니다.<BR>로그인하시겠습니까?";

    }
}//package com.nhn.application.modules.webplayererrorhandling 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayererrorhandling.notifications.*;

    public class HWPEHPM_RequestGetAlertCanvasUICommand extends WPEHMBaseCommand {

        override public function execute(_arg1:INotification):void{
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                sendNotification(WebPlayerErrorHandlingNotifications.RESPOND_GET_ALERT_CANVAS_UI, null, null);
            } else {
                throw (new Error(("HWPEHPM_RequestGetAlertCanvasUICommand : " + "WebPlayerCoreProperties.containerType is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.command 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;

    public class WPEHMBaseCommand extends BasicSimpleCommand {

        protected function get alertCanvasUI():AlertCanvasUI{
            var _local1:AlertCanvasUI;
            if (!Boolean(alertCanvasUIMediator)){
                _local1 = null;
            } else {
                _local1 = alertCanvasUIMediator.getAlertCanvasUI();
            };
            return (_local1);
        }
        protected function get alertCanvasUIMediator():AlertCanvasUIMediator{
            var _local1:IMediator = facade.retrieveMediator(AlertCanvasUIMediator.NAME);
            return ((_local1 as AlertCanvasUIMediator));
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.command 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import flash.external.*;

    public class HWPEHPM_OpenAlertUICommand extends WPEHMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local5:String;
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.resultCode as String)))))) || (!(Boolean(((_local2.hasOwnProperty("interationHelpData")) ? Boolean(_local2.interationHelpData) : true)))))){
                throw (new Error(("HWPEHPM_OpenAlertUICommand : " + "body is not valid.")));
            };
            var _local3:String = (_local2.resultCode as String);
            var _local4:Object = (_local2.resultValue as Object);
            var _local6:uint = (AlertUI.CONFIRM_BUTTON_ENABLED | AlertUI.CLOSE_BUTTON_ENABLED);
            var _local7:Object = (_local2.interationHelpData as Object);
            var _local8:Object;
            var _local9:String;
            switch (WebPlayerCoreProperties.playerType){
                case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                case WebPlayerCoreProperties.PLAYER_TYPE_PV:
                case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                    switch (_local3){
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_COMMON_IO_ERROR_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_COMMON_IO_ERROR;
                            _local9 = _local2.url;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_SECURITY_ERROR:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_COMMON_SECURITY_ERROR_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_COMMON_SECURITY_ERROR;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_CUSTOM_ERROR:
                            _local5 = (_local4.message as String);
                            if (!Boolean(_local5)){
                                _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_COMMON_IO_ERROR_BASIC;
                            };
                            if (_local4.hasOwnProperty("buttonEnabled")){
                                _local6 = uint(_local4.buttonEnabled);
                            };
                            _local8 = (_local4.resultUIDefine as Object);
                            if (!Boolean(_local8)){
                                _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_COMMON_SECURITY_ERROR;
                            };
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_000:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_000_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_000;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_001:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_001_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_001;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_002:
                            _local5 = (_local4 as String);
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_002;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_101_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_101;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_102:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_102_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_102;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_103:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_103_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_103;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_104:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_104_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_104;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_105:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_105_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_105;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_106:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_106_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_106;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_107:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_107_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_107;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_108:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_108_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_108;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_110_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_110;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_111:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_111_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_111;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_112_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_112;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_113:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_113_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_113;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_900:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_900_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_900;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_901:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_901_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_901;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_902:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_902_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_902;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_903:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_903_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_903;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_904:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_904_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_904;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_905:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_905_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_905;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_906:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_906_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_906;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_907:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_907_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_907;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_908:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_908_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_908;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2000:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2000_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2000;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2001:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2001_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2001;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2002_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2002;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2003:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2003_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2003;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2004:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2004_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2004;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2005:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2005_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2005;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2006:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2006_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2006;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2007:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2007_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2007;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2100_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2100;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2101:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2101_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2101;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2102:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2102_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2102;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2103:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2103_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2103;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2104:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2104_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2104;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2105:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2105_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2105;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2106:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2106_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2106;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2107:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2107_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2107;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2108_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2108;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2109_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2109;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2110_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2110;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2111_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2111;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2112_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2112;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2113_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2113;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2114_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2114;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2115_BASIC;
                            _local6 = AlertUI.CLOSE_BUTTON_ENABLED;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2115;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2116_BASIC;
                            _local6 = AlertUI.CLOSE_BUTTON_ENABLED;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2116;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2117_BASIC;
                            _local6 = AlertUI.CLOSE_BUTTON_ENABLED;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2117;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2118:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2118_BASIC;
                            _local6 = AlertUI.CLOSE_BUTTON_ENABLED;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2118;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000:
                            _local6 = (_local6 | AlertUI.CANCEL_BUTTON_ENABLED);
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_3000_BASIC;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_3000;
                            break;
                    };
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    switch (_local3){
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_COMMON_IO_ERROR_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_COMMON_IO_ERROR;
                            _local9 = _local2.url;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_SECURITY_ERROR:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_COMMON_SECURITY_ERROR_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_COMMON_SECURITY_ERROR;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_000:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_000_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_000;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_001:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_001_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_001;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_002:
                            _local5 = (_local4 as String);
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_002;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_101_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_101;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_102:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_102_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_102;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_103:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_103_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_103;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_104:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_104_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_104;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_105:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_105_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_105;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_106:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_106_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_106;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_107:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_107_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_107;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_108:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_108_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_108;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_110_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_110;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_111:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_111_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_111;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_112_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_112;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_113:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_WAS_113_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_WAS_113;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_900:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_900_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_900;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_901:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_901_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_901;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_902:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_902_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_902;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_903:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_903_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_903;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_904:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_904_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_904;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_905:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_905_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_905;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_906:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_906_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_906;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_907:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_907_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_907;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_908:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_FMS_908_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_FMS_908;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2000:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2000_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2000;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2001:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2001_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2001;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2002_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2002;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2003:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2003_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2003;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2004:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2004_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2004;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2005:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2005_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2005;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2006:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2006_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2006;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2007:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2007_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2007;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2100_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2100;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2101:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2101_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2101;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2102:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2102_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2102;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2103:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2103_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2103;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2104:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2104_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2104;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2105:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2105_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2105;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2106:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2106_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2106;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2107:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2107_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2107;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2108_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2108;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2109_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2109;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2110_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2110;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2111_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2111;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2112_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2112;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2113_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2113;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2114_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2114;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2115_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2115;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2116_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2116;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2117_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2117;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2118:
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_2118_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_2118;
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000:
                            _local6 = (_local6 | AlertUI.CANCEL_BUTTON_ENABLED);
                            _local5 = WebPlayerErrorHandlingResultMessages.RESULT_MESSAGE_CLIENT_3000_MINI;
                            _local8 = WebPlayerErrorHandlingResultUIDefines.RESULT_UI_DEFINE_CLIENT_3000;
                            break;
                    };
                    break;
                default:
                    throw (new Error(("StartCommand : " + "WebPlayerCoreProperties.playerType is not valid.")));
            };
            trace((((">>>>> containertype: " + WebPlayerCoreProperties.containerType) + ", playertype: ") + WebPlayerCoreProperties.playerType));
            trace(((("notify error>>>  " + _local3) + ",") + _local5));
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                if (WebPlayerCoreProperties.containerType == WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP){
                    if (ExternalInterface.available){
                        trace((((">>>>> error fire: " + _local3) + ", ") + _local5));
                        ExternalInterface.call("___musicBroadCast___", "nmp_error", {
                            resultCode:_local3,
                            resultMessage:_local5,
                            buttonEnabled:_local6,
                            interationHelpData:_local7,
                            resultUIDefine:_local8
                        });
                    };
                } else {
                    alertCanvasUIMediator.openAlertUI(_local3, _local5, _local8.animationEnabled, _local8.autoCloseEnabled, _local6, _local7);
                };
            } else {
                _local5 = _local5.replace(/<BR>/g, "\n");
                _local5 = _local5.replace(/<B>/g, "");
                _local5 = _local5.replace(/<\/B>/g, "");
                if (!WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING){
                    ExternalInterface.call("alert", _local5);
                } else {
                    ExternalInterface.call("___musicBroadCast___", "nmp_error", {
                        resultCode:_local3,
                        resultMessage:_local5,
                        buttonEnabled:_local6,
                        interationHelpData:_local7,
                        resultUIDefine:_local8
                    });
                };
            };
            WebPlayerErrorHandlingJeagleye.sendMessage(_local3, _local9);
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.command 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;

    public class HWPEHPM_RespondGetAlertCanvasUICommand extends WPEHMBaseCommand {

        override public function execute(_arg1:INotification):void{
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                sendPipeMessage(WebPlayerErrorHandlingPipeMessages.RESPOND_GET_ALERT_CANVAS_UI, {alertCanvasUI:alertCanvasUI}, 0);
            } else {
                throw (new Error(("HWPEHPM_RequestGetAlertCanvasUICommand : " + "WebPlayerCoreProperties.containerType is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.command 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.webplayererrorhandling.notifications.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                facade.registerMediator(new AlertCanvasUIMediator());
            };
            facade.registerCommand(WebPlayerErrorHandlingNotifications.REQUEST_GET_ALERT_CANVAS_UI, HWPEHPM_RequestGetAlertCanvasUICommand);
            facade.registerCommand(WebPlayerErrorHandlingNotifications.RESPOND_GET_ALERT_CANVAS_UI, HWPEHPM_RespondGetAlertCanvasUICommand);
            facade.registerCommand(WebPlayerErrorHandlingNotifications.OPEN_ALERT_UI, HWPEHPM_OpenAlertUICommand);
            facade.registerCommand(WebPlayerErrorHandlingNotifications.INTERACT_ALERT_UI, HWPEHPM_InteractAlertUICommand);
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.command 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;

    public class HWPEHPM_InteractAlertUICommand extends WPEHMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.resultCode as String)))))) || (!(Boolean((_local2.eventType as String)))))) || (!(Boolean(_local2.hasOwnProperty("interationHelpData")))))){
                throw (new Error(("HWPEHPM_InteractAlertUICommand : " + "body is not valid.")));
            };
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                sendPipeMessage(WebPlayerErrorHandlingPipeMessages.INTERACT_ALERT_UI, _local2, 0);
            } else {
                throw (new Error(("HWPEHPM_InteractAlertUICommand : " + "WebPlayerCoreProperties.containerType is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.command 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator {
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayererrorhandling.notifications.*;

    public class AlertCanvasUIMediator extends VisualComponentMediator {

        public static const NAME:String = "AlertCanvasUIMediator";

        public function AlertCanvasUIMediator(){
            super(name, null);
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                switch (WebPlayerCoreProperties.playerType){
                    case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                    case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                        break;
                    default:
                        throw (new Error(("AlertCanvasUIMediator : " + "WebPlayerCoreProperties.playerType is not valid.")));
                };
                viewComponent = AlertCanvasUI.getInstance();
            } else {
                throw (new Error(("AlertCanvasUIMediator : " + "WebPlayerErrorHandlingProperties.alertCanvasUIEnable is not valid.")));
            };
        }
        override public function onRemove():void{
            alertCanvasUI.releaseMemory();
            super.onRemove();
        }
        protected function removeAlertUIOfAlertCanvasUI(_arg1:String):void{
            alertCanvasUI.removeAlertUI(_arg1);
        }
        public function openAlertUI(_arg1:String, _arg2:String, _arg3:Boolean, _arg4:Boolean, _arg5:uint, _arg6:Object):void{
            if (WebPlayerErrorHandlingProperties.alertCanvasUIEnabled){
                switch (WebPlayerCoreProperties.playerType){
                    case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                    case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                        break;
                    default:
                        throw (new Error(("AlertCanvasUIMediator : " + "WebPlayerCoreProperties.playerType is not valid.")));
                };
                alertCanvasUI.openAlertUI(_arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
            } else {
                throw (new Error(("AlertCanvasUIMediator : " + "WebPlayerErrorHandlingProperties.alertCanvasUIEnable is not valid.")));
            };
        }
        protected function get alertCanvasUI():AlertCanvasUI{
            return ((viewComponent as AlertCanvasUI));
        }
        override public function onRegister():void{
            super.onRegister();
            alertCanvasUI.addEventListener(AlertUIEvent.CONFIRM, alertCanvasUI_handleAlertUIEvent, false, 0, false);
            alertCanvasUI.addEventListener(AlertUIEvent.CANCEL, alertCanvasUI_handleAlertUIEvent, false, 0, false);
            alertCanvasUI.addEventListener(AlertUIEvent.CLOSE, alertCanvasUI_handleAlertUIEvent, false, 0, false);
        }
        override public function get name():String{
            return (NAME);
        }
        protected function alertCanvasUI_handleAlertUIEvent(_arg1:AlertUIEvent):void{
            switch (_arg1.type){
                case AlertUIEvent.CONFIRM:
                case AlertUIEvent.CANCEL:
                case AlertUIEvent.CLOSE:
                    break;
            };
            switch (_arg1.resultCode){
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                    WebPlayerCoreProperties.closeWindow();
                    break;
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_CUSTOM_ERROR:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000:
                    sendNotification(WebPlayerErrorHandlingNotifications.INTERACT_ALERT_UI, {
                        resultCode:(_arg1.resultCode as String),
                        eventType:_arg1.type,
                        interationHelpData:_arg1.interationHelpData
                    }, null);
                    removeAlertUIOfAlertCanvasUI(_arg1.resultCode);
                    break;
                default:
                    removeAlertUIOfAlertCanvasUI(_arg1.resultCode);
            };
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        public function getAlertCanvasUI():AlertCanvasUI{
            return (alertCanvasUI);
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent {
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.*;

    public class AlertCanvasUI extends Sprite implements IReleaseMemory {

        private static var instance:AlertCanvasUI;

        private var background:Sprite;
        private var _backgroundEnabled:Boolean;
        private var canvas:Sprite;
        private var alertUITable:Dictionary;

        public function AlertCanvasUI(_arg1:AlertCanvasUISingletonEnforcer){
            var _local2:uint;
            var _local3:uint;
            var _local4:uint;
            var _local5:Number;
            super();
            if (!Boolean(_arg1)){
                throw (new Error(("AlertCanvasUI : AlertCanvasUI is singleton-class, " + "so you should run AlertCanvasUI.getInstance().")));
            };
            switch (WebPlayerCoreProperties.playerType){
                case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    _local2 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_WIDTH_BASIC;
                    _local3 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_HEIGHT_BASIC;
                    _local4 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_COLOR_BASIC;
                    _local5 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_ALPHA_BASIC;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    _local2 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_WIDTH_MINI;
                    _local3 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_HEIGHT_MINI;
                    _local4 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_COLOR_MINI;
                    _local5 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_ALPHA_MINI;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                    _local2 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_WIDTH_BASIC_PROMO;
                    _local3 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_HEIGHT_BASIC_PROMO;
                    _local4 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_COLOR_BASIC_PROMO;
                    _local5 = WebPlayerErrorHandlingProperties.ALERT_CANVAS_UI_CANVAS_ALPHA_BASIC_PROMO;
                    break;
                default:
                    throw (new Error(("AlertCanvasUI : " + "WebPlayerCoreProperties.playerType is not valid.")));
            };
            background = new Sprite();
            background.graphics.beginFill(_local4, _local5);
            background.graphics.drawRect(0, 0, _local2, _local3);
            background.graphics.endFill();
            backgroundEnabled = false;
            super.addChild(background);
            canvas = new Sprite();
            super.addChild(canvas);
            alertUITable = new Dictionary(false);
        }
        public static function getInstance():AlertCanvasUI{
            if (!Boolean(instance)){
                instance = new AlertCanvasUI(new AlertCanvasUISingletonEnforcer());
            };
            return (instance);
        }
        public static function releaseInstance():void{
            if (Boolean(instance)){
                instance.releaseMemory();
                instance = null;
            };
        }

        private function alertUI_handleAlertUIEvent(_arg1:AlertUIEvent):void{
            var _local3:AlertUIEvent;
            var _local2:AlertUI;
            switch (_arg1.type){
                case AlertUIEvent.OPENED:
                    _local2 = (_arg1.target as AlertUI);
                    _local2.x = int(((width - _local2.width) * 0.5));
                    _local2.y = int(((height - _local2.height) * 0.5));
                    _local2.visible = true;
                    break;
                case AlertUIEvent.CLOSED:
                    _local2 = (_arg1.target as AlertUI);
                    canvas.removeChild(_local2);
                    alertUITable[_arg1.resultCode] = null;
                    delete alertUITable[_arg1.resultCode];
                    _local2.removeEventListener(AlertUIEvent.OPENED, alertUI_handleAlertUIEvent, false);
                    _local2.removeEventListener(AlertUIEvent.CLOSED, alertUI_handleAlertUIEvent, false);
                    _local2.removeEventListener(AlertUIEvent.CONFIRM, alertUI_handleAlertUIEvent, false);
                    _local2.removeEventListener(AlertUIEvent.CANCEL, alertUI_handleAlertUIEvent, false);
                    _local2.removeEventListener(AlertUIEvent.CLOSE, alertUI_handleAlertUIEvent, false);
                    if (canvas.numChildren === 0){
                        backgroundEnabled = false;
                    };
                    break;
                case AlertUIEvent.CONFIRM:
                case AlertUIEvent.CANCEL:
                case AlertUIEvent.CLOSE:
                    _local3 = (_arg1.clone() as AlertUIEvent);
                    dispatchEvent(_local3);
                    break;
            };
        }
        private function set backgroundEnabled(_arg1:Boolean):void{
            _backgroundEnabled = _arg1;
            background.mouseEnabled = _arg1;
            background.mouseChildren = _arg1;
            background.visible = _arg1;
            visible = _arg1;
        }
        public function removeTopmostAlertUI():void{
            var _local1:String = retrieveResultCodeOfTopmostAlertUI();
            if (Boolean(_local1)){
                removeAlertUI(_local1);
            };
        }
        public function removeAlertUI(_arg1:String):void{
            var _local2:AlertUI;
            if (Boolean(alertUITable[_arg1])){
                _local2 = (alertUITable[_arg1] as AlertUI);
                _local2.close();
            };
        }
        public function openAlertUI(_arg1:String, _arg2:String, _arg3:Boolean, _arg4:Boolean, _arg5:uint, _arg6:Object):void{
            var _local7:AlertUI;
            if (Boolean(alertUITable[_arg1])){
                _local7 = (alertUITable[_arg1] as AlertUI);
                canvas.addChild(_local7);
            } else {
                if (_arg3){
                    _local7 = new AlertUI(_arg1, _arg2, _arg4, _arg5, _arg6);
                } else {
                    _local7 = new AlertUI(_arg1, _arg2, _arg4, _arg5, _arg6);
                };
                _local7.visible = false;
                _local7.addEventListener(AlertUIEvent.OPENED, alertUI_handleAlertUIEvent, false, 0, false);
                _local7.addEventListener(AlertUIEvent.CLOSED, alertUI_handleAlertUIEvent, false, 0, false);
                _local7.addEventListener(AlertUIEvent.CONFIRM, alertUI_handleAlertUIEvent, false, 0, false);
                _local7.addEventListener(AlertUIEvent.CANCEL, alertUI_handleAlertUIEvent, false, 0, false);
                _local7.addEventListener(AlertUIEvent.CLOSE, alertUI_handleAlertUIEvent, false, 0, false);
                alertUITable[_arg1] = _local7;
                canvas.addChild(_local7);
            };
            _local7.open();
            backgroundEnabled = true;
        }
        public function releaseMemory():void{
            var resultCode:* = null;
            var child:* = null;
            var alertUI:* = null;
            var i:* = 0;
            var removedNumChildrenOfCanvas:* = 0;
            var numChildrenOfCanvas:* = 0;
            for (resultCode in alertUITable) {
                removeAlertUI(resultCode);
            };
            alertUITable = null;
            if (canvas.numChildren !== 0){
                i = 0;
                removedNumChildrenOfCanvas = 0;
                numChildrenOfCanvas = canvas.numChildren;
                while (numChildrenOfCanvas === removedNumChildrenOfCanvas) {
                    child = canvas.getChildAt(i);
                    if (Boolean(child)){
                        removedNumChildrenOfCanvas = (removedNumChildrenOfCanvas + 1);
                        if ((child is AlertUI)){
                            alertUI = (child as AlertUI);
                            try {
                                alertUI.removeEventListener(AlertUIEvent.OPENED, alertUI_handleAlertUIEvent, false);
                                alertUI.removeEventListener(AlertUIEvent.CLOSED, alertUI_handleAlertUIEvent, false);
                                alertUI.removeEventListener(AlertUIEvent.CONFIRM, alertUI_handleAlertUIEvent, false);
                                alertUI.removeEventListener(AlertUIEvent.CANCEL, alertUI_handleAlertUIEvent, false);
                                alertUI.removeEventListener(AlertUIEvent.CLOSE, alertUI_handleAlertUIEvent, false);
                            } catch(e:Error) {
                            };
                        };
                        canvas.removeChild(child);
                    };
                    i = (i + 1);
                };
            };
            backgroundEnabled = false;
            super.removeChild(canvas);
            canvas = null;
            super.removeChild(background);
            background.graphics.clear();
            background = null;
        }
        private function get backgroundEnabled():Boolean{
            return (_backgroundEnabled);
        }
        public function retrieveResultCodeOfTopmostAlertUI():String{
            var _local1:String;
            var _local2:AlertUI = (canvas.getChildAt((canvas.numChildren - 1)) as AlertUI);
            if (Boolean(_local2)){
                _local1 = _local2.resultCode;
            };
            return (_local1);
        }
        override public function addChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("AlertCanvasUI : can not use addChild method."));
        }
        override public function removeChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("AlertCanvasUI : can not use removeChild method."));
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent 

class AlertCanvasUISingletonEnforcer {

    public function AlertCanvasUISingletonEnforcer(){
    }
}
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent {
    import flash.display.*;
    import com.nhn.core.interfaces.*;

    public class ButtonBaseUI extends Sprite implements IReleaseMemory {

        protected var _skinAsset:Bitmap;

        public function ButtonBaseUI(_arg1:Class=null, _arg2:Boolean=true, _arg3:Number=0, _arg4:Number=0){
            var _local5:uint = 0xFF0000;
            var _local6:Number = 1;
            if (Boolean(_arg1)){
                _skinAsset = new (_arg1)();
                addChild(skinAsset);
                if (_arg3 <= skinAsset.width){
                    _arg3 = skinAsset.width;
                };
                if (_arg4 <= skinAsset.height){
                    _arg4 = skinAsset.height;
                };
                _local6 = 0;
            };
            this.buttonMode = _arg2;
            graphics.beginFill(_local5, _local6);
            graphics.drawRect(0, 0, _arg3, _arg4);
            graphics.endFill();
        }
        public function get skinAsset():Bitmap{
            return (_skinAsset);
        }
        public function releaseMemory():void{
            graphics.clear();
            if (Boolean(skinAsset)){
                removeChild(skinAsset);
            };
            _skinAsset = null;
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class AlertUI_ConfirmButtonAsset extends Bitmap {

        public function AlertUI_ConfirmButtonAsset(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class AlertUI_CancelButtonAsset extends Bitmap {

        public function AlertUI_CancelButtonAsset(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class AlertUI_CloseButtonAsset extends Bitmap {

        public function AlertUI_CloseButtonAsset(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.text.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.assets.*;

    public class AlertUI extends Sprite {

        public static const CONFIRM_BUTTON_ENABLED:uint = 1;
        protected static const MESSAGE_STYLE_NAME:String = "messageStyle";
        public static const CANCEL_BUTTON_ENABLED:uint = 2;
        public static const CLOSE_BUTTON_ENABLED:uint = 4;
        protected static const AUTO_CLOSE_INTERVAL:Number = 3000;

        private var _resultCode:String;
        private var nonAlignableButtons:Array;
        private var alignableButtons:Array;
        private var _interationHelpData:Object;
        private var opened:Boolean;
        private var _resultMessage:String;
        private var background:Sprite;
        private var buttonEnabled:uint;
        private var messageField:TextField;
        private var autoCloseEnabled:Boolean;
        private var autoCloseTimer:Timer;
        private var alignableButtonsContainer:Sprite;

        public function AlertUI(_arg1:String, _arg2:String, _arg3:Boolean, _arg4:uint, _arg5:Object){
            _resultCode = _arg1;
            _resultMessage = _arg2;
            this.autoCloseEnabled = _arg3;
            this.buttonEnabled = _arg4;
            _interationHelpData = _arg5;
            autoCloseTimer = null;
            opened = false;
        }
        private function autoCloseTimer_handleTimerEvent(_arg1:TimerEvent):void{
            autoCloseTimer.stop();
            autoCloseTimer.removeEventListener(TimerEvent.TIMER, autoCloseTimer_handleTimerEvent, false);
            autoCloseTimer = null;
            close();
        }
        public function get interationHelpData():Object{
            return (_interationHelpData);
        }
        private function clearInternalUI():void{
            var button:* = null;
            var i:* = 0;
            var length:* = 0;
            if (Boolean(alignableButtons)){
                length = alignableButtons.length;
                i = 0;
                while (i < length) {
                    button = (alignableButtons[i] as ButtonBaseUI);
                    alignableButtons[i] = null;
                    try {
                        alignableButtonsContainer.removeChild(button);
                    } catch(e:Error) {
                    };
                    deleteButton(button);
                    i = (i + 1);
                };
                try {
                    super.removeChild(alignableButtonsContainer);
                } catch(e:Error) {
                };
                alignableButtonsContainer = null;
                alignableButtons = null;
            };
            if (Boolean(nonAlignableButtons)){
                length = nonAlignableButtons.length;
                i = 0;
                while (i < length) {
                    button = (nonAlignableButtons[i] as ButtonBaseUI);
                    nonAlignableButtons[i] = null;
                    super.removeChild(button);
                    deleteButton(button);
                    i = (i + 1);
                };
                nonAlignableButtons = null;
            };
            if (Boolean(messageField)){
                super.removeChild(messageField);
                messageField.styleSheet = null;
                messageField = null;
            };
            if (Boolean(background)){
                super.removeChild(background);
                background.graphics.clear();
                background = null;
            };
        }
        public function open():void{
            var _local1:AlertUIEvent;
            if (!opened){
                drawInternalUI();
                opened = true;
                _local1 = new AlertUIEvent(AlertUIEvent.OPENED, resultCode, interationHelpData, true, true);
                dispatchEvent(_local1);
                if (autoCloseEnabled){
                    autoCloseTimer = new Timer(AlertUI.AUTO_CLOSE_INTERVAL, 1);
                    autoCloseTimer.addEventListener(TimerEvent.TIMER, autoCloseTimer_handleTimerEvent, false, 0, true);
                    autoCloseTimer.start();
                };
            };
        }
        private function createButton(_arg1:Class):ButtonBaseUI{
            var _local2:ButtonBaseUI;
            _local2 = new ButtonBaseUI(_arg1);
            _local2.addEventListener(MouseEvent.CLICK, button_handleMouseEvent, false, 0, false);
            return (_local2);
        }
        public function close():void{
            var _local1:AlertUIEvent;
            if (opened){
                clearInternalUI();
                opened = false;
                _local1 = new AlertUIEvent(AlertUIEvent.CLOSED, resultCode, interationHelpData, true, true);
                dispatchEvent(_local1);
                if (((autoCloseEnabled) && (Boolean(autoCloseTimer)))){
                    autoCloseTimer.stop();
                    autoCloseTimer.removeEventListener(TimerEvent.TIMER, autoCloseTimer_handleTimerEvent, false);
                    autoCloseTimer = null;
                };
            };
        }
        override public function removeChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("AlertCanvasUI : can not use removeChild method."));
        }
        public function get resultMessage():String{
            return (_resultMessage);
        }
        public function get resultCode():String{
            return (_resultCode);
        }
        private function drawInternalUI():void{
            var _local2:ButtonBaseUI;
            var _local3:ButtonBaseUI;
            var _local4:int;
            var _local5:int;
            var _local6:Number;
            var _local7:uint;
            var _local8:Number;
            var _local9:uint;
            var _local10:uint;
            var _local11:uint;
            var _local12:uint;
            var _local13:Number;
            var _local14:int;
            var _local15:int;
            var _local16:int;
            var _local17:int;
            var _local18:int;
            var _local19:int;
            var _local20:Object;
            var _local1:Array = [];
            switch (WebPlayerCoreProperties.playerType){
                case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    _local6 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_THICKNESS_BASIC;
                    _local7 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_COLOR_BASIC;
                    _local8 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_ALPHA_BASIC;
                    _local9 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_WIDTH_BASIC;
                    _local11 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_HMARGIN_BASIC;
                    _local12 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_COLOR_BASIC;
                    _local13 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_ALPHA_BASIC;
                    _local14 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_TOP_MARGIN_BASIC;
                    _local15 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_Right_MARGIN_BASIC;
                    _local16 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_BOTTOM_MARGIN_BASIC;
                    _local17 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_TOP_MARGIN_BASIC;
                    _local18 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_BOTTOM_MARGIN_BASIC;
                    _local19 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_HGAP_BASIC;
                    _local20 = WebPlayerErrorHandlingProperties.ALERT_UI_MESSAGE_STYLE_BASIC;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    _local6 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_THICKNESS_MINI;
                    _local7 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_COLOR_MINI;
                    _local8 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_ALPHA_MINI;
                    _local9 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_WIDTH_MINI;
                    _local11 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_HMARGIN_MINI;
                    _local12 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_COLOR_MINI;
                    _local13 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_ALPHA_MINI;
                    _local14 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_TOP_MARGIN_MINI;
                    _local15 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_Right_MARGIN_MINI;
                    _local16 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_BOTTOM_MARGIN_MINI;
                    _local17 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_TOP_MARGIN_MINI;
                    _local18 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_BOTTOM_MARGIN_MINI;
                    _local19 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_HGAP_MINI;
                    _local20 = WebPlayerErrorHandlingProperties.ALERT_UI_MESSAGE_STYLE_MINI;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                    _local6 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_THICKNESS_BASIC_PROMO;
                    _local7 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_COLOR_BASIC_PROMO;
                    _local8 = WebPlayerErrorHandlingProperties.ALERT_UI_BORDER_ALPHA_BASIC_PROMO;
                    _local9 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_WIDTH_BASIC_PROMO;
                    _local11 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_HMARGIN_BASIC_PROMO;
                    _local12 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_COLOR_BASIC_PROMO;
                    _local13 = WebPlayerErrorHandlingProperties.ALERT_UI_BACKGROUND_ALPHA_BASIC_PROMO;
                    _local14 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_TOP_MARGIN_BASIC_PROMO;
                    _local15 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_Right_MARGIN_BASIC_PROMO;
                    _local16 = WebPlayerErrorHandlingProperties.ALERT_UI_CLOSE_BUTTON_BOTTOM_MARGIN_BASIC_PROMO;
                    _local17 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_TOP_MARGIN_BASIC_PROMO;
                    _local18 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_BOTTOM_MARGIN_BASIC_PROMO;
                    _local19 = WebPlayerErrorHandlingProperties.ALERT_UI_ALIGNABLE_BUTTONS_HGAP_BASIC_PROMO;
                    _local20 = WebPlayerErrorHandlingProperties.ALERT_UI_MESSAGE_STYLE_BASIC_PROMO;
                    break;
                default:
                    throw (new Error(("AlertUI : " + "WebPlayerCoreProperties.playerType is not valid.")));
            };
            _local10 = 0;
            switch (resultCode){
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_002:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_113:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116:
                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117:
                    _local20.textAlign = "left";
                    break;
                default:
                    _local20.textAlign = "center";
            };
            messageField = new TextField();
            messageField.styleSheet = new StyleSheet();
            messageField.styleSheet.setStyle(("." + AlertUI.MESSAGE_STYLE_NAME), _local20);
            messageField.selectable = false;
            messageField.autoSize = TextFieldAutoSize.LEFT;
            messageField.multiline = true;
            messageField.wordWrap = false;
            messageField.gridFitType = GridFitType.PIXEL;
            messageField.text = (((("<SPAN CLASS='" + AlertUI.MESSAGE_STYLE_NAME) + "'>") + resultMessage) + "</SPAN>");
            if (messageField.width >= _local9){
                _local9 = (messageField.width + _local11);
            };
            messageField.x = int(((_local9 - messageField.width) * 0.5));
            _local1.push(messageField);
            _local10 = (_local10 + messageField.height);
            alignableButtons = [];
            nonAlignableButtons = [];
            if ((AlertUI.CONFIRM_BUTTON_ENABLED & buttonEnabled) !== 0){
                alignableButtons.push(createButton(AlertUI_ConfirmButtonAsset));
            };
            if ((AlertUI.CANCEL_BUTTON_ENABLED & buttonEnabled) !== 0){
                alignableButtons.push(createButton(AlertUI_CancelButtonAsset));
            };
            if ((AlertUI.CLOSE_BUTTON_ENABLED & buttonEnabled) !== 0){
                nonAlignableButtons.push(createButton(AlertUI_CloseButtonAsset));
            };
            _local5 = nonAlignableButtons.length;
            _local4 = 0;
            while (_local4 < _local5) {
                _local2 = (nonAlignableButtons[_local4] as ButtonBaseUI);
                if ((_local2.skinAsset is AlertUI_CloseButtonAsset)){
                    _local2.x = ((_local9 - _local2.width) - _local15);
                    _local2.y = _local14;
                    _local1.push(_local2);
                    messageField.y = ((_local2.height + _local14) + _local16);
                    _local10 = (_local10 + ((_local2.height + _local14) + _local16));
                } else {
                    throw (new Error("AlertUI : button.skinAsset is not valid."));
                };
                _local4++;
            };
            _local5 = alignableButtons.length;
            if (0 < _local5){
                alignableButtonsContainer = new Sprite();
                _local1.push(alignableButtonsContainer);
                _local4 = 0;
                while (_local4 < _local5) {
                    _local2 = (alignableButtons[_local4] as ButtonBaseUI);
                    if (_local4 !== 0){
                        _local3 = (alignableButtons[(_local4 - 1)] as ButtonBaseUI);
                        _local2.x = ((_local3.x + _local3.width) + _local19);
                    } else {
                        _local2.x = 0;
                    };
                    _local2.y = 0;
                    alignableButtonsContainer.addChild(_local2);
                    _local4++;
                };
                alignableButtonsContainer.x = (int(((_local9 - alignableButtonsContainer.width) * 0.5)) - 1);
                alignableButtonsContainer.y = ((messageField.y + messageField.height) + _local17);
                _local10 = (_local10 + ((alignableButtonsContainer.height + _local17) + _local18));
            } else {
                _local10 = (_local10 + (_local10 - messageField.height));
            };
            background = new Sprite();
            background.graphics.lineStyle(_local6, _local7, _local8, true, LineScaleMode.NONE, CapsStyle.NONE, JointStyle.MITER);
            background.graphics.beginFill(_local12, _local13);
            background.graphics.drawRect(0, 0, (_local9 - 1), (_local10 - 1));
            background.graphics.endFill();
            _local1.unshift(background);
            _local5 = _local1.length;
            _local4 = 0;
            while (_local4 < _local5) {
                super.addChild(_local1[_local4]);
                _local4++;
            };
        }
        private function button_handleMouseEvent(_arg1:MouseEvent):void{
            var _local2:String;
            var _local3:ButtonBaseUI = (_arg1.target as ButtonBaseUI);
            if ((_local3.skinAsset is AlertUI_ConfirmButtonAsset)){
                _local2 = AlertUIEvent.CONFIRM;
            } else {
                if ((_local3.skinAsset is AlertUI_CancelButtonAsset)){
                    _local2 = AlertUIEvent.CANCEL;
                } else {
                    if ((_local3.skinAsset is AlertUI_CloseButtonAsset)){
                        _local2 = AlertUIEvent.CLOSE;
                    };
                };
            };
            dispatchEvent(new AlertUIEvent(_local2, resultCode, interationHelpData, false, false));
        }
        override public function addChild(_arg1:DisplayObject):DisplayObject{
            throw (new Error("AlertCanvasUI : can not use addChild method."));
        }
        private function deleteButton(_arg1:ButtonBaseUI):void{
            _arg1.removeEventListener(MouseEvent.CLICK, button_handleMouseEvent, false);
            _arg1.releaseMemory();
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class AlertUIEvent extends Event {

        public static const CONFIRM:String = "ALERTUIEVENT_CORFIRM";
        public static const OPENED:String = "ALERTUIEVENT_OPENED";
        public static const CANCEL:String = "ALERTUIEVENT_CANCEL";
        public static const CLOSED:String = "ALERTUIEVENT_CLOSED";
        public static const CLOSE:String = "ALERTUIEVENT_CLOSE";

        private var _interationHelpData:Object;
        private var _resultCode:String;

        public function AlertUIEvent(_arg1:String, _arg2:String, _arg3:Object, _arg4:Boolean=false, _arg5:Boolean=false){
            super(AlertUIEvent.validateType(_arg1), _arg4, _arg5);
            _resultCode = _arg2;
            _interationHelpData = _arg3;
        }
        protected static function validateType(_arg1:String):String{
            switch (_arg1){
                case AlertUIEvent.OPENED:
                case AlertUIEvent.CLOSED:
                case AlertUIEvent.CONFIRM:
                case AlertUIEvent.CANCEL:
                case AlertUIEvent.CLOSE:
                    break;
                default:
                    throw (new Error("AlertUIEvent : type is not valid."));
            };
            return (_arg1);
        }

        public function get interationHelpData():Object{
            return (_interationHelpData);
        }
        public function get resultCode():String{
            return (_resultCode);
        }
        override public function toString():String{
            return (formatToString("AlertUIEvent", "type", "bubbles", "cancelable", "resultCode", "interationHelpData"));
        }
        override public function clone():Event{
            return (new AlertUIEvent(type, resultCode, interationHelpData, bubbles, cancelable));
        }

    }
}//package com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayererrorhandling.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class WebPlayerErrorHandlingPipeMessages {

        public static const INTERACT_ALERT_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERERRORHANDLING_INTERACT_ALERT_UI", DataTransferProtocol);
        public static const RESPOND_GET_ALERT_CANVAS_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERERRORHANDLING_RESPOND_GET_ALERT_CANVAS_UI", DataTransferProtocol);
        public static const OPEN_ALERT_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERERRORHANDLING_OPEN_ALERT_UI", DataTransferProtocol);
        public static const REQUEST_GET_ALERT_CANVAS_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERERRORHANDLING_REQUEST_GET_ALERT_CANVAS_UI", DataTransferProtocol);

    }
}//package com.nhn.application.modules.webplayererrorhandling.pipemessages 
﻿package com.nhn.application.modules.webplayererrorhandling {

    public class WebPlayerErrorHandlingResultCodes {

        public static const RESULT_CODE_CLIENT_2100:String = "2100";
        public static const RESULT_CODE_CLIENT_2101:String = "2101";
        public static const RESULT_CODE_CLIENT_2102:String = "2102";
        public static const RESULT_CODE_CLIENT_2104:String = "2104";
        public static const RESULT_CODE_CLIENT_2106:String = "2106";
        public static const RESULT_CODE_CLIENT_2108:String = "2108";
        public static const RESULT_CODE_WAS_101:String = "101";
        public static const RESULT_CODE_WAS_102:String = "102";
        public static const RESULT_CODE_WAS_103:String = "103";
        public static const RESULT_CODE_WAS_104:String = "104";
        public static const RESULT_CODE_WAS_105:String = "105";
        public static const RESULT_CODE_WAS_106:String = "106";
        public static const RESULT_CODE_WAS_107:String = "107";
        public static const RESULT_CODE_WAS_108:String = "108";
        public static const RESULT_CODE_CLIENT_2111:String = "2111";
        public static const RESULT_CODE_CLIENT_2113:String = "2113";
        public static const RESULT_CODE_CLIENT_2115:String = "2115";
        public static const RESULT_CODE_CLIENT_2103:String = "2103";
        public static const RESULT_CODE_WAS_110:String = "110";
        public static const RESULT_CODE_WAS_111:String = "111";
        public static const RESULT_CODE_WAS_112:String = "112";
        public static const RESULT_CODE_WAS_113:String = "113";
        public static const RESULT_CODE_CLIENT_2109:String = "2109";
        public static const RESULT_CODE_CLIENT_2116:String = "2116";
        public static const RESULT_CODE_CLIENT_2117:String = "2117";
        public static const RESULT_CODE_CLIENT_2110:String = "2110";
        public static const RESULT_CODE_CLIENT_2112:String = "2112";
        public static const RESULT_CODE_CLIENT_2105:String = "2105";
        public static const RESULT_CODE_FMS_900:String = "900";
        public static const RESULT_CODE_FMS_901:String = "901";
        public static const RESULT_CODE_FMS_902:String = "902";
        public static const RESULT_CODE_FMS_903:String = "903";
        public static const RESULT_CODE_FMS_904:String = "904";
        public static const RESULT_CODE_FMS_905:String = "905";
        public static const RESULT_CODE_FMS_906:String = "906";
        public static const RESULT_CODE_FMS_907:String = "907";
        public static const RESULT_CODE_FMS_908:String = "908";
        public static const RESULT_CODE_CLIENT_2000:String = "2000";
        public static const RESULT_CODE_CLIENT_2001:String = "2001";
        public static const RESULT_CODE_CLIENT_2002:String = "2002";
        public static const RESULT_CODE_CLIENT_2003:String = "2003";
        public static const RESULT_CODE_CLIENT_2004:String = "2004";
        public static const RESULT_CODE_CLIENT_2005:String = "2005";
        public static const RESULT_CODE_CLIENT_2006:String = "2006";
        public static const RESULT_CODE_CLIENT_2007:String = "2007";
        public static const RESULT_CODE_WAS_000:String = "000";
        public static const RESULT_CODE_WAS_001:String = "001";
        public static const RESULT_CODE_WAS_002:String = "002";
        public static const RESULT_CODE_CLIENT_2107:String = "2107";
        public static const RESULT_CODE_CLIENT_2114:String = "2114";
        public static const RESULT_CODE_CLIENT_2118:String = "2118";
        public static const RESULT_CODE_COMMON_SECURITY_ERROR:String = "-101";
        public static const RESULT_CODE_CLIENT_3000:String = "3000";
        public static const RESULT_CODE_COMMON_IO_ERROR:String = "-100";
        public static const RESULT_CODE_COMMON_CUSTOM_ERROR:String = "-102";

    }
}//package com.nhn.application.modules.webplayererrorhandling 
﻿package com.nhn.application.modules.wascommunication.notifications {

    public class WASCommunicationNotifications {

        public static const RESPOND_MUSIC_INFO_GET_LYRIC:String = "NOTI_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_LYRIC";
        public static const REQUEST_AUTHORIZATION_GET_COOKIE:String = "NOTI_WASCOMMUNICATION_REQUEST_AUTHORIZATION_GET_COOKIE";
        public static const RESPOND_MUSIC_INFO_GET_ARTICLE:String = "NOTI_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_ARTICLE";
        public static const RESPOND_FMS_INFO_GET_FMS_CONFIGURATION:String = "NOTI_WASCOMMUNICATION_RESPOND_FMS_INFO_GET_FMS_CONFIGURATION";
        public static const REQUEST_MUSIC_INFO_GET_ARTICLE:String = "NOTI_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_ARTICLE";
        public static const REQUEST_PROMOTION_GET_PROMOTION:String = "NOTI_WASCOMMUNICATION_REQUEST_PROMOTION_GET_PROMOTION";
        public static const RESPOND_MUSIC_INFO_GET_TOP_100:String = "NOTI_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_TOP_100";
        public static const RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG:String = "NOTI_WASCOMMUNICATION_RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG";
        public static const REQUEST_MUSIC_INFO_GET_TOP_100:String = "NOTI_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_TOP_100";
        public static const RESPOND_COMMON_IO_ERROR:String = "NOTI_WASCOMMUNICATION_RESPOND_COMMON_IO_ERROR";
        public static const REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG:String = "NOTI_WASCOMMUNICATION_REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG";
        public static const RESPOND_AUTHORIZATION_CHECK_VALIDATION:String = "NOTI_WASCOMMUNICATION_RESPOND_AUTHORIZATION_CHECK_VALIDATION";
        public static const REQUEST_AUTHORIZATION_CHECK_VALIDATION:String = "NOTI_WASCOMMUNICATION_REQUEST_AUTHORIZATION_CHECK_VALIDATION";
        public static const WC_HWPEHPM_OPEN_ALERT_UI:String = "NOTI_WASCOMMUNICATION_WC_HWPEHPM_OPEN_ALERT_UI";
        public static const REQUEST_FMS_INFO_GET_FMS_CONFIGURATION:String = "NOTI_WASCOMMUNICATION_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION";
        public static const REQUEST_COMMON_CANCEL_REQUEST:String = "NOTI_WASCOMMUNICATION_REQUEST_COMMON_CANCEL_REQUEST";
        public static const REQUEST_MUSIC_INFO_GET_LYRIC:String = "NOTI_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_LYRIC";
        public static const RESPOND_MUSIC_INFO_GET_SONG_LIST:String = "NOTI_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_SONG_LIST";
        public static const RESPOND_COMMON_SECURITY_ERROR:String = "NOTI_WASCOMMUNICATION_RESPOND_COMMON_SECURITY_ERROR";
        public static const RESPOND_PROMOTION_GET_PROMOTION:String = "NOTI_WASCOMMUNICATION_RESPOND_PROMOTION_GET_PROMOTION";
        public static const REQUEST_MUSIC_INFO_GET_SONG_LIST:String = "NOTI_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_SONG_LIST";
        public static const RESPOND_AUTHORIZATION_GET_COOKIE:String = "NOTI_WASCOMMUNICATION_RESPOND_AUTHORIZATION_GET_COOKIE";

    }
}//package com.nhn.application.modules.wascommunication.notifications 
﻿package com.nhn.application.modules.wascommunication {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.wascommunication.patterns.mediator.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.wascommunication.notifications.*;
    import com.nhn.application.modules.wascommunication.patterns.command.*;

    public class WASCommunicationModule extends PipeInterchangeableModule {

        public static const NAME_BASE:String = "WASCommunicationModule";

        public function WASCommunicationModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        override protected function initialize(_arg1:ModuleInitializeData):void{
            super.initialize(_arg1);
            var _local2:MusicServiceMediator = new MusicServiceMediator(WebPlayerCoreProperties.MAX_NUM_OF_API_REQUESTS_IN_WORKING);
            facade.registerMediator(_local2);
            _local2 = null;
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getType()){
                case DataTransferProtocol.TYPE:
                    switch (_arg1.getHeaderByIMessageHeader().name){
                        case WASCommunicationPipeMessages.REQUEST_COMMON_CANCEL_REQUEST.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_COMMON_CANCEL_REQUEST, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_GET_COOKIE.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_AUTHORIZATION_GET_COOKIE, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_CHECK_VALIDATION.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_AUTHORIZATION_CHECK_VALIDATION, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_SONG_LIST.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_SONG_LIST, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_TOP_100.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_TOP_100, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_LYRIC.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_LYRIC, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_ARTICLE.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_ARTICLE, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_FMS_INFO_GET_FMS_CONFIGURATION.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_FMS_INFO_GET_FMS_CONFIGURATION, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.REQUEST_PROMOTION_GET_PROMOTION.name:
                            facade.sendNotification(WASCommunicationNotifications.REQUEST_PROMOTION_GET_PROMOTION, _arg1.getBody(), null);
                            break;
                        default:
                            throw (new Error(("WASCommunicationModule : " + "message.getHeaderByIMessageHeader().name is not valid.")));
                    };
                    break;
                default:
                    super.handlePipeMessage(_arg1);
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(WASCommunicationPipeMessages.REQUEST_COMMON_CANCEL_REQUEST.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_GET_COOKIE.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_CHECK_VALIDATION.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_SONG_LIST.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_TOP_100.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_LYRIC.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_ARTICLE.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_FMS_INFO_GET_FMS_CONFIGURATION.name);
            _local1.push(WASCommunicationPipeMessages.REQUEST_PROMOTION_GET_PROMOTION.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.wascommunication 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class HWCPM_RequestMusicInfoGetSongListCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(Boolean((_local2.commaSeparatedTrackIDs as String)))))) || (!(_local2.hasOwnProperty("launchOption"))))){
                throw (new Error(("HWCPM_RequestMusicInfoGetSongListCommand : " + "body is not valid.")));
            };
            musicService.musicInfoMethods.getSongList((_local2.requestID as RequestID), (_local2.commaSeparatedTrackIDs as String), int(_local2.launchOption));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class HWCPM_RequestMusicInfoGetTop100Command extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("HWCPM_RequestMusicInfoGetTop100Command : " + "body is not valid.")));
            };
            musicService.musicInfoMethods.getTop100((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;

    public class HWCPM_RequestFMSInfoGetFMSConfigurationCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (((Boolean((_local2.args as Array))) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)))){
                throw (new Error(("HWCPM_RequestFMSInfoGetFMSConfigurationCommand : " + "body is not valid.")));
            };
            musicService.fmsInfoMethods.getFMSConfiguration((_local2.requestID as RequestID), (_local2.callback as ContextFunctionPair), (_local2.args as Array));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.music.*;
    import com.nhn.application.modules.wascommunication.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;

    public class WCMBaseCommand extends BasicSimpleCommand {

        protected function get musicService():MusicService{
            return (musicServiceMediator.musicService);
        }
        protected function get musicServiceMediator():MusicServiceMediator{
            var _local1:IMediator = facade.retrieveMediator(MusicServiceMediator.NAME);
            return ((_local1 as MusicServiceMediator));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;

    public class HWCPM_RequestAuthorizationGetCookieCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (((Boolean((_local2.args as Array))) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)))){
                throw (new Error(("HWCPM_RequestAuthorizationGetCookieCommand : " + "body is not valid.")));
            };
            musicService.authorizationMethods.getCookie((_local2.requestID as RequestID), (_local2.callback as ContextFunctionPair), (_local2.args as Array));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class HWCPM_RequestMusicInfoAddFavoriteSongCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(Boolean((_local2.trackID as String)))))){
                throw (new Error(("HWCPM_RequestMusicInfoAddFavoriteSongCommand : " + "body is not valid.")));
            };
            musicService.musicInfoMethods.addFavoriteSong((_local2.requestID as RequestID), (_local2.trackID as String));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondMusicInfoGetLyricCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.song as Song))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondMusicInfoGetLyricCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_LYRIC, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.wascommunication.notifications.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            facade.registerCommand(WASCommunicationNotifications.REQUEST_COMMON_CANCEL_REQUEST, HWCPM_RequestCommonCancelRequestCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_COMMON_IO_ERROR, HWCPM_RespondCommonIOErrorCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_COMMON_SECURITY_ERROR, HWCPM_RespondCommonSecurityErrorCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_AUTHORIZATION_GET_COOKIE, HWCPM_RequestAuthorizationGetCookieCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_AUTHORIZATION_GET_COOKIE, HWCPM_RespondAuthorizationGetCookieCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_AUTHORIZATION_CHECK_VALIDATION, HWCPM_RequestAuthorizationCheckValidationCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_AUTHORIZATION_CHECK_VALIDATION, HWCPM_RespondAuthorizationCheckValidationCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_SONG_LIST, HWCPM_RequestMusicInfoGetSongListCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_SONG_LIST, HWCPM_RespondMusicInfoGetSongListCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_TOP_100, HWCPM_RequestMusicInfoGetTop100Command);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_TOP_100, HWCPM_RespondMusicInfoGetTop100Command);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_LYRIC, HWCPM_RequestMusicInfoGetLyricCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_LYRIC, HWCPM_RespondMusicInfoGetLyricCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_MUSIC_INFO_GET_ARTICLE, HWCPM_RequestMusicInfoGetArticleCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_ARTICLE, HWCPM_RespondMusicInfoGetArticleCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG, HWCPM_RequestMusicInfoAddFavoriteSongCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG, HWCPM_RespondMusicInfoAddFavoriteSongCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_FMS_INFO_GET_FMS_CONFIGURATION, HWCPM_RequestFMSInfoGetFMSConfigurationCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_FMS_INFO_GET_FMS_CONFIGURATION, HWCPM_RespondFMSInfoGetFMSConfigurationCommand);
            facade.registerCommand(WASCommunicationNotifications.REQUEST_PROMOTION_GET_PROMOTION, HWCPM_RequestPromotionGetPromotionCommand);
            facade.registerCommand(WASCommunicationNotifications.RESPOND_PROMOTION_GET_PROMOTION, HWCPM_RespondPromotionGetPromotionCommand);
            facade.registerCommand(WASCommunicationNotifications.WC_HWPEHPM_OPEN_ALERT_UI, WC_HWPEHPM_OpenAlertUICommand);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondAuthorizationGetCookieCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.authorization as Authorization))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondAuthorizationGetCookieCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_GET_COOKIE, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class HWCPM_RequestAuthorizationCheckValidationCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("HWCPM_RequestAuthorizationCheckValidationCommand : " + "body is not valid.")));
            };
            musicService.authorizationMethods.checkValidation((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class HWCPM_RequestPromotionGetPromotionCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("HWCPM_RequestPromotionGetPromotionCommand : " + "body is not valid.")));
            };
            musicService.promotionMethods.getPromotion((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondFMSInfoGetFMSConfigurationCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.fmsConfiguration as FMSConfiguration))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondFMSInfoGetFMSConfigurationCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_FMS_INFO_GET_FMS_CONFIGURATION, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondMusicInfoAddFavoriteSongCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondMusicInfoAddFavoriteSongCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;

    public class HWCPM_RequestMusicInfoGetArticleCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(Boolean((_local2.myListSeq as String)))))) || (!(_local2.hasOwnProperty("launchOption"))))) || (((Boolean((_local2.args as Array))) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)))){
                throw (new Error(("HWCPM_RequestMusicInfoGetArticleCommand : " + "body is not valid.")));
            };
            musicService.musicInfoMethods.getArticle((_local2.requestID as RequestID), (_local2.myListSeq as String), int(_local2.launchOption), (_local2.callback as ContextFunctionPair), (_local2.args as Array));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.ns.*;

    public class HWCPM_RequestCommonCancelRequestCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("HWCPM_RequestCommonCancelRequestCommand : " + "body is not valid.")));
            };
            var _local3 = musicService;
            _local3.nhn_webapis_ns::removeRequest((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondMusicInfoGetArticleCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.article as Article))) : false)))) || (!(_local2.hasOwnProperty("launchOption"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondMusicInfoGetArticleCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_ARTICLE, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondMusicInfoGetSongListCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.songList as SongList))) : false)))) || (!(_local2.hasOwnProperty("launchOption"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondMusicInfoGetSongListCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_SONG_LIST, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondMusicInfoGetTop100Command extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.top100 as Top100))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondMusicInfoGetTop100Command : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_TOP_100, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondAuthorizationCheckValidationCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondAuthorizationCheckValidationCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_CHECK_VALIDATION, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondPromotionGetPromotionCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.promotion as Promotion))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("HWCPM_RespondPromotionGetPromotionCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_PROMOTION_GET_PROMOTION, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondCommonIOErrorCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("HWCPM_RespondCommonIOErrorCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class HWCPM_RespondCommonSecurityErrorCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("HWCPM_RespondCommonSecurityErrorCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR, _local2);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class HWCPM_RequestMusicInfoGetLyricCommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(Boolean((_local2.trackID as String)))))){
                throw (new Error(("HWCPM_RequestMusicInfoGetLyricCommand : " + "body is not valid.")));
            };
            musicService.musicInfoMethods.getLyric((_local2.requestID as RequestID), (_local2.trackID as String));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;

    public class WC_HWPEHPM_OpenAlertUICommand extends WCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (Boolean(_local2)){
                if (!Boolean((_local2.resultCode as String))){
                    throw (new Error(("WC_HWPEHPM_OpenAlertUICommand : " + "body is not valid.")));
                };
            };
            sendPipeMessage(WebPlayerErrorHandlingPipeMessages.OPEN_ALERT_UI, _local2, 0);
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.command 
﻿package com.nhn.application.modules.wascommunication.patterns.mediator {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.webapis.core.*;
    import com.nhn.webapis.music.*;
    import com.nhn.webapis.core.events.*;
    import com.nhn.webapis.music.events.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.wascommunication.notifications.*;

    public class MusicServiceMediator extends BasicMediator {

        public static const MUSIC_SERVICE_STATUS_STANDBY:String = "MUSIC_SERVICE_STATUS_STANDBY";
        public static const MUSIC_SERVICE_STATUS_WORKING:String = "MUSIC_SERVICE_STATUS_WORKING";
        public static const NAME:String = "MusicServiceMediator";

        public function MusicServiceMediator(_arg1:uint=1){
            super(name, new MusicService(_arg1));
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        override public function onRemove():void{
            musicService.removeEventListener(NHNServiceEvent.SERVICE_START, musicService_handleNHNServiceEvent, false);
            musicService.removeEventListener(NHNServiceEvent.SERVICE_STOP, musicService_handleNHNServiceEvent, false);
            musicService.removeEventListener(NHNServiceEvent.SERVICE_COMPLETE, musicService_handleNHNServiceEvent, false);
            musicService.removeEventListener(NHNServiceEvent.SERVICE_IO_ERROR, musicService_handleNHNServiceEvent, false);
            musicService.removeEventListener(NHNServiceEvent.SERVICE_SECURITY_ERROR, musicService_handleNHNServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.AUTHORIZATION_GET_COOKIE, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.MUSIC_INFO_GET_SONG_LIST, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.MUSIC_INFO_GET_TOP_100, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.MUSIC_INFO_GET_LYRIC, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.MUSIC_INFO_GET_ARTICLE, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.MUSIC_INFO_ADD_FAVORITE_SONG, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.FMS_INFO_GET_FMS_CONFIGURATION, musicService_handleMusicServiceEvent, false);
            musicService.removeEventListener(MusicServiceEvent.PROMOTION_GET_PROMOTION, musicService_handleMusicServiceEvent, false);
            super.onRemove();
        }
        protected function initializeNotificationBody(_arg1:NHNServiceEvent):Object{
            var _local2:Object = {};
            _local2.success = _arg1.success;
            _local2.requestID = _arg1.requestID;
            if ((_arg1 is MusicServiceEvent)){
                _local2.musicServiceResult = (_arg1.serviceObject as MusicServiceResult);
            };
            return (_local2);
        }
        override public function get name():String{
            return (MusicServiceMediator.NAME);
        }
        protected function musicService_handleNHNServiceEvent(_arg1:NHNServiceEvent):void{
            var _local3:String;
            var _local4:RequestItem;
            var _local5:String;
            var _local6:*;
            var _local2:Object = initializeNotificationBody(_arg1);
            switch (_arg1.type){
                case NHNServiceEvent.SERVICE_START:
                case NHNServiceEvent.SERVICE_STOP:
                case NHNServiceEvent.SERVICE_COMPLETE:
                    if ((((_arg1.numOfRequestsInWorking > 0)) || ((_arg1.numOfRequestsInWating > 0)))){
                        _local3 = MusicServiceMediator.MUSIC_SERVICE_STATUS_WORKING;
                    } else {
                        _local3 = MusicServiceMediator.MUSIC_SERVICE_STATUS_STANDBY;
                    };
                    _local2.status = _local3;
                    break;
                case NHNServiceEvent.SERVICE_IO_ERROR:
                    _local4 = musicService.getRequestItem(_arg1.requestID);
                    _local5 = "";
                    for (_local6 in _local4.urlRequest.data) {
                        _local5 = (_local5 + ((_local6 + ":") + _local4.urlRequest.data[_local6]));
                    };
                    sendNotification(WASCommunicationNotifications.WC_HWPEHPM_OPEN_ALERT_UI, {
                        resultCode:WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR,
                        url:_local5
                    }, null);
                    sendNotification(WASCommunicationNotifications.RESPOND_COMMON_IO_ERROR, _local2, null);
                    break;
                case NHNServiceEvent.SERVICE_SECURITY_ERROR:
                    sendNotification(WASCommunicationNotifications.WC_HWPEHPM_OPEN_ALERT_UI, {resultCode:WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_SECURITY_ERROR}, null);
                    sendNotification(WASCommunicationNotifications.RESPOND_COMMON_SECURITY_ERROR, _local2, null);
                    break;
                default:
                    throw (new Error(("MusicServiceMediator : e.type " + "is not valid.")));
            };
        }
        public function get musicService():MusicService{
            return ((viewComponent as MusicService));
        }
        protected function musicService_handleMusicServiceEvent(_arg1:MusicServiceEvent):void{
            var _local2:Object = initializeNotificationBody(_arg1);
            if (!Boolean(_local2.success)){
                sendNotification(WASCommunicationNotifications.WC_HWPEHPM_OPEN_ALERT_UI, {
                    resultCode:(_local2.musicServiceResult as MusicServiceResult).resultcode,
                    resultValue:(_local2.musicServiceResult as MusicServiceResult).optionvalue
                }, null);
            };
            switch (_arg1.type){
                case MusicServiceEvent.AUTHORIZATION_GET_COOKIE:
                    _local2.authorization = ((_arg1.serviceResult as MusicServiceResult).resultvalue as Authorization);
                    sendNotification(WASCommunicationNotifications.RESPOND_AUTHORIZATION_GET_COOKIE, _local2, null);
                    break;
                case MusicServiceEvent.AUTHORIZATION_CHECK_VALIDATION:
                    sendNotification(WASCommunicationNotifications.RESPOND_AUTHORIZATION_CHECK_VALIDATION, _local2, null);
                    break;
                case MusicServiceEvent.MUSIC_INFO_GET_SONG_LIST:
                    _local2.songList = ((_arg1.serviceResult as MusicServiceResult).resultvalue as SongList);
                    _local2.launchOption = int(((_arg1.serviceResult as MusicServiceResult).optionvalue as Object)["launchOption"]);
                    sendNotification(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_SONG_LIST, _local2, null);
                    break;
                case MusicServiceEvent.MUSIC_INFO_GET_TOP_100:
                    _local2.top100 = ((_arg1.serviceResult as MusicServiceResult).resultvalue as Top100);
                    sendNotification(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_TOP_100, _local2, null);
                    break;
                case MusicServiceEvent.MUSIC_INFO_GET_LYRIC:
                    _local2.song = ((_arg1.serviceResult as MusicServiceResult).resultvalue as Song);
                    sendNotification(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_LYRIC, _local2, null);
                    break;
                case MusicServiceEvent.MUSIC_INFO_GET_ARTICLE:
                    _local2.article = ((_arg1.serviceResult as MusicServiceResult).resultvalue as Article);
                    _local2.launchOption = int(((_arg1.serviceResult as MusicServiceResult).optionvalue as Object)["launchOption"]);
                    sendNotification(WASCommunicationNotifications.RESPOND_MUSIC_INFO_GET_ARTICLE, _local2, null);
                    break;
                case MusicServiceEvent.MUSIC_INFO_ADD_FAVORITE_SONG:
                    sendNotification(WASCommunicationNotifications.RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG, _local2, null);
                    break;
                case MusicServiceEvent.FMS_INFO_GET_FMS_CONFIGURATION:
                    _local2.fmsConfiguration = ((_arg1.serviceResult as MusicServiceResult).resultvalue as FMSConfiguration);
                    sendNotification(WASCommunicationNotifications.RESPOND_FMS_INFO_GET_FMS_CONFIGURATION, _local2, null);
                    break;
                case MusicServiceEvent.PROMOTION_GET_PROMOTION:
                    _local2.promotion = ((_arg1.serviceResult as MusicServiceResult).resultvalue as Promotion);
                    sendNotification(WASCommunicationNotifications.RESPOND_PROMOTION_GET_PROMOTION, _local2, null);
                    break;
                default:
                    throw (new Error(("MusicServiceMediator : e.type " + "is not valid.")));
            };
        }
        override public function onRegister():void{
            super.onRegister();
            musicService.addEventListener(NHNServiceEvent.SERVICE_START, musicService_handleNHNServiceEvent, false, 0, false);
            musicService.addEventListener(NHNServiceEvent.SERVICE_STOP, musicService_handleNHNServiceEvent, false, 0, false);
            musicService.addEventListener(NHNServiceEvent.SERVICE_COMPLETE, musicService_handleNHNServiceEvent, false, 0, false);
            musicService.addEventListener(NHNServiceEvent.SERVICE_IO_ERROR, musicService_handleNHNServiceEvent, false, 0, false);
            musicService.addEventListener(NHNServiceEvent.SERVICE_SECURITY_ERROR, musicService_handleNHNServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.AUTHORIZATION_GET_COOKIE, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.AUTHORIZATION_CHECK_VALIDATION, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.MUSIC_INFO_GET_SONG_LIST, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.MUSIC_INFO_GET_TOP_100, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.MUSIC_INFO_GET_LYRIC, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.MUSIC_INFO_GET_ARTICLE, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.MUSIC_INFO_ADD_FAVORITE_SONG, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.FMS_INFO_GET_FMS_CONFIGURATION, musicService_handleMusicServiceEvent, false, 0, false);
            musicService.addEventListener(MusicServiceEvent.PROMOTION_GET_PROMOTION, musicService_handleMusicServiceEvent, false, 0, false);
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }

    }
}//package com.nhn.application.modules.wascommunication.patterns.mediator 
﻿package com.nhn.application.modules.wascommunication.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class WASCommunicationPipeMessages {

        public static const RESPOND_MUSIC_INFO_GET_LYRIC:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_LYRIC", DataTransferProtocol);
        public static const REQUEST_AUTHORIZATION_GET_COOKIE:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_AUTHORIZATION_GET_COOKIE", DataTransferProtocol);
        public static const RESPOND_MUSIC_INFO_GET_ARTICLE:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_ARTICLE", DataTransferProtocol);
        public static const RESPOND_FMS_INFO_GET_FMS_CONFIGURATION:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_FMS_INFO_GET_FMS_CONFIGURATION", DataTransferProtocol);
        public static const RESPOND_MUSIC_INFO_GET_ARTICLE_SONG_LIST:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_ARTICLE_SONG_LIST", DataTransferProtocol);
        public static const REQUEST_MUSIC_INFO_GET_ARTICLE:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_ARTICLE", DataTransferProtocol);
        public static const REQUEST_PROMOTION_GET_PROMOTION:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_PROMOTION_GET_PROMOTION", DataTransferProtocol);
        public static const RESPOND_MUSIC_INFO_GET_TOP_100:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_TOP_100", DataTransferProtocol);
        public static const RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG", DataTransferProtocol);
        public static const REQUEST_MUSIC_INFO_GET_ARTICLE_SONG_LIST:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_ARTICLE_SONG_LIST", DataTransferProtocol);
        public static const REQUEST_MUSIC_INFO_GET_TOP_100:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_TOP_100", DataTransferProtocol);
        public static const RESPOND_COMMON_IO_ERROR:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_COMMON_IO_ERROR", DataTransferProtocol);
        public static const REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG", DataTransferProtocol);
        public static const RESPOND_AUTHORIZATION_CHECK_VALIDATION:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_AUTHORIZATION_CHECK_VALIDATION", DataTransferProtocol);
        public static const REQUEST_AUTHORIZATION_CHECK_VALIDATION:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_AUTHORIZATION_CHECK_VALIDATION", DataTransferProtocol);
        public static const REQUEST_FMS_INFO_GET_FMS_CONFIGURATION:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION", DataTransferProtocol);
        public static const REQUEST_COMMON_CANCEL_REQUEST:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_COMMON_CANCEL_REQUEST", DataTransferProtocol);
        public static const REQUEST_MUSIC_INFO_GET_LYRIC:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_LYRIC", DataTransferProtocol);
        public static const RESPOND_MUSIC_INFO_GET_SONG_LIST:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_MUSIC_INFO_GET_SONG_LIST", DataTransferProtocol);
        public static const RESPOND_COMMON_SECURITY_ERROR:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_COMMON_SECURITY_ERROR", DataTransferProtocol);
        public static const RESPOND_PROMOTION_GET_PROMOTION:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_PROMOTION_GET_PROMOTION", DataTransferProtocol);
        public static const REQUEST_MUSIC_INFO_GET_SONG_LIST:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_REQUEST_MUSIC_INFO_GET_SONG_LIST", DataTransferProtocol);
        public static const RESPOND_AUTHORIZATION_GET_COOKIE:MessageDefine = new MessageDefine("PIPEMSG_WASCOMMUNICATION_RESPOND_AUTHORIZATION_GET_COOKIE", DataTransferProtocol);

    }
}//package com.nhn.application.modules.wascommunication.pipemessages 
﻿package com.nhn.application.modules.core {
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.modules.core.patterns.mediator.data.*;
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import com.nhn.application.modules.core.notifications.*;

    public class PipeAwareModule extends BasicModule {

        public function PipeAwareModule(_arg1:ModuleName, _arg2:PipelineFacade=null, _arg3:ModuleInitializeData=null){
            super(_arg1, ((Boolean(_arg2)) ? _arg2 : PipelineFacade.getInstance(_arg1.moduleName)), _arg3);
        }
        public function acceptInputPipe(_arg1:String, _arg2:IPipeFitting):void{
            facade.sendNotification(CoreNotifications.ACCEPT_INPUT_PIPE, _arg2, _arg1);
        }
        public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
        }
        public function addPipeMessageHandler(_arg1:MessageHandlerItem):void{
            pipelineFacade.retrieveJunctionMediator().addPipeMessageHandler(_arg1);
        }
        public function removeOutputPipe(_arg1:String, _arg2:IPipeFitting):void{
            facade.sendNotification(CoreNotifications.REMOVE_OUTPUT_PIPE, _arg2, _arg1);
        }
        public function removeInputPipe(_arg1:String, _arg2:IPipeFitting):void{
            facade.sendNotification(CoreNotifications.REMOVE_INPUT_PIPE, _arg2, _arg1);
        }
        public function get inoutput():uint{
            return (pipelineFacade.inoutput);
        }
        public function acceptOutputPipe(_arg1:String, _arg2:IPipeFitting):void{
            facade.sendNotification(CoreNotifications.ACCEPT_OUTPUT_PIPE, _arg2, _arg1);
        }
        protected function sendPipeMessage(_arg1:IPipeMessage):void{
            facade.sendNotification(CoreNotifications.SEND_PIPE_MESSAGE, _arg1);
        }
        protected function get pipelineFacade():PipelineFacade{
            return ((_facade as PipelineFacade));
        }
        override protected function initialize(_arg1:ModuleInitializeData):void{
            super.initialize(_arg1);
            addPipeMessageHandler(new MessageHandlerItem(this, handlePipeMessage));
        }

    }
}//package com.nhn.application.modules.core 
﻿package com.nhn.application.modules.core.notifications {

    public class CoreNotifications {

        public static const LCM_GET_CONNECTION_NAME:String = "NOTI_CORE_LCM_GET_CONNECTION_NAME";
        public static const START:String = "NOTI_CORE_START";
        public static const LCM_SET_CONNECTION_NAME:String = "NOTI_CORE_LCM_SET_CONNECTION_NAME";
        public static const LCM_CONNECT:String = "NOTI_CORE_LCM_CONNECT";
        public static const LCM_ALLOW_DOMAIN:String = "NOTI_CORE_LCM_ALLOW_DOMAIN";
        public static const LCM_SET_CLIENT:String = "NOTI_CORE_LCM_SET_CLIENT";
        public static const LCM_RESPOND_SEND:String = "NOTI_CORE_LCM_RESPOND_SEND";
        public static const LCM_CLOSE:String = "NOTI_CORE_LCM_CLOSE";
        public static const LCM_REQUEST_SEND:String = "NOTI_CORE_LCM_REQUEST_SEND";
        public static const LCM_GET_CLIENT:String = "NOTI_CORE_LCM_GET_CLIENT";
        public static const LCM_CONNECTED:String = "NOTI_CORE_LCM_CONNECTED";
        public static const LCM_ALLOW_INSECURE_DOMAIN:String = "NOTI_CORE_LCM_ALLOW_INSECURE_DOMAIN";
        public static const REMOVE_INOUTPUT_PIPES_ALL:String = "NOTI_CORE_REMOVE_INOUTPUT_PIPES_ALL";
        public static const LCM_DOMAIN:String = "NOTI_CORE_LCM_DOMAIN";
        public static const REMOVE_OUTPUT_PIPE:String = "NOTI_CORE_REMOVE_OUTPUT_PIPE";
        public static const ACCEPT_OUTPUT_PIPE:String = "NOTI_CORE_ACCEPT_OUTPUT_PIPE";
        public static const ACCEPT_INPUT_PIPE:String = "NOTI_CORE_ACCEPT_INPUT_PIPE";
        public static const SEND_PIPE_MESSAGE:String = "NOTI_CORE_SEND_PIPE_MESSAGE";
        public static const REMOVE_INPUT_PIPE:String = "NOTI_CORE_REMOVE_INPUT_PIPE";

    }
}//package com.nhn.application.modules.core.notifications 
﻿package com.nhn.application.modules.core.pipes {

    public class STDPipes {

        public static const STDIN:String = "STANDARD_INPUT_PIPE";
        public static const STDOUT:String = "STANDARD_OUTPUT_PIPE";

    }
}//package com.nhn.application.modules.core.pipes 
﻿package com.nhn.application.modules.core.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public class AdvancedTeeMerge extends AdvancedPipe {

        protected var _inputPipes:Array;

        public function AdvancedTeeMerge(_arg1:IPipeFitting=null){
            super(_arg1);
            _inputPipes = [];
        }
        public function connectInput(_arg1:IPipeFitting):void{
            if (Boolean(_arg1)){
                _inputPipes.push(_arg1);
                if (!_arg1.connect(this)){
                    throw (new Error("AdvancedTeeMerge : Param \"input\" of connectInput method is already connected to somewhere."));
                };
                return;
            };
            throw (new Error("AdvancedTeeMerge : Param \"input\" of connectInput method should be not a null."));
        }
        public function get inputPipes():Array{
            return (_inputPipes);
        }
        public function disconnectInput(_arg1:IPipeFitting):void{
            var _local2:int;
            if (Boolean(_arg1)){
                _local2 = _inputPipes.indexOf(_arg1);
                if (_local2 === -1){
                    throw (new Error("AdvancedTeeMerge : Param \"input\" of disconnectInput method is not connected in here."));
                };
                _inputPipes.splice(_local2, 1);
                _arg1.disconnect();
                return;
            };
            throw (new Error("AdvancedTeeMerge : Param \"input\" of disconnectInput method should be not a null."));
        }

    }
}//package com.nhn.application.modules.core.pipes.plumbing 
﻿package com.nhn.application.modules.core.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;

    public class AdvancedTeeSplit extends TeeSplit {

        override public function connect(_arg1:IPipeFitting):Boolean{
            if (Boolean(_arg1)){
                return (super.connect(_arg1));
            };
            throw (new Error("AdvancedTeeSplit : Param \"output\" of connect method should be not a null."));
        }
        override public function disconnectFitting(_arg1:IPipeFitting):IPipeFitting{
            var _local2:int;
            if (Boolean(_arg1)){
                _local2 = outputs.indexOf(_arg1);
                if (_local2 === -1){
                    throw (new Error("AdvancedTeeSplit : This is not connected to Param \"target\" of disconnectFitting method."));
                };
                outputs.splice(_local2, 1);
                return (_arg1);
            };
            throw (new Error("AdvancedTeeSplit : Param \"target\" of disconnectFitting method should be not a null."));
        }
        public function get outputPipes():Array{
            return (outputs);
        }
        public function connectOutput(_arg1:IPipeFitting):void{
            var output:* = _arg1;
            try {
                connect(output);
            } catch(e:Error) {
                trace(("AdvancedTeeSplit : Had occurred below error in connectOutput method.\n\t" + e.message));
            };
        }
        public function disconnectOutput(_arg1:IPipeFitting):void{
            var output:* = _arg1;
            try {
                disconnectFitting(output);
            } catch(e:Error) {
                trace(("AdvancedTeeSplit : Had occurred below error in disconnectOutput method.\n\t" + e.message));
            };
        }

    }
}//package com.nhn.application.modules.core.pipes.plumbing 
﻿package com.nhn.application.modules.core.pipes.plumbing {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;

    public class AdvancedPipe extends Pipe {

        public function AdvancedPipe(_arg1:IPipeFitting=null){
            super(_arg1);
        }
        override public function write(_arg1:IPipeMessage):Boolean{
            if (Boolean(output)){
                return (super.write(_arg1));
            };
            throw (new Error(((((("AdvancedPipe : Member \"output\" is not available." + "(Message name : ") + _arg1.getHeader().name) + ", Message sender : ") + _arg1.getHeader().sender) + ")")));
        }

    }
}//package com.nhn.application.modules.core.pipes.plumbing 
﻿package com.nhn.application.modules.core.mvc {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    import com.nhn.application.modules.core.interfaces.*;
    import org.puremvc.as3.multicore.core.*;

    public class AdvancedView extends View {

        public function AdvancedView(_arg1:String){
            super(_arg1);
        }
        public static function removeView(_arg1:String):void{
            if (Boolean(instanceMap[_arg1])){
                if ((instanceMap[_arg1] is AdvancedView)){
                    (instanceMap[_arg1] as AdvancedView).removeMediatorAll();
                };
                instanceMap[_arg1] = null;
                delete instanceMap[_arg1];
            };
        }
        public static function getInstance(_arg1:String):IView{
            if (!Boolean(instanceMap[_arg1])){
                instanceMap[_arg1] = new AdvancedView(_arg1);
            };
            return (instanceMap[_arg1]);
        }

        override public function removeObserver(_arg1:String, _arg2:Object):void{
            var _local6:Observer;
            var _local7:String;
            var _local3:Array = (observerMap[_arg1] as Array);
            var _local4:uint = _local3.length;
            var _local5:int;
            while (_local5 < _local4) {
                _local6 = (_local3[_local5] as Observer);
                if (_local6.compareNotifyContext(_arg2)){
                    _local6.setNotifyMethod(null);
                    _local6.setNotifyContext(null);
                    _local3.splice(_local5, 1);
                    if (_local3.length === 0){
                        observerMap[_arg1] = null;
                        delete observerMap[_arg1];
                        for (_local7 in observerMap) {
                            return;
                        };
                        observerMap = [];
                    };
                    break;
                };
                _local5++;
            };
        }
        public function removeMediatorAll():void{
            var _local1:String;
            for (_local1 in mediatorMap) {
                removeMediator(_local1);
            };
            mediatorMap = [];
        }
        override public function registerMediator(_arg1:IMediator):void{
            if (Boolean(mediatorMap[_arg1.getMediatorName()])){
                throw (new Error((((("AdvancedView(" + multitonKey) + ") : Param mediator \"") + _arg1.getMediatorName()) + "\" had already been registered.")));
            };
            if ((_arg1 is IAdvancedNotifier)){
                if (!(_arg1 as IAdvancedNotifier).isRegistered){
                    super.registerMediator(_arg1);
                    return;
                };
                throw (new Error((((("AdvancedView(" + multitonKey) + ") : Param mediator \"") + _arg1.getMediatorName()) + "\" had already been registered in other View.")));
            };
            throw (new Error((("AdvancedView(" + multitonKey) + ") : Param mediator must be a type of \"IAdvancedNotifier\".")));
        }
        override public function removeMediator(_arg1:String):IMediator{
            var _local3:Array;
            var _local4:uint;
            var _local5:int;
            var _local2:IMediator = (mediatorMap[_arg1] as IMediator);
            if (Boolean(_local2)){
                _local3 = _local2.listNotificationInterests();
                _local4 = _local3.length;
                _local5 = 0;
                while (_local5 < _local4) {
                    removeObserver(_local3[_local5], _local2);
                    _local5++;
                };
                mediatorMap[_arg1] = null;
                delete mediatorMap[_arg1];
                _local2.onRemove();
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.core.mvc 
﻿package com.nhn.application.modules.core.mvc {
    import org.puremvc.as3.multicore.interfaces.*;
    import org.puremvc.as3.multicore.core.*;

    public class AdvancedController extends Controller {

        public function AdvancedController(_arg1:String){
            super(_arg1);
        }
        public static function removeController(_arg1:String):void{
            var _local2:AdvancedController;
            if (Boolean(instanceMap[_arg1])){
                _local2 = (instanceMap[_arg1] as AdvancedController);
                if (Boolean(_local2)){
                    _local2.removeCommandAll();
                    _local2.view = null;
                };
                instanceMap[_arg1] = null;
                delete instanceMap[_arg1];
            };
        }
        public static function getInstance(_arg1:String):IController{
            if (!Boolean(instanceMap[_arg1])){
                instanceMap[_arg1] = new AdvancedController(_arg1);
            };
            return (instanceMap[_arg1]);
        }

        override public function registerCommand(_arg1:String, _arg2:Class):void{
            if (Boolean(commandMap[_arg1])){
                throw (new Error((((("AdvancedController(" + multitonKey) + ") : Command has already been registered to handle \"") + _arg1) + "\".")));
            };
            super.registerCommand(_arg1, _arg2);
        }
        public function removeCommandAll():void{
            var _local1:String;
            for (_local1 in commandMap) {
                removeCommand(_local1);
            };
            commandMap = [];
        }
        override protected function initializeController():void{
            view = AdvancedView.getInstance(multitonKey);
        }
        override public function removeCommand(_arg1:String):void{
            if (hasCommand(_arg1)){
                view.removeObserver(_arg1, this);
                commandMap[_arg1] = null;
                delete commandMap[_arg1];
            };
        }

    }
}//package com.nhn.application.modules.core.mvc 
﻿package com.nhn.application.modules.core.mvc {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.interfaces.*;
    import org.puremvc.as3.multicore.core.*;

    public class AdvancedModel extends Model {

        public function AdvancedModel(_arg1:String){
            super(_arg1);
        }
        public static function getInstance(_arg1:String):IModel{
            if (!Boolean(instanceMap[_arg1])){
                instanceMap[_arg1] = new AdvancedModel(_arg1);
            };
            return (instanceMap[_arg1]);
        }
        public static function removeModel(_arg1:String):void{
            if (Boolean(instanceMap[_arg1])){
                if ((instanceMap[_arg1] is AdvancedModel)){
                    (instanceMap[_arg1] as AdvancedModel).removeProxyAll();
                };
                instanceMap[_arg1] = null;
                delete instanceMap[_arg1];
            };
        }

        override public function registerProxy(_arg1:IProxy):void{
            if (Boolean(proxyMap[_arg1.getProxyName()])){
                throw (new Error((((("AdvancedModel(" + multitonKey) + ") : Param proxy \"") + _arg1.getProxyName()) + "\" had already been registered.")));
            };
            if ((_arg1 is IAdvancedNotifier)){
                if (!(_arg1 as IAdvancedNotifier).isRegistered){
                    super.registerProxy(_arg1);
                    return;
                };
                throw (new Error((((("AdvancedModel(" + multitonKey) + ") : Param proxy \"") + _arg1.getProxyName()) + "\" had already been registered in other View.")));
            };
            throw (new Error((("AdvancedModel(" + multitonKey) + ") : Param proxy must be a type of \"IAdvancedNotifier\".")));
        }
        public function removeProxyAll():void{
            var _local1:String;
            for (_local1 in proxyMap) {
                removeProxy(_local1);
            };
            proxyMap = [];
        }
        override public function removeProxy(_arg1:String):IProxy{
            var _local2:IProxy = (proxyMap[_arg1] as IProxy);
            if (_local2){
                proxyMap[_arg1] = null;
                delete proxyMap[_arg1];
                _local2.onRemove();
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.core.mvc 
﻿package com.nhn.application.modules.core.patterns.command {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.*;

    public class RemoveOutputPipeCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:JunctionMediator = (facade.retrieveMediator(JunctionMediator.NAME) as JunctionMediator);
            var _local3:PipeTableProxy = (facade.retrieveProxy(PipeTableProxy.NAME) as PipeTableProxy);
            var _local4:IPipeFitting;
            var _local5:String;
            if (!((Boolean(_arg1.getBody())) || (Boolean(_arg1.getType())))){
                throw (new Error((("RemoveOutputPipeCommand(" + basicFacade.key) + ") : One of pipe name and pipe should not null.")));
            };
            if (Boolean(_arg1.getBody())){
                _local4 = (_arg1.getBody() as IPipeFitting);
            };
            if (Boolean(_arg1.getType())){
                _local5 = _arg1.getType();
                if (!Boolean(_local4)){
                    _local4 = _local3.retrievePipeFitting(_local5);
                };
            } else {
                _local5 = _local3.retrievePipeName(_local4);
            };
            if (!_local2.removeOutputPipe(_local4)){
                throw (new Error((("RemoveOutputPipeCommand(" + basicFacade.key) + ") : Can not remove output pipe from junctionMediator.")));
            };
            if (!_local3.removePipeByName(_local5)){
                throw (new Error((("RemoveOutputPipeCommand(" + basicFacade.key) + ") : Can not remove output pipe from pipeTableProxy.")));
            };
            if (NHNApplication.mode === NHNApplication.DEBUG){
                trace("NHNApplication infomation");
                trace((("RemoveOutputPipeCommand(" + basicFacade.key) + ")"));
                trace((("\t\"" + _local5) + "\" is removed from junctionMediator and pipeTableProxy.\n"));
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.command {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.*;

    public class AcceptInputPipeCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:IPipeFitting = (_arg1.getBody() as IPipeFitting);
            var _local3:String = _arg1.getType();
            var _local4:JunctionMediator = (facade.retrieveMediator(JunctionMediator.NAME) as JunctionMediator);
            var _local5:PipeTableProxy = (facade.retrieveProxy(PipeTableProxy.NAME) as PipeTableProxy);
            if (!_local4.acceptInputPipe(_local2)){
                throw (new Error((("AcceptInputPipeCommand(" + basicFacade.key) + ") : Can not accept input pipe from junctionMediator.")));
            };
            _local5.registerPipe(_local3, _local2);
            if (NHNApplication.mode === NHNApplication.DEBUG){
                trace("NHNApplication infomation");
                trace((("AcceptInputPipeCommand(" + basicFacade.key) + ")"));
                trace((("\t\"" + _local3) + "\" is accepted in junctionMediator and pipeTableProxy.\n"));
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.core.notifications.*;
    import com.nhn.application.modules.core.pipes.plumbing.*;
    import com.nhn.application.modules.core.pipes.*;

    public class RemoveInoutputPipesAllCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:AdvancedJunction = (facade.retrieveMediator(JunctionMediator.NAME) as JunctionMediator).getJunction();
            var _local3:Array = (_local2.retrievePipe(STDPipes.STDIN) as AdvancedTeeMerge).inputPipes.slice();
            var _local4:Array = (_local2.retrievePipe(STDPipes.STDOUT) as AdvancedTeeSplit).outputPipes.slice();
            while (_local3.length) {
                facade.sendNotification(CoreNotifications.REMOVE_INPUT_PIPE, _local3.pop());
            };
            while (_local4.length) {
                facade.sendNotification(CoreNotifications.REMOVE_OUTPUT_PIPE, _local4.pop());
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.command {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.*;

    public class AcceptOutputPipeCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:IPipeFitting = (_arg1.getBody() as IPipeFitting);
            var _local3:String = _arg1.getType();
            var _local4:JunctionMediator = (facade.retrieveMediator(JunctionMediator.NAME) as JunctionMediator);
            var _local5:PipeTableProxy = (facade.retrieveProxy(PipeTableProxy.NAME) as PipeTableProxy);
            if (!_local4.acceptOutputPipe(_local2)){
                throw (new Error((("AcceptOutputPipeCommand(" + basicFacade.key) + ") : Can not accept output pipe from junctionMediator.")));
            };
            _local5.registerPipe(_local3, _local2);
            if (NHNApplication.mode === NHNApplication.DEBUG){
                trace("NHNApplication infomation");
                trace((("AcceptOutputPipeCommand(" + basicFacade.key) + ")"));
                trace((("\t\"" + _local3) + "\" is accepted in junctionMediator and pipeTableProxy.\n"));
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.command {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.*;

    public class RemoveInputPipeCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:JunctionMediator = (facade.retrieveMediator(JunctionMediator.NAME) as JunctionMediator);
            var _local3:PipeTableProxy = (facade.retrieveProxy(PipeTableProxy.NAME) as PipeTableProxy);
            var _local4:IPipeFitting;
            var _local5:String;
            if (!((Boolean(_arg1.getBody())) || (Boolean(_arg1.getType())))){
                throw (new Error((("RemoveInputPipeCommand(" + basicFacade.key) + ") : One of pipe name and pipe should not null.")));
            };
            if (Boolean(_arg1.getBody())){
                _local4 = (_arg1.getBody() as IPipeFitting);
            };
            if (Boolean(_arg1.getType())){
                _local5 = _arg1.getType();
                if (!Boolean(_local4)){
                    _local4 = _local3.retrievePipeFitting(_local5);
                };
            } else {
                _local5 = _local3.retrievePipeName(_local4);
            };
            if (!_local2.removeInputPipe(_local4)){
                throw (new Error((("RemoveInputPipeCommand(" + basicFacade.key) + ") : Can not remove input pipe from junctionMediator.")));
            };
            if (!_local3.removePipeByName(_local5)){
                throw (new Error((("RemoveInputPipeCommand(" + basicFacade.key) + ") : Can not remove input pipe from pipeTableProxy.")));
            };
            if (NHNApplication.mode === NHNApplication.DEBUG){
                trace("NHNApplication infomation");
                trace((("RemoveInputPipeCommand(" + basicFacade.key) + ")"));
                trace((("\t\"" + _local5) + "\" is removed from junctionMediator and pipeTableProxy.\n"));
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.command {
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;
    import org.puremvc.as3.multicore.patterns.command.*;

    public class BasicSimpleCommand extends SimpleCommand {

        protected function get basicFacade():BasicFacade{
            return ((facade as BasicFacade));
        }
        protected function sendPipeMessage(_arg1:MessageDefine, _arg2:Object, _arg3:int=0):void{
            var _local4:PipelineFacade = (facade as PipelineFacade);
            if (!Boolean(_local4)){
                throw (new Error(("BasicSimpleCommand : " + "facade is not a type of PipelineFacade.")));
            };
            var _local5:Class = _arg1.protocol;
            var _local6:IMessageProtocol = new _local5(_arg1.name, _local4.key, _arg2, _arg3);
            var _local7:QueryMessage = new QueryMessage(_local6);
            _local4.sendPipeMessage(_local7);
        }
        override public function initializeNotifier(_arg1:String):void{
            if (!Boolean(multitonKey)){
                super.initializeNotifier(_arg1);
            } else {
                throw (new Error((("BasicSimpleCommand(" + multitonKey) + ") : Mediator already initialized.")));
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.command {
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.*;

    public class SendPipeMessageCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:JunctionMediator = (facade.retrieveMediator(JunctionMediator.NAME) as JunctionMediator);
            var _local3:Boolean = _local2.sendPipeMessage((_arg1.getBody() as IAdvancedPipeMessage));
            if ((((NHNApplication.mode === NHNApplication.DEBUG)) && (!(_local3)))){
                trace("NHNApplication error");
                trace((("SendPipeMessageCommand(" + basicFacade.key) + ")"));
                trace("\tSTDOUT pipe of Module is not available, so cannot send pipe message.\n");
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.command 
﻿package com.nhn.application.modules.core.patterns.mediator {
    import com.nhn.application.modules.core.patterns.mediator.data.*;
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.viewcomponent.*;
    import com.nhn.application.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;
    import com.nhn.application.modules.core.pipes.plumbing.*;
    import com.nhn.application.modules.core.pipes.*;

    public class JunctionMediator extends BasicMediator {

        public static const STDINOUT_AVAILABLE:uint = 0x0300;
        public static const STDIN_AVAILABLE:uint = 0x0200;
        public static const STDOUT_AVAILABLE:uint = 0x0100;
        public static const NAME:String = "JunctionMediator";
        public static const STDINOUT_UNAVAILABLE:uint = 1;

        protected var _inoutput:uint;
        protected var pipeMessageHandlerItems:Array;

        public function JunctionMediator(_arg1:uint=0){
            super(name, new AdvancedJunction());
            _inoutput = (((_arg1 === 0)) ? JunctionMediator.STDINOUT_AVAILABLE : _arg1);
            pipeMessageHandlerItems = [];
        }
        override public function handleNotification(_arg1:INotification):void{
            switch (_arg1.getName()){
                default:
                    super.handleNotification(_arg1);
            };
        }
        override public function onRemove():void{
            junction.removePipesAll();
            pipeMessageHandlerItems = null;
            super.onRemove();
        }
        public function getJunction():AdvancedJunction{
            return (junction);
        }
        override public function get name():String{
            return (NAME);
        }
        public function sendPipeMessage(_arg1:IAdvancedPipeMessage):Boolean{
            return (junction.sendMessage(STDPipes.STDOUT, _arg1));
        }
        public function addPipeMessageHandler(_arg1:MessageHandlerItem):void{
            var _local2:uint;
            var _local3:uint;
            if (Boolean(_arg1)){
                _local2 = pipeMessageHandlerItems.length;
                _local3 = 0;
                while (_local3 < _local2) {
                    if (MessageHandlerItem.compare(pipeMessageHandlerItems[_local3], _arg1)){
                        if (NHNApplication.mode === NHNApplication.DEBUG){
                            trace("NHNApplication warnning");
                            trace((((name + "(") + multitonKey) + ")"));
                            trace("\t\"pipeMessageHandlerItem has already been added.\n");
                        };
                        return;
                    };
                    _local3++;
                };
                pipeMessageHandlerItems.push(_arg1);
            } else {
                throw (new Error((((name + "(") + multitonKey) + ") : pipeMessageHandlerItem should not be a null.")));
            };
        }
        protected function get junction():AdvancedJunction{
            return ((viewComponent as AdvancedJunction));
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error((((name + "(") + basicFacade.key) + ") : Do not allow external domain to set the view component object.")));
        }
        override public function listNotificationInterests():Array{
            var _local1:Array = [];
            _local1 = _local1.concat(super.listNotificationInterests());
            return (_local1);
        }
        override public function onRegister():void{
            if ((inoutput & STDIN_AVAILABLE) === STDIN_AVAILABLE){
                junction.registerPipe(STDPipes.STDIN, Junction.INPUT, new AdvancedTeeMerge());
                junction.addPipeListener(STDPipes.STDIN, this, handlePipeMessage);
            };
            if ((inoutput & STDOUT_AVAILABLE) === STDOUT_AVAILABLE){
                junction.registerPipe(STDPipes.STDOUT, Junction.OUTPUT, new AdvancedTeeSplit());
            };
        }
        public function get inoutput():uint{
            return (_inoutput);
        }
        public function acceptInputPipe(_arg1:IPipeFitting):Boolean{
            var _local2:AdvancedTeeMerge;
            if ((inoutput & JunctionMediator.STDIN_AVAILABLE) === JunctionMediator.STDIN_AVAILABLE){
                _local2 = (junction.retrievePipe(STDPipes.STDIN) as AdvancedTeeMerge);
                _local2.connectInput(_arg1);
                return (true);
            };
            return (false);
        }
        public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            var _local2:MessageHandlerItem;
            var _local3:uint = pipeMessageHandlerItems.length;
            var _local4:uint;
            while (_local4 < _local3) {
                _local2 = (pipeMessageHandlerItems[_local4] as MessageHandlerItem);
                _local2.messageHandler.apply(pipeMessageHandlerItems.context, [_arg1]);
                _local4++;
            };
        }
        public function removeOutputPipe(_arg1:IPipeFitting):Boolean{
            var _local2:AdvancedTeeSplit;
            if ((inoutput & JunctionMediator.STDOUT_AVAILABLE) === JunctionMediator.STDOUT_AVAILABLE){
                _local2 = (junction.retrievePipe(STDPipes.STDOUT) as AdvancedTeeSplit);
                _local2.disconnectOutput(_arg1);
                return (true);
            };
            return (false);
        }
        public function removeInputPipe(_arg1:IPipeFitting):Boolean{
            var _local2:AdvancedTeeMerge;
            if ((inoutput & JunctionMediator.STDIN_AVAILABLE) === JunctionMediator.STDIN_AVAILABLE){
                _local2 = (junction.retrievePipe(STDPipes.STDIN) as AdvancedTeeMerge);
                _local2.disconnectInput(_arg1);
                return (true);
            };
            return (false);
        }
        public function acceptOutputPipe(_arg1:IPipeFitting):Boolean{
            var _local2:AdvancedTeeSplit;
            if ((inoutput & JunctionMediator.STDOUT_AVAILABLE) === JunctionMediator.STDOUT_AVAILABLE){
                _local2 = (junction.retrievePipe(STDPipes.STDOUT) as AdvancedTeeSplit);
                _local2.connectOutput(_arg1);
                return (true);
            };
            return (false);
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator 
﻿package com.nhn.application.modules.core.patterns.mediator {
    import flash.events.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.viewcomponent.*;
    import com.nhn.application.modules.core.notifications.*;

    public class LocalConnectionMediator extends BasicMediator {

        protected var _connected:Boolean;
        protected var isSending:Boolean;
        protected var sendOperationQueue:Array;
        protected var _connectionName:String;

        public function LocalConnectionMediator(_arg1:String, _arg2:String=null){
            var name:* = _arg1;
            var connectionName = _arg2;
            super(name, new DynamicLocalConnection());
            try {
                this.connectionName = connectionName;
            } catch(e:Error) {
                if (!Boolean(connectionName)){
                    _connectionName = null;
                } else {
                    throw (new Error(e.message));
                };
            };
            sendOperationQueue = [];
            _connected = false;
            isSending = false;
        }
        protected static function validateConnectionName(_arg1:String):Boolean{
            if (((!(Boolean(_arg1))) || ((_arg1.indexOf(":") >= 0)))){
                return (false);
            };
            return (true);
        }

        override public function onRemove():void{
            close();
            localConnection.removeEventListener(StatusEvent.STATUS, localConnection_handleStatusEvent, false);
            super.onRemove();
        }
        public function get domain():String{
            return (localConnection.domain);
        }
        public function send(_arg1:String, _arg2:String, ... _args):void{
            var _local4:Object = {};
            if ((_args[0] is SpecialKeyForEnsureBodyOfNotification)){
                _local4 = _args[1];
            } else {
                _local4.connectionName = _arg1;
                _local4.methodName = _arg2;
                if (_args.length !== 0){
                    _local4.arguments = _args;
                };
            };
            sendOperationQueue.push(_local4);
            sendInternal();
        }
        public function get connected():Boolean{
            return (_connected);
        }
        public function get client():Object{
            return (localConnection.client);
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        public function set connectionName(_arg1:String):void{
            if (!LocalConnectionMediator.validateConnectionName(_arg1)){
                throw (new Error(("LocalConnectionMediator : " + "name is not valid.")));
            };
            _connectionName = _arg1;
            close();
        }
        public function set client(_arg1:Object):void{
            localConnection.client = _arg1;
        }
        public function get connectionName():String{
            return (_connectionName);
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }
        override public function onRegister():void{
            super.onRegister();
            localConnection.addEventListener(StatusEvent.STATUS, localConnection_handleStatusEvent, false, 0, false);
        }
        protected function sendInternal():void{
            var _local2:Object;
            var _local3:Array;
            if (((!(isSending)) && ((sendOperationQueue.length > 0)))){
                isSending = true;
                _local2 = sendOperationQueue.shift();
                _local3 = [_local2.connectionName, _local2.methodName];
                if (_local2.hasOwnProperty("arguments")){
                    _local3 = _local3.concat(_local2.arguments);
                };
                localConnection.memento = _local2;
                localConnection.send.apply(localConnection, _local3);
            };
        }
        override public function listNotificationInterests():Array{
            var _local1:Array = super.listNotificationInterests();
            _local1.push(CoreNotifications.LCM_GET_CLIENT);
            _local1.push(CoreNotifications.LCM_SET_CLIENT);
            _local1.push(CoreNotifications.LCM_DOMAIN);
            _local1.push(CoreNotifications.LCM_GET_CONNECTION_NAME);
            _local1.push(CoreNotifications.LCM_SET_CONNECTION_NAME);
            _local1.push(CoreNotifications.LCM_CONNECTED);
            _local1.push(CoreNotifications.LCM_ALLOW_DOMAIN);
            _local1.push(CoreNotifications.LCM_ALLOW_INSECURE_DOMAIN);
            _local1.push(CoreNotifications.LCM_CLOSE);
            _local1.push(CoreNotifications.LCM_CONNECT);
            _local1.push(CoreNotifications.LCM_REQUEST_SEND);
            return (_local1);
        }
        protected function get localConnection():DynamicLocalConnection{
            return ((viewComponent as DynamicLocalConnection));
        }
        public function connect():void{
            if (!Boolean(connectionName)){
                throw (new Error(("LocalConnectionMediator : connectionName " + "is not valid. Initialize it first.")));
            };
            if (!connected){
                try {
                    localConnection.connect(this.connectionName);
                    _connected = true;
                } catch(e:Error) {
                    _connected = false;
                    throw (e);
                };
            };
        }
        public function allowDomain(... _args):void{
            var _local2:int = _args.length;
            var _local3:int;
            while (_local3 < _local2) {
                if (((!((_args[_local3] is String))) || (!(Boolean(_args[_local3]))))){
                    throw (new Error(("LocalConnectionMediator : " + "domains are not valid.")));
                };
                _local3++;
            };
            localConnection.allowDomain.apply(localConnection, _args);
        }
        public function allowInsecureDomain(... _args):void{
            var _local2:int = _args.length;
            var _local3:int;
            while (_local3 < _local2) {
                if (((!((_args[_local3] is String))) || (!(Boolean(_args[_local3]))))){
                    throw (new Error(("LocalConnectionMediator : " + "domains are not valid.")));
                };
                _local3++;
            };
            localConnection.allowInsecureDomain.apply(localConnection, _args);
        }
        protected function onStatus(_arg1:StatusEvent):void{
            var _local2:Object = localConnection.memento;
            _local2.success = true;
            _local2.event = _arg1;
            sendNotification(CoreNotifications.LCM_RESPOND_SEND, _local2, null);
        }
        override public function handleNotification(_arg1:INotification):void{
            var body:* = null;
            var ensuredBody:* = null;
            var argArray:* = null;
            var notification:* = _arg1;
            var arguments:* = arguments;
            body = notification.getBody();
            var corresponding:* = ((Boolean(body)) && ((body.mediatorName === name)));
            switch (notification.getName()){
                case CoreNotifications.LCM_GET_CLIENT:
                    if (corresponding){
                        body.client = client;
                    };
                    break;
                case CoreNotifications.LCM_SET_CLIENT:
                    if (corresponding){
                        if (Boolean(body.client)){
                            client = body.client;
                        } else {
                            throw (new Error(("LocalConnectionMediator : " + "body.client is not valid.")));
                        };
                    };
                    break;
                case CoreNotifications.LCM_DOMAIN:
                    if (corresponding){
                        body.domain = domain;
                    };
                    break;
                case CoreNotifications.LCM_GET_CONNECTION_NAME:
                    if (corresponding){
                        body.connectionName = connectionName;
                    };
                    break;
                case CoreNotifications.LCM_SET_CONNECTION_NAME:
                    if (corresponding){
                        if (Boolean(body.connectionName)){
                            connectionName = body.connectionName;
                        } else {
                            throw (new Error(("LocalConnectionMediator : " + "body.connectionName is not valid.")));
                        };
                    };
                    break;
                case CoreNotifications.LCM_CONNECTED:
                    if (corresponding){
                        body.connected = connected;
                    };
                    break;
                case CoreNotifications.LCM_ALLOW_DOMAIN:
                    if (corresponding){
                        if (((Boolean(body.domains)) && ((body.domains is Array)))){
                            allowDomain.apply(this, body.domains);
                        } else {
                            throw (new Error(("LocalConnectionMediator : " + "body.domains is not valid.")));
                        };
                    };
                    break;
                case CoreNotifications.LCM_ALLOW_INSECURE_DOMAIN:
                    if (corresponding){
                        if (((Boolean(body.domains)) && ((body.domains is Array)))){
                            allowInsecureDomain.apply(this, body.domains);
                        } else {
                            throw (new Error(("LocalConnectionMediator : " + "body.domains is not valid.")));
                        };
                    };
                    break;
                case CoreNotifications.LCM_CLOSE:
                    if (corresponding){
                        close();
                        body.connected = connected;
                    };
                    break;
                case CoreNotifications.LCM_CONNECT:
                    if (corresponding){
                        try {
                            connect();
                        } catch(e:Error) {
                            body.error = e;
                        };
                        body.connected = connected;
                    };
                    break;
                case CoreNotifications.LCM_REQUEST_SEND:
                    if (corresponding){
                        if (!LocalConnectionMediator.validateConnectionName(body.connectionName)){
                            throw (new Error(("LocalConnectionMediator : body.connectionName " + "is not valid.")));
                        };
                        if (!Boolean(body.methodName)){
                            throw (new Error(("LocalConnectionMediator : body.methodName " + "is not valid.")));
                        };
                        if (((body.hasOwnProperty("arguments")) && (!(Boolean(body.arguments))))){
                            throw (new Error(("LocalConnectionMediator : body.arguments " + "must be type of Array.")));
                        };
                        if (((Boolean(body.arguments)) && (!((body.arguments is Array))))){
                            throw (new Error(("LocalConnectionMediator : body.arguments " + "must be type of Array.")));
                        };
                        ensuredBody = [new SpecialKeyForEnsureBodyOfNotification(), body];
                        argArray = [body.connectionName, body.methodName].concat(ensuredBody);
                        send.apply(this, argArray);
                    };
                    break;
                default:
                    super.handleNotification(notification);
            };
        }
        protected function onError(_arg1:StatusEvent):void{
            var _local2:Object = localConnection.memento;
            _local2.success = false;
            _local2.event = _arg1;
            sendNotification(CoreNotifications.LCM_RESPOND_SEND, _local2, null);
        }
        private function localConnection_handleStatusEvent(_arg1:StatusEvent):void{
            if (_arg1.target === localConnection){
                switch (_arg1.type){
                    case StatusEvent.STATUS:
                        switch (_arg1.level){
                            case "status":
                                onStatus(_arg1);
                                break;
                            case "warning":
                                onWarning(_arg1);
                                break;
                            case "error":
                                onError(_arg1);
                                break;
                        };
                        if (!connected){
                            close();
                        };
                        isSending = false;
                        localConnection.memento = null;
                        sendInternal();
                        break;
                    default:
                        throw (new Error(("LocalConnectionMediator : " + "e.type is not valid.")));
                };
            } else {
                throw (new Error(("LocalConnectionMediator : " + "e.target is not valid.")));
            };
        }
        protected function onWarning(_arg1:StatusEvent):void{
            onError(_arg1);
        }
        public function close():void{
            try {
                localConnection.close();
            } catch(e:Error) {
            };
            _connected = false;
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator 

class SpecialKeyForEnsureBodyOfNotification {

    public function SpecialKeyForEnsureBodyOfNotification(){
    }
}
﻿package com.nhn.application.modules.core.patterns.mediator.viewcomponent {
    import flash.net.*;

    public dynamic class DynamicLocalConnection extends LocalConnection {

    }
}//package com.nhn.application.modules.core.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.core.patterns.mediator.viewcomponent {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.utilities.pipes.plumbing.*;

    public class AdvancedJunction extends Junction {

        public function removePipesAll():void{
            var _local1:String;
            var _local2:IPipeFitting;
            inputPipes = null;
            outputPipes = null;
            for (_local1 in pipesMap) {
                switch (pipeTypesMap[_local1]){
                    case Junction.INPUT:
                        _local2 = pipesMap[_local1];
                        _local2.disconnect();
                        break;
                    case Junction.OUTPUT:
                        _local2 = pipesMap[_local1];
                        do  {
                        } while (Boolean(_local2.disconnect()));
                        break;
                };
                pipesMap[_local1] = null;
                pipeTypesMap[_local1] = null;
                delete pipesMap[_local1];
                delete pipeTypesMap[_local1];
            };
        }
        override public function registerPipe(_arg1:String, _arg2:String, _arg3:IPipeFitting):Boolean{
            var _local4:Boolean = super.registerPipe(_arg1, _arg2, _arg3);
            if (!_local4){
                pipesMap[_arg1] = null;
                pipeTypesMap[_arg1] = null;
                delete pipesMap[_arg1];
                delete pipeTypesMap[_arg1];
            };
            return (_local4);
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.core.patterns.mediator {
    import flash.display.*;
    import com.nhn.application.*;

    public class VisualComponentMediator extends BasicMediator {

        public function VisualComponentMediator(_arg1:String, _arg2:DisplayObject){
            super(_arg1, _arg2);
        }
        override public function onRemove():void{
            if (Boolean(visualComponent)){
                if (Boolean(visualComponent.parent)){
                    if (NHNApplication.mode === NHNApplication.DEBUG){
                        trace("NHNApplication warnning");
                        trace((("onRemove(" + basicFacade.key) + ")"));
                        trace((((("\t\"" + viewComponent) + "\" has been added \"") + visualComponent.parent) + "\".\n"));
                    };
                };
            };
            super.onRemove();
        }
        protected function get visualComponent():DisplayObject{
            return ((viewComponent as DisplayObject));
        }
        public function getVisualComponent():DisplayObject{
            return (visualComponent);
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator 
﻿package com.nhn.application.modules.core.patterns.mediator.data {

    public class MessageHandlerItem {

        protected var _context:Object;
        protected var _messageHandler:Function;

        public function MessageHandlerItem(_arg1:Object, _arg2:Function){
            this.context = _arg1;
            this.messageHandler = _arg2;
        }
        public static function compare(_arg1:MessageHandlerItem, _arg2:MessageHandlerItem):Boolean{
            return ((((_arg1.context === _arg2.context)) && ((_arg1.messageHandler === _arg2.messageHandler))));
        }

        public function get messageHandler():Function{
            return (_messageHandler);
        }
        public function set messageHandler(_arg1:Function):void{
            if (Boolean(_arg1)){
                _messageHandler = _arg1;
            } else {
                throw (new Error("MessageHandlerItem : messageHandler should not be null."));
            };
        }
        public function set context(_arg1:Object):void{
            if (Boolean(_arg1)){
                _context = _arg1;
            } else {
                throw (new Error("MessageHandlerItem : context should not be null."));
            };
        }
        public function get context():Object{
            return (_context);
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator.data 
﻿package com.nhn.application.modules.core.patterns.mediator {
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.modules.core.patterns.mediator.data.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.*;
    import org.puremvc.as3.multicore.patterns.observer.*;
    import org.puremvc.as3.multicore.patterns.mediator.*;
    import com.nhn.application.modules.core.interfaces.*;

    public class BasicMediator extends Mediator implements IAdvancedNotifier {

        protected var notificationHandlerItems:Array;
        protected var notifications:Array;

        public function BasicMediator(_arg1:String, _arg2:Object){
            super(_arg1, _arg2);
            notifications = [];
            notificationHandlerItems = [];
        }
        override public function listNotificationInterests():Array{
            var _local1:Array = [];
            _local1 = _local1.concat(notifications);
            return (_local1);
        }
        override public function onRemove():void{
            viewComponent = null;
            notifications = null;
            notificationHandlerItems = null;
        }
        public function addNotificationInterests(_arg1:Array):void{
            var _local2:int;
            var _local3:int;
            var _local4:int;
            var _local5:int;
            var _local6:Array;
            var _local7:Boolean;
            var _local8:Observer;
            _local6 = new Array();
            _local2 = _arg1.length;
            _local4 = 0;
            while (_local4 < _local2) {
                _local7 = false;
                _local5 = 0;
                while (_local5 < _local6.length) {
                    if (!(_local6[_local5] is String)){
                        throw (new Error((((name + "(") + multitonKey) + ") : Notifications should be type of String.")));
                    };
                    if (_local6[_local5] === _arg1[_local4]){
                        _local7 = true;
                        break;
                    };
                    _local5++;
                };
                if (!_local7){
                    _local6.push(_arg1[_local4]);
                };
                _local4++;
            };
            _local2 = _local6.length;
            _local3 = this.notifications.length;
            _local4 = 0;
            while (_local4 < _local2) {
                _local7 = false;
                _local5 = 0;
                while (_local5 < _local3) {
                    if (this.notifications[_local5] === _local6[_local4]){
                        _local7 = true;
                        break;
                    };
                    _local5++;
                };
                if (!_local7){
                    if (isRegistered){
                        _local8 = new Observer(handleNotification, this);
                        basicFacade.registerObserver(_local6[_local4], _local8);
                    };
                    this.notifications.push(_local6[_local4]);
                };
                _local4++;
            };
        }
        protected function get basicFacade():BasicFacade{
            return ((facade as BasicFacade));
        }
        public function get name():String{
            return (getMediatorName());
        }
        public function get isRegistered():Boolean{
            return (Boolean(multitonKey));
        }
        override public function handleNotification(_arg1:INotification):void{
            var _local2:MessageHandlerItem;
            super.handleNotification(_arg1);
            var _local3:uint = notificationHandlerItems.length;
            var _local4:uint;
            while (_local4 < _local3) {
                _local2 = (notificationHandlerItems[_local4] as MessageHandlerItem);
                _local2.messageHandler.apply(_local2.context, [_arg1]);
                _local4++;
            };
        }
        override public function initializeNotifier(_arg1:String):void{
            if (!Boolean(multitonKey)){
                super.initializeNotifier(_arg1);
            } else {
                throw (new Error((((name + "(") + multitonKey) + ") : Mediator already initialized.")));
            };
        }
        public function addNotificationHandler(_arg1:MessageHandlerItem):void{
            var _local2:uint;
            var _local3:uint;
            if (Boolean(_arg1)){
                _local2 = notificationHandlerItems.length;
                _local3 = 0;
                while (_local3 < _local2) {
                    if (MessageHandlerItem.compare(notificationHandlerItems[_local3], _arg1)){
                        if (NHNApplication.mode === NHNApplication.DEBUG){
                            trace("NHNApplication warnning");
                            trace((((name + "(") + multitonKey) + ")"));
                            trace("\t\"notificationHandlerItem has already been added.\n");
                        };
                        return;
                    };
                    _local3++;
                };
                notificationHandlerItems.push(_arg1);
            } else {
                throw (new Error((((name + "(") + multitonKey) + " : notificationHandlerItem should not be a null.")));
            };
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator 
﻿package com.nhn.application.modules.core.patterns.mediator {
    import com.nhn.application.modules.core.*;

    public class ModuleMediator extends BasicMediator {

        public function ModuleMediator(_arg1:String, _arg2:BasicModule){
            super(_arg1, _arg2);
        }
        public function getModule():BasicModule{
            return ((getViewComponent() as BasicModule));
        }
        override public function onRemove():void{
            if (BasicModule.hasModule(module.moduleName)){
                module.remove();
            };
            super.onRemove();
        }
        protected function get module():BasicModule{
            return ((viewComponent as BasicModule));
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error((((name + "(") + basicFacade.key) + ") : Do not allow external domain to set the view component object.")));
        }

    }
}//package com.nhn.application.modules.core.patterns.mediator 
﻿package com.nhn.application.modules.core.patterns.proxy {
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.modules.core.interfaces.*;
    import org.puremvc.as3.multicore.patterns.proxy.*;

    public class BasicProxy extends Proxy implements IAdvancedNotifier {

        public function BasicProxy(_arg1:String, _arg2:Object){
            super(_arg1, _arg2);
        }
        override public function initializeNotifier(_arg1:String):void{
            if (!Boolean(multitonKey)){
                super.initializeNotifier(_arg1);
            } else {
                throw (new Error((((name + "(") + multitonKey) + ") : Proxy already initialized.")));
            };
        }
        protected function get basicFacade():BasicFacade{
            return ((facade as BasicFacade));
        }
        override public function onRemove():void{
            data = null;
        }
        public function get name():String{
            return (getProxyName());
        }
        public function get isRegistered():Boolean{
            return (Boolean(multitonKey));
        }

    }
}//package com.nhn.application.modules.core.patterns.proxy 
﻿package com.nhn.application.modules.core.patterns.proxy {
    import com.nhn.application.modules.core.data.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public class PipeTableProxy extends BasicProxy {

        public static const NAME:String = "PipeTableProxy";

        public function PipeTableProxy(){
            super(name, null);
            data = new DataTable();
        }
        protected function get pipeTable():DataTable{
            return ((data as DataTable));
        }
        public function removePipesAll():void{
            pipeTable.removeDataAll();
        }
        override public function onRemove():void{
            removePipesAll();
            super.onRemove();
        }
        public function hasPipeByName(_arg1:String):Boolean{
            return (pipeTable.hasDataByName(_arg1));
        }
        override public function get name():String{
            return (PipeTableProxy.NAME);
        }
        override public function setData(_arg1:Object):void{
            throw (new Error((((proxyName + "(") + basicFacade.key) + ") : Do not allow external domain to set the data object.")));
        }
        public function hasPipeByFitting(_arg1:IPipeFitting):Boolean{
            return (pipeTable.hasData(_arg1));
        }
        public function registerPipe(_arg1:String, _arg2:IPipeFitting):void{
            var name:* = _arg1;
            var pipe:* = _arg2;
            try {
                pipeTable.registerData(name, pipe);
            } catch(e:Error) {
                throw (new Error(((((name + "(") + basicFacade.key) + ") : Below error is occured.\n\t") + e.message)));
            };
        }
        public function removePipeByName(_arg1:String):Boolean{
            return (pipeTable.removeDataByName(_arg1));
        }
        public function retrievePipeFitting(_arg1:String):IPipeFitting{
            return ((pipeTable.retrieveData(_arg1) as IPipeFitting));
        }
        public function removePipeByFitting(_arg1:IPipeFitting):Boolean{
            return (pipeTable.removeData(_arg1));
        }
        override public function getData():Object{
            throw (new Error((((proxyName + "(") + basicFacade.key) + ") : Do not allow external domain to get the data object.")));
        }
        public function retrievePipeName(_arg1:IPipeFitting):String{
            return (pipeTable.retrieveDataName(_arg1));
        }

    }
}//package com.nhn.application.modules.core.patterns.proxy 
﻿package com.nhn.application.modules.core.patterns.proxy {
    import com.nhn.application.modules.core.data.*;
    import flash.utils.*;
    import com.nhn.webapis.core.*;

    public class RequestIDTableProxy extends BasicProxy {

        public static const NAME:String = "RequestIDTableProxy";

        protected var baseIDTable:Dictionary;

        public function RequestIDTableProxy(){
            super(name, null);
            data = new StrictDataTable();
            baseIDTable = new Dictionary(false);
        }
        public function removeRequestID(_arg1:RequestID):Boolean{
            var _local2:Boolean = removeFromBaseIDTable(_arg1);
            if (requestIDTable.removeData(_arg1) !== _local2){
                throw (new Error("RequestIDTableProxy : remove is incomplete."));
            };
            return (_local2);
        }
        public function registerRequestID(_arg1:RequestID):void{
            var table:* = null;
            var requestID:* = _arg1;
            try {
                requestIDTable.registerData(requestID.id, requestID);
                table = (baseIDTable[RequestID.getBaseID(requestID)] as Array);
                if (Boolean(table)){
                    table.push(requestID);
                } else {
                    baseIDTable[RequestID.getBaseID(requestID)] = [requestID];
                };
            } catch(e:Error) {
                throw (new Error(((((name + "(") + basicFacade.key) + ") : Below error is occured.\n\t") + e.message)));
            };
        }
        public function retrieveAllBaseIDs():Array{
            var _local2:String;
            var _local1:Array = [];
            for (_local2 in baseIDTable) {
                _local1.push(_local2);
            };
            if (_local1.length === 0){
                _local1 = null;
            };
            return (_local1);
        }
        override public function onRemove():void{
            removeRequestIDAll();
            super.onRemove();
        }
        protected function get requestIDTable():StrictDataTable{
            return ((data as StrictDataTable));
        }
        public function retrieveRequestID(_arg1:String):RequestID{
            return ((requestIDTable.retrieveData(_arg1) as RequestID));
        }
        override public function get name():String{
            return (RequestIDTableProxy.NAME);
        }
        public function retrieveAllIDs():Array{
            return (requestIDTable.retrieveAllDataNames());
        }
        protected function removeFromBaseIDTable(_arg1:RequestID):Boolean{
            var _local4:int;
            var _local2:String = RequestID.getBaseID(_arg1);
            var _local3:Array = (baseIDTable[_local2] as Array);
            if (Boolean(_local3)){
                _local4 = _local3.indexOf(_arg1);
                if (_local4 < 0){
                    return (false);
                };
                _local3.splice(_local4, 1);
                if (_local3.length === 0){
                    baseIDTable[_local2] = null;
                    delete baseIDTable[_local2];
                };
                return (true);
            };
            return (false);
        }
        public function retrieveID(_arg1:RequestID):String{
            return (requestIDTable.retrieveDataName(_arg1));
        }
        public function removeID(_arg1:String):Boolean{
            var _local2:Boolean = removeFromBaseIDTable(retrieveRequestID(_arg1));
            if (requestIDTable.removeDataByName(_arg1) !== _local2){
                throw (new Error("RequestIDTableProxy : remove is incomplete."));
            };
            return (_local2);
        }
        override public function getData():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the data object.")));
        }
        public function retrieveRequestIDsByBaseID(_arg1:String):Array{
            var _local2:Array = (baseIDTable[_arg1] as Array);
            return (((Boolean(_local2)) ? _local2.concat() : null));
        }
        override public function setData(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the data object.")));
        }
        public function retrieveAllRequestIDs():Array{
            return (requestIDTable.retrieveAllData());
        }
        public function get totalNumOfRegisteredRequestID():uint{
            return (requestIDTable.totalNumOfData);
        }
        public function hasRequestID(_arg1:RequestID):Boolean{
            return (requestIDTable.hasData(_arg1));
        }
        public function dump():String{
            return (requestIDTable.dump());
        }
        public function hasID(_arg1:String):Boolean{
            return (requestIDTable.hasDataByName(_arg1));
        }
        public function removeRequestIDAll():void{
            var _local1:String;
            for (_local1 in baseIDTable) {
                baseIDTable[_local1] = null;
                delete baseIDTable[_local1];
            };
            requestIDTable.removeDataAll();
        }

    }
}//package com.nhn.application.modules.core.patterns.proxy 
﻿package com.nhn.application.modules.core.patterns.facade {
    import com.nhn.application.modules.core.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    import com.nhn.application.modules.core.notifications.*;
    import com.nhn.application.modules.core.mvc.*;
    import com.nhn.application.ns.*;

    public class BasicFacade extends Facade {

        protected var mainVisualComponentMediatorName:String;
        protected var ownModuleMediatorName:String;

        public function BasicFacade(_arg1:String){
            super(_arg1);
        }
        public static function getInstance(_arg1:String):BasicFacade{
            if (!Boolean(instanceMap[_arg1])){
                return (new BasicFacade(_arg1));
            };
            return ((Facade.instanceMap[_arg1] as BasicFacade));
        }
        public static function removeCore(_arg1:String):void{
            if (!Boolean(instanceMap[_arg1])){
                return;
            };
            var _local2:BasicFacade = (instanceMap[_arg1] as BasicFacade);
            if (Boolean(_local2)){
                _local2.removeInternal();
                return;
            };
            Facade.removeCore(_arg1);
        }

        protected function removeInternal():void{
            AdvancedModel.removeModel(key);
            AdvancedView.removeView(key);
            AdvancedController.removeController(key);
            var _local1:BasicFacade = (instanceMap[key] as BasicFacade);
            if (Boolean(_local1)){
                _local1.model = null;
                _local1.view = null;
                _local1.controller = null;
            };
            instanceMap[key] = null;
            delete instanceMap[key];
        }
        protected function startInternal():void{
            if (hasCommand(CoreNotifications.START)){
                sendNotification(CoreNotifications.START);
            } else {
                throw (new Error(((("BasicFacade(" + multitonKey) + ") : CoreNotifications.START command is not initiated. ") + "You must execute registerStartCommand before module has started.")));
            };
        }
        override protected function initializeModel():void{
            if (Boolean(model)){
                return;
            };
            model = AdvancedModel.getInstance(multitonKey);
        }
        public function retrieveOwnModuleMediator():ModuleMediator{
            return (retrieveModuleMediator(ownModuleMediatorName));
        }
        public function retrieveModuleMediator(_arg1:String):ModuleMediator{
            return ((retrieveMediator(_arg1) as ModuleMediator));
        }
        nhn_app_ns function remove():void{
            removeInternal();
        }
        public function registerStartCommand(_arg1:Class):void{
            registerCommand(CoreNotifications.START, _arg1);
        }
        public function registerModule(_arg1:BasicModule):String{
            var _local2:String = _arg1.moduleMediatorName;
            if (_arg1.isRegistered){
                if (hasMediator(_local2)){
                    if (_arg1 !== retrieveModuleMediator(_local2).getModule()){
                        throw (new Error((((("BasicFacade(" + multitonKey) + ") : \"") + _arg1.moduleName) + "\" is already registered.")));
                    };
                } else {
                    throw (new Error((((((("BasicFacade(" + multitonKey) + ") : \"") + _arg1.moduleName) + "\" is already registered in \"") + _arg1.keyOfRegisteredFacade) + "\".")));
                };
            } else {
                if (_arg1.checkOwnFacade(this)){
                    ownModuleMediatorName = _local2;
                };
                registerMediator(new ModuleMediator(_local2, _arg1));
                var _local3 = _arg1;
                _local3.nhn_app_ns::registeredBy(multitonKey);
            };
            return (_local2);
        }
        override protected function initializeFacade():void{
            super.initializeFacade();
        }
        override protected function initializeController():void{
            if (Boolean(controller)){
                return;
            };
            controller = AdvancedController.getInstance(multitonKey);
        }
        public function registerMainVisualComponentMediator(_arg1:VisualComponentMediator):void{
            if (Boolean(mainVisualComponentMediatorName)){
                throw (new Error((("BasicFacade(" + key) + ") : Main VisualComponentMediator has already been registered.")));
            };
            mainVisualComponentMediatorName = _arg1.name;
            registerMediator(_arg1);
        }
        override protected function initializeView():void{
            if (Boolean(view)){
                return;
            };
            view = AdvancedView.getInstance(multitonKey);
        }
        override public function removeMediator(_arg1:String):IMediator{
            var _local2:ModuleMediator = retrieveModuleMediator(_arg1);
            if (Boolean(_local2)){
                var _local3 = _local2.getModule();
                _local3.nhn_app_ns::registeredBy(null);
            };
            return (super.removeMediator(_arg1));
        }
        public function registerObserver(_arg1:String, _arg2:IObserver):void{
            if (view != null){
                view.registerObserver(_arg1, _arg2);
            };
        }
        nhn_app_ns function start():void{
            startInternal();
        }
        public function retrieveMainVisualComponentMediator():VisualComponentMediator{
            if (Boolean(mainVisualComponentMediatorName)){
                return ((retrieveMediator(mainVisualComponentMediatorName) as VisualComponentMediator));
            };
            throw (new Error((("BasicFacade(" + key) + ") : Main VisualComponentMediator has not been registered.")));
        }
        public function get key():String{
            return (multitonKey);
        }

    }
}//package com.nhn.application.modules.core.patterns.facade 
﻿package com.nhn.application.modules.core.patterns.facade {
    import com.nhn.application.messages.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    import com.nhn.application.modules.core.notifications.*;
    import com.nhn.application.modules.core.patterns.command.*;

    public class PipelineFacade extends BasicFacade {

        protected var _inoutput:uint;

        public function PipelineFacade(_arg1:String, _arg2:uint=0){
            super(_arg1);
            _inoutput = _arg2;
        }
        public static function getInstance(_arg1:String, _arg2:uint=0):PipelineFacade{
            if (!Boolean(instanceMap[_arg1])){
                return (new PipelineFacade(_arg1, _arg2));
            };
            return ((Facade.instanceMap[_arg1] as PipelineFacade));
        }

        public function sendPipeMessage(_arg1:IAdvancedPipeMessage):void{
            sendNotification(CoreNotifications.SEND_PIPE_MESSAGE, _arg1);
        }
        override protected function initializeFacade():void{
            super.initializeFacade();
            registerProxy(new PipeTableProxy());
            registerMediator(new JunctionMediator(inoutput));
            if ((inoutput & JunctionMediator.STDIN_AVAILABLE) === JunctionMediator.STDIN_AVAILABLE){
                registerCommand(CoreNotifications.ACCEPT_INPUT_PIPE, AcceptInputPipeCommand);
                registerCommand(CoreNotifications.REMOVE_INPUT_PIPE, RemoveInputPipeCommand);
            };
            if ((inoutput & JunctionMediator.STDOUT_AVAILABLE) === JunctionMediator.STDOUT_AVAILABLE){
                registerCommand(CoreNotifications.ACCEPT_OUTPUT_PIPE, AcceptOutputPipeCommand);
                registerCommand(CoreNotifications.REMOVE_OUTPUT_PIPE, RemoveOutputPipeCommand);
                registerCommand(CoreNotifications.SEND_PIPE_MESSAGE, SendPipeMessageCommand);
            };
            registerCommand(CoreNotifications.REMOVE_INOUTPUT_PIPES_ALL, RemoveInoutputPipesAllCommand);
        }
        public function retrieveJunctionMediator():JunctionMediator{
            return ((retrieveMediator(JunctionMediator.NAME) as JunctionMediator));
        }
        public function get inoutput():uint{
            if (_inoutput === 0){
                if (hasMediator(JunctionMediator.NAME)){
                    _inoutput = retrieveJunctionMediator().inoutput;
                };
            };
            return (_inoutput);
        }
        override protected function removeInternal():void{
            sendNotification(CoreNotifications.REMOVE_INOUTPUT_PIPES_ALL);
            super.removeInternal();
        }
        public function retrievePipeTableProxy():PipeTableProxy{
            return ((retrieveProxy(PipeTableProxy.NAME) as PipeTableProxy));
        }

    }
}//package com.nhn.application.modules.core.patterns.facade 
﻿package com.nhn.application.modules.core {
    import com.nhn.application.modules.core.patterns.facade.*;
    import flash.display.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.*;
    import mx.modules.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    import com.nhn.application.ns.*;

    public class BasicModule extends ModuleBase {

        protected static var instanceMap:Array = new Array();

        protected var _facade:BasicFacade;
        protected var _moduleMediatorName:String;
        protected var _isRegistered:Boolean;
        protected var _keyOfRegisteredFacade:String;
        protected var _moduleName:String;

        public function BasicModule(_arg1:ModuleName, _arg2:BasicFacade=null, _arg3:ModuleInitializeData=null){
            if (Boolean(instanceMap[_arg1.moduleName])){
                throw (new Error((_arg1.moduleName + " : Module instance for this name is already constructed.\n(Name of module must be unique.)")));
            };
            instanceMap[_arg1.moduleName] = this;
            _moduleName = _arg1.moduleName;
            _moduleMediatorName = _arg1.moduleMediatorName;
            if (Boolean(_arg2)){
                if (_arg2.key !== _moduleName){
                    throw (new Error((_arg1.moduleName + " : Key of param \"facade\" is not equivalent to param \"moduleName.name\".")));
                };
                _facade = _arg2;
            } else {
                _facade = BasicFacade.getInstance(_arg1.moduleName);
            };
            initialize(_arg3);
        }
        public static function retrieveModule(_arg1:String):BasicModule{
            return ((instanceMap[_arg1] as BasicModule));
        }
        public static function removeModule(_arg1:String):Boolean{
            var _local2:BasicModule = retrieveModule(_arg1);
            if (Boolean(_local2)){
                _local2.remove();
                return (true);
            };
            if (NHNApplication.mode === NHNApplication.DEBUG){
                trace("NHNApplication warnning");
                trace("BasicModule.removeModule()");
                trace((("\tModule name of \"" + _arg1) + "\" is not exist."));
            };
            return (false);
        }
        public static function hasModule(_arg1:String):Boolean{
            return (Boolean(instanceMap[_arg1]));
        }

        public function start():void{
            var _local1 = facade;
            _local1.nhn_app_ns::start();
        }
        public function remove():void{
            if (!Boolean(instanceMap[moduleName])){
                return;
            };
            instanceMap[moduleName] = null;
            delete instanceMap[moduleName];
            if (isRegistered){
                Facade.getInstance(keyOfRegisteredFacade).removeMediator(moduleMediatorName);
            };
            var _local1 = _facade;
            _local1.nhn_app_ns::remove();
            _facade = null;
            _moduleName = null;
            _moduleMediatorName = null;
        }
        public function getVisualComponent():DisplayObject{
            return (facade.retrieveMainVisualComponentMediator().getVisualComponent());
        }
        nhn_app_ns function registeredBy(_arg1:String):void{
            if (Boolean(_arg1)){
                if (Boolean(_keyOfRegisteredFacade)){
                    throw (new Error((("BasicModule(" + facade.key) + ") : Module is already registered.")));
                };
                _keyOfRegisteredFacade = _arg1;
                _isRegistered = true;
            } else {
                _keyOfRegisteredFacade = null;
                _isRegistered = false;
            };
        }
        public function get moduleMediatorName():String{
            return (_moduleMediatorName);
        }
        public function get isRegistered():Boolean{
            return (_isRegistered);
        }
        protected function registerStartCommand():void{
            throw (new Error(((("BasicModule(" + facade.key) + ") : ") + "Do not use super.registerStartCommand() in subclasses.")));
        }
        protected function initialize(_arg1:ModuleInitializeData):void{
            registerStartCommand();
            registerMainVisualComponentMediator();
        }
        public function get keyOfRegisteredFacade():String{
            return (_keyOfRegisteredFacade);
        }
        protected function registerMainVisualComponentMediator():void{
        }
        public function get moduleName():String{
            return (_moduleName);
        }
        public function checkOwnFacade(_arg1:BasicFacade):Boolean{
            return ((this.facade === _arg1));
        }
        protected function get facade():BasicFacade{
            return (_facade);
        }

    }
}//package com.nhn.application.modules.core 
﻿package com.nhn.application.modules.core.interfaces {
    import org.puremvc.as3.multicore.interfaces.*;

    public interface IAdvancedNotifier extends INotifier {

        function get isRegistered():Boolean;

    }
}//package com.nhn.application.modules.core.interfaces 
﻿package com.nhn.application.modules.core.data {
    import flash.utils.*;

    public class StrictDataTable {

        protected var _totalNumOfData:uint;
        protected var dataTable:Dictionary;
        protected var nameTable:Array;

        public function StrictDataTable(){
            _totalNumOfData = 0;
            nameTable = [];
            dataTable = new Dictionary(false);
        }
        public function get totalNumOfData():uint{
            return (_totalNumOfData);
        }
        public function hasDataByName(_arg1:String):Boolean{
            return (Boolean(retrieveData(_arg1)));
        }
        protected function removeTable(_arg1:String, _arg2):Boolean{
            if (!((hasDataByName(_arg1)) && (hasData(_arg2)))){
                return (false);
            };
            if ((((nameTable[_arg1] == _arg2)) && ((dataTable[_arg2] == _arg1)))){
                nameTable[_arg1] = null;
                delete nameTable[_arg1];
                dataTable[_arg2] = null;
                delete dataTable[_arg2];
                _totalNumOfData--;
                return (true);
            };
            return (false);
        }
        public function removeData(_arg1):Boolean{
            var _local2:String = retrieveDataName(_arg1);
            return (removeTable(_local2, _arg1));
        }
        public function retrieveAllData():Array{
            var _local2:String;
            var _local1:Array = [];
            for (_local2 in nameTable) {
                _local1.push(nameTable[_local2]);
            };
            if (_local1.length === 0){
                _local1 = null;
            };
            return (_local1);
        }
        public function removeDataByName(_arg1:String):Boolean{
            var _local2:* = retrieveData(_arg1);
            return (removeTable(_arg1, _local2));
        }
        public function retrieveDataName(_arg1):String{
            return (dataTable[_arg1]);
        }
        public function hasData(_arg1):Boolean{
            return (Boolean(retrieveDataName(_arg1)));
        }
        public function registerData(_arg1:String, _arg2):void{
            if (((Boolean(_arg1)) && (Boolean(_arg2)))){
                if (((!(hasDataByName(_arg1))) && (!(hasData(_arg2))))){
                    nameTable[_arg1] = _arg2;
                    dataTable[_arg2] = _arg1;
                    _totalNumOfData++;
                    return;
                };
                throw (new Error(((("StrictDataTable : " + "Data named as \"") + _arg1) + "\" had already been registered.")));
            };
            throw (new Error(("StrictDataTable : params of " + "registerData method must be not null.")));
        }
        public function retrieveData(_arg1:String){
            return (nameTable[_arg1]);
        }
        public function retrieveAllDataNames():Array{
            var _local2:String;
            var _local1:Array = [];
            for (_local2 in nameTable) {
                _local1.push(_local2);
            };
            if (_local1.length === 0){
                _local1 = null;
            };
            return (_local1);
        }
        public function removeDataAll():void{
            var _local1:String;
            for (_local1 in nameTable) {
                if (!removeDataByName(_local1)){
                    throw (new Error(("StrictDataTable : " + "Data does not removed completely.")));
                };
            };
            _totalNumOfData = 0;
        }
        public function dump():String{
            var _local2:String;
            var _local1 = "[StrictDataTable]\n";
            if (totalNumOfData > 0){
                for (_local2 in nameTable) {
                    _local1 = (_local1 + (((("\t[" + _local2) + "] : ") + nameTable[_local2]) + "\n"));
                };
            } else {
                _local1 = (_local1 + "\tThere is no registered data.\n");
            };
            return (_local1);
        }

    }
}//package com.nhn.application.modules.core.data 
﻿package com.nhn.application.modules.core.data {

    public class DataTable {

        protected var table:Array;

        public function DataTable(){
            table = [];
        }
        public function removeData(_arg1):Boolean{
            var _local2:String = retrieveDataName(_arg1);
            return (removeDataByName(_local2));
        }
        public function retrieveDataName(_arg1):String{
            var _local2:String;
            for (_local2 in table) {
                if (table[_local2] == _arg1){
                    return (_local2);
                };
            };
            return (null);
        }
        public function removeDataAll():void{
            var _local1:String;
            for (_local1 in table) {
                if (!removeDataByName(_local1)){
                    throw (new Error("DataTable : Data does not removed completely."));
                };
            };
        }
        public function hasData(_arg1):Boolean{
            return (Boolean(retrieveDataName(_arg1)));
        }
        public function retrieveData(_arg1:String){
            return (table[_arg1]);
        }
        public function hasDataByName(_arg1:String):Boolean{
            return (Boolean(retrieveData(_arg1)));
        }
        public function removeDataByName(_arg1:String):Boolean{
            if (hasDataByName(_arg1)){
                table[_arg1] = null;
                delete table[_arg1];
                return (true);
            };
            return (false);
        }
        public function registerData(_arg1:String, _arg2):void{
            if (((Boolean(_arg1)) && (Boolean(_arg2)))){
                if (!hasDataByName(_arg1)){
                    table[_arg1] = _arg2;
                    return;
                };
                throw (new Error((("DataTable : Data named as \"" + _arg1) + "\" had already been registered.")));
            };
            throw (new Error("DataTable : params of registerData method must be not null."));
        }

    }
}//package com.nhn.application.modules.core.data 
﻿package com.nhn.application.modules.core.data {

    public class ModuleInitializeData {

        public var data;

        public function ModuleInitializeData(_arg1=null){
            this.data = _arg1;
        }
    }
}//package com.nhn.application.modules.core.data 
﻿package com.nhn.application.modules.pipeinterchange.notifications {

    public class PipeInterchangeNotifications {

        public static const CONNECT_MODULE:String = "NOTI_PIPEINTERCHANGE_CONNECT_MODULE";
        public static const INTERCHANGE_PIPE_MESSAGE:String = "NOTI_PIPEINTERCHANGE_INTERCHANGE_PIPE_MESSAGE";
        public static const DISCONNECT_MODULE:String = "NOTI_PIPEINTERCHANGE_DISCONNECT_MODULE";

    }
}//package com.nhn.application.modules.pipeinterchange.notifications 
﻿package com.nhn.application.modules.pipeinterchange {
    import com.nhn.application.modules.core.*;
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.pipeinterchange.pipemessages.*;

    public class PipeInterchangeableModule extends PipeAwareModule {

        public function PipeInterchangeableModule(_arg1:ModuleName, _arg2:PipelineFacade=null, _arg3:ModuleInitializeData=null){
            super(_arg1, _arg2, _arg3);
        }
        override public function remove():void{
            var _local1:Class;
            var _local2:IMessageProtocol;
            var _local3:QueryMessage;
            _local1 = PipeInterchangePipeMessages.REQUEST_DISCONNECT_MODULE.protocol;
            _local2 = new _local1(PipeInterchangePipeMessages.REQUEST_DISCONNECT_MODULE.name, facade.key, this, 0);
            _local3 = new QueryMessage(_local2);
            pipelineFacade.sendPipeMessage(_local3);
            super.remove();
        }
        public function listPipeMessageInterests():Array{
            return ([]);
        }

    }
}//package com.nhn.application.modules.pipeinterchange 
﻿package com.nhn.application.modules.pipeinterchange.patterns.command {
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.pipeinterchange.patterns.proxy.*;

    public class InterchangeCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local6:int;
            var _local8:IPipeFitting;
            var _local2:IAdvancedPipeMessage = (_arg1.getBody() as IAdvancedPipeMessage);
            var _local3:PipeInterchangeMapProxy = (facade.retrieveProxy(PipeInterchangeMapProxy.NAME) as PipeInterchangeMapProxy);
            var _local4:PipeTableProxy = (facade.retrieveProxy(PipeTableProxy.NAME) as PipeTableProxy);
            var _local5:Array = _local3.retrievePipeNamesInterestIn(_local2.getHeaderByIMessageHeader().name);
            if (!Boolean(_local5)){
                if (NHNApplication.mode === NHNApplication.DEBUG){
                    trace("NHNApplication infomation");
                    trace((("PipeInterChangeModule(" + basicFacade.key) + ")"));
                    trace(("\tName : " + _local2.getHeaderByIMessageHeader().name));
                    trace(("\tSender : " + _local2.getHeaderByIMessageHeader().sender));
                    trace("\tReceivers(Pipes) : No pipes to receive message\n");
                };
                return;
            };
            var _local7:uint = _local5.length;
            if (NHNApplication.mode === NHNApplication.DEBUG){
                trace("NHNApplication infomation");
                trace((("PipeInterChangeModule(" + basicFacade.key) + ")"));
                trace(("\tName : " + _local2.getHeaderByIMessageHeader().name));
                trace(("\tSender : " + _local2.getHeaderByIMessageHeader().sender));
                trace((("\tReceivers(Pipes) : " + _local7) + " pipes"));
                _local6 = 0;
                while (_local6 < _local7) {
                    trace((((("\t\t" + _local6) + " \"") + _local5[_local6]) + "\""));
                    _local6++;
                };
                trace();
            };
            _local6 = 0;
            while (_local6 < _local7) {
                _local8 = _local4.retrievePipeFitting(_local5[_local6]);
                if (!Boolean(_local8)){
                    throw (new Error((((("InterchangeCommand(" + basicFacade.key) + ") : There is no IPipeFitting match up to ") + _local5[_local6]) + ".")));
                };
                _local8.write(_local2);
                _local6++;
            };
        }

    }
}//package com.nhn.application.modules.pipeinterchange.patterns.command 
﻿package com.nhn.application.modules.pipeinterchange.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.pipeinterchange.notifications.*;
    import com.nhn.application.modules.pipeinterchange.patterns.proxy.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            facade.registerProxy(new PipeInterchangeMapProxy());
            facade.registerCommand(PipeInterchangeNotifications.CONNECT_MODULE, ConnectModuleCommand);
            facade.registerCommand(PipeInterchangeNotifications.DISCONNECT_MODULE, DisconnectModuleCommand);
            facade.registerCommand(PipeInterchangeNotifications.INTERCHANGE_PIPE_MESSAGE, InterchangeCommand);
        }

    }
}//package com.nhn.application.modules.pipeinterchange.patterns.command 
﻿package com.nhn.application.modules.pipeinterchange.patterns.command {
    import com.nhn.application.modules.core.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.pipeinterchange.utils.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.pipeinterchange.patterns.proxy.*;

    public class DisconnectModuleCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:PipeInterchangeableModule = (_arg1.getBody() as PipeInterchangeableModule);
            var _local3:PipeInterchangeModule = (BasicModule.retrieveModule(basicFacade.key) as PipeInterchangeModule);
            var _local4:PipeGoods = PipeFactory.createPipe(_local2);
            if (Boolean(_local4.inputPipeName)){
                _local2.removeInputPipe(_local4.inputPipeName, null);
                _local3.removeOutputPipe(_local4.inputPipeName, null);
            };
            if (Boolean(_local4.outputPipeName)){
                _local2.removeOutputPipe(_local4.outputPipeName, null);
                _local3.removeInputPipe(_local4.outputPipeName, null);
            };
            var _local5:PipeInterchangeMapProxy = (facade.retrieveProxy(PipeInterchangeMapProxy.NAME) as PipeInterchangeMapProxy);
            var _local6:Array = _local2.listPipeMessageInterests();
            var _local7:uint = _local6.length;
            var _local8:uint;
            while (_local8 < _local7) {
                if (_local5.removePipeNameInterestIn(_local4.inputPipeName, _local6[_local8]) < 0){
                    throw (new Error((("DisconnectModuleCommand(" + basicFacade.key) + ") : Dis not disconnect normally.")));
                };
                _local8++;
            };
        }

    }
}//package com.nhn.application.modules.pipeinterchange.patterns.command 
﻿package com.nhn.application.modules.pipeinterchange.patterns.command {
    import com.nhn.application.modules.core.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.pipeinterchange.utils.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.pipeinterchange.patterns.proxy.*;

    public class ConnectModuleCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:PipeInterchangeableModule = (_arg1.getBody() as PipeInterchangeableModule);
            var _local3:PipeInterchangeModule = (BasicModule.retrieveModule(basicFacade.key) as PipeInterchangeModule);
            var _local4:PipeGoods = PipeFactory.createPipe(_local2);
            if (Boolean(_local4.inputPipe)){
                _local2.acceptInputPipe(_local4.inputPipeName, _local4.inputPipe);
                _local3.acceptOutputPipe(_local4.inputPipeName, _local4.inputPipe);
            };
            if (Boolean(_local4.outputPipe)){
                _local2.acceptOutputPipe(_local4.outputPipeName, _local4.outputPipe);
                _local3.acceptInputPipe(_local4.outputPipeName, _local4.outputPipe);
            };
            var _local5:PipeInterchangeMapProxy = (facade.retrieveProxy(PipeInterchangeMapProxy.NAME) as PipeInterchangeMapProxy);
            var _local6:Array = _local2.listPipeMessageInterests();
            var _local7:uint = _local6.length;
            var _local8:uint;
            while (_local8 < _local7) {
                _local5.registerPipeNameInterestIn(_local4.inputPipeName, _local6[_local8]);
                _local8++;
            };
        }

    }
}//package com.nhn.application.modules.pipeinterchange.patterns.command 
﻿package com.nhn.application.modules.pipeinterchange.patterns.proxy {
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.pipeinterchange.patterns.proxy.data.*;

    public class PipeInterchangeMapProxy extends BasicProxy {

        public static const NAME:String = "PipeInterchangeMapProxy";

        public function PipeInterchangeMapProxy(){
            super(name, null);
            data = new PipeInterchangeMap();
        }
        override public function getData():Object{
            throw (new Error((((proxyName + "(") + basicFacade.key) + ") : Do not allow external domain to get the data object.")));
        }
        public function hasPipeNameInterestIn(_arg1:String, _arg2:String):int{
            return (pipeInterchangeMap.hasPipeNameInterestIn(_arg1, _arg2));
        }
        override public function onRemove():void{
            resetPipeInterchangeMap();
            super.onRemove();
        }
        protected function get pipeInterchangeMap():PipeInterchangeMap{
            return ((data as PipeInterchangeMap));
        }
        override public function get name():String{
            return (PipeInterchangeMapProxy.NAME);
        }
        public function removePipeNameInterestIn(_arg1:String, _arg2:String):int{
            return (pipeInterchangeMap.removePipeNameInterestIn(_arg1, _arg2));
        }
        public function resetPipeInterchangeMap():void{
            try {
                pipeInterchangeMap.resetPipeInterchangeMap();
            } catch(e:Error) {
                throw (new Error(((((name + "(") + basicFacade.key) + ") : Error is occured in \"resetPipeInterchangeMap\" method.\n\t") + e.message)));
            };
        }
        public function registerPipeNameInterestIn(_arg1:String, _arg2:String):void{
            var pipeName:* = _arg1;
            var pipeMsgInterest:* = _arg2;
            try {
                pipeInterchangeMap.registerPipeNameInterestIn(pipeName, pipeMsgInterest);
            } catch(e:Error) {
                throw (new Error(((((name + "(") + basicFacade.key) + ") : Error is occured in \"registerPipeNameInterestIn\" method.\n\t") + e.message)));
            };
        }
        override public function setData(_arg1:Object):void{
            throw (new Error((((proxyName + "(") + basicFacade.key) + ") : Do not allow external domain to set the data object.")));
        }
        public function retrievePipeNamesInterestIn(_arg1:String):Array{
            return (pipeInterchangeMap.retrievePipeNamesInterestIn(_arg1));
        }
        public function removePipeNameFromMap(_arg1:String):void{
            pipeInterchangeMap.removePipeNameFromMap(_arg1);
        }
        public function removePipeNamesAllInterestIn(_arg1:String):Boolean{
            return (pipeInterchangeMap.removePipeNamesAllInterestIn(_arg1));
        }
        public function removePipeNameFromMapDebug(_arg1:String):uint{
            return (pipeInterchangeMap.removePipeNameFromMapDebug(_arg1));
        }

    }
}//package com.nhn.application.modules.pipeinterchange.patterns.proxy 
﻿package com.nhn.application.modules.pipeinterchange.patterns.proxy.data {

    public class PipeInterchangeMap {

        protected var pipeInterchangeMap:Array;

        public function PipeInterchangeMap(){
            pipeInterchangeMap = [];
        }
        public function hasPipeNameInterestIn(_arg1:String, _arg2:String):int{
            var _local3:Array;
            if (Boolean(pipeInterchangeMap[_arg2])){
                _local3 = (pipeInterchangeMap[_arg2] as Array);
                if (_local3.indexOf(_arg1, 0) !== -1){
                    return (1);
                };
                return (0);
            };
            return (-1);
        }
        public function resetPipeInterchangeMap():void{
            var _local1:String;
            for (_local1 in pipeInterchangeMap) {
                if (!removePipeNamesAllInterestIn(_local1)){
                    throw (new Error("PipeInterchangeMap : Dis not reset normally."));
                };
            };
        }
        public function removePipeNameFromMap(_arg1:String):void{
            var _local2:String;
            for (_local2 in pipeInterchangeMap) {
                removePipeNameInterestIn(_arg1, _local2);
            };
        }
        public function removePipeNameFromMapDebug(_arg1:String):uint{
            var _local3:String;
            var _local2:uint;
            for (_local3 in pipeInterchangeMap) {
                if (removePipeNameInterestIn(_arg1, _local3) === 1){
                    _local2++;
                };
            };
            return (_local2);
        }
        public function removePipeNamesAllInterestIn(_arg1:String):Boolean{
            if (Boolean(pipeInterchangeMap[_arg1])){
                pipeInterchangeMap[_arg1] = null;
                delete pipeInterchangeMap[_arg1];
                return (true);
            };
            return (false);
        }
        public function registerPipeNameInterestIn(_arg1:String, _arg2:String):void{
            var _local3:Array;
            if (((Boolean(_arg1)) && (Boolean(_arg2)))){
                switch (hasPipeNameInterestIn(_arg1, _arg2)){
                    case -1:
                        pipeInterchangeMap[_arg2] = [];
                    case 0:
                        _local3 = (pipeInterchangeMap[_arg2] as Array);
                        _local3.push(_arg1);
                        break;
                    case 1:
                        throw (new Error((((("PipeInterchangeMap : Pipe named of interest \"" + _arg2) + "\" \"") + _arg1) + "\" had already been registered.")));
                };
            } else {
                throw (new Error("PipeInterchangeMap : params of registerPipeNameInterestIn method must be not null."));
            };
        }
        public function removePipeNameInterestIn(_arg1:String, _arg2:String):int{
            var _local3:Array;
            var _local4:int;
            if (Boolean(pipeInterchangeMap[_arg2])){
                _local3 = (pipeInterchangeMap[_arg2] as Array);
                _local4 = _local3.indexOf(_arg1);
                if (_local4 === -1){
                    return (-1);
                };
                _local3.splice(_local4, 1);
                if (_local3.length === 0){
                    pipeInterchangeMap[_arg2] = null;
                    delete pipeInterchangeMap[_arg2];
                };
                return (1);
            };
            return (0);
        }
        public function retrievePipeNamesInterestIn(_arg1:String):Array{
            return ((pipeInterchangeMap[_arg1] as Array));
        }

    }
}//package com.nhn.application.modules.pipeinterchange.patterns.proxy.data 
﻿package com.nhn.application.modules.pipeinterchange.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class PipeInterchangePipeMessages {

        public static const REQUEST_CONNECT_MODULE:MessageDefine = new MessageDefine("PIPEMSG_PIPEINTERCHANGE_REQUEST_CONNECT_MODULE", ModuleTransferProtocol);
        public static const REQUEST_DISCONNECT_MODULE:MessageDefine = new MessageDefine("PIPEMSG_PIPEINTERCHANGE_REQUEST_DISCONNECT_MODULE", ModuleTransferProtocol);

    }
}//package com.nhn.application.modules.pipeinterchange.pipemessages 
﻿package com.nhn.application.modules.pipeinterchange {
    import com.nhn.application.modules.core.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.modules.pipeinterchange.pipemessages.*;
    import com.nhn.application.modules.pipeinterchange.notifications.*;
    import com.nhn.application.modules.pipeinterchange.patterns.command.*;

    public class PipeInterchangeModule extends PipeAwareModule {

        public static const NAME_BASE:String = "PipeInterchangeModule";

        public function PipeInterchangeModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        public function disconnectModule(_arg1:PipeInterchangeableModule):void{
            facade.sendNotification(PipeInterchangeNotifications.DISCONNECT_MODULE, _arg1);
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getHeaderByIMessageHeader().name){
                case PipeInterchangePipeMessages.REQUEST_CONNECT_MODULE.name:
                    connectModule((_arg1.getBody() as PipeInterchangeableModule));
                    break;
                case PipeInterchangePipeMessages.REQUEST_DISCONNECT_MODULE.name:
                    disconnectModule((_arg1.getBody() as PipeInterchangeableModule));
                    break;
                default:
                    facade.sendNotification(PipeInterchangeNotifications.INTERCHANGE_PIPE_MESSAGE, _arg1);
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        public function connectModule(_arg1:PipeInterchangeableModule):void{
            facade.sendNotification(PipeInterchangeNotifications.CONNECT_MODULE, _arg1);
        }

    }
}//package com.nhn.application.modules.pipeinterchange 
﻿package com.nhn.application.modules.pipeinterchange.utils {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public final class PipeGoods {

        public var inputPipeName:String;
        public var inputPipe:IPipeFitting;
        public var outputPipeName:String;
        public var outputPipe:IPipeFitting;

        public function PipeGoods(_arg1:String=null, _arg2:IPipeFitting=null, _arg3:String=null, _arg4:IPipeFitting=null){
            this.inputPipeName = _arg1;
            this.inputPipe = _arg2;
            this.outputPipeName = _arg3;
            this.outputPipe = _arg4;
        }
    }
}//package com.nhn.application.modules.pipeinterchange.utils 
﻿package com.nhn.application.modules.pipeinterchange.utils {
    import com.nhn.application.modules.core.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.core.pipes.plumbing.*;

    public final class PipeFactory {

        private static const OUTPUT:uint = 2;
        private static const INPUT:uint = 1;

        private static function naming(_arg1:String, _arg2:uint):String{
            var _local3:String;
            switch (_arg2){
                case INPUT:
                    _local3 = ("INPUT_PIPE_FROM_PICM@" + _arg1);
                    break;
                case OUTPUT:
                    _local3 = ("OUTPUT_PIPE_TO_PICM@" + _arg1);
                    break;
            };
            return (_local3);
        }
        public static function createPipe(_arg1:PipeAwareModule):PipeGoods{
            var _local2:PipeGoods = new PipeGoods();
            if ((_arg1.inoutput & JunctionMediator.STDIN_AVAILABLE) === JunctionMediator.STDIN_AVAILABLE){
                _local2.inputPipe = new AdvancedPipe();
                _local2.inputPipeName = naming(_arg1.moduleName, INPUT);
            };
            if ((_arg1.inoutput & JunctionMediator.STDOUT_AVAILABLE) === JunctionMediator.STDOUT_AVAILABLE){
                _local2.outputPipe = new AdvancedPipe();
                _local2.outputPipeName = naming(_arg1.moduleName, OUTPUT);
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.pipeinterchange.utils 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.events.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets.*;
    import com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.events.*;

    public class ProgressBasicUI extends Sprite implements IProgressUI, IReleaseMemory {

        private static const SHOW_TARGET_ALPHA:Number = 1;
        private static const HIDE_TARGET_ALPHA:Number = 0;

        private var eventsMap:EventsMap;
        private var _targetAlpha:Number;
        private var easingRatio:Number;
        private var asset:ProgressBasicUI_ProgressBarAsset;

        public function ProgressBasicUI(_arg1:Number=0.4){
            eventsMap = new EventsMap();
            this.easingRatio = _arg1;
            targetAlpha = ProgressBasicUI.HIDE_TARGET_ALPHA;
            asset = new ProgressBasicUI_ProgressBarAsset();
            asset.has_asset_handleEvent = false;
            asset.alpha = targetAlpha;
            asset.stop();
            addChild(asset);
        }
        public function showImmediately():void{
            asset.play();
            asset.alpha = ProgressBasicUI.SHOW_TARGET_ALPHA;
            asset_removeEnterFrameEventListener();
        }
        public function showAnimation():void{
            targetAlpha = ProgressBasicUI.SHOW_TARGET_ALPHA;
            asset.play();
            asset_addEnterFrameEventListener();
            dispatchProgressUIEvent(ProgressUIEvent.PROGRESS_ANIMATION_START);
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            var _local4:EventsMapItem;
            if (Boolean(eventsMap)){
                _local4 = new EventsMapItem(_arg1, _arg2, _arg3);
                eventsMap.removeEventsMapItem(_local4);
                if (eventsMap.eventsMapItemNum === 0){
                    eventsMap.releaseMemory();
                    eventsMap = null;
                };
            };
            super.removeEventListener(_arg1, _arg2, _arg3);
        }
        override public function get width():Number{
            return (asset.background.width);
        }
        private function asset_handleEvent(_arg1:Event):void{
            var _local2:Number;
            switch (_arg1.type){
                case Event.ENTER_FRAME:
                    _local2 = (targetAlpha - asset.alpha);
                    asset.alpha = (asset.alpha + (_local2 * easingRatio));
                    if (Math.abs(_local2) <= 0.05){
                        asset.alpha = targetAlpha;
                        if (ProgressBasicUI.HIDE_TARGET_ALPHA === targetAlpha){
                            asset.stop();
                        };
                        asset_removeEnterFrameEventListener();
                        dispatchProgressUIEvent(ProgressUIEvent.PROGRESS_ANIMATION_STOP);
                    };
                    break;
                default:
                    throw (new Error(("ProgressBasicUI : " + "e.type is not valid.")));
            };
        }
        private function get targetAlpha():Number{
            return (_targetAlpha);
        }
        private function asset_removeEnterFrameEventListener():void{
            asset.has_asset_handleEvent = false;
            asset.removeEventListener(Event.ENTER_FRAME, asset_handleEvent, false);
        }
        private function asset_addEnterFrameEventListener():void{
            if (!asset.has_asset_handleEvent){
                asset.addEventListener(Event.ENTER_FRAME, asset_handleEvent, false, 0, false);
            };
        }
        private function set targetAlpha(_arg1:Number):void{
            switch (_arg1){
                case ProgressBasicUI.SHOW_TARGET_ALPHA:
                case ProgressBasicUI.HIDE_TARGET_ALPHA:
                    break;
                default:
                    throw (new Error(("ProgressBasicUI : " + "alpha is not valid.")));
            };
            _targetAlpha = _arg1;
        }
        public function hideImmediately():void{
            asset.stop();
            asset.alpha = ProgressBasicUI.HIDE_TARGET_ALPHA;
            asset_removeEnterFrameEventListener();
        }
        public function hideAnimation():void{
            targetAlpha = ProgressBasicUI.HIDE_TARGET_ALPHA;
            asset.play();
            asset_addEnterFrameEventListener();
            dispatchProgressUIEvent(ProgressUIEvent.PROGRESS_ANIMATION_START);
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (!Boolean(eventsMap)){
                eventsMap = new EventsMap();
            };
            var _local6:EventsMapItem = new EventsMapItem(_arg1, _arg2, _arg3);
            eventsMap.addEventsMapItem(_local6);
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        override public function get height():Number{
            return (asset.background.height);
        }
        public function releaseMemory():void{
            if (Boolean(asset)){
                removeChild(asset);
            };
            asset_removeEnterFrameEventListener();
            asset = null;
            removeEventListenersAll();
        }
        public function removeEventListenersAll():void{
            var _local1:EventsMapItem;
            var _local2:Array;
            var _local3:uint;
            var _local4:uint;
            if (Boolean(eventsMap)){
                _local2 = eventsMap.retrieveEventsMapItemsAll();
                if (Boolean(_local2)){
                    _local3 = _local2.length;
                    _local4 = 0;
                    while (_local4 < _local3) {
                        _local1 = (_local2[_local4] as EventsMapItem);
                        removeEventListener(_local1.type, _local1.listener, _local1.useCapture);
                        _local4++;
                    };
                };
            };
        }
        private function dispatchProgressUIEvent(_arg1:String):void{
            var _local2:ProgressUIEvent = new ProgressUIEvent(_arg1, ((targetAlpha)===ProgressBasicUI.SHOW_TARGET_ALPHA) ? ProgressUIEvent.ANIMATION_TYPE_SHOW : ProgressUIEvent.ANIMATION_TYPE_HIDE, false, false);
            dispatchEvent(_local2);
        }

    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent {
    import flash.display.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets.*;

    public class BackgroundUI extends Sprite implements IReleaseMemory {

        private var background:Bitmap;

        public function BackgroundUI(){
            switch (WebPlayerCoreProperties.clientType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER:
                    switch (WebPlayerCoreProperties.playerType){
                        case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                        case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                            background = new BackgroundUI_BasicBG();
                            break;
                        case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                        case WebPlayerCoreProperties.PLAYER_TYPE_PV:
                            background = new BackgroundUI_MiniBG();
                            break;
                        case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                            background = new BackgroundUI_BasicPromoBG();
                            break;
                        default:
                            background = new BackgroundUI_MiniBG();
                    };
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_LAUNCHER:
                    background = new BackgroundUI_BasicBG();
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_EXPORTER:
                    background = new BackgroundUI_ExporterBG();
                    break;
                default:
                    background = new BackgroundUI_BasicBG();
            };
            addChild(background);
        }
        public function releaseMemory():void{
            if (Boolean(background)){
                removeChild(background);
                if (Boolean(background.bitmapData)){
                    background.bitmapData.dispose();
                    background.bitmapData = null;
                };
                background = null;
            };
        }

    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class ExternalPostInfoUI_MiniBG extends Bitmap {

        public function ExternalPostInfoUI_MiniBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public dynamic class ProgressBasicUI_ProgressBarAsset extends MovieClip {

        public var greenBar:MovieClip;
        public var background:MovieClip;

    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class BackgroundUI_BasicPromoBG extends Bitmap {

        public function BackgroundUI_BasicPromoBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class ExternalPostInfoUI_BasicPromoBG extends Bitmap {

        public function ExternalPostInfoUI_BasicPromoBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class ExternalPostInfoUI_BasicBG extends Bitmap {

        public function ExternalPostInfoUI_BasicBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class BackgroundUI_ExporterBG extends Bitmap {

        public function BackgroundUI_ExporterBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class BackgroundUI_BasicBG extends Bitmap {

        public function BackgroundUI_BasicBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class BackgroundUI_MiniBG extends Bitmap {

        public function BackgroundUI_MiniBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets {
    import flash.display.*;

    public class ExternalPostInfoUI_ExporterBG extends Bitmap {

        public function ExternalPostInfoUI_ExporterBG(_arg1:BitmapData=null, _arg2:String="auto", _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.interfaces {

    public interface IProgressUI {

        function showImmediately():void;
        function hideAnimation():void;
        function hideImmediately():void;
        function showAnimation():void;

    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class ProgressUIEvent extends Event {

        public static const PROGRESS_ANIMATION_START:String = "PROGRESSUIEVENT_PROGRESS_ANIMATION_START";
        public static const ANIMATION_TYPE_SHOW:String = "ANIMATION_TYPE_SHOW";
        public static const ANIMATION_TYPE_HIDE:String = "ANIMATION_TYPE_HIDE";
        public static const PROGRESS_ANIMATION_STOP:String = "PROGRESSUIEVENT_PROGRESS_ANIMATION_STOP";

        protected var _animationType:String;

        public function ProgressUIEvent(_arg1:String, _arg2:String, _arg3:Boolean=false, _arg4:Boolean=false){
            super(ProgressUIEvent.validateType(_arg1), _arg3, _arg4);
            _animationType = ProgressUIEvent.validateAnimationType(_arg2);
        }
        protected static function validateType(_arg1:String):String{
            switch (_arg1){
                case ProgressUIEvent.PROGRESS_ANIMATION_START:
                case ProgressUIEvent.PROGRESS_ANIMATION_STOP:
                    break;
                default:
                    throw (new Error("ProgressUIEvent : type is not valid."));
            };
            return (_arg1);
        }
        protected static function validateAnimationType(_arg1:String):String{
            switch (_arg1){
                case ProgressUIEvent.ANIMATION_TYPE_SHOW:
                case ProgressUIEvent.ANIMATION_TYPE_HIDE:
                    break;
                default:
                    throw (new Error("ProgressUIEvent : type is not valid."));
            };
            return (_arg1);
        }

        override public function toString():String{
            return (formatToString("ProgressUIEvent", "type", "bubbles", "cancelable", "animationType"));
        }
        public function get animationType():String{
            return (_animationType);
        }

    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent {
    import flash.events.*;
    import flash.display.*;
    import flash.net.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.core.interfaces.*;
    import com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent.assets.*;

    public class ExternalPostInfoUI extends Sprite implements IReleaseMemory {

        private var background:Bitmap;

        public function ExternalPostInfoUI(){
            var _local1:int;
            var _local2:int;
            super();
            mouseEnabled = true;
            buttonMode = true;
            useHandCursor = true;
            switch (WebPlayerCoreProperties.clientType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER:
                    switch (WebPlayerCoreProperties.playerType){
                        case WebPlayerCoreProperties.PLAYER_TYPE_NONE:
                        case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                            _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC;
                            _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC;
                            background = new ExternalPostInfoUI_BasicBG();
                            break;
                        case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                        case WebPlayerCoreProperties.PLAYER_TYPE_PV:
                            _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
                            _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
                            background = new ExternalPostInfoUI_MiniBG();
                            break;
                        case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                            _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO;
                            _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO;
                            background = new ExternalPostInfoUI_BasicPromoBG();
                            break;
                        default:
                            _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
                            _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
                            background = new ExternalPostInfoUI_MiniBG();
                    };
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_LAUNCHER:
                    _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
                    _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
                    background = new ExternalPostInfoUI_BasicBG();
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_EXPORTER:
                    _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_EXPORTER;
                    _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_EXPORTER;
                    background = new ExternalPostInfoUI_ExporterBG();
                    break;
                default:
                    _local1 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
                    _local2 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
                    background = new ExternalPostInfoUI_BasicBG();
            };
            graphics.beginFill(0, 0);
            graphics.drawRect(0, 0, _local1, _local2);
            graphics.endFill();
            addChild(background);
            addEventListener(MouseEvent.CLICK, handleMouseEvent, false, 0, false);
        }
        public function releaseMemory():void{
            graphics.clear();
            if (Boolean(background)){
                removeChild(background);
                if (Boolean(background.bitmapData)){
                    background.bitmapData.dispose();
                    background.bitmapData = null;
                };
                background = null;
            };
            removeEventListener(MouseEvent.CLICK, handleMouseEvent, false);
        }
        private function handleMouseEvent(_arg1:MouseEvent):void{
            var _local2:URLRequest;
            var _local3:String;
            switch (_arg1.type){
                case MouseEvent.CLICK:
                    _local3 = WebPlayerCoreProperties.musicServerAPIHost;
                    if (Boolean(_local3)){
                        _local3 = "music.naver.com";
                    };
                    _local2 = new URLRequest(("http://" + _local3));
                    navigateToURL(_local2, "_blank");
                    break;
                default:
                    throw (new Error(("ExternalPostInfoUI : " + "e.type is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayercore.patterns.mediator.viewcomponent 
﻿package com.nhn.application.modules.webplayercore {
    import com.nhn.nclicks.nclicksClasses.*;
    import flash.net.*;
    import flash.system.*;
    import com.nhn.application.ns.*;
    import flash.external.*;

    public class WebPlayerCoreProperties {

        public static const OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_TWITTER:String = "OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_TWITTER";
        public static const PLAYER_TYPE_BA:String = "BA";
        public static const HOST_ALPHA_PLAYER_SERVER:String = "alpha.player.music.naver.com";
        public static const CONNECTION_NAME_WEB_PLAYER_CONTAINER_POPUP:String = "_4E4D50436F6E7461696E6572506F7075704279446F75676C617339";
        public static const PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK:int = 0x0400;
        private static const NMP_FORM_OBJECT_ID:String = "NMP_FORM_OBJECT_ID";
        public static const HOST_LOCAL0_PLAYER_SERVER:String = "local0.player.music.naver.com";
        public static const SIZE_OF_WIDTH_ME2DAY_WRITING_POPUP_WINDOW:Number = 520;
        public static const SIZE_OF_HEIGHT_IMPORT_WINDOW:Number = 230;
        public static const PLAYER_TYPE_PREVIEW_DEFAULT:String = "PV";
        public static const PLAYER_TYPE_BP:String = "BP";
        public static const HOST_QA_PLAYER_SERVER:String = "qa.player.music.naver.com";
        public static const HOST_ALPHA_MUSIC_SERVER:String = "alpha.music.naver.com";
        public static const METHOD_NAME_LF_QM_DOWNLOAD:String = "LF_QM_DownLoad";
        public static const PARAMETER_VALUE_PLAY_NONE_TRACK:int = 0x0100;
        public static const CONNECTION_NAME_WEB_PLAYER_LAUNCHER_KEY:String = "launcherConnectionName";
        public static const TIMER_DELAY_DISPATCH_WPLU_EXTERNAL_DOMAIN:Number = 2000;
        private static const METHOD_NAME_OPEN_WINDOW_BY_POST_METHOD:String = "openWindowByPOSTMethod";
        public static const RSL_CORELIB:String = "corelib.swf";
        public static const WEB_PLAYER_POPUP_INTERCEPTION_MESSAGE:String = "팝업창이 차단 설정되어있습니다.\r\n팝업창 설정을 변경해주세요.";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_ME2DAY:String = "OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_ME2DAY";
        public static const METHOD_NAME_CONTAINER_OPENED:String = "containerOpened";
        public static const DELAY_OF_WAS_COMM_REQUEST_RETRIES:Number = 1000;
        public static const METHOD_NAME_LAUNCHER_LOADED:String = "nhn.NaverMusicServiceFlashObject.webPlayerLauncher_handleOnLoad";
        public static const PARAMETER_VALUE_PUSH_FRONT_TRACK:int = 2;
        public static const HOST_REAL_ADMIN_MUSIC_SERVER:String = "admin.music.naver.com";
        public static const RSL_WEBPLAYERERRORHANDLINGLIB:String = "webplayererrorhandlinglib.swf";
        public static const TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_DEFAULT:String = "네이버 뮤직 플레이어";
        public static const SIZE_OF_HEIGHT_EXPORT_TO_TWITTER_WINDOW:Number = 440;
        public static const HOST_DEV_MUSIC_SERVER:String = "dev.music.naver.com";
        public static const SIZE_OF_HEIGHT_WEB_PLAYER_EXPORTER:Number = 367;
        public static const METHOD_NAME_MUSIC_LOGIN:String = "musicLogin";
        public static const HOST_BETA_PLAYER_DEPRECATED_SERVER:String = "beta-player.naver.com";
        public static const PARAMETER_VALUE_PUSH_NONE_TRACK:int = 1;
        public static const HOST_LOCAL1_ADMIN_MUSIC_SERVER:String = "local1.admin.music.naver.com";
        public static const HOST_REAL_2010_SEARCH_SERVER:String = "2010.search.naver.com";
        public static const EXPORT_SERVICE_TYPE_BLOG:String = "B";
        public static const TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_PREFIX:String = (TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_DEFAULT + " :: ");
        public static const WEB_PLAYER_CONTEXT_MENU_NAVER_MUSIC_PLAYER_URL:String = "music.naver.com";
        public static const RSL_WEBPLAYERBASICLIB:String = "webplayerbasiclib.swf";
        public static const HOST_LOCAL2_MUSIC_SERVER:String = "local2.music.naver.com";
        public static const HOST_DEV_BLOG_SERVER:String = "dev.blog.naver.com";
        public static const HOST_LOCAL2_PLAYER_SERVER:String = "local2.player.music.naver.com";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_WRITE_ME2DAY_POST:String = "OUT_LINK_TYPE_NAVER_MUSIC_WRITE_ME2DAY_POST";
        public static const RSL_NHNLIB:String = "nhnlib.swf";
        public static const RSL_NHNCORELIB:String = "nhncorelib.swf";
        public static const METHOD_NAME_ADD_TRACK_IDS:String = "addTrackIDs";
        public static const TIMER_DELAY_DISPATCH_WPLU_DEFAULT:Number = 100;
        public static const SIZE_OF_HEIGHT_ME2DAY_WRITING_POPUP_WINDOW:Number = 470;
        public static const HOST_REAL_CAFE_SERVER:String = "cafe.naver.com";
        public static const HOST_DEV_PLAYER_SERVER:String = "dev.player.music.naver.com";
        public static const SIZE_OF_HEIGHT_MP3_DOWNLOAD_WINDOW:Number = 200;
        public static const HOST_REAL_SEARCH_SERVER:String = "search.naver.com";
        public static const REPEAT_ALL:int = 2;
        public static const PROGRESS_BASIC_UI_EASING_RATIO:Number = 0.4;
        public static const HOST_REAL_MUSIC_SERVER:String = "music.naver.com";
        public static const SIZE_OF_HEIGHT_EXPORT_WINDOW:Number = 465;
        public static const CONNECTION_NAME_WEB_PLAYER_LAUNCHER_BASE:String = "_4E4D504C61756E63686572426173654279446F75676C617339";
        public static const MAX_NUM_OF_WAS_COMM_REQUEST_RETRIES:int = 5;
        public static const TYPE_WEB_PLAYER_CONTAINER_POSTING:String = "POSTING";
        public static const SIZE_OF_WIDTH_EXPORT_TO_TWITTER_WINDOW:Number = 620;
        public static const SHUFFLE_NO:int = 1;
        public static const HOST_QA_ADMIN_MUSIC_SERVER:String = "qa.admin.music.naver.com";
        public static const HOST_ARTIST_RADIO_SERVER:String = "r.player.music.naver.com";
        public static const SIZE_OF_HEIGHT_WEB_PLAYER_BASIC:Number = 353;
        public static const BITRATE_TYPE_HIGH:String = "320";
        public static const NCLICKS_NMP_WEB_PLAYER_EXPORTER_ID:String = "NMP_web_player_exporter";
        public static const HOST_ALPHA_ADMIN_MUSIC_SERVER:String = "alpha.admin.music.naver.com";
        public static const METHOD_NAME_START_APPLICATION_CALLBACK:String = "startApplicationCallback";
        public static const HOST_DEFAULT_DEV_PLAYER_SERVER:String = "player.music.naver.com";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_ARTIST_INFO:String = "OUT_LINK_TYPE_NAVER_MUSIC_ARTIST_INFO";
        public static const FRAME_RATE_HIGH:Number = 60;
        public static const METHOD_NAME_CONTAINER_IS_READY:String = "containerIsReady";
        public static const PLAYER_TYPE_NONE:String = "NONE";
        public static const SIZE_OF_HEIGHT_HELP_WINDOW:Number = 600;
        public static const TYPE_WEB_PLAYER_STREAMING_CORE_MODULE:String = "STREAMING";
        public static const WEB_PLAYER_CONTEXT_MENU_NHN_CORP_URL:String = "www.nhncorp.com";
        public static const RSL_WEBPLAYERCORELIB:String = "webplayercorelib.swf";
        public static const SIZE_OF_WIDTH_LOGIN_WINDOW:Number = 400;
        public static const TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_SUFFIX:String = (" :: " + TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_DEFAULT);
        public static const HOST_REAL_ME2DAY_NET_WITHOUT_WWW_SERVER:String = "me2day.net";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_ALBUM_INFO:String = "OUT_LINK_TYPE_NAVER_MUSIC_ALBUM_INFO";
        public static const SIZE_OF_HEIGHT_LOGIN_WINDOW:Number = 267;
        public static const APP_NMPWEBPLAYERCONTAINER:String = "NMP_web_player_container.swf";
        public static const PARAMETER_NAME_OF_EXPORTER_P_COLOR:String = "pcolor";
        public static const BITRATE_TYPE_LOW:String = "192";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_150MP3:String = "OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_150MP3";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_IMPORT:String = "OUT_LINK_TYPE_NAVER_MUSIC_IMPORT";
        public static const HOST_LOCAL0_MUSIC_SERVER:String = "local0.music.naver.com";
        public static const HOST_STAGING_ADMIN_MUSIC_SERVER:String = "staging.admin.music.naver.com";
        public static const RSL_AS3DSLIB:String = "as3dslib.swf";
        public static const SIZE_OF_WIDTH_EXPORT_TO_FACEBOOK_WINDOW:Number = 620;
        public static const OUT_LINK_TYPE_NAVER_MUSIC_EXPORT:String = "OUT_LINK_TYPE_NAVER_MUSIC_EXPORT";
        public static const METHOD_NAME_STOP_PREVIEW_TRACK_ID:String = "stopPreviewTrackID";
        public static const HOST_REAL_PLAYER_SERVER:String = "player.music.naver.com";
        public static const METHOD_NAME_CONTAINER_CLOSED:String = "containerClosed";
        public static const TYPE_WEB_PLAYER_CONTAINER_PREVIEW:String = "PREVIEW";
        public static const RSL_WEBPLAYERMINILIB:String = "webplayerminilib.swf";
        public static const PLAYER_TYPE_POSTING_DEFAULT:String = "AL";
        public static const TIMER_DELAY_REQUEST_TOP_100:Number = 3600000;
        public static const REPEAT_ONE:int = 3;
        public static const END_POINT_PLAYER_SERVER_SWF_RESOURCE:String = "/flash/";
        public static const HOST_STAGE_PLAYER_SERVER:String = "stage.player.music.naver.com";
        public static const METHOD_NAME_GET_CURRENT_APPLICATION:String = "nhn.NaverMusicServiceFlashObject.getCurrentApplication";
        public static const WEB_PLAYER_CONTEXT_MENU_NHN_CORP:String = "NHN Corp.";
        public static const METHOD_NAME_PREVIEW_TRACK_ID:String = "previewTrackID";
        public static const COOKIE_NAME_OF_POPUP_TYPE_REPEAT:String = "ck_repeat";
        public static const MIN_VOLUME:Number = 0;
        public static const PLAYER_TYPE_PV:String = "PV";
        public static const HOST_REAL_ME2DAY_COM_WITH_WWW_SERVER:String = "www.me2day.com";
        public static const BITRATE_TYPE_DEFAULT:String = "320";
        public static const HOST_BETA_MUSIC_SERVER:String = "beta.music.naver.com";
        public static const HOST_STAGING_PLAYER_SERVER:String = "staging.player.music.naver.com";
        public static const ID_NMP_WEB_PLAYER_CONTAINER:String = "NMP_web_player_container";
        public static const APP_PLAYERPAGE:String = "player.nhn";
        public static const HOST_REAL_ME2DAY_NET_WITH_WWW_SERVER:String = "www.me2day.net";
        public static const HOST_LOCAL:String = "localhost";
        public static const END_POINT_MUSIC_SERVER_SWF_RESOURCE:String = "/flash/";
        public static const OUT_LINK_TYPE_NAVER:String = "OUT_LINK_TYPE_NAVER";
        public static const ID_NMP_WEB_PLAYER_EXPORTER:String = "NMP_web_player_exporter";
        public static const HOST_FLASHDEV_SERVER:String = "flashdev.naver.com";
        public static const FRAME_RATE_LOW:Number = 30;
        public static const TIMER_DELAY_LOCAL_CONNECTION:Number = 200;
        public static const HOST_BILLING_STAGING_PLAYER_SERVER:String = "bstage.player.music.naver.com";
        public static const TYPE_WEB_PLAYER_CONTAINER:String = "CONTAINER";
        public static const METHOD_NAME_BLOG_CAFE_BGM_PLAYER_STOP:String = "music.stop";
        public static const FRAME_RATE_LOWEST:Number = 12;
        public static const PARAMETER_VALUE_PLAY_OLD_FIRST_TRACK:int = 0x0200;
        public static const RSL_WEBPLAYERLAUNCHERLIB:String = "webplayerlauncherlib.swf";
        public static const HOST_LOCAL0_ADMIN_MUSIC_SERVER:String = "local0.admin.music.naver.com";
        public static const HOST_BILLING_DEV_ADMIN_MUSIC_SERVER:String = "bdev.admin.music.naver.com";
        public static const SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO:Number = 416;
        public static const ID_NMP_WEB_PLAYER_LAUNCHER:String = "NMP_web_player_launcher";
        public static const HOST_BETA_PLAYER_SERVER:String = "beta.player.music.naver.com";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_LOGIN:String = "OUT_LINK_TYPE_NAVER_MUSIC_LOGIN";
        public static const CONNECTION_NAME_WEB_PLAYER_CONTAINER_EMBED_BASE:String = "_4E4D50436F6E7461696E6572456D626564426173654279446F75676C617339";
        public static const METHOD_NAME_MUSIC_LOGOUT:String = "musicLogout";
        public static const HOST_LOCAL1_PLAYER_SERVER:String = "local1.player.music.naver.com";
        public static const COOKIE_NAME_OF_POPUP_TYPE_SKIN:String = "ck_skin";
        public static const METHOD_NAME_GET_COOKIE:String = "getCookie";
        public static const METHOD_NAME_OPEN_PLAYER:String = "nhn.NaverMusicServiceFlashObject.openPlayer";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_40MP3:String = "OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_40MP3";
        public static const HOST_STAGE_MUSIC_SERVER:String = "stage.music.naver.com";
        public static const MAX_VOLUME:Number = 1;
        public static const HOST_REAL_MUSICSEARCH_SERVER:String = "musicsearch.naver.com";
        public static const NCLICKS_INTERNAL:Boolean = true;
        public static const SIZE_OF_WIDTH_WEB_PLAYER_BASIC:Number = 500;
        public static const SIZE_OF_WIDTH_IMPORT_WINDOW:Number = 400;
        public static const RSL_PUREMVCPIPELIB:String = "puremvcpipelib.swf";
        public static const EXPORT_SERVICE_TYPE_CAFE:String = "C";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_EVENT:String = "OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_EVENT";
        public static const RSL_WEBPLAYERPREVIEWLIB:String = "webplayerpreviewlib.swf";
        public static const HOST_STAGING_MUSIC_SERVER:String = "staging.music.naver.com";
        public static const DELAY_OF_FMS_COMM_REQUEST_RETRIES:Number = 1000;
        public static const APP_NMPWEBPLAYEREXPORTER:String = "NMP_web_player_exporter.swf";
        public static const SIZE_OF_WIDTH_HELP_WINDOW:Number = 970;
        public static const OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_FACEBOOK:String = "OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_FACEBOOK";
        public static const RSL_WEBPLAYEREXPORTERLIB:String = "webplayerexporterlib.swf";
        public static const SKIN_TYPE_COLOR_C03:String = "C03";
        public static const SKIN_TYPE_COLOR_C04:String = "C04";
        public static const SKIN_TYPE_COLOR_C05:String = "C05";
        public static const SKIN_TYPE_COLOR_C06:String = "C06";
        public static const SKIN_TYPE_COLOR_C07:String = "C07";
        public static const SKIN_TYPE_COLOR_C01:String = "C01";
        public static const SKIN_TYPE_COLOR_C02:String = "C02";
        public static const HOST_DEV_ADMIN_MUSIC_SERVER:String = "dev.admin.music.naver.com";
        public static const HOST_ALPHA_PLAYER_DEPRECATED_SERVER:String = "alpha-player.naver.com";
        public static const SKIN_TYPE_COLOR_C08:String = "C08";
        public static const SKIN_TYPE_COLOR_C09:String = "C09";
        public static const HOST_BILLING_STAGING_ADMIN_MUSIC_SERVER:String = "bstage.admin.music.naver.com";
        public static const HOST_BILLING_DEV_PLAYER_SERVER:String = "bdev.player.music.naver.com";
        public static const APP_NMPWEBPLAYERLAUNCHER:String = "NMP_web_player_launcher.swf";
        public static const SKIN_TYPE_COLOR_C10:String = "C10";
        public static const RSL_WEBPLAYERCONTAINERLIB:String = "webplayercontainerlib.swf";
        public static const PARAMETER_NAME_OF_POSTING_TYPE_P_TYPE:String = "ptype";
        public static const HOST_SUB_NAVER_SERVER:String = "*.naver.com";
        public static const SKIN_TYPE_COLOR_DEFAULT:String = "C09";
        public static const HOST_BETA_ADMIN_MUSIC_SERVER:String = "beta.admin.music.naver.com";
        public static const HOST_LOCAL2_ADMIN_MUSIC_SERVER:String = "local2.admin.music.naver.com";
        public static const RSL_WEBPLAYERCOMMUNICATIONLIB:String = "webplayercommunicationlib.swf";
        public static const SIZE_OF_WIDTH_WEB_PLAYER_EXPORTER:Number = 500;
        public static const HOST_REAL_ME2DAY_COM_WITHOUT_WWW_SERVER:String = "me2day.com";
        public static const REPEAT_NO:int = 1;
        public static const HOST_BILLING_DEV_MUSIC_SERVER:String = "bdev.music.naver.com";
        public static const PARAMETER_VALUE_PUSH_BACK_TRACK:int = 4;
        public static const HOST_BILLING_STAGING_MUSIC_SERVER:String = "bstage.music.naver.com/";
        public static const HOST_LOCAL1_MUSIC_SERVER:String = "local1.music.naver.com";
        public static const HOST_UNDEFINED_SERVER:String = "undefined server";
        public static const MAX_PLAY_TIME_OF_PREVIEW:Number = 60;
        public static const OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_UI:String = "OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_UI";
        public static const DEFAULT_VOLUME:Number = 0.61;
        public static const MAX_NUM_OF_LYRICS_IN_PROXY:int = 5;
        public static const WEB_PLAYER_VER:String = "5.0.2";
        public static const HOST_LOCAL_ME2DAY_COM_SERVER:String = "local.me2day.com";
        public static const COOKIE_NAME_OF_POPUP_TYPE_SHUFFLE:String = "ck_shuffle";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_CHECK_OUT_EVENT:String = "OUT_LINK_TYPE_NAVER_MUSIC_CHECK_OUT_EVENT";
        public static const SHUFFLE_ALL:int = 2;
        public static const HOST_REAL_BLOG_SERVER:String = "blog.naver.com";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE_40MP3:String = "OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE_40MP3";
        public static const PARAMETER_NAME_OF_STREAMING_CORE_MODULE:String = "streamingonly";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE:String = "OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE";
        public static const MAX_NUM_OF_FMS_COMM_REQUEST_RETRIES:int = 5;
        public static const METHOD_NAME_COMPLETE_APPLICATION_CALLBACK:String = "nhn.NaverMusicServiceFlashObject.completeApplicationCallback";
        public static const SIZE_OF_WIDTH_MP3_DOWNLOAD_WINDOW:Number = 300;
        public static const COOKIE_NAME_OF_POPUP_TYPE_VOLUME:String = "ck_volume";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BUY_MP3:String = "OUT_LINK_TYPE_NAVER_MUSIC_BUY_MP3";
        public static const SIZE_OF_HEIGHT_EXPORT_TO_FACEBOOK_WINDOW:Number = 440;
        public static const LCS_TAG_MUSIC_PLAY_LIST:String = "music_playlist";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_CHALLENGE:String = "OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_CHALLENGE";
        public static const PLAYER_TYPE_POPUP_DEFAULT:String = "NONE";
        public static const TYPE_WEB_PLAYER_CONTAINER_POPUP:String = "POPUP";
        public static const PARAMETER_NAME_OF_EXPORTER_TRACK_ID:String = "trackid";
        public static const METHOD_NAME_LOGOUT:String = "logout";
        public static const METHOD_NAME_LISTEN_STOP:String = "listen_Stop";
        public static const TYPE_WEB_PLAYER_EXPORTER:String = "EXPORTER";
        public static const HOST_LOCAL_ME2DAY_NET_SERVER:String = "local.me2day.net";
        public static const NCLICKS_NMP_WEB_PLAYER_CONTAINER_ID:String = "NMP_web_player_container";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_HELP:String = "OUT_LINK_TYPE_NAVER_MUSIC_HELP";
        public static const RSL_WEBPLAYERPROMOTIONLIB:String = "webplayerpromotionlib.swf";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BOOKMARK_SONG:String = "OUT_LINK_TYPE_NAVER_MUSIC_BOOKMARK_SONG";
        public static const HOST_STAGE_ADMIN_MUSIC_SERVER:String = "stage.admin.music.naver.com";
        public static const WEB_PLAYER_CONTEXT_MENU_NAVER_MUSIC_PLAYER:String = ("네이버 뮤직 플레이어 Ver. " + WEB_PLAYER_VER);
        public static const COOKIE_NAME_OF_POPUP_TYPE_BITRATE:String = "ck_bitrate";
        public static const NCLICKS_EXTERNAL:Boolean = false;
        public static const HOST_REAL_MUSIC_SEARCH_SERVER:String = "music.search.naver.com";
        public static const SIZE_OF_WIDTH_EXPORT_WINDOW:Number = 510;
        public static const NCLICKS_NSC:String = "music.player";
        public static const TIMER_DELAY_DISPATCH_WPLU_OPTION:Number = 50;
        public static const TYPE_WEB_PLAYER_LAUNCHER:String = "LAUNCHER";
        public static const LCS_TAG_MUSIC_LYRIC:String = "music_lyric";
        public static const METHOD_NAME_LCS_DO:String = "lcs_do";
        public static const OUT_LINK_TYPE_NAVER_MUSIC:String = "OUT_LINK_TYPE_NAVER_MUSIC";
        public static const COOKIE_NAME_OF_POPUP_TYPE_PLAY_LIST:String = "ck_playList";
        public static const METHOD_NAME_LAUNCH_NAVER_MUSIC_PLAYER:String = "launchNaverMusicPlayer";
        public static const HOST_ALPHA_CAFE_SERVER:String = "alpha.cafe.naver.com";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET:String = "OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET";
        public static const HOST_DEFAULT_DEV_MUSIC_SERVER:String = "music.naver.com";
        public static const OUT_LINK_TYPE_NAVER_MUSIC_AUTH_BLOG:String = "OUT_LINK_TYPE_NAVER_MUSIC_AUTH_BLOG";
        public static const LCS_TAG_MUSIC_TOP_100:String = "music_top100";
        public static const SIZE_OF_WIDTH_WEB_PLAYER_MINI:Number = 230;
        public static const NCLICKS_SERVICE_LOCATION:String = NClicksDomain.NAVER;
        public static const SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO:Number = 500;
        public static const METHOD_NAME_SET_COOKIE:String = "setCookie";
        public static const PLAYER_TYPE_AL:String = "AL";
        public static const PARAMETER_NAME_OF_POSTING_TYPE_MY_LIST_SEQ:String = "mylist_seq";
        public static const HOST_QA_MUSIC_SERVER:String = "qa.music.naver.com";
        public static const RSL_PUREMVCLIB:String = "puremvclib.swf";
        public static const MAX_NUM_OF_API_REQUESTS_IN_WORKING:int = 1;
        public static const PARAMETER_NAME_OF_EXPORTER_SITE:String = "site";
        public static const SIZE_OF_HEIGHT_WEB_PLAYER_MINI:Number = 240;

        private static var initializedNMPFormObject:Boolean = false;
        private static var _postingListSequence:String = null;
        private static var _exportCommaSeparatedTrackIDs:String = null;
        private static var _containerType:String = null;
        private static var _clientHost:String = null;
        public static var IS_ONLY_FOR_STREAMING:Boolean = false;
        private static var _playerServerAPIHost:String = null;
        private static var _bitrate:String = null;
        private static var _musicServerAPIHost:String = null;
        private static var _exportSite:String = null;
        private static var _clientType:String = null;
        private static var _playerType:String = null;
        private static var _exportPColor:String = null;

        nhn_webplayer_ns var __dummy__:String;

        public static function closeWindow():void{
            ExternalInterface.call(((((("function()" + "{") + "\twindow.open( 'about:blank', '_self' );") + "\topener = self;") + "\tself.close();") + "}"));
        }
        public static function get clientHost():String{
            var clientDomain:* = null;
            var host:* = null;
            if (!Boolean(_clientHost)){
                if (Boolean(clientType)){
                    clientDomain = new LocalConnection().domain;
                    host = null;
                    if ((((((((((((((((clientDomain.indexOf("naver.com") >= 0)) || ((clientDomain.indexOf("naver.co.kr") >= 0)))) || ((clientDomain.indexOf("naver.net") >= 0)))) || ((clientDomain.indexOf("hangame.com") >= 0)))) || ((clientDomain.indexOf("hangame.co.kr") >= 0)))) || ((clientDomain.indexOf("hangame.net") >= 0)))) || ((clientDomain.indexOf("me2day.net") >= 0)))) || ((clientDomain.indexOf("me2day.com") >= 0)))){
                        try {
                            host = ExternalInterface.call("function() { return document.location.host; }");
                        } catch(e:Error) {
                            host = null;
                        };
                        switch (clientType){
                            case TYPE_WEB_PLAYER_LAUNCHER:
                                switch (host){
                                    case HOST_BILLING_DEV_ADMIN_MUSIC_SERVER:
                                    case HOST_BILLING_DEV_MUSIC_SERVER:
                                    case HOST_BILLING_STAGING_ADMIN_MUSIC_SERVER:
                                    case HOST_BILLING_STAGING_MUSIC_SERVER:
                                    case HOST_LOCAL0_MUSIC_SERVER:
                                    case HOST_LOCAL1_MUSIC_SERVER:
                                    case HOST_LOCAL2_MUSIC_SERVER:
                                    case HOST_LOCAL0_ADMIN_MUSIC_SERVER:
                                    case HOST_LOCAL1_ADMIN_MUSIC_SERVER:
                                    case HOST_LOCAL2_ADMIN_MUSIC_SERVER:
                                    case HOST_ALPHA_MUSIC_SERVER:
                                    case HOST_BETA_MUSIC_SERVER:
                                    case HOST_STAGE_MUSIC_SERVER:
                                    case HOST_ALPHA_ADMIN_MUSIC_SERVER:
                                    case HOST_BETA_ADMIN_MUSIC_SERVER:
                                    case HOST_STAGE_ADMIN_MUSIC_SERVER:
                                    case HOST_DEV_MUSIC_SERVER:
                                    case HOST_QA_MUSIC_SERVER:
                                    case HOST_STAGING_MUSIC_SERVER:
                                    case HOST_DEV_ADMIN_MUSIC_SERVER:
                                    case HOST_QA_ADMIN_MUSIC_SERVER:
                                    case HOST_STAGING_ADMIN_MUSIC_SERVER:
                                    case HOST_REAL_MUSIC_SERVER:
                                    case HOST_REAL_ADMIN_MUSIC_SERVER:
                                        _clientHost = host;
                                        break;
                                    default:
                                        switch (host){
                                            case HOST_LOCAL0_PLAYER_SERVER:
                                            case HOST_LOCAL1_PLAYER_SERVER:
                                            case HOST_LOCAL2_PLAYER_SERVER:
                                            case HOST_ALPHA_PLAYER_SERVER:
                                            case HOST_BETA_PLAYER_SERVER:
                                            case HOST_STAGE_PLAYER_SERVER:
                                            case HOST_DEV_PLAYER_SERVER:
                                            case HOST_QA_PLAYER_SERVER:
                                            case HOST_STAGING_PLAYER_SERVER:
                                            case HOST_REAL_PLAYER_SERVER:
                                                throw (new Error(("WebPlayerCoreProperties : " + "host is not valid.")));
                                        };
                                };
                                break;
                            case TYPE_WEB_PLAYER_CONTAINER:
                            case TYPE_WEB_PLAYER_EXPORTER:
                                switch (host){
                                    case HOST_BILLING_DEV_PLAYER_SERVER:
                                    case HOST_BILLING_STAGING_PLAYER_SERVER:
                                    case HOST_ARTIST_RADIO_SERVER:
                                    case HOST_LOCAL0_PLAYER_SERVER:
                                    case HOST_LOCAL1_PLAYER_SERVER:
                                    case HOST_LOCAL2_PLAYER_SERVER:
                                    case HOST_ALPHA_PLAYER_SERVER:
                                    case HOST_BETA_PLAYER_SERVER:
                                    case HOST_STAGE_PLAYER_SERVER:
                                    case HOST_DEV_PLAYER_SERVER:
                                    case HOST_QA_PLAYER_SERVER:
                                    case HOST_STAGING_PLAYER_SERVER:
                                    case HOST_REAL_PLAYER_SERVER:
                                        _clientHost = host;
                                        break;
                                    default:
                                        switch (host){
                                            case HOST_LOCAL0_MUSIC_SERVER:
                                            case HOST_LOCAL1_MUSIC_SERVER:
                                            case HOST_LOCAL2_MUSIC_SERVER:
                                            case HOST_LOCAL0_ADMIN_MUSIC_SERVER:
                                            case HOST_LOCAL1_ADMIN_MUSIC_SERVER:
                                            case HOST_LOCAL2_ADMIN_MUSIC_SERVER:
                                            case HOST_ALPHA_MUSIC_SERVER:
                                            case HOST_BETA_MUSIC_SERVER:
                                            case HOST_STAGE_MUSIC_SERVER:
                                            case HOST_ALPHA_ADMIN_MUSIC_SERVER:
                                            case HOST_BETA_ADMIN_MUSIC_SERVER:
                                            case HOST_STAGE_ADMIN_MUSIC_SERVER:
                                            case HOST_DEV_MUSIC_SERVER:
                                            case HOST_QA_MUSIC_SERVER:
                                            case HOST_STAGING_MUSIC_SERVER:
                                            case HOST_DEV_ADMIN_MUSIC_SERVER:
                                            case HOST_QA_ADMIN_MUSIC_SERVER:
                                            case HOST_STAGING_ADMIN_MUSIC_SERVER:
                                            case HOST_REAL_MUSIC_SERVER:
                                            case HOST_REAL_ADMIN_MUSIC_SERVER:
                                                throw (new Error(("WebPlayerCoreProperties : " + "host is not valid.")));
                                        };
                                };
                                break;
                            default:
                                throw (new Error(("WebPlayerCoreProperties : " + "clientType is not valid.")));
                        };
                        if (!Boolean(_clientHost)){
                            if (Boolean(host)){
                                if ((((((((((((((((host.indexOf("naver.com") >= 0)) || ((host.indexOf("naver.co.kr") >= 0)))) || ((host.indexOf("naver.net") >= 0)))) || ((host.indexOf("hangame.com") >= 0)))) || ((host.indexOf("hangame.co.kr") >= 0)))) || ((host.indexOf("hangame.net") >= 0)))) || ((host.indexOf("me2day.net") >= 0)))) || ((host.indexOf("me2day.com") >= 0)))){
                                    _clientHost = HOST_SUB_NAVER_SERVER;
                                } else {
                                    _clientHost = HOST_UNDEFINED_SERVER;
                                };
                            } else {
                                _clientHost = HOST_UNDEFINED_SERVER;
                            };
                        };
                    } else {
                        if (clientDomain === "localhost"){
                            _clientHost = HOST_UNDEFINED_SERVER;
                        };
                    };
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "clientType does not initialized.")));
                };
            };
            return (_clientHost);
        }
        private static function setPlayerAndMusicServerAPIHost():void{
            var host:* = null;
            var clientDomain:* = null;
            if (((!(Boolean(_musicServerAPIHost))) || (!(Boolean(_playerServerAPIHost))))){
                if (((!((Capabilities.playerType === "ActiveX"))) && (!((Capabilities.playerType === "PlugIn"))))){
                    return;
                };
                if (Boolean(clientHost)){
                    clientDomain = new LocalConnection().domain;
                    switch (clientHost){
                        case HOST_LOCAL0_MUSIC_SERVER:
                        case HOST_LOCAL1_MUSIC_SERVER:
                        case HOST_LOCAL2_MUSIC_SERVER:
                        case HOST_LOCAL0_ADMIN_MUSIC_SERVER:
                        case HOST_LOCAL1_ADMIN_MUSIC_SERVER:
                        case HOST_LOCAL2_ADMIN_MUSIC_SERVER:
                        case HOST_ALPHA_MUSIC_SERVER:
                        case HOST_BETA_MUSIC_SERVER:
                        case HOST_STAGE_MUSIC_SERVER:
                        case HOST_ALPHA_ADMIN_MUSIC_SERVER:
                        case HOST_BETA_ADMIN_MUSIC_SERVER:
                        case HOST_STAGE_ADMIN_MUSIC_SERVER:
                        case HOST_DEV_MUSIC_SERVER:
                        case HOST_QA_MUSIC_SERVER:
                        case HOST_STAGING_MUSIC_SERVER:
                        case HOST_DEV_ADMIN_MUSIC_SERVER:
                        case HOST_QA_ADMIN_MUSIC_SERVER:
                        case HOST_STAGING_ADMIN_MUSIC_SERVER:
                        case HOST_REAL_MUSIC_SERVER:
                        case HOST_REAL_ADMIN_MUSIC_SERVER:
                        case HOST_LOCAL0_PLAYER_SERVER:
                        case HOST_LOCAL1_PLAYER_SERVER:
                        case HOST_LOCAL2_PLAYER_SERVER:
                        case HOST_ALPHA_PLAYER_SERVER:
                        case HOST_BETA_PLAYER_SERVER:
                        case HOST_STAGE_PLAYER_SERVER:
                        case HOST_DEV_PLAYER_SERVER:
                        case HOST_QA_PLAYER_SERVER:
                        case HOST_STAGING_PLAYER_SERVER:
                        case HOST_REAL_PLAYER_SERVER:
                        case HOST_SUB_NAVER_SERVER:
                        case HOST_ARTIST_RADIO_SERVER:
                        case HOST_BILLING_DEV_PLAYER_SERVER:
                        case HOST_BILLING_DEV_ADMIN_MUSIC_SERVER:
                        case HOST_BILLING_DEV_MUSIC_SERVER:
                        case HOST_BILLING_STAGING_PLAYER_SERVER:
                        case HOST_BILLING_STAGING_ADMIN_MUSIC_SERVER:
                        case HOST_BILLING_STAGING_MUSIC_SERVER:
                        case HOST_UNDEFINED_SERVER:
                            switch (clientDomain){
                                case HOST_LOCAL0_MUSIC_SERVER:
                                case HOST_LOCAL0_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_LOCAL0_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_LOCAL0_PLAYER_SERVER;
                                    break;
                                case HOST_LOCAL1_MUSIC_SERVER:
                                case HOST_LOCAL1_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_LOCAL1_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_LOCAL1_PLAYER_SERVER;
                                    break;
                                case HOST_LOCAL2_MUSIC_SERVER:
                                case HOST_LOCAL2_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_LOCAL2_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_LOCAL2_PLAYER_SERVER;
                                    break;
                                case HOST_ALPHA_MUSIC_SERVER:
                                case HOST_ALPHA_PLAYER_SERVER:
                                case HOST_ALPHA_PLAYER_DEPRECATED_SERVER:
                                    _musicServerAPIHost = HOST_ALPHA_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_ALPHA_PLAYER_SERVER;
                                    break;
                                case HOST_BETA_MUSIC_SERVER:
                                case HOST_BETA_PLAYER_SERVER:
                                case HOST_BETA_PLAYER_DEPRECATED_SERVER:
                                    _musicServerAPIHost = HOST_BETA_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_BETA_PLAYER_SERVER;
                                    break;
                                case HOST_STAGE_MUSIC_SERVER:
                                case HOST_STAGE_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_STAGE_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_STAGE_PLAYER_SERVER;
                                    break;
                                case HOST_DEV_MUSIC_SERVER:
                                case HOST_DEV_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_DEV_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_DEV_PLAYER_SERVER;
                                    break;
                                case HOST_QA_MUSIC_SERVER:
                                case HOST_QA_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_QA_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_QA_PLAYER_SERVER;
                                    break;
                                case HOST_STAGING_MUSIC_SERVER:
                                case HOST_STAGING_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_STAGING_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_STAGING_PLAYER_SERVER;
                                    break;
                                case HOST_REAL_MUSIC_SERVER:
                                case HOST_REAL_PLAYER_SERVER:
                                    _musicServerAPIHost = HOST_REAL_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_REAL_PLAYER_SERVER;
                                    break;
                                case HOST_LOCAL0_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_LOCAL0_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_LOCAL0_PLAYER_SERVER;
                                    break;
                                case HOST_LOCAL1_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_LOCAL1_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_LOCAL1_PLAYER_SERVER;
                                    break;
                                case HOST_LOCAL2_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_LOCAL2_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_LOCAL2_PLAYER_SERVER;
                                    break;
                                case HOST_ALPHA_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_ALPHA_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_ALPHA_PLAYER_SERVER;
                                    break;
                                case HOST_BETA_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_BETA_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_BETA_PLAYER_SERVER;
                                    break;
                                case HOST_STAGE_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_STAGE_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_STAGE_PLAYER_SERVER;
                                    break;
                                case HOST_DEV_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_DEV_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_DEV_PLAYER_SERVER;
                                    break;
                                case HOST_QA_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_QA_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_QA_PLAYER_SERVER;
                                    break;
                                case HOST_STAGING_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_STAGING_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_STAGING_PLAYER_SERVER;
                                    break;
                                case HOST_REAL_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_REAL_ADMIN_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_REAL_PLAYER_SERVER;
                                    break;
                                case HOST_BILLING_DEV_PLAYER_SERVER:
                                case HOST_BILLING_DEV_MUSIC_SERVER:
                                case HOST_BILLING_DEV_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_BILLING_DEV_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_BILLING_DEV_PLAYER_SERVER;
                                    break;
                                case HOST_BILLING_STAGING_PLAYER_SERVER:
                                case HOST_BILLING_STAGING_MUSIC_SERVER:
                                case HOST_BILLING_STAGING_ADMIN_MUSIC_SERVER:
                                    _musicServerAPIHost = HOST_BILLING_STAGING_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_BILLING_STAGING_PLAYER_SERVER;
                                    break;
                                case HOST_ARTIST_RADIO_SERVER:
                                    _musicServerAPIHost = HOST_REAL_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_REAL_PLAYER_SERVER;
                                    break;
                                default:
                                    try {
                                        host = ExternalInterface.call("function() { return document.location.host; }");
                                    } catch(e:Error) {
                                    };
                                    _musicServerAPIHost = HOST_DEFAULT_DEV_MUSIC_SERVER;
                                    _playerServerAPIHost = HOST_DEFAULT_DEV_PLAYER_SERVER;
                                    switch (host){
                                        case HOST_REAL_SEARCH_SERVER:
                                        case HOST_REAL_MUSIC_SEARCH_SERVER:
                                        case HOST_REAL_MUSICSEARCH_SERVER:
                                        case HOST_REAL_2010_SEARCH_SERVER:
                                        case HOST_LOCAL_ME2DAY_NET_SERVER:
                                        case HOST_REAL_ME2DAY_NET_WITH_WWW_SERVER:
                                        case HOST_REAL_ME2DAY_NET_WITHOUT_WWW_SERVER:
                                        case HOST_LOCAL_ME2DAY_COM_SERVER:
                                        case HOST_REAL_ME2DAY_COM_WITH_WWW_SERVER:
                                        case HOST_REAL_ME2DAY_COM_WITHOUT_WWW_SERVER:
                                            _musicServerAPIHost = HOST_REAL_MUSIC_SERVER;
                                            _playerServerAPIHost = HOST_REAL_PLAYER_SERVER;
                                            break;
                                    };
                            };
                            break;
                        case HOST_LOCAL:
                            break;
                    };
                };
                //unresolved jump
            };
        }
        public static function get qualifiedExternalDomain():Boolean{
            var host:* = null;
            var value:* = false;
            if (clientHost == HOST_SUB_NAVER_SERVER){
                host = null;
                try {
                    host = ExternalInterface.call("function() { return document.location.host; }");
                } catch(e:Error) {
                    host = null;
                };
                if (Boolean(host)){
                    if (host.indexOf("naver.com") < 0){
                        value = true;
                    };
                } else {
                    throw (new Error("WebPlayerCoreProperties : host is not valid"));
                };
            };
            return (value);
        }
        nhn_webplayer_ns static function readRepeatFromCookie():int{
            var cookieDirty:* = false;
            var savedRepeat:* = -1;
            try {
                savedRepeat = int(ExternalInterface.call(METHOD_NAME_GET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_REPEAT));
            } catch(e:Error) {
                if (realEnvironment){
                    savedRepeat = -1;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
            switch (savedRepeat){
                case REPEAT_NO:
                case REPEAT_ALL:
                case REPEAT_ONE:
                    break;
                default:
                    cookieDirty = true;
            };
            if (cookieDirty){
                savedRepeat = REPEAT_NO;
                nhn_webplayer_ns::writeRepeatToCookie(savedRepeat);
            };
            return (savedRepeat);
        }
        public static function validateCommaSeparatedTrackIDs(_arg1:String):Boolean{
            var _local2:Boolean;
            if (Boolean(_arg1)){
                _local2 = !(Boolean(_arg1.replace(/[\d,]/g, "").length));
            };
            return (_local2);
        }
        public static function get playerServerAPIHost():String{
            if (!Boolean(_playerServerAPIHost)){
                setPlayerAndMusicServerAPIHost();
            };
            return (_playerServerAPIHost);
        }
        public static function get exportCommaSeparatedTrackIDs():String{
            return (_exportCommaSeparatedTrackIDs);
        }
        nhn_webplayer_ns static function writeShuffleToCookie(_arg1:int):void{
            var shuffle:* = _arg1;
            switch (shuffle){
                case SHUFFLE_NO:
                case SHUFFLE_ALL:
                    break;
                default:
                    if (realEnvironment){
                        shuffle = SHUFFLE_NO;
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "shuffle is not valid.")));
                    };
            };
            try {
                ExternalInterface.call(METHOD_NAME_SET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_SHUFFLE, String(shuffle));
            } catch(e:Error) {
                if (!realEnvironment){
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
        }
        public static function get exportSite():String{
            return (_exportSite);
        }
        public static function openWindowByPOSTMethod(_arg1:String, _arg2:Array, _arg3:String, _arg4:String):void{
            throw (new Error(("WebPlayerCoreProperties : " + "openWindowByPOSTMethod is not available yet.")));
        }
        nhn_webplayer_ns static function writeRepeatToCookie(_arg1:int):void{
            var repeat:* = _arg1;
            switch (repeat){
                case REPEAT_NO:
                case REPEAT_ALL:
                case REPEAT_ONE:
                    break;
                default:
                    if (realEnvironment){
                        repeat = REPEAT_NO;
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "repeat is not valid.")));
                    };
            };
            try {
                ExternalInterface.call(METHOD_NAME_SET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_REPEAT, String(repeat));
            } catch(e:Error) {
                if (!realEnvironment){
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
        }
        public static function validateBitrate(_arg1:String):Boolean{
            var _local2:Boolean;
            switch (_arg1){
                case BITRATE_TYPE_HIGH:
                case BITRATE_TYPE_LOW:
                    break;
                default:
                    _local2 = false;
            };
            return (_local2);
        }
        public static function validateTrackIDArrayAndReturnToArray(_arg1:Array):Array{
            var _local2:Array;
            var _local3:int;
            var _local4:int;
            if (!Boolean(_arg1)){
                return (null);
            };
            _local2 = [];
            _local4 = _arg1.length;
            _local3 = 0;
            while (_local3 < _local4) {
                if (validateTrackID(_arg1[_local3])){
                    _local2.push(_arg1[_local3]);
                };
                _local3++;
            };
            if (_local2.length <= 0){
                _local2 = null;
            };
            return (_local2);
        }
        nhn_webplayer_ns static function writeBitrateToCookie(_arg1:String):void{
            var bitrate:* = _arg1;
            if (!validateBitrate(bitrate)){
                if (realEnvironment){
                    bitrate = BITRATE_TYPE_DEFAULT;
                } else {
                    throw (new Error((("WebPlayerCoreProperties : " + "bitrate is not valid, bitrate : ") + bitrate)));
                };
            };
            try {
                ExternalInterface.call(METHOD_NAME_SET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_BITRATE, bitrate);
            } catch(e:Error) {
                if (!realEnvironment){
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
        }
        public static function get realEnvironment():Boolean{
            var _local1:Boolean;
            switch (musicServerAPIHost){
                case HOST_REAL_MUSIC_SERVER:
                    break;
                default:
                    _local1 = false;
            };
            switch (playerServerAPIHost){
                case HOST_REAL_PLAYER_SERVER:
                    break;
                default:
                    _local1 = false;
            };
            return (_local1);
        }
        public static function get clientURL():String{
            var url:* = null;
            try {
                url = ExternalInterface.call("function() { return document.location.href; }");
            } catch(e:Error) {
                url = null;
            };
            return (url);
        }
        public static function get clientType():String{
            return (_clientType);
        }
        public static function get exportPColor():String{
            return (_exportPColor);
        }
        public static function validateTrackID(_arg1:String):Boolean{
            var _local2:Boolean;
            if (Boolean(_arg1)){
                _local2 = !(Boolean(_arg1.replace(/[\d]/g, "").length));
            };
            return (_local2);
        }
        public static function get playerType():String{
            return (_playerType);
        }
        public static function set postingListSequence(_arg1:String):void{
            if (!Boolean(postingListSequence)){
                if (TYPE_WEB_PLAYER_CONTAINER === clientType){
                    if (Boolean(containerType)){
                        if (TYPE_WEB_PLAYER_CONTAINER_POSTING === containerType){
                            if (!Boolean(_arg1)){
                                throw (new Error(("WebPlayerCoreProperties : " + "sequence is not valid.")));
                            };
                            _postingListSequence = _arg1;
                        } else {
                            throw (new Error(("WebPlayerCoreProperties : " + "containerType is not valid.")));
                        };
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "containerType does not initialized.")));
                    };
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "clientType is not valid.")));
                };
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "postingListSequence is already initialized.")));
            };
        }
        public static function get webPlayerURL():String{
            return (((("http://" + playerServerAPIHost) + "/") + APP_PLAYERPAGE));
        }
        public static function set exportCommaSeparatedTrackIDs(_arg1:String):void{
            var _local2:Array;
            if (!Boolean(exportCommaSeparatedTrackIDs)){
                if (Boolean(clientType)){
                    if (TYPE_WEB_PLAYER_EXPORTER === clientType){
                        if (!Boolean(_arg1)){
                            throw (new Error(("WebPlayerCoreProperties : " + "commaSeparatedTrackIDs is not valid.")));
                        };
                        _local2 = validateCommaSeparatedTrackIDsAndReturnToArray(_arg1);
                        if (Boolean(_local2)){
                            _exportCommaSeparatedTrackIDs = _local2.join(",");
                        } else {
                            throw (new Error(("WebPlayerCoreProperties : " + "commaSeparatedTrackIDs is not valid.")));
                        };
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "clientType is not valid.")));
                    };
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "clientType does not initialized.")));
                };
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "exportCommaSeparatedTrackIDs is already initialized.")));
            };
        }
        public static function openWindowByGETMethod(_arg1:String, _arg2:Array, _arg3:String, _arg4:String):void{
            var _local5:int;
            var _local6:int;
            var _local7:int;
            var _local8:Object;
            if (((Boolean(_arg2)) && ((_arg2.length > 0)))){
                _local7 = _arg1.lastIndexOf("/");
                if (_local7 === (_arg1.length - 1)){
                    _arg1 = _arg1.slice(0, _local7);
                };
                if (_arg1.indexOf("?") < 0){
                    _arg1 = _arg1.concat("?");
                } else {
                    if (_local7 === (_arg1.length - 1)){
                        throw (new Error(("WebPlayerCoreProperties : " + "url is not valid.")));
                    };
                    _arg1 = _arg1.concat("&");
                };
                _local6 = _arg2.length;
                _local5 = 0;
                while (_local5 < _local6) {
                    _local8 = _arg2[_local5];
                    _arg1 = _arg1.concat(_local8.name, "=", _local8.value, "&");
                    _local5++;
                };
                _arg1 = _arg1.slice(0, (_arg1.length - 1));
            };
            openWindow(_arg1, _arg3, _arg4);
        }
        public static function set exportSite(_arg1:String):void{
            if (!Boolean(exportSite)){
                if (Boolean(clientType)){
                    if (TYPE_WEB_PLAYER_EXPORTER === clientType){
                        if (!validateExportService(_arg1)){
                            _arg1 = EXPORT_SERVICE_TYPE_BLOG;
                        };
                        _exportSite = _arg1;
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "clientType is not valid.")));
                    };
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "clientType does not initialized.")));
                };
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "exportSite is already initialized.")));
            };
        }
        nhn_webplayer_ns static function readPlayListFromCookie():Array{
            var commaSeparatedSavedTrackIDs:* = null;
            var cookieDirty:* = false;
            var savedTrackIDs:* = null;
            try {
                commaSeparatedSavedTrackIDs = ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_GET_COOKIE, WebPlayerCoreProperties.COOKIE_NAME_OF_POPUP_TYPE_PLAY_LIST);
                if (((Boolean(commaSeparatedSavedTrackIDs)) && (!(validateCommaSeparatedTrackIDs(commaSeparatedSavedTrackIDs))))){
                    cookieDirty = true;
                };
                savedTrackIDs = validateCommaSeparatedTrackIDsAndReturnToArray(commaSeparatedSavedTrackIDs);
            } catch(e:Error) {
                if (realEnvironment){
                    cookieDirty = true;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
            if (cookieDirty){
                nhn_webplayer_ns::writePlayListToCookie(savedTrackIDs);
            };
            return (savedTrackIDs);
        }
        public static function setWindowTitle(_arg1:String):void{
            ExternalInterface.call("containerTitleTo", _arg1);
        }
        public static function set containerType(_arg1:String):void{
            if (!Boolean(containerType)){
                if (TYPE_WEB_PLAYER_CONTAINER === clientType){
                    switch (_arg1){
                        case TYPE_WEB_PLAYER_CONTAINER_POPUP:
                        case TYPE_WEB_PLAYER_CONTAINER_POSTING:
                        case TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                            break;
                        default:
                            throw (new Error(("WebPlayerCoreProperties : " + "type is not valid.")));
                    };
                    _containerType = _arg1;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "clientType is not TYPE_WEB_PLAYER_CONTAINER.")));
                };
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "containerType is already initialized.")));
            };
        }
        nhn_webplayer_ns static function writePlayListToCookie(_arg1:Array):void{
            var trackIDs:* = _arg1;
            var commaSeparatedTrackIDs:* = "";
            if (((Boolean(trackIDs)) && (!((trackIDs.length === 0))))){
                commaSeparatedTrackIDs = validateTrackIDArrayAndReturnToArray(trackIDs).join(",");
            };
            try {
                ExternalInterface.call(METHOD_NAME_SET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_PLAY_LIST, commaSeparatedTrackIDs);
            } catch(e:Error) {
                if (!realEnvironment){
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
        }
        nhn_webplayer_ns static function set bitrate(_arg1:String):void{
            nhn_webplayer_ns::writeBitrateToCookie(_arg1);
            _bitrate = null;
        }
        public static function get postingListSequence():String{
            return (_postingListSequence);
        }
        public static function validateExportService(_arg1:String):Boolean{
            var _local2:Boolean;
            switch (_arg1){
                case EXPORT_SERVICE_TYPE_BLOG:
                case EXPORT_SERVICE_TYPE_CAFE:
                    break;
                default:
                    _local2 = false;
            };
            return (_local2);
        }
        nhn_webplayer_ns static function readVolumeFromCookie():Number{
            var volume:* = NaN;
            var cookieDirty:* = false;
            var savedVolume:* = null;
            try {
                savedVolume = ExternalInterface.call(METHOD_NAME_GET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_VOLUME);
            } catch(e:Error) {
                if (realEnvironment){
                    savedVolume = null;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
            if (Boolean(savedVolume)){
                volume = Number(savedVolume);
                if ((((MAX_VOLUME < volume)) || ((MIN_VOLUME > volume)))){
                    cookieDirty = true;
                };
            } else {
                cookieDirty = true;
            };
            if (cookieDirty){
                volume = DEFAULT_VOLUME;
                nhn_webplayer_ns::writeVolumeToCookie(volume);
            };
            return (volume);
        }
        public static function openWindow(_arg1:String, _arg2:String, _arg3:String):void{
            var windowURL:* = _arg1;
            var windowName:* = _arg2;
            var windowFeatures:* = _arg3;
            try {
                ExternalInterface.call("window.open", windowURL, windowName, windowFeatures);
            } catch(e:Error) {
            };
        }
        nhn_webplayer_ns static function writeSkinToCookie(_arg1:String):void{
            var skin:* = _arg1;
            if (!validateSkin(skin)){
                if (realEnvironment){
                    skin = SKIN_TYPE_COLOR_DEFAULT;
                } else {
                    throw (new Error((("WebPlayerCoreProperties : " + "skin is not valid, skin : ") + skin)));
                };
            };
            try {
                ExternalInterface.call(METHOD_NAME_SET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_SKIN, skin);
            } catch(e:Error) {
                if (!realEnvironment){
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
        }
        nhn_webplayer_ns static function readBitrateFromCookie():String{
            var cookieDirty:* = false;
            var savedBitrate:* = null;
            try {
                savedBitrate = ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_GET_COOKIE, WebPlayerCoreProperties.COOKIE_NAME_OF_POPUP_TYPE_BITRATE);
            } catch(e:Error) {
                if (realEnvironment){
                    savedBitrate = BITRATE_TYPE_DEFAULT;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
            cookieDirty = !(validateBitrate(savedBitrate));
            if (cookieDirty){
                savedBitrate = BITRATE_TYPE_DEFAULT;
                nhn_webplayer_ns::writeBitrateToCookie(savedBitrate);
            };
            return (savedBitrate);
        }
        nhn_webplayer_ns static function readSkinFromCookie():String{
            var cookieDirty:* = false;
            var savedSkin:* = null;
            try {
                savedSkin = ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_GET_COOKIE, WebPlayerCoreProperties.COOKIE_NAME_OF_POPUP_TYPE_SKIN);
            } catch(e:Error) {
                if (realEnvironment){
                    savedSkin = SKIN_TYPE_COLOR_DEFAULT;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
            cookieDirty = !(validateSkin(savedSkin));
            if (cookieDirty){
                savedSkin = SKIN_TYPE_COLOR_DEFAULT;
                nhn_webplayer_ns::writeSkinToCookie(savedSkin);
            };
            return (savedSkin);
        }
        public static function set clientType(_arg1:String):void{
            if (!Boolean(_clientType)){
                switch (_arg1){
                    case TYPE_WEB_PLAYER_LAUNCHER:
                    case TYPE_WEB_PLAYER_CONTAINER:
                    case TYPE_WEB_PLAYER_EXPORTER:
                        break;
                    default:
                        throw (new Error(("WebPlayerCoreProperties : " + "type is not valid.")));
                };
                _clientType = _arg1;
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "clientType is already initialized.")));
            };
        }
        public static function set exportPColor(_arg1:String):void{
            if (!Boolean(exportPColor)){
                if (Boolean(clientType)){
                    if (TYPE_WEB_PLAYER_EXPORTER === clientType){
                        if (!validateSkin(_arg1)){
                            if (!Boolean(_arg1)){
                                _arg1 = SKIN_TYPE_COLOR_DEFAULT;
                            } else {
                                _arg1 = SKIN_TYPE_COLOR_DEFAULT;
                            };
                        };
                        _exportPColor = _arg1;
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "clientType is not valid.")));
                    };
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "clientType does not initialized.")));
                };
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "exportPColor is already initialized.")));
            };
        }
        public static function get containerType():String{
            return (_containerType);
        }
        public static function get bitrate():String{
            if (!validateBitrate(_bitrate)){
                _bitrate = nhn_webplayer_ns::readBitrateFromCookie();
            };
            return (_bitrate);
        }
        public static function set playerType(_arg1:String):void{
            if (!Boolean(playerType)){
                if (Boolean(containerType)){
                    if (validatePlayerTypeAccordingToContainerType(_arg1, containerType)){
                        _playerType = _arg1;
                    } else {
                        throw (new Error(("WebPlayerCoreProperties : " + "type is not valid.")));
                    };
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "containerType does not initialized.")));
                };
            } else {
                throw (new Error(("WebPlayerCoreProperties : " + "playerType is already initialized.")));
            };
        }
        public static function validateCommaSeparatedTrackIDsAndReturnToArray(_arg1:String):Array{
            if (!Boolean(_arg1)){
                return (null);
            };
            var _local2:Array = _arg1.split(",");
            if (validateCommaSeparatedTrackIDs(_arg1)){
            } else {
                _local2 = validateTrackIDArrayAndReturnToArray(_local2);
            };
            return (_local2);
        }
        public static function retreieveViewModuleRSLAccordingToPlayerType():String{
            if (!Boolean(playerType)){
                throw (new Error(("WebPlayerCoreProperties : " + "playerType does not initialized.")));
            };
            var _local1:String;
            switch (playerType){
                case PLAYER_TYPE_NONE:
                    _local1 = RSL_WEBPLAYERBASICLIB;
                    break;
                case PLAYER_TYPE_BA:
                    _local1 = RSL_WEBPLAYERBASICLIB;
                    break;
                case PLAYER_TYPE_AL:
                    _local1 = RSL_WEBPLAYERMINILIB;
                    break;
                case PLAYER_TYPE_BP:
                    _local1 = RSL_WEBPLAYERBASICLIB;
                    break;
                case PLAYER_TYPE_PV:
                    _local1 = RSL_WEBPLAYERPREVIEWLIB;
                    break;
            };
            return (_local1);
        }
        nhn_webplayer_ns static function readShuffleFromCookie():int{
            var cookieDirty:* = false;
            var savedShuffle:* = -1;
            try {
                savedShuffle = int(ExternalInterface.call(METHOD_NAME_GET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_SHUFFLE));
            } catch(e:Error) {
                if (realEnvironment){
                    savedShuffle = -1;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
            switch (savedShuffle){
                case SHUFFLE_NO:
                case SHUFFLE_ALL:
                    break;
                default:
                    cookieDirty = true;
            };
            if (cookieDirty){
                savedShuffle = SHUFFLE_NO;
                nhn_webplayer_ns::writeShuffleToCookie(savedShuffle);
            };
            return (savedShuffle);
        }
        public static function lcsDo(_arg1:String):void{
            var sti:* = _arg1;
            switch (sti){
                case LCS_TAG_MUSIC_PLAY_LIST:
                case LCS_TAG_MUSIC_TOP_100:
                case LCS_TAG_MUSIC_LYRIC:
                    break;
                default:
                    return;
            };
            var etc:* = {};
            etc.sti = sti;
            try {
                ExternalInterface.call(METHOD_NAME_LCS_DO, etc);
            } catch(e:Error) {
            };
        }
        public static function validatePlayerTypeAccordingToContainerType(_arg1:String, _arg2:String=null):Boolean{
            var _local3:Boolean;
            switch (_arg2){
                case TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    switch (_arg1){
                        case PLAYER_TYPE_NONE:
                            break;
                        default:
                            _local3 = false;
                    };
                    break;
                case TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    switch (_arg1){
                        case PLAYER_TYPE_BA:
                        case PLAYER_TYPE_AL:
                        case PLAYER_TYPE_BP:
                            break;
                        default:
                            _local3 = false;
                    };
                    break;
                case TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                    switch (_arg1){
                        case PLAYER_TYPE_PV:
                            break;
                        default:
                            _local3 = false;
                    };
                    break;
                default:
                    switch (_arg1){
                        case PLAYER_TYPE_NONE:
                        case PLAYER_TYPE_BA:
                        case PLAYER_TYPE_AL:
                        case PLAYER_TYPE_BP:
                        case PLAYER_TYPE_PV:
                            break;
                        default:
                            _local3 = false;
                    };
            };
            return (_local3);
        }
        public static function validateSkin(_arg1:String):Boolean{
            var _local2:Boolean;
            switch (_arg1){
                case SKIN_TYPE_COLOR_C01:
                case SKIN_TYPE_COLOR_C02:
                case SKIN_TYPE_COLOR_C03:
                case SKIN_TYPE_COLOR_C04:
                case SKIN_TYPE_COLOR_C05:
                case SKIN_TYPE_COLOR_C06:
                case SKIN_TYPE_COLOR_C07:
                case SKIN_TYPE_COLOR_C08:
                case SKIN_TYPE_COLOR_C09:
                case SKIN_TYPE_COLOR_C10:
                    break;
                default:
                    _local2 = false;
            };
            return (_local2);
        }
        nhn_webplayer_ns static function writeVolumeToCookie(_arg1:Number):void{
            var volume:* = _arg1;
            if ((((MAX_VOLUME < volume)) || ((MIN_VOLUME > volume)))){
                if (realEnvironment){
                    volume = DEFAULT_VOLUME;
                } else {
                    throw (new Error(("WebPlayerCoreProperties : " + "volume is not valid.")));
                };
            };
            try {
                ExternalInterface.call(METHOD_NAME_SET_COOKIE, COOKIE_NAME_OF_POPUP_TYPE_VOLUME, String(volume));
            } catch(e:Error) {
                if (!realEnvironment){
                    throw (new Error(("WebPlayerCoreProperties : " + "Error occured when ExternalInterface.call.")));
                };
            };
        }
        public static function getOutLinkURL(_arg1:String):String{
            var tempURL_1:* = null;
            var type:* = _arg1;
            var url:* = "http://";
            try {
                if (((Boolean(musicServerAPIHost)) && (Boolean(playerServerAPIHost)))){
                    switch (type){
                        case OUT_LINK_TYPE_NAVER:
                            url = url.concat("naver.com");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC:
                            url = url.concat(musicServerAPIHost);
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_LOGIN:
                            url = url.concat(musicServerAPIHost, "/api/playerLogin.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_ALBUM_INFO:
                            url = url.concat(musicServerAPIHost, "/album/index.nhn?albumId=");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_ARTIST_INFO:
                            url = url.concat(musicServerAPIHost, "/artist/home.nhn?artistId=");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_EXPORT:
                            url = url.concat(playerServerAPIHost, "/mylist.nhn?m=scrap");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_UI:
                            url = url.concat(playerServerAPIHost, "/player/posting.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_HELP:
                            url = url.concat("help.naver.com/ops/step2/faq.nhn?parentId=80&depth=2");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET:
                            url = url.concat(musicServerAPIHost, "/buy/index.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE:
                            url = url.concat(musicServerAPIHost, "/buy/purchaseTicketPopup.nhn?itemGroup=AODS01M&regularPayment=Y&discount=N");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_40MP3:
                            url = url.concat(musicServerAPIHost, "/buy/purchaseTicketPopup.nhn?itemGroup=PRDD040&regularPayment=Y&discount=N");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE_40MP3:
                            url = url.concat(musicServerAPIHost, "/buy/purchaseTicketPopup.nhn?itemGroup=GAPO040&regularPayment=Y&discount=N");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_150MP3:
                            url = url.concat(musicServerAPIHost, "/buy/purchaseTicketPopup.nhn?itemGroup=PRDD150&regularPayment=Y&discount=N");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BUY_MP3:
                            url = url.concat(musicServerAPIHost, "/api/download.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BOOKMARK_SONG:
                            url = url.concat(musicServerAPIHost, "/myMusic/addFavoriteAPI.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_IMPORT:
                            url = url.concat(musicServerAPIHost, "/api/myAlbum.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_AUTH_BLOG:
                            tempURL_1 = HOST_REAL_BLOG_SERVER;
                            if (!realEnvironment){
                                tempURL_1 = HOST_DEV_BLOG_SERVER;
                            };
                            url = url.concat(tempURL_1, "/");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_ME2DAY:
                            url = url.concat(musicServerAPIHost, "/album/index.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_WRITE_ME2DAY_POST:
                            url = url.concat("plugin.me2day.net/v1/me2post/create_post_form.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_FACEBOOK:
                            url = url.concat("www.facebook.com/sharer.php");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_TWITTER:
                            url = url.concat("http://twitter.com/share");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_CHALLENGE:
                            url = url.concat(musicServerAPIHost, "/blogdj.nhn");
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_EVENT:
                            url = url.concat(("blog.naver.com/PostList.nhn?" + "blogId=naver_blogdj&categoryNo=8"));
                            break;
                        case OUT_LINK_TYPE_NAVER_MUSIC_CHECK_OUT_EVENT:
                            url = url.concat("music.naver.com/promotion/eventContent.nhn?eventId=7316");
                            break;
                        default:
                            trace(("WebPlayerCoreProperties.linkToNaverMusic : " + "type is not valid."));
                            url = url.concat(HOST_REAL_MUSIC_SERVER);
                    };
                } else {
                    url = null;
                };
            } catch(e:Error) {
                url = null;
            };
            if (!Boolean(url)){
                throw (new Error(("WebPlayerCoreProperties : " + "musicServerAPIHost or playerServerAPIHost is not valid.")));
            };
            return (url);
        }
        public static function get musicServerAPIHost():String{
            if (!Boolean(_musicServerAPIHost)){
                setPlayerAndMusicServerAPIHost();
            };
            return (_musicServerAPIHost);
        }

    }
}//package com.nhn.application.modules.webplayercore 
﻿package com.nhn.application.modules.fmscommunication.notifications {

    public class FMSCommunicationNotifications {

        public static const STREAM_SERVICE_SET_VOLUME:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_SET_VOLUME";
        public static const STREAM_SERVICE_SEEK:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_SEEK";
        public static const STREAM_SERVICE_COMPLETE:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_COMPLETE";
        public static const FC_HWCPM_RESPOND_COMMON_SECURITY_ERROR:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_RESPOND_COMMON_SECURITY_ERROR";
        public static const STREAM_SERVICE_PROGRESS:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_PROGRESS";
        public static const STREAM_SERVICE_STOP:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_STOP";
        public static const FC_HWPEHPM_OPEN_ALERT_UI:String = "NOTI_FMSCOMMUNICATION_FC_HWPEHPM_OPEN_ALERT_UI";
        public static const STREAM_SERVICE_CONNECTION_SUCCESS:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_CONNECTION_SUCCESS";
        public static const STREAM_SERVICE_CONNECTION_CLOSED:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_CONNECTION_CLOSED";
        public static const FC_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE";
        public static const FC_HWCPM_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION";
        public static const FC_HWCPM_RESPOND_FMS_INFO_GET_FMS_CONFIGURATION:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_RESPOND_FMS_INFO_GET_FMS_CONFIGURATION";
        public static const FC_HWCPM_RESPOND_COMMON_IO_ERROR:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_RESPOND_COMMON_IO_ERROR";
        public static const STREAM_SERVICE_OPEN:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_OPEN";
        public static const STREAM_SERVICE_PAUSE:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_PAUSE";
        public static const FC_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE";
        public static const STREAM_SERVICE_RESUME:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_RESUME";
        public static const STREAM_SERVICE_PLAY:String = "NOTI_FMSCOMMUNICATION_STREAM_SERVICE_PLAY";
        public static const FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST:String = "NOTI_FMSCOMMUNICATION_FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST";

    }
}//package com.nhn.application.modules.fmscommunication.notifications 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HFCPM_StreamServiceSeekCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("time"))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("HFCPM_StreamServiceSeekCommand : " + "body is not valid.")));
            };
            fmsStreamServiceMediator.seek((_local2.trackID as String), Number(_local2.time), (_local2.automaticRequest as Boolean));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class FC_HWCPM_RespondFMSInfoGetFMSConfigurationCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.fmsConfiguration as FMSConfiguration))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("FC_HWCPM_RespondFMSInfoGetFMSConfigurationCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.fmscommunication.notifications.*;

    public class HFCPM_StreamServiceStopCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("HFCPM_StreamServiceStopCommand : " + "body is not valid.")));
            };
            var _local3:Array = requestIDTableProxy.retrieveRequestIDsByBaseID(FMSCommunicationNotifications.FC_HWCPM_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION);
            var _local4:Array = requestIDTableProxy.retrieveRequestIDsByBaseID(FMSCommunicationNotifications.FC_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE);
            if (Boolean(_local3)){
                if (_local3.length > 1){
                    throw (new Error(("HFCPM_StreamServiceStopCommand : " + "seedRequestIDTable_01.length is not valid.")));
                };
                sendNotification(FMSCommunicationNotifications.FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local3[0] as RequestID)});
                requestIDTableProxy.removeRequestID((_local3[0] as RequestID));
            };
            if (Boolean(_local4)){
                if (_local4.length > 1){
                    throw (new Error(("HFCPM_StreamServiceStopCommand : " + "seedRequestIDTable_02.length is not valid.")));
                };
                sendNotification(FMSCommunicationNotifications.FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local4[0] as RequestID)});
                requestIDTableProxy.removeRequestID((_local4[0] as RequestID));
            };
            fmsStreamServiceMediator.stop((_local2.automaticRequest as Boolean));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class FC_HWCPM_RespondCommonIOErrorCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("FC_HWCPM_RespondCommonIOErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.fmscommunication.notifications.*;

    public class FC_HWCPM_RequestAuthorizationGetCookieCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (((Boolean((_local2.args as Array))) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)))){
                throw (new Error(("FC_HWCPM_RequestAuthorizationGetCookieCommand : " + "body is not valid.")));
            };
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            var _local4:Array = requestIDTableProxy.retrieveRequestIDsByBaseID(RequestID.getBaseID(_local3));
            if (Boolean(_local4)){
                if (_local4.length > 1){
                    throw (new Error(("FC_HWCPM_RequestAuthorizationGetCookieCommand : " + "requestIDTable.length is not valid.")));
                };
                sendNotification(FMSCommunicationNotifications.FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local4[0] as RequestID)});
                requestIDTableProxy.removeRequestID((_local4[0] as RequestID));
            };
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_GET_COOKIE, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import com.nhn.dto.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class HFCPM_StreamServiceOpenCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(Boolean((_local2.streamInfo as NHNMusicStreamInfodto)))))){
                throw (new Error(("HFCPM_StreamServiceOpenCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_OPEN, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HFCPM_StreamServiceSetVolumeCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(_local2.hasOwnProperty("volume"))))){
                throw (new Error(("HFCPM_StreamServiceSetVolumeCommand : " + "body is not valid.")));
            };
            fmsStreamServiceMediator.setVolume(Number(_local2.volume));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.fmscommunication.notifications.*;

    public class FC_HWCPM_RequestFMSInfoGetFMSConfigurationCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (((Boolean((_local2.args as Array))) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)))){
                throw (new Error(("FC_HWCPM_RequestFMSInfoGetFMSConfigurationCommand : " + "body is not valid.")));
            };
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            var _local4:Array = requestIDTableProxy.retrieveRequestIDsByBaseID(RequestID.getBaseID(_local3));
            if (Boolean(_local4)){
                if (_local4.length > 1){
                    throw (new Error(("FC_HWCPM_RequestFMSInfoGetFMSConfigurationCommand : " + "requestIDTable.length is not valid.")));
                };
                sendNotification(FMSCommunicationNotifications.FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local4[0] as RequestID)});
                requestIDTableProxy.removeRequestID((_local4[0] as RequestID));
                requestIDTableProxy.removeRequestID(_local4[0]);
            };
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_FMS_INFO_GET_FMS_CONFIGURATION, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.fmscommunication.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.fmscommunication.notifications.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            facade.registerProxy(new RequestIDTableProxy());
            facade.registerMediator(new FMSStreamServiceMediator());
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_CONNECTION_SUCCESS, HFCPM_StreamServiceConnectionSuccessCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_CONNECTION_CLOSED, HFCPM_StreamServiceConnectionClosedCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_OPEN, HFCPM_StreamServiceOpenCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_PROGRESS, HFCPM_StreamServiceProgressCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_COMPLETE, HFCPM_StreamServiceCompleteCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_PLAY, HFCPM_StreamServicePlayCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_PAUSE, HFCPM_StreamServicePauseCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_RESUME, HFCPM_StreamServiceResumeCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_STOP, HFCPM_StreamServiceStopCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_SEEK, HFCPM_StreamServiceSeekCommand);
            facade.registerCommand(FMSCommunicationNotifications.STREAM_SERVICE_SET_VOLUME, HFCPM_StreamServiceSetVolumeCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, FC_HWCPM_RequestCommonCancelRequestCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_RESPOND_COMMON_IO_ERROR, FC_HWCPM_RespondCommonIOErrorCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_RESPOND_COMMON_SECURITY_ERROR, FC_HWCPM_RespondCommonSecurityErrorCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE, FC_HWCPM_RequestAuthorizationGetCookieCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE, FC_HWCPM_RespondAuthorizationGetCookieCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION, FC_HWCPM_RequestFMSInfoGetFMSConfigurationCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWCPM_RESPOND_FMS_INFO_GET_FMS_CONFIGURATION, FC_HWCPM_RespondFMSInfoGetFMSConfigurationCommand);
            facade.registerCommand(FMSCommunicationNotifications.FC_HWPEHPM_OPEN_ALERT_UI, FC_HWPEHPM_OpenAlertUICommand);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HFCPM_StreamServicePlayCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("HFCPM_StreamServicePlayCommand : " + "body is not valid.")));
            };
            fmsStreamServiceMediator.play((_local2.trackID as String), 0, true, (_local2.automaticRequest as Boolean));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;

    public class FC_HWPEHPM_OpenAlertUICommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (Boolean(_local2)){
                if (!Boolean((_local2.resultCode as String))){
                    throw (new Error(("FC_HWPEHPM_OpenAlertUICommand : " + "body is not valid.")));
                };
            };
            sendPipeMessage(WebPlayerErrorHandlingPipeMessages.OPEN_ALERT_UI, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class HFCPM_StreamServiceProgressCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("time"))))){
                throw (new Error(("HFCPM_StreamServiceProgressCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_PROGRESS, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class HFCPM_StreamServiceConnectionClosedCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_CONNECTION_CLOSED, null, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class FC_HWCPM_RespondCommonSecurityErrorCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("FC_HWCPM_RespondCommonSecurityErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HFCPM_StreamServiceResumeCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("HFCPM_StreamServiceResumeCommand : " + "body is not valid.")));
            };
            fmsStreamServiceMediator.resume((_local2.trackID as String), (_local2.automaticRequest as Boolean));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class FC_HWCPM_RespondAuthorizationGetCookieCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.authorization as Authorization))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("FC_HWCPM_RespondAuthorizationGetCookieCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.fmscommunication.patterns.mediator.*;
    import com.nhn.application.modules.core.patterns.command.*;

    public class FCMBaseCommand extends BasicSimpleCommand {

        protected function get requestIDTableProxy():RequestIDTableProxy{
            var _local1:IProxy = facade.retrieveProxy(RequestIDTableProxy.NAME);
            return ((_local1 as RequestIDTableProxy));
        }
        protected function get fmsStreamServiceMediator():FMSStreamServiceMediator{
            var _local1:IMediator = facade.retrieveMediator(FMSStreamServiceMediator.NAME);
            return ((_local1 as FMSStreamServiceMediator));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class HFCPM_StreamServiceCompleteCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))){
                throw (new Error(("HFCPM_StreamServiceCompleteCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_COMPLETE, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HFCPM_StreamServicePauseCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("HFCPM_StreamServicePauseCommand : " + "body is not valid.")));
            };
            fmsStreamServiceMediator.pause((_local2.trackID as String), (_local2.automaticRequest as Boolean));
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class HFCPM_StreamServiceConnectionSuccessCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_CONNECTION_SUCCESS, null, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class FC_HWCPM_RequestCommonCancelRequestCommand extends FCMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("FC_HWCPM_RequestCommonCancelRequestCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_COMMON_CANCEL_REQUEST, _local2, 0);
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.command 
﻿package com.nhn.application.modules.fmscommunication.patterns.mediator {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import flash.utils.*;
    import com.nhn.events.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.net.*;
    import com.nhn.core.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.fmscommunication.notifications.*;
    import com.nhn.errors.*;

    public class FMSStreamServiceMediator extends BasicMediator {

        public static const NAME:String = "FMSStreamServiceMediator";

        private var numWASCommRequestRetries:int;
        private var fmsCommRequestRetryTask:FMSStreamServiceTask;
        private var fmsCommPendingTask:FMSStreamServiceTask;
        private var numFMSCommRequestRetries:int;
        private var fmsCommRequestRetry:Timer;
        private var fmsStreamServiceStatus:FMSStreamServiceStatus;

        public function FMSStreamServiceMediator(){
            super(name, NHNConnectionManager.instance);
            numWASCommRequestRetries = 0;
            numFMSCommRequestRetries = 0;
            fmsCommRequestRetry = null;
            fmsCommRequestRetryTask = null;
            fmsCommPendingTask = null;
        }
        private function handleCommonNetConnectionError(_arg1:Object, _arg2:Function, _arg3:Array, _arg4:String, _arg5:String=null):void{
            var _local6:Object;
            if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                if (WebPlayerCoreProperties.MAX_NUM_OF_FMS_COMM_REQUEST_RETRIES <= numFMSCommRequestRetries){
                    _local6 = {};
                    switch (_arg4){
                        case NHNConnectionEvent.CONNECTION_CLOSED:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_902;
                            break;
                        case NHNConnectionEvent.CONNECTION_FAIL:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_901;
                            break;
                        case NHNConnectionEvent.CONNECTION_REJECTED:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_900;
                            break;
                        case NHNConnectionEvent.CONNECTION_CALL_FAILED:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_905;
                            break;
                        case NHNConnectionEvent.APPLICATION_SHUTDOWN:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_903;
                            break;
                        case NHNConnectionEvent.INVALID_APPLICATION:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_904;
                            break;
                        case NHNConnectionEvent.SERVICE_IOERROR:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_907;
                            break;
                        case NHNConnectionEvent.STREAM_IOERROR:
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_906;
                            break;
                        default:
                            if (_arg4 === NHNConnectionEvent.CONNECTION_COMPLETE){
                                throw (new Error(("FMSStreamServiceMediator : " + "eventType is not valid.")));
                            };
                            _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101;
                    };
                    numWASCommRequestRetries = 0;
                    numFMSCommRequestRetries = 0;
                    releaseFMSCommRequestRetryTask();
                    releaseFMSCommPendingTask();
                    setFMSStreamServiceStatusReady(true);
                    sendNotification(FMSCommunicationNotifications.FC_HWPEHPM_OPEN_ALERT_UI, _local6, null);
                } else {
                    startFMSCommRequestRetry(_arg1, _arg2, _arg3);
                };
            };
        }
        public function stop(_arg1:Boolean=true):void{
            setFMSStreamServiceStatusReady(false);
            fmsStreamServiceStatus.status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP;
            fmsStreamServiceStatus.automaticRequest = _arg1;
            numWASCommRequestRetries = 0;
            numFMSCommRequestRetries = 0;
            if (fmsStreamService.connected){
                fmsStreamService.stop();
                fmsStreamService.connectionClose();
            } else {
                setFMSStreamServiceStatusReady(true);
            };
        }
        override public function onRemove():void{
            fmsStreamService.removeEventListener(NHNStreamEvent.ONLOAD_STREAM_INFORMATION, fmsStreamService_handleNHNStreamEvent, false);
            fmsStreamService.removeEventListener(NHNStreamEvent.STREAM_PROGRESS, fmsStreamService_handleNHNStreamEvent, false);
            fmsStreamService.removeEventListener(NHNStreamEvent.PLAY_COMPLETE, fmsStreamService_handleNHNStreamEvent, false);
            fmsStreamService.removeEventListener(NHNStreamEvent.PLAY_DISABLED, fmsStreamService_handleNHNStreamEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.APPLICATION_SHUTDOWN, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.CONNECTION_CALL_FAILED, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.CONNECTION_CLOSED, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.CONNECTION_COMPLETE, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.CONNECTION_FAIL, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.CONNECTION_REJECTED, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.INVALID_APPLICATION, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.SERVICE_IOERROR, fmsStreamService_handleNHNConnectionEvent, false);
            fmsStreamService.removeEventListener(NHNConnectionEvent.STREAM_IOERROR, fmsStreamService_handleNHNConnectionEvent, false);
            if (Boolean(fmsCommRequestRetryTask)){
                fmsCommRequestRetryTask.releaseMemory();
                fmsCommRequestRetryTask = null;
            };
            if (Boolean(fmsCommPendingTask)){
                fmsCommPendingTask.releaseMemory();
                fmsCommPendingTask = null;
            };
            fmsCommRequestRetry.reset();
            fmsCommRequestRetry = null;
            fmsCommRequestRetry.removeEventListener(TimerEvent.TIMER, fmsCommRequestRetry_handleTimerEvent, false);
            fmsStreamServiceStatus = null;
            super.onRemove();
        }
        override public function get name():String{
            return (FMSStreamServiceMediator.NAME);
        }
        private function authorizeCallback(_arg1:MusicServiceResult):void{
            var _local2:Authorization;
            if (_arg1.success){
                numWASCommRequestRetries = 0;
                _local2 = (_arg1.resultvalue as Authorization);
                if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                    if (fmsStreamService.connected){
                        if (Boolean(fmsStreamServiceStatus.trackID)){
                            fmsStreamService.getTrackInfo(fmsStreamServiceStatus.trackID, _local2.cookie, WebPlayerCoreProperties.bitrate);
                        };
                    } else {
                        connect();
                    };
                } else {
                    stop(fmsStreamServiceStatus.automaticRequest);
                };
                _local2 = null;
            } else {
                if (WebPlayerCoreProperties.MAX_NUM_OF_WAS_COMM_REQUEST_RETRIES <= numWASCommRequestRetries){
                    numWASCommRequestRetries = 0;
                } else {
                    authorize();
                };
            };
            _arg1 = null;
        }
        private function connectCallback(_arg1:MusicServiceResult):void{
            var _local2:FMSConfiguration;
            var _local3:String;
            var _local4:NHNNetConnectionProtocol;
            if (_arg1.success){
                numWASCommRequestRetries = 0;
                _local2 = (_arg1.resultvalue as FMSConfiguration);
                if (!fmsStreamService.connected){
                    numFMSCommRequestRetries++;
                    setFMSStreamServiceStatusReady(false);
                    _local4 = new NHNNetConnectionProtocol();
                    _local4.protocol = _local2.protocol;
                    _local4.port = String(_local2.port);
                    _local4.host = _local2.host;
                    _local4.application = _local2.application;
                    _local4.encoding = uint(_local2.encoding);
                    _local4.playlistID = int(WebPlayerCoreProperties.postingListSequence);
                    switch (WebPlayerCoreProperties.containerType){
                        case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                            _local3 = NHNNetConnectionProtocol.MUSIC_PLAYER_TYPE;
                            break;
                        case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                            _local3 = NHNNetConnectionProtocol.POST_PLYAER_TYPE;
                            break;
                        case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                            _local3 = NHNNetConnectionProtocol.PREVIEW_PLAYER_TYPE;
                            if (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING){
                                _local3 = NHNNetConnectionProtocol.MUSIC_PLAYER_TYPE;
                            };
                            break;
                        default:
                            throw (new Error(("FMSStreamServiceMediator : " + "WebPlayerCoreProperties.containerType is not valid.")));
                    };
                    _local4.ptype = _local3;
                    fmsStreamService.connect(_local4);
                };
                _local2 = null;
            } else {
                if (WebPlayerCoreProperties.MAX_NUM_OF_WAS_COMM_REQUEST_RETRIES <= numWASCommRequestRetries){
                    numWASCommRequestRetries = 0;
                } else {
                    connect();
                };
            };
            _arg1 = null;
        }
        private function dispatch_NHNStreamEvent_PLAY_COMPLETE():void{
            var _local1:NHNStreamEvent = new NHNStreamEvent(NHNStreamEvent.PLAY_COMPLETE, false, false, null, MusicErrorCode.SUCCESS);
            fmsStreamService.dispatchEvent(_local1);
        }
        private function fmsStreamService_handleNHNStreamEvent(_arg1:NHNStreamEvent):void{
            var _local4:String;
            var _local5:NHNStreamEvent;
            var _local6:Object;
            var _local7:Boolean;
            var _local2:String = _arg1.errorcode;
            var _local3:NHNMusicStreamInfodto = _arg1.data;
            var _local8:Authorization = Authorization.getInstance();
            if (!Boolean(_local8.cookie)){
                Authorization.releaseInstance();
                _local8 = null;
            };
            if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                switch (_arg1.type){
                    case NHNStreamEvent.STREAM_PROGRESS:
                        fmsStreamServiceStatus.time = ((isNaN(_local3.time)) ? 0 : _local3.time);
                        sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_PROGRESS, {
                            trackID:fmsStreamServiceStatus.trackID,
                            time:fmsStreamServiceStatus.time
                        }, null);
                        if ((((fmsStreamServiceStatus.trackAdult === "Y")) && (Boolean(_local8)))){
                            if ((((_local8.isadult === "N")) || ((_local8.islogin === "N")))){
                                dispatch_NHNStreamEvent_PLAY_COMPLETE();
                            };
                        };
                        break;
                    case NHNStreamEvent.ONLOAD_STREAM_INFORMATION:
                        if (Boolean(_local3)){
                            if (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING){
                                _local3.serviceType = "PCRadio";
                            };
                        };
                        WebPlayerErrorHandlingJeagleye.SONG_TRACK_ID = _local3.trackid;
                        WebPlayerErrorHandlingJeagleye.USER_ID = _local3.userid;
                        if (MusicServiceResult.checkSuccessByResultCode(_local2)){
                            if (fmsStreamServiceStatus.trackID === _local3.trackid){
                                sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_OPEN, {
                                    trackID:fmsStreamServiceStatus.trackID,
                                    streamInfo:_local3
                                }, null);
                                execute(_local3);
                            };
                        } else {
                            _local6 = {};
                            _local6.resultCode = _local2;
                            _local7 = true;
                            switch (_local2){
                                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_108:
                                    if (fmsStreamServiceStatus.automaticRequest){
                                        _local7 = false;
                                    };
                                    break;
                                default:
                                    _local7 = true;
                            };
                            if (_local7){
                                sendNotification(FMSCommunicationNotifications.FC_HWPEHPM_OPEN_ALERT_UI, _local6, null);
                            };
                            switch (_local2){
                                case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                                    stop();
                                    break;
                                default:
                                    dispatch_NHNStreamEvent_PLAY_COMPLETE();
                            };
                        };
                        break;
                    case NHNStreamEvent.PLAY_COMPLETE:
                        _local4 = fmsStreamServiceStatus.trackID;
                        fmsStreamServiceStatus.status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP;
                        sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_COMPLETE, {trackID:_local4}, null);
                        break;
                    case NHNStreamEvent.PLAY_DISABLED:
                        dispatch_NHNStreamEvent_PLAY_COMPLETE();
                    default:
                        throw (new Error(("FMSStreamServiceMediator : " + "e.type is not valid.")));
                };
            };
        }
        private function setFMSCommRequestRetryTask(_arg1:Object, _arg2:Function, _arg3:Array):void{
            releaseFMSCommRequestRetryTask();
            fmsCommRequestRetryTask = new FMSStreamServiceTask(_arg1, _arg2, _arg3);
        }
        private function runFMSCommRequestRetryTask():void{
            if (Boolean(fmsCommRequestRetryTask)){
                fmsCommRequestRetryTask.task();
                fmsCommRequestRetryTask.releaseMemory();
                fmsCommRequestRetryTask = null;
            };
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        public function setVolume(_arg1:Number):void{
            fmsStreamServiceStatus.volume = _arg1;
            if (fmsStreamService.connected){
                fmsStreamService.volume = fmsStreamServiceStatus.volume;
            };
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }
        private function releaseFMSCommRequestRetryTask():void{
            if (Boolean(fmsCommRequestRetryTask)){
                fmsCommRequestRetryTask.releaseMemory();
                fmsCommRequestRetryTask = null;
            };
        }
        private function fmsStreamService_handleNHNConnectionEvent(_arg1:NHNConnectionEvent):void{
            var _local2:String = _arg1.errorcode;
            var _local3:String;
            switch (_arg1.type){
                case NHNConnectionEvent.CONNECTION_COMPLETE:
                    sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_CONNECTION_SUCCESS, null, null);
                    numFMSCommRequestRetries = 0;
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        authorize();
                        setFMSStreamServiceStatusReady(true);
                    };
                    break;
                case NHNConnectionEvent.CONNECTION_CLOSED:
                    sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_CONNECTION_CLOSED, null, null);
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        if (!fmsStreamService.isRejected){
                            handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                        };
                    } else {
                        setFMSStreamServiceStatusReady(true);
                    };
                    break;
                case NHNConnectionEvent.CONNECTION_FAIL:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                case NHNConnectionEvent.CONNECTION_REJECTED:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                case NHNConnectionEvent.CONNECTION_CALL_FAILED:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                case NHNConnectionEvent.APPLICATION_SHUTDOWN:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                case NHNConnectionEvent.INVALID_APPLICATION:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                case NHNConnectionEvent.SERVICE_IOERROR:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                case NHNConnectionEvent.STREAM_IOERROR:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
                    break;
                default:
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        handleCommonNetConnectionError(this, connect, null, _arg1.type, _local3);
                    };
            };
        }
        private function releaseFMSCommPendingTask():void{
            if (Boolean(fmsCommPendingTask)){
                fmsCommPendingTask.releaseMemory();
                fmsCommPendingTask = null;
            };
        }
        private function setFMSCommPendingTask(_arg1:Object, _arg2:Function, _arg3:Array):void{
            releaseFMSCommPendingTask();
            fmsCommPendingTask = new FMSStreamServiceTask(_arg1, _arg2, _arg3);
        }
        private function stopFMSCommRequestRetry():void{
            fmsCommRequestRetry.reset();
            runFMSCommRequestRetryTask();
        }
        private function authorize():void{
            var _local1:Object;
            if (fmsStreamService.connected){
                numWASCommRequestRetries++;
                _local1 = {};
                _local1.callback = new ContextFunctionPair(this, authorizeCallback);
                _local1.args = null;
                sendNotification(FMSCommunicationNotifications.FC_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE, _local1, null);
            } else {
                numWASCommRequestRetries = 0;
                if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                    connect();
                };
            };
        }
        private function connect():void{
            var _local1:Object;
            if (!fmsStreamService.connected){
                numWASCommRequestRetries++;
                _local1 = {};
                _local1.callback = new ContextFunctionPair(this, connectCallback);
                _local1.args = null;
                sendNotification(FMSCommunicationNotifications.FC_HWCPM_REQUEST_FMS_INFO_GET_FMS_CONFIGURATION, _local1, null);
            };
        }
        private function fmsCommRequestRetry_handleTimerEvent(_arg1:TimerEvent):void{
            switch (_arg1.type){
                case TimerEvent.TIMER:
                    stopFMSCommRequestRetry();
                    break;
                default:
                    throw (new Error(("FMSStreamServiceMediator : " + "e.type is not valid.")));
            };
        }
        public function resume(_arg1:String=null, _arg2:Boolean=true):void{
            if (getFMSStreamServiceStatusReady()){
                if (Boolean(fmsStreamServiceStatus.trackID)){
                    if ((((fmsStreamServiceStatus.trackID === _arg1)) || (!(Boolean(_arg1))))){
                        if (fmsStreamServiceStatus.status === FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE){
                            fmsStreamServiceStatus.status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PLAY;
                            fmsStreamServiceStatus.automaticRequest = _arg2;
                            if (fmsStreamService.connected){
                                fmsStreamService.resume();
                            } else {
                                connect();
                            };
                        };
                    } else {
                        play(_arg1, 0, true, _arg2);
                    };
                } else {
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        throw (new Error(("FMSStreamServiceMediator : " + "fmsStreamServiceStatus.status is not valid.")));
                    };
                    play(_arg1, 0, true, _arg2);
                };
            } else {
                setFMSCommPendingTask(this, resume, [_arg1, _arg2]);
            };
        }
        private function startFMSCommRequestRetry(_arg1:Object, _arg2:Function, _arg3:Array):void{
            fmsCommRequestRetry.reset();
            setFMSCommRequestRetryTask(_arg1, _arg2, _arg3);
            fmsCommRequestRetry.start();
        }
        private function getFMSStreamServiceStatusReady():Boolean{
            return (fmsStreamServiceStatus.ready);
        }
        public function play(_arg1:String, _arg2:Number=0, _arg3:Boolean=true, _arg4:Boolean=true):void{
            var trackID:* = _arg1;
            var time:int = _arg2;
            var automaticallyPlay:Boolean = _arg3;
            var automaticRequest:Boolean = _arg4;
            if (getFMSStreamServiceStatusReady()){
                if (automaticallyPlay){
                    fmsStreamServiceStatus.status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PLAY;
                } else {
                    fmsStreamServiceStatus.status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE;
                };
                fmsStreamServiceStatus.trackID = trackID;
                fmsStreamServiceStatus.time = time;
                fmsStreamServiceStatus.automaticRequest = automaticRequest;
                if (fmsStreamService.connected){
                    try {
                        fmsStreamService.pause();
                    } catch(e:Error) {
                    };
                    fmsStreamServiceStatus.time = time;
                    authorize();
                } else {
                    connect();
                };
            } else {
                setFMSCommPendingTask(this, play, [trackID, time, automaticallyPlay]);
            };
        }
        private function execute(_arg1:NHNMusicStreamInfodto):void{
            var _local2:Object;
            if (((Boolean(_arg1)) && (Boolean(_arg1.trackid)))){
                if (fmsStreamService.connected){
                    if (fmsStreamServiceStatus.trackID !== _arg1.trackid){
                        stop();
                        return;
                    };
                    if (fmsStreamServiceStatus.time < 0){
                        throw (new Error(("FMSStreamServiceMediator : " + "fmsStreamServiceStatus.time is not valid.")));
                    };
                    switch (fmsStreamServiceStatus.status){
                        case FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PLAY:
                            if (String(_arg1.isAuth) === "2"){
                                dispatch_NHNStreamEvent_PLAY_COMPLETE();
                            } else {
                                if (_arg1.length > 0){
                                    fmsStreamServiceStatus.trackAdult = _arg1.trackAdult;
                                    sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_PROGRESS, {
                                        trackID:fmsStreamServiceStatus.trackID,
                                        time:fmsStreamServiceStatus.time
                                    }, null);
                                    fmsStreamService.play(_arg1.path);
                                    if (fmsStreamServiceStatus.time > 0){
                                        fmsStreamService.seek(fmsStreamServiceStatus.time);
                                    };
                                    fmsStreamService.volume = fmsStreamServiceStatus.volume;
                                } else {
                                    stop(fmsStreamServiceStatus.automaticRequest);
                                    _local2 = {};
                                    _local2.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_908;
                                    sendNotification(FMSCommunicationNotifications.FC_HWPEHPM_OPEN_ALERT_UI, _local2, null);
                                };
                            };
                            break;
                        case FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE:
                            if (fmsStreamServiceStatus.time >= 0){
                                fmsStreamService.play(_arg1.path);
                                fmsStreamService.pause();
                                fmsStreamService.seek(fmsStreamServiceStatus.time);
                            };
                            fmsStreamService.volume = fmsStreamServiceStatus.volume;
                            sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_PROGRESS, {
                                trackID:fmsStreamServiceStatus.trackID,
                                time:fmsStreamServiceStatus.time
                            }, null);
                            break;
                        case FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP:
                            throw (new Error(("FMSStreamServiceMediator : " + "invalid case has occured.")));
                        default:
                            throw (new Error(("FMSStreamServiceMediator : " + "fmsStreamServiceStatus.status is not valid.")));
                    };
                } else {
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        connect();
                    };
                };
            } else {
                throw (new Error("FMSStreamServiceMediator : streamInfo is not valid."));
            };
        }
        public function pause(_arg1:String=null, _arg2:Boolean=true):void{
            if (getFMSStreamServiceStatusReady()){
                if (Boolean(fmsStreamServiceStatus.trackID)){
                    if ((((fmsStreamServiceStatus.trackID === _arg1)) || (!(Boolean(_arg1))))){
                        if (fmsStreamServiceStatus.status === FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PLAY){
                            fmsStreamServiceStatus.status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE;
                            fmsStreamServiceStatus.automaticRequest = _arg2;
                            if (fmsStreamService.connected){
                                fmsStreamService.pause();
                            } else {
                                connect();
                            };
                        };
                    } else {
                        play(_arg1, 0, false, _arg2);
                    };
                } else {
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        throw (new Error(("FMSStreamServiceMediator : " + "fmsStreamServiceStatus.status is not valid.")));
                    };
                    play(_arg1, 0, false, _arg2);
                };
            } else {
                setFMSCommPendingTask(this, pause, [_arg1, _arg2]);
            };
        }
        private function get fmsStreamService():NHNConnectionManager{
            return ((viewComponent as NHNConnectionManager));
        }
        override public function onRegister():void{
            super.onRegister();
            fmsStreamServiceStatus = FMSStreamServiceStatus.getInstance();
            fmsCommRequestRetry = new Timer(WebPlayerCoreProperties.DELAY_OF_FMS_COMM_REQUEST_RETRIES, 1);
            fmsCommRequestRetry.addEventListener(TimerEvent.TIMER, fmsCommRequestRetry_handleTimerEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNStreamEvent.ONLOAD_STREAM_INFORMATION, fmsStreamService_handleNHNStreamEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNStreamEvent.STREAM_PROGRESS, fmsStreamService_handleNHNStreamEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNStreamEvent.PLAY_COMPLETE, fmsStreamService_handleNHNStreamEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNStreamEvent.PLAY_DISABLED, fmsStreamService_handleNHNStreamEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.APPLICATION_SHUTDOWN, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.CONNECTION_CALL_FAILED, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.CONNECTION_CLOSED, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.CONNECTION_COMPLETE, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.CONNECTION_FAIL, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.CONNECTION_REJECTED, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.INVALID_APPLICATION, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.SERVICE_IOERROR, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
            fmsStreamService.addEventListener(NHNConnectionEvent.STREAM_IOERROR, fmsStreamService_handleNHNConnectionEvent, false, 0, false);
        }
        private function runFMSCommPendingTask():void{
            if (((getFMSStreamServiceStatusReady()) && (Boolean(fmsCommPendingTask)))){
                fmsCommPendingTask.task();
                fmsCommPendingTask.releaseMemory();
                fmsCommPendingTask = null;
            };
        }
        private function setFMSStreamServiceStatusReady(_arg1:Boolean):void{
            fmsStreamServiceStatus.ready = _arg1;
            runFMSCommPendingTask();
        }
        public function seek(_arg1:String, _arg2:Number, _arg3:Boolean=true):void{
            var _local4:Boolean;
            if (getFMSStreamServiceStatusReady()){
                if (Boolean(fmsStreamServiceStatus.trackID)){
                    if ((((fmsStreamServiceStatus.trackID === _arg1)) || (!(Boolean(_arg1))))){
                        if ((((fmsStreamServiceStatus.status === FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PLAY)) || ((fmsStreamServiceStatus.status === FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE)))){
                            fmsStreamServiceStatus.time = _arg2;
                            fmsStreamServiceStatus.automaticRequest = _arg3;
                            if (fmsStreamService.connected){
                                fmsStreamService.seek(fmsStreamServiceStatus.time);
                            } else {
                                connect();
                            };
                        };
                    } else {
                        _local4 = true;
                        if (fmsStreamServiceStatus.status === FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE){
                            _local4 = false;
                        };
                        play(_arg1, _arg2, _local4, _arg3);
                    };
                } else {
                    if (fmsStreamServiceStatus.status !== FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP){
                        throw (new Error(("FMSStreamServiceMediator : " + "fmsStreamServiceStatus.status is not valid.")));
                    };
                    play(_arg1, _arg2, true, _arg3);
                };
            } else {
                setFMSCommPendingTask(this, seek, [_arg1, _arg2, _arg3]);
            };
        }

    }
}//package com.nhn.application.modules.fmscommunication.patterns.mediator 

import com.nhn.core.*;
import com.nhn.application.modules.webplayercore.*;
import com.nhn.core.interfaces.*;

class FMSStreamServiceTask implements IReleaseMemory {

    private var contextFunctionPair:ContextFunctionPair;
    private var released:Boolean;
    private var args:Array;

    public function FMSStreamServiceTask(_arg1:Object, _arg2:Function, _arg3:Array){
        if (((!(Boolean(_arg1))) || (!(Boolean(_arg2))))){
            throw (new Error(("FMSStreamServiceTask : " + "context of func is not valid.")));
        };
        contextFunctionPair = new ContextFunctionPair(_arg1, _arg2);
        if (Boolean(_arg3)){
            this.args = _arg3.concat();
        };
        released = false;
    }
    public function task():void{
        if (!released){
            contextFunctionPair.applyByArray(args);
        };
    }
    public function releaseMemory():void{
        if (!released){
            contextFunctionPair.releaseMemory();
            contextFunctionPair = null;
            args = null;
            released = true;
        };
    }
    public function toString():String{
        var _local1 = ((((((((("[FMSStreamServiceTask]\n" + "\tcontext : ") + contextFunctionPair.context) + "\n") + "\tfunc : ") + contextFunctionPair.func) + "\n") + "\targs : ") + args) + "\n");
        return (_local1);
    }

}
class FMSStreamServiceStatus {

    public static const STREAM_SERVICE_STATUS_PAUSE:String = "STREAM_SERVICE_STATUS_PAUSE";
    public static const STREAM_SERVICE_STATUS_STOP:String = "STREAM_SERVICE_STATUS_STOP";
    public static const STREAM_SERVICE_STATUS_PLAY:String = "STREAM_SERVICE_STATUS_PLAY";

    private static var instance:FMSStreamServiceStatus;

    private var _ready:Boolean;
    public var trackID:String;
    public var trackAdult:String;
    private var _status:String;
    public var automaticRequest:Boolean;
    public var time:Number;
    private var _volume:Number;

    public function FMSStreamServiceStatus(){
        if (Boolean(FMSStreamServiceStatus.instance)){
            throw (new Error((("FMSStreamServiceStatus : " + "do not make FMSStreamServiceStatus instance directly. ") + "Use FMSStreamServiceStatus.getInstance().")));
        };
        ready = true;
        status = FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP;
        trackID = null;
        time = -1;
        volume = WebPlayerCoreProperties.DEFAULT_VOLUME;
    }
    public static function getInstance():FMSStreamServiceStatus{
        if (!Boolean(instance)){
            instance = new (FMSStreamServiceStatus)();
        };
        return (instance);
    }

    public function get ready():Boolean{
        return (_ready);
    }
    public function set ready(_arg1:Boolean):void{
        _ready = _arg1;
    }
    public function get volume():Number{
        return (_volume);
    }
    public function set status(_arg1:String):void{
        switch (_arg1){
            case FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PLAY:
            case FMSStreamServiceStatus.STREAM_SERVICE_STATUS_PAUSE:
            case FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP:
                _status = _arg1;
                if (FMSStreamServiceStatus.STREAM_SERVICE_STATUS_STOP === _arg1){
                    trackID = null;
                    time = -1;
                };
                break;
            default:
                throw (new Error("FMSStreamServiceStatus : status is not valid."));
        };
    }
    public function toString():String{
        var _local1 = (((((((((((((((((("[FMSStreamServiceStatus]\n" + "\tready : ") + ready) + "\n") + "\tstatus : ") + status) + "\n") + "\ttrackID : ") + trackID) + "\n") + "\ttime : ") + time) + "\n") + "\tvolume : ") + volume) + "\n") + "\tautomaticRequest : ") + automaticRequest) + "\n");
        return (_local1);
    }
    public function get status():String{
        return (_status);
    }
    public function set volume(_arg1:Number):void{
        if (_arg1 < WebPlayerCoreProperties.MIN_VOLUME){
            _arg1 = WebPlayerCoreProperties.MIN_VOLUME;
        };
        if (_arg1 > WebPlayerCoreProperties.MAX_VOLUME){
            _arg1 = WebPlayerCoreProperties.MAX_VOLUME;
        };
        _volume = _arg1;
    }

}
﻿package com.nhn.application.modules.fmscommunication.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class FMSCommunicationPipeMessages {

        public static const STREAM_SERVICE_SET_VOLUME:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_SET_VOLUME", DataTransferProtocol);
        public static const STREAM_SERVICE_SEEK:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_SEEK", DataTransferProtocol);
        public static const STREAM_SERVICE_COMPLETE:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_COMPLETE", DataTransferProtocol);
        public static const STREAM_SERVICE_CONNECTION_CLOSED:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_CONNECTION_CLOSED", DataTransferProtocol);
        public static const STREAM_SERVICE_CONNECTION_SUCCESS:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_CONNECTION_SUCCESS", DataTransferProtocol);
        public static const STREAM_SERVICE_PLAY:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_PLAY", DataTransferProtocol);
        public static const STREAM_SERVICE_OPEN:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_OPEN", DataTransferProtocol);
        public static const CLIENT_MANAGING_SERVICE_CONNECTION_CLOSED:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_CLIENT_MANAGING_SERVICE_CONNECTION_CLOSED", DataTransferProtocol);
        public static const CLIENT_MANAGING_SERVICE_REQUEST_ADD_TRACK_IDS:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_CLIENT_MANAGING_SERVICE_REQUEST_ADD_TRACK_IDS", DataTransferProtocol);
        public static const CLIENT_MANAGING_SERVICE_RESPOND_ADD_TRACK_IDS:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_CLIENT_MANAGING_SERVICE_RESPOND_ADD_TRACK_IDS", DataTransferProtocol);
        public static const STREAM_SERVICE_PAUSE:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_PAUSE", DataTransferProtocol);
        public static const CLIENT_MANAGING_SERVICE_CONNECTION_SUCCESS:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_CLIENT_MANAGING_SERVICE_CONNECTION_SUCCESS", DataTransferProtocol);
        public static const STREAM_SERVICE_RESUME:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_RESUME", DataTransferProtocol);
        public static const STREAM_SERVICE_STOP:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_STOP", DataTransferProtocol);
        public static const STREAM_SERVICE_PROGRESS:MessageDefine = new MessageDefine("PIPEMSG_FMSCOMMUNICATION_STREAM_SERVICE_PROGRESS", DataTransferProtocol);

    }
}//package com.nhn.application.modules.fmscommunication.pipemessages 
﻿package com.nhn.application.modules.fmscommunication {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;
    import com.nhn.application.modules.fmscommunication.notifications.*;
    import com.nhn.application.modules.fmscommunication.patterns.command.*;

    public class FMSCommunicationModule extends PipeInterchangeableModule {

        public static const NAME_BASE:String = "FMSCommunicationModule";

        public function FMSCommunicationModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getType()){
                case DataTransferProtocol.TYPE:
                    switch (_arg1.getHeaderByIMessageHeader().name){
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_PLAY.name:
                            facade.sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_PLAY, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_PAUSE.name:
                            facade.sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_PAUSE, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_RESUME.name:
                            facade.sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_RESUME, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_STOP.name:
                            facade.sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_STOP, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_SEEK.name:
                            facade.sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_SEEK, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_SET_VOLUME.name:
                            facade.sendNotification(FMSCommunicationNotifications.STREAM_SERVICE_SET_VOLUME, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name:
                            facade.sendNotification(FMSCommunicationNotifications.FC_HWCPM_RESPOND_COMMON_IO_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name:
                            facade.sendNotification(FMSCommunicationNotifications.FC_HWCPM_RESPOND_COMMON_SECURITY_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_GET_COOKIE.name:
                            facade.sendNotification(FMSCommunicationNotifications.FC_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_FMS_INFO_GET_FMS_CONFIGURATION.name:
                            facade.sendNotification(FMSCommunicationNotifications.FC_HWCPM_RESPOND_FMS_INFO_GET_FMS_CONFIGURATION, _arg1.getBody(), null);
                            break;
                        default:
                            throw (new Error(("FMSCommunicationModule : " + "message.getHeaderByIMessageHeader().name is not valid.")));
                    };
                    break;
                default:
                    super.handlePipeMessage(_arg1);
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_PLAY.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_PAUSE.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_RESUME.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_STOP.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_SEEK.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_SET_VOLUME.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_GET_COOKIE.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_FMS_INFO_GET_FMS_CONFIGURATION.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.fmscommunication 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.managers {
    import flash.events.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events.*;
    import flash.net.*;

    public class AssetLoadManager extends EventDispatcher {

        public static const TEST_GRAY_ASSET_URL:String = "assets/music_icon_asset.swf";
        public static const TEST_BLUE_BLUE_ASSET_URL:String = "assets/music_icon_asset_bb.swf";
        public static const TEST_BLACK_PINK_ASSET_URL:String = "assets/music_icon_asset_bp.swf";
        public static const TEST_WHITE_ASSET_URL:String = "assets/music_icon_asset_bb.swf";

        private static var _instance:AssetLoadManager;

        private var signiture:Class = null;
        private var _assetInterpreter:IAssetInterpreter;
        private var _loader:Loader;

        public function AssetLoadManager(){
            _loader = new Loader();
            _loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeAssetLoadHandler);
            _loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, errorAssetLoadHandler);
            _loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressAssetLoadHandler);
        }
        public static function getInstance():AssetLoadManager{
            if (!Boolean(_instance)){
                _instance = new (AssetLoadManager)();
            };
            return (_instance);
        }

        private function progressAssetLoadHandler(_arg1:ProgressEvent):void{
        }
        public function get assetInterpreter():IAssetInterpreter{
            return (_assetInterpreter);
        }
        public function sendNewAssetListToComponent(_arg1, _arg2:Class=null):void{
            if (Boolean(assetInterpreter)){
            };
        }
        private function completeAssetLoadHandler(_arg1:Event):void{
            trace("~~~~COMPLETE");
            var _local2:* = _loader.contentLoaderInfo.applicationDomain;
            var _local3:AssetControlEvent = new AssetControlEvent(AssetControlEvent.COMPLETE_LOAD_ASSET, true);
            _local3.data = _local2;
            dispatchEvent(_local3);
            sendNewAssetListToComponent(_local2, signiture);
        }
        public function loadAsset(_arg1:String, _arg2:Class=null, _arg3:Boolean=false):void{
            var _local4:URLRequest = new URLRequest(encodeURI(_arg1));
            _loader.load(_local4);
            if (Boolean(_arg2)){
                signiture = _arg2;
            };
        }
        public function set assetInterpreter(_arg1:IAssetInterpreter):void{
            this._assetInterpreter = _arg1;
        }
        public function drawNewAsset():void{
        }
        private function errorAssetLoadHandler(_arg1:IOErrorEvent):void{
            throw (new Error("invalid asset file or file does not exist"));
        }
        public function removeExistAsset():void{
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.managers 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.viewbase {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events.*;
    import flash.utils.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobject.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobjectlist.*;
    import flash.external.*;

    public class NaverPreviewPlayer extends NaverMusicPlayerView {

        public static const EMPTIED:String = "nmp_emptied";
        private static const MAX_LOAD_LIMIT_HOUR:int = 7000;
        public static const RATE_CHANGE:String = "nmp_rate_change";
        public static const CALL_CALLBACK:String = "request";
        public static const PAUSE_CALLBACK:String = "pause";
        private static const MAX_QUEUE_LENGTH:int = 3;
        public static const TRACK_IS_PLAYING_START:Number = 2;
        public static const PLAYING:String = "nmp_playing";
        public static const CLEAR_CALLBACK:String = "clear";
        public static const REQUEST_HOSTINFORMATION:String = "nmp_host_info";
        public static const ENDED:String = "nmp_ended";
        public static const LOADED_DATA:String = "nmp_loaded_data";
        public static const RESUME_CALLBACK:String = "resume";
        public static const LOAD_START:String = "nmp_load_start";
        public static const SUSPEND:String = "nmp_suspend";
        public static const SEEK_CALLBACK:String = "seek";
        public static const TRACK_IS_LOADED:Number = 1;
        public static const TRACK_IS_PLAYING:Number = 3;
        public static const UPDATE_USER_INFO:String = "nmp_user_info";
        public static const TRACK_IS_STOPPED:Number = 5;
        public static const PLAYER_READY:String = "nmp_ready";
        public static const SEEKED:String = "nmp_seeked";
        public static const DURATION_CHANGE:String = "nmp_duration_change";
        public static const PROGRESS:String = "nmp_progress";
        public static const ABORT:String = "nmp_abort";
        public static const STALLED:String = "nmp_stalled";
        public static const PLAY:String = "nmp_play";
        public static const END_CALLBACK:String = "end";
        public static const VOLUME_CALLBACK:String = "volume";
        public static const TRACK_IS_PAUSED:Number = 4;
        public static const PAUSE:String = "nmp_pause";
        public static const TRACK_IS_WATING:Number = 0;
        public static const TIMEUPDATE:String = "nmp_timeupdate";
        public static const SEEKING:String = "nmp_seeking";
        public static const CAN_PLAY:String = "nmp_can_play";
        public static const RESUME:String = "nmp_resume";
        public static const ERROR:String = "nmp_error";
        public static const ON_LOAD_SWF:String = "___nmp_core_onload___";
        public static const CAN_PLAY_THROUGH:String = "nmp_can_play_through";
        public static const CHECK_LOAD_CALLBACK:String = "isLoaded";
        private static const PLAY_INTERVAL:int = 10;
        public static const VOLUME_CHANGE:String = "nmp_volume_change";
        public static const PLAY_CALLBACK:String = "plays";
        public static const REQUEST_TRACKLIST:String = "nmp_track_list";
        public static const ADDSONGLIST:String = "nmp_addsong";
        public static const LOAD_CALLBACK:String = "load";

        public static var ON_INTERFACE_CALL_EVENT:String = "___response___";
        public static var ON_STREAMING_STATUS_UPDATE_EVENT:String = "___musicBroadCast___";

        private var bIsPaused:Boolean = false;
        private var launchOption:int;
        private var existTrackIdList:String = "";
        private var oConfigurationData:ConfigurationData;
        private var bStreamingInfoLoaded:Boolean = false;
        private var _requestQueue:Array = null;
        private var oUserData:UserData;
        private var _loadInterval:Number = 0;
        private var playerModel:MusicPlayerBasicModel;
        private var bNMPCoreLoaded:Boolean = false;
        private var requestTrackIdOnce:Boolean = false;
        private var bIsPlaying:Boolean = false;
        private var oInputData:InputData;
        private var prevPlayingTime:Number = 0;
        private var bStreamingInfoLoading:Boolean = false;
        private var oStreamingData:StreamingData;

        public function NaverPreviewPlayer(){
            _requestQueue = [];
            oStreamingData = new StreamingData();
            oConfigurationData = new ConfigurationData();
            oUserData = new UserData();
            oInputData = new InputData();
            playerModel = new MusicPlayerBasicModel();
            playerModel.userInfo.addEventListener(UserInfoPropertyEvent.USER_INFO_CHANGED, updateViewPanel);
            registerAdditionalCallBack();
            setTimeout(initializeView, 500);
        }
        public function updateTop100ListModel(_arg1:Object=null):void{
        }
        public function updatePlayListModel(_arg1:Object=null):void{
        }
        public function request(_arg1:String):Object{
            var _local3:String;
            var _local2:Object = {};
            switch (_arg1){
                case NaverPreviewPlayer.REQUEST_TRACKLIST:
                    _local3 = "";
                    trace(("trackId....: " + existTrackIdList));
                    if (((existTrackIdList) && ((existTrackIdList.length > 0)))){
                        _local3 = existTrackIdList;
                    };
                    _local2 = _local3;
                    break;
                case NaverPreviewPlayer.REQUEST_HOSTINFORMATION:
                    _local2.serviceApiUrl = ("http://" + WebPlayerCoreProperties.musicServerAPIHost);
                    _local2.playerApiUrl = WebPlayerCoreProperties.playerServerAPIHost;
                    break;
            };
            return (_local2);
        }
        private function updateViewPanel(_arg1:UserInfoPropertyEvent):void{
            trace("set state change");
        }
        override public function updateTop100SongList(_arg1:SongList):void{
        }
        private function createChildren():void{
        }
        override public function addSongTrackIdsAndLaunchOption(_arg1:String, _arg2:int):void{
        }
        override public function notifyCurrentSongWasCompleted():void{
            var _local1:NaverMusicPlayerBasicEvent;
            if (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING){
                if (ExternalInterface.available){
                    bIsPlaying = false;
                    bIsPaused = false;
                    bStreamingInfoLoaded = false;
                    bStreamingInfoLoading = false;
                    this.oStreamingData.nCurrentPlayingTime = 0;
                    this.oStreamingData.nTotalTime = 0;
                    this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_WATING;
                    ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.ENDED, this.oStreamingData.getData());
                };
            } else {
                _local1 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
                _local1.data = {auto:true};
                dispatchEvent(_local1);
            };
        }
        public function volume(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Number = _arg1.nVolume;
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, true);
            _local4.data = {
                trackId:_local2,
                volume:_local3
            };
            dispatchEvent(_local4);
            this.oConfigurationData.nVolume = _local3;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.VOLUME_CHANGE, this.oConfigurationData.getData());
            };
        }
        public function resume(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Boolean = _arg1.bIsAuto;
            bIsPlaying = true;
            bIsPaused = false;
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, true);
            _local4.data = {
                trackId:_local2,
                auto:_local3
            };
            dispatchEvent(_local4);
            this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_PLAYING_START;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.RESUME, this.oStreamingData.getData());
            };
        }
        override public function registerAdditionalCallBack():void{
            if (ExternalInterface.available){
                ExternalInterface.addCallback("requestTrackIdList", requestTrackIdList);
                ExternalInterface.addCallback(NaverPreviewPlayer.CALL_CALLBACK, request);
                ExternalInterface.addCallback(NaverPreviewPlayer.PLAY_CALLBACK, play);
                ExternalInterface.addCallback(NaverPreviewPlayer.PAUSE_CALLBACK, pause);
                ExternalInterface.addCallback(NaverPreviewPlayer.RESUME_CALLBACK, resume);
                ExternalInterface.addCallback(NaverPreviewPlayer.LOAD_CALLBACK, load);
                ExternalInterface.addCallback(NaverPreviewPlayer.SEEK_CALLBACK, seek);
                ExternalInterface.addCallback(NaverPreviewPlayer.VOLUME_CALLBACK, volume);
                ExternalInterface.addCallback(NaverPreviewPlayer.END_CALLBACK, end);
                ExternalInterface.addCallback(NaverPreviewPlayer.CLEAR_CALLBACK, clear);
                ExternalInterface.addCallback(NaverPreviewPlayer.CHECK_LOAD_CALLBACK, checkLoaded);
                try {
                    ExternalInterface.call(NaverPreviewPlayer.ON_LOAD_SWF, {});
                    ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.PLAYER_READY, {});
                } catch(e:Error) {
                };
            };
        }
        override public function updateCurrentPlayTime(_arg1:Number):void{
            _arg1 = Math.floor(_arg1);
            _arg1 = (_arg1 * 1000);
            if (prevPlayingTime != _arg1){
                if (ExternalInterface.available){
                    prevPlayingTime = _arg1;
                    this.oStreamingData.nCurrentPlayingTime = _arg1;
                    this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_PLAYING;
                    ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.TIMEUPDATE, this.oStreamingData.getData());
                };
            };
        }
        public function play(_arg1:Object):void{
            var _local4:int;
            var _local2:int = _requestQueue.length;
            var _local3:int;
            if (MAX_QUEUE_LENGTH > _local2){
                trace(">>> length is less than MAX_QUEUE_LENGTH so push data");
                _requestQueue.push(_arg1);
            } else {
                trace(">>> length is overed! so shift data");
                _local3 = ((_local2 - MAX_QUEUE_LENGTH) + 1);
                _local4 = 0;
                while (_local4 < _local3) {
                    _requestQueue.shift();
                    _local4++;
                };
                _requestQueue.push(_arg1);
            };
            setTimeout(requestPlayInternal, PLAY_INTERVAL);
        }
        private function notifyCompleteLoading():void{
        }
        public function checkLoaded():Boolean{
            return (bNMPCoreLoaded);
        }
        private function handleOption(_arg1:int):void{
            switch ((_arg1 & 0xFF)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_NONE_TRACK:
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_FRONT_TRACK:
                    break;
                case WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_BACK_TRACK:
                    break;
                default:
                    throw (new Error("invalid adding Options!"));
            };
            switch ((_arg1 & 0xFF00)){
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_OLD_FIRST_TRACK:
                case WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NEW_FIRST_TRACK:
                    break;
                default:
                    throw (new Error("invalid playing option!"));
            };
        }
        public function addCallBackMethod():void{
        }
        public function requestPlayInternal():void{
            var _local2:Object;
            var _local4:String;
            var _local5:Boolean;
            var _local6:NaverMusicPlayerBasicEvent;
            var _local1:int;
            var _local3:int;
            _local1 = _requestQueue.length;
            trace((">>> current queue length: " + _local1));
            if (((!(bStreamingInfoLoaded)) && (bStreamingInfoLoading))){
                trace(">>>>>>> exsiting request was not completed! please waiting...");
            } else {
                if (_local1 >= 1){
                    _local2 = _requestQueue.shift();
                    bStreamingInfoLoaded = false;
                    bStreamingInfoLoading = true;
                    this.oStreamingData.sTrackId = _local2.sTrackId;
                    this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_WATING;
                    this.oConfigurationData.nSeek = 0;
                    this.oConfigurationData.nVolume = 0;
                    if (_local2.oInputData){
                        this.oInputData.data = _local2.oInputData;
                    };
                    ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.LOAD_START, this.oStreamingData.getData());
                    clearTimeout(_loadInterval);
                    _loadInterval = setTimeout(checkLoadComplete, MAX_LOAD_LIMIT_HOUR);
                    _local4 = ((_local2.sTrackId) || (this.oStreamingData.sTrackId));
                    _local5 = _local2.bIsAuto;
                    _local6 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                    _local6.data = {
                        trackId:_local4,
                        auto:_local5
                    };
                    dispatchEvent(_local6);
                };
            };
        }
        override public function removeAllView():void{
        }
        public function clear():void{
            var _local1:int;
            if (_requestQueue.length > 0){
                _local1 = 0;
                while (_local1 < _requestQueue.length) {
                    _requestQueue[_local1] = null;
                    _local1++;
                };
                _requestQueue.splice(0, _requestQueue.length);
            };
            bStreamingInfoLoaded = false;
            bStreamingInfoLoading = false;
        }
        private function playMusic(_arg1:Boolean, _arg2:Boolean=true):void{
            var _local4:NaverMusicPlayerBasicEvent;
            var _local5:DLinkedList;
            var _local6:DListIterator;
            var _local3:DListNode = playerModel.activeNode;
            if (Boolean(_local3)){
                if (_arg1){
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                } else {
                    _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, true);
                };
                _local4.data = {
                    trackId:(_local3.data as SongInfoServiceObject).getTrackID(),
                    auto:_arg2
                };
                dispatchEvent(_local4);
            } else {
                _local5 = playerModel.musicPlayList;
                _local6 = playerModel.activeMusicList.getListIterator();
                if (Boolean(_local6)){
                    _local6.start();
                    playerModel.playingSongNode = _local6.node;
                    if (Boolean(playerModel.playingSongNode)){
                        playerModel.activeNode = playerModel.searchVaildSongObject(playerModel.playingSongNode.data, _local5);
                        _local3 = playerModel.activeNode;
                        _local4 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, true);
                        _local4.data = {
                            trackId:(_local3.data as SongInfoServiceObject).getTrackID(),
                            auto:_arg2
                        };
                        dispatchEvent(_local4);
                    };
                };
            };
        }
        override protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            super.isLoadComplete = true;
        }
        override public function initializeView():void{
            var _local1:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER);
            dispatchEvent(_local1);
        }
        override public function initializeAuth(_arg1:Authorization):void{
            this.oUserData.sHasTicket = _arg1.hasticket;
            this.oUserData.sIsAdult = _arg1.isadult;
            this.oUserData.sIsLogin = _arg1.islogin;
            this.oUserData.sEncryptedUserId = _arg1.encuserid;
        }
        public function end(_arg1:Object):void{
            var _local3:NaverMusicPlayerBasicEvent;
            var _local2:Boolean;
            if (_arg1.hasOwnProperty("bIsAuto")){
                _local2 = _arg1.bIsAuto;
            };
            if (_local2){
                _local3 = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, true);
                _local3.data = {auto:_local2};
                dispatchEvent(_local3);
            };
            notifyCurrentSongWasCompleted();
        }
        override public function configPlayerSkin(_arg1:String):void{
        }
        override public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
            var _local7:Boolean;
            if (!Boolean(_arg1)){
                return;
            };
            handleOption(_arg2);
            var _local3:Array = _arg1.list;
            var _local4:int = _local3.length;
            var _local5:Song;
            var _local6:SongInfoServiceObject;
            playerModel.removeAllPlayList();
            var _local8:int;
            while (_local8 < _local4) {
                _local5 = _local3[_local8];
                _local6 = new SongInfoServiceObject(_local5);
                playerModel.addSingleSongToPlayListAtFirst(_local6);
                _local8++;
            };
            playerModel.activeMusicList = playerModel.musicPlayList.concat();
            var _local9:DListIterator = playerModel.musicPlayList.getListIterator();
            _local9.start();
            playerModel.activeNode = _local9.node;
            playMusic(true, true);
        }
        public function load(_arg1:Object):void{
        }
        override public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            bStreamingInfoLoaded = true;
            bStreamingInfoLoading = false;
            clearTimeout(_loadInterval);
            if (ExternalInterface.available){
                if (!Boolean(_arg1)){
                    ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.ERROR, {msg:"음원로드하였으나, 음원 정보가 없습니다."});
                    setTimeout(requestPlayInternal, PLAY_INTERVAL);
                } else {
                    this.oStreamingData.nTotalTime = (_arg1.length * 1000);
                    this.oStreamingData.nCurrentPlayingTime = 0;
                    this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_LOADED;
                    this.oStreamingData.nDisplayTime = (_arg1.displayTime * 1000);
                    if (_arg1.isUsingPlatformLimit){
                        this.oStreamingData.isUsingPlatformLimit = _arg1.isUsingPlatformLimit;
                    };
                    this.oUserData.sHasTicket = _arg1.hasTicket;
                    this.oUserData.sIsAdult = _arg1.isAdult;
                    this.oUserData.sIsLogin = _arg1.isLogin;
                    this.oUserData.nAuth = _arg1.isAuth;
                    this.oUserData.sEncryptedUserId = _arg1.userid;
                    prevPlayingTime = 0;
                    ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.LOADED_DATA, {
                        oStreamData:this.oStreamingData.getData(),
                        oAuthData:this.oUserData.getData(),
                        oInputData:this.oInputData.getData()
                    });
                    if (bStreamingInfoLoaded){
                        bIsPlaying = true;
                        this.oStreamingData.nTotalTime = (_arg1.length * 1000);
                        this.oStreamingData.nDisplayTime = (_arg1.displayTime * 1000);
                        this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_PLAYING_START;
                        ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.PLAY, this.oStreamingData.getData());
                        setTimeout(requestPlayInternal, PLAY_INTERVAL);
                    };
                };
            };
            return ("TEST_PLAYER");
        }
        public function requestTrackIdList():String{
            var _local1 = "2429397, 2429397, 3143224,3153451,3199140,3201927,3201430,3205755,3205756,3205757,3205758,3205759,3192857,3205760,3205695,3182429,3205731, 3177663, 3182429,3205731, 3177663, 3182429";
            return (_local1);
        }
        public function pause(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Boolean = _arg1.bIsAuto;
            bIsPlaying = false;
            bIsPaused = true;
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, true);
            _local4.data = {
                trackId:_local2,
                auto:_local3
            };
            dispatchEvent(_local4);
            this.oStreamingData.nStatus = NaverPreviewPlayer.TRACK_IS_PAUSED;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.PAUSE, this.oStreamingData.getData());
            };
        }
        public function seek(_arg1:Object):void{
            var _local2:String = ((_arg1.sTrackId) || (this.oStreamingData.sTrackId));
            var _local3:Number = _arg1.nTime;
            _local3 = (_local3 / 1000);
            var _local4:NaverMusicPlayerBasicEvent = new NaverMusicPlayerBasicEvent(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, true);
            _local4.data = {
                trackId:_local2,
                seek:_local3,
                auto:false
            };
            dispatchEvent(_local4);
            this.oConfigurationData.nSeek = _local3;
            if (ExternalInterface.available){
                ExternalInterface.call(NaverPreviewPlayer.ON_STREAMING_STATUS_UPDATE_EVENT, NaverPreviewPlayer.SEEKED, this.oConfigurationData.getData());
            };
        }
        private function checkLoadComplete():void{
            if (((!(bStreamingInfoLoaded)) && (bStreamingInfoLoading))){
                bStreamingInfoLoaded = false;
                bStreamingInfoLoading = false;
            };
            if (ExternalInterface.available){
                ExternalInterface.call("___musicBroadCast___", "nmp_error", {
                    resultCode:"1000",
                    resultMessage:"해당 음원을 로드할 수 없습니다."
                });
            };
            trace(">>>>>>>>>>>>> 음원로드 타임아웃.");
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.viewbase 

class StreamingData {

    public var nStatus:Number;
    public var nDisplayTime:Number;
    public var nTotalTime:Number;
    public var isUsingPlatformLimit:String;
    public var nCurrentPlayingTime:Number;
    public var sTrackId:String;

    public function StreamingData(){
        nCurrentPlayingTime = 0;
        nTotalTime = 0;
        nStatus = NaverPreviewPlayer.TRACK_IS_WATING;
        sTrackId = null;
    }
    public function getData():Object{
        return ({
            nCurrentPlayingTime:this.nCurrentPlayingTime,
            nTotalTime:this.nTotalTime,
            nStatus:this.nStatus,
            sTrackId:this.sTrackId,
            nDisplayTime:this.nDisplayTime,
            isUsingPlatformLimit:this.isUsingPlatformLimit
        });
    }

}
class UserData {

    public var nAuth:int;
    public var sEncryptedUserId:String;
    public var sHasTicket:String;
    public var sIsLogin:String;
    public var sIsAdult:String;

    public function UserData(){
    }
    public function getData():Object{
        return ({
            sHasTicket:this.sHasTicket,
            sIsAdult:this.sIsAdult,
            sIsLogin:this.sIsLogin,
            nAuth:this.nAuth,
            sEncryptedUserId:this.sEncryptedUserId
        });
    }

}
class InputData {

    public var data:Object;

    public function InputData(){
    }
    public function getData():Object{
        return (data);
    }

}
class ConfigurationData {

    public var nSeek:Number = 0;
    public var nVolume:Number = 0;

    public function ConfigurationData(){
    }
    public function getData():Object{
        return ({
            nVolume:this.nVolume,
            nSeek:this.nSeek
        });
    }

}
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.viewbase {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import flash.display.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.managers.*;

    public class NaverMusicPlayerView extends Sprite implements IMusicPlayListManager {

        protected var isLoadComplete:Boolean;

        public function NaverMusicPlayerView(){
            var _local1:AssetLoadManager = AssetLoadManager.getInstance();
            _local1.addEventListener(AssetControlEvent.COMPLETE_LOAD_ASSET, completeHandler);
            _local1.addEventListener(AssetControlEvent.FAIL_LOAD_ASSET, errorHandler);
            _local1.addEventListener(AssetControlEvent.COMPETE_ASSIGN_NEW_ASSET, assetAssignCompleteHandler);
        }
        protected function registAssetInterpreter(_arg1:IAssetInterpreter):void{
            AssetLoadManager.getInstance().assetInterpreter = _arg1;
        }
        public function removeAllView():void{
        }
        public function updateLylicsOfCurrentPlayingSong(_arg1:Song):void{
        }
        public function updateStateAndPlaySong():void{
        }
        public function configPostingPlayerInformation(_arg1:Article):void{
        }
        protected function errorHandler(_arg1:AssetControlEvent):void{
        }
        public function configPlayerShuffleOption(_arg1:int):void{
        }
        public function initializeView():void{
        }
        public function initializeAuth(_arg1:Authorization):void{
        }
        public function configPlayerSongListPlayOption(_arg1:String):void{
        }
        public function configPlayerSkin(_arg1:String):void{
        }
        protected function assetAssignCompleteHandler(_arg1:AssetControlEvent):void{
            isLoadComplete = true;
        }
        public function configPlayerRepeatOption(_arg1:int):void{
        }
        public function addSongTrackIdsAndLaunchOption(_arg1:String, _arg2:int):void{
        }
        public function updateTop100UpdatedDate(_arg1:String):void{
        }
        public function configPlayerSongListSaveOption(_arg1:String):void{
        }
        public function drawProperGuideFooter(_arg1:String):void{
        }
        public function loadAsset(_arg1:String, _arg2:Class=null, _arg3:Boolean=false):void{
            isLoadComplete = false;
            AssetLoadManager.getInstance().loadAsset(_arg1, _arg2, _arg3);
        }
        public function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void{
        }
        public function notifyCurrentSongWasCompleted():void{
        }
        public function updateCurrentPlayTime(_arg1:Number):void{
        }
        public function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String{
            return (null);
        }
        public function configPlayerVolumeValue(_arg1:Number):void{
        }
        public function registerAdditionalCallBack():void{
        }
        public function updateTop100SongList(_arg1:SongList):void{
        }
        public function configPlayerSongQualityOption(_arg1:String):void{
        }
        protected function completeHandler(_arg1:AssetControlEvent):void{
        }
        public function initPlayingSongView():void{
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.viewbase 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.interfaces {

    public interface IAssetInterpreter {

        function updateAsset(_arg1, _arg2):void;

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobject {
    import com.nhn.webapis.music.serviceobject.*;

    public class SongInfoServiceObject {

        private var _isSelected:Boolean;
        private var _isDragOver:Boolean;
        public var abstractedTitle:String;
        private var _isChecked:Boolean;
        private var _isPlaying:Boolean;
        public var originalLength:Number;
        private var _songServiceObject:Song;
        public var isEmpty:Boolean = false;
        public var soIndex:int = -1;
        public var _icon;
        public var isAbstract:Boolean;
        private var _label:String;

        public function SongInfoServiceObject(_arg1:Song=null, _arg2:Boolean=false){
            if (Boolean(_arg1)){
                songServiceObject = _arg1;
                label = _arg1.track.tracktitle;
                this.isEmpty = _arg2;
            };
        }
        public function release():void{
            _icon = null;
            _label = null;
            if (Boolean(_songServiceObject)){
                _songServiceObject.releaseMemory();
                _songServiceObject = null;
            };
        }
        public function hasMp3File():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.hasmp3){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function getAlbumid():String{
            var _local1:String;
            var _local2:Album;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.albumid;
            };
            return (_local1);
        }
        public function updateLyric(_arg1:Song):Boolean{
            var _local3:Boolean;
            var _local2:Song = songServiceObject;
            if (Boolean(_local2)){
                _local3 = true;
            };
            return (_local3);
        }
        public function getArtistid():String{
            var _local1:String;
            var _local2:Artist;
            if (Boolean(songServiceObject)){
                _local2 = (songServiceObject.artistlist.list[0] as Artist);
                if (Boolean(_local2)){
                    _local1 = _local2.artistid;
                };
            };
            return (_local1);
        }
        public function get icon(){
            return (_icon);
        }
        public function get isChecked():Boolean{
            return (_isChecked);
        }
        public function getAlbumTitle():String{
            var _local2:Album;
            var _local1:String;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.albumtitle;
                if (!Boolean(_local1)){
                    _local1 = "dasdasdasfsdjfhjksdfhkshfkhksdfdasd";
                };
            };
            return (_local1);
        }
        public function get isPlaying():Boolean{
            return (_isPlaying);
        }
        public function get adultProperty():String{
            if (!Boolean(songServiceObject)){
                throw (new Error("Song data is null!!!"));
            };
            return (songServiceObject.adult);
        }
        public function set isChecked(_arg1:Boolean):void{
            this._isChecked = _arg1;
        }
        public function get songServiceObject():Song{
            return (_songServiceObject);
        }
        public function getAlbumJacketThumbURL():String{
            var _local1:String;
            var _local2:Album;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.album;
                if (!Boolean(_local2)){
                    throw (new Error("Album is empty!"));
                };
                _local1 = _local2.imageurl;
            };
            return (_local1);
        }
        public function set isPlaying(_arg1:Boolean):void{
            this._isPlaying = _arg1;
        }
        public function set isSelected(_arg1:Boolean):void{
            this._isSelected = _arg1;
        }
        public function getTrackTitle():String{
            var _local1:String;
            var _local2:Track;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.track;
                if (!Boolean(_local2)){
                    throw (new Error("Track is empty!"));
                };
                _local1 = _local2.tracktitle;
            };
            return (_local1);
        }
        public function clone():SongInfoServiceObject{
            var _local1:Song = songServiceObject.clone();
            var _local2:SongInfoServiceObject = new SongInfoServiceObject(_local1);
            _local2.isPlaying = false;
            _local2.isEmpty = isEmpty;
            _local2.isChecked = false;
            return (_local2);
        }
        public function set isDragOver(_arg1:Boolean):void{
            this._isDragOver = _arg1;
        }
        public function isAdultSong():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.adult){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function canAcquireMP3File():Boolean{
            var _local1:Boolean;
            if (Boolean(songServiceObject)){
                switch (songServiceObject.free){
                    case "Y":
                        _local1 = true;
                        break;
                };
            };
            return (_local1);
        }
        public function getArtistName():String{
            var _local1:String;
            var _local2:Artist;
            if (Boolean(songServiceObject)){
                _local2 = (songServiceObject.artistlist.list[0] as Artist);
                if (Boolean(_local2)){
                    _local1 = _local2.artistname;
                };
            };
            return (_local1);
        }
        public function set label(_arg1:String):void{
            this._label = _arg1;
        }
        public function getTrackID():String{
            var _local1:String;
            var _local2:Track;
            if (Boolean(songServiceObject)){
                _local2 = songServiceObject.track;
                if (!Boolean(_local2)){
                    throw (new Error("Track is empty!"));
                };
                _local1 = _local2.trackid;
            };
            return (_local1);
        }
        public function get isDragOver():Boolean{
            return (_isDragOver);
        }
        public function get label():String{
            return (_label);
        }
        public function set icon(_arg1):void{
            this._icon = _arg1;
        }
        public function get singer():String{
            var _local1 = "";
            if (((!(Boolean(songServiceObject.artistlist))) || ((songServiceObject.artistlist.length == 0)))){
                _local1 = "Unknown artist";
            };
            var _local2:Array = songServiceObject.artistlist.list;
            var _local3:int = _local2.length;
            var _local4:int;
            while (_local4 < _local3) {
                _local1 = (_local1 + _local2[_local4].artistname);
                if ((((_local3 > 1)) && (!((_local4 == (_local3 - 1)))))){
                    _local1 = (_local1 + ", ");
                };
                _local4++;
            };
            return (_local1);
        }
        public function get isSelected():Boolean{
            return (_isSelected);
        }
        public function set songServiceObject(_arg1:Song):void{
            if (Boolean(this._songServiceObject)){
                this._songServiceObject.releaseMemory();
                this._songServiceObject = null;
            };
            this._songServiceObject = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobject 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobject {
    import flash.events.*;

    public class UserInfo extends EventDispatcher {

        public static const AUTH_WHOLE:uint = 0;
        public static const AUTH_ONE_MINUTE:uint = 1;
        public static const IS_ADULT:String = "Y";
        public static const AUTH_NONE:uint = 2;
        public static const HAS_TICKET:String = "Y";
        public static const IS_LOGIN:String = "Y";
        public static const IS_NOT_LOGIN:String = "N";
        public static const DOES_NOT_HAVE_TICKET:String = "N";
        public static const IS_NOT_ADULT:String = "N";

        private var _hasTicket:String;
        private var _isLogin:String;
        private var _isAdult:String;
        private var _isAuth:uint;

        public function set isAdult(_arg1:String):void{
            this._isAdult = _arg1;
        }
        public function set isAuth(_arg1:uint):void{
            this._isAuth = _arg1;
        }
        public function get hasTicket():String{
            return (_hasTicket);
        }
        public function set hasTicket(_arg1:String):void{
            this._hasTicket = _arg1;
        }
        public function get isAdult():String{
            return (_isAdult);
        }
        public function get isAuth():uint{
            return (_isAuth);
        }
        public function set isLogin(_arg1:String):void{
            this._isLogin = _arg1;
        }
        public function get isLogin():String{
            return (_isLogin);
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobject 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobjectlist {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import de.polygonal.ds.*;
    import com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobject.*;

    public class MusicPlayerBasicModel extends EventDispatcher {

        public static const VISIBLE_ROW_COUNT:int = 14;

        private var _top100MusicList:DLinkedList;
        private var _tmpNextNode:DListNode;
        private var _musicPlayList:DLinkedList;
        private var _activeMusicList:DLinkedList;
        private var _playingSongNode:DListNode;
        private var _activeNode:DListNode;
        private var _tmpPrevNode:DListNode;
        private var _isShuffled:Boolean;
        private var _userInfo:UserInfo;

        public function MusicPlayerBasicModel(){
            _musicPlayList = new DLinkedList();
            _top100MusicList = new DLinkedList();
            _activeMusicList = new DLinkedList();
            _userInfo = new UserInfo();
        }
        public function get top100MusicListAsArray():Array{
            var _local1:Array = _top100MusicList.toArray();
            if (_local1.length == 0){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function unShuffleActiveList():void{
            var _local1:Boolean;
            isShuffled = false;
            activeMusicList = musicPlayList.concat();
            if (Boolean(activeNode)){
                playingSongNode = searchVaildSongObjectFromPlayingList(activeNode.data);
            };
        }
        public function get playingSongNode():DListNode{
            return (_playingSongNode);
        }
        public function setNextSongAsCurrentActiveSong(_arg1:DLinkedList=null):Boolean{
            var _local2:Boolean;
            var _local3:DListNode;
            if (Boolean(playingSongNode)){
                _local3 = nextSong;
                if (Boolean(_local3)){
                    trace((_local3.data.label + "ffff"));
                    _local2 = true;
                    playingSongNode = _local3;
                    activeNode = searchVaildSongObject(playingSongNode.data, _arg1);
                };
            };
            return (_local2);
        }
        public function get activeMusicListAsArray():Array{
            var _local1:Array = _activeMusicList.toArray();
            if (_local1.length == 0){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function shufflePlayList():void{
        }
        public function removeAllPlayList():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._musicPlayList)){
                _local1 = this._musicPlayList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3.release();
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
            };
        }
        public function set playingSongNode(_arg1:DListNode):void{
            this._playingSongNode = _arg1;
        }
        public function addSingleSongToPlayListAtFirst(_arg1):void{
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _musicPlayList.prepend(_arg1);
            };
        }
        public function get tmpPrevNode():DListNode{
            return (_tmpPrevNode);
        }
        public function set top100MusicList(_arg1:DLinkedList):void{
            this._top100MusicList = _arg1;
        }
        public function get musicPlayListAsArray():Array{
            var _local1:Array = _musicPlayList.toArray();
            if (((!(Boolean(_local1))) || ((_local1.length == 0)))){
                return (new Array());
            };
            if (_local1.length < VISIBLE_ROW_COUNT){
                return (_local1);
            };
            return (_local1);
        }
        public function set tmpPrevNode(_arg1:DListNode):void{
            this._tmpPrevNode = _arg1;
        }
        public function get userInfo():UserInfo{
            return (_userInfo);
        }
        public function shuffleActiveList():void{
            var _local4:SongInfoServiceObject;
            var _local6:DListIterator;
            var _local7:int;
            isShuffled = true;
            var _local1:Boolean;
            activeMusicList = musicPlayList.concat();
            if (Boolean(activeNode)){
                playingSongNode = searchVaildSongObjectFromPlayingList(activeNode.data);
                _local6 = activeMusicList.nodeOf(playingSongNode.data);
                if (Boolean(_local6)){
                    activeMusicList.remove(_local6);
                };
                _local1 = true;
            };
            var _local2:Array = activeMusicList.toArray();
            Math.random();
            var _local3:int;
            while (_local3 < _local2.length) {
                _local7 = (_local3 + (Math.random() * (_local2.length - _local3)));
                swap(_local2, _local3, _local7);
                _local3++;
            };
            this.activeMusicList.clear();
            var _local5:int;
            while (_local5 < _local2.length) {
                _local4 = _local2[_local5];
                activeMusicList.append(_local4);
                _local5++;
            };
            if (_local1){
                activeMusicList.prepend(playingSongNode.data);
                playingSongNode = searchVaildSongObjectFromPlayingList(playingSongNode.data);
                dispatchEvent(new Event("initializeView"));
            };
        }
        public function removeAllTop100List():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._top100MusicList)){
                _local1 = this._top100MusicList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3.release();
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
            };
        }
        public function set tmpNextNode(_arg1:DListNode):void{
            this._tmpNextNode = _arg1;
        }
        public function searchVaildSongObject(_arg1:SongInfoServiceObject, _arg2:DLinkedList=null):DListNode{
            var _local3:DListIterator;
            if (!Boolean(_arg2)){
                _local3 = (musicPlayList.nodeOf(_arg1) as DListIterator);
            } else {
                _local3 = (_arg2.nodeOf(_arg1) as DListIterator);
            };
            var _local4:DListNode;
            if (Boolean(_local3)){
                _local4 = _local3.node;
            };
            return (_local4);
        }
        public function get activeNode():DListNode{
            return (_activeNode);
        }
        public function set isShuffled(_arg1:Boolean):void{
            this._isShuffled = _arg1;
        }
        private function swap(_arg1:Array, _arg2:int, _arg3:int):void{
            var _local4:Object = _arg1[_arg2];
            _arg1[_arg2] = _arg1[_arg3];
            _arg1[_arg3] = _local4;
        }
        public function searchVaildSongObjectBySongObject(_arg1:Song, _arg2:DLinkedList):DListNode{
            var _local3:DListNode;
            var _local5:SongInfoServiceObject;
            var _local4:DListIterator = _arg2.getListIterator();
            _local4.start();
            while (_local4.hasNext()) {
                _local5 = (_local4.node.data as SongInfoServiceObject);
                if (Boolean(_local5)){
                    if (_local5.songServiceObject.compare(_arg1)){
                        break;
                    };
                };
                _local4.next();
            };
            return (_local4.node);
        }
        public function get nextSong():DListNode{
            var _local1:DListNode;
            return (_local1);
        }
        public function set userInfo(_arg1:UserInfo):void{
            this._userInfo = _arg1;
        }
        public function addSingleSongToPlayListAtIndex(_arg1, _arg2:int):void{
            var _local3:int;
            var _local4:DListIterator;
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _local3 = 1;
                _local4 = _musicPlayList.getListIterator();
                _local4.start();
                while (_local4.hasNext()) {
                    if (_arg2 === _local3){
                        break;
                    };
                    _local3++;
                    _local4.next();
                };
                musicPlayList.insertAfter(_local4, _arg1);
            };
        }
        public function get musicPlayList():DLinkedList{
            return (_musicPlayList);
        }
        public function setPrevSongAsCurrentActiveSong(_arg1:DLinkedList=null):Boolean{
            var _local2:Boolean;
            return (_local2);
        }
        public function get tmpNextNode():DListNode{
            return (_tmpNextNode);
        }
        public function get top100MusicList():DLinkedList{
            return (_top100MusicList);
        }
        public function set activeNode(_arg1:DListNode):void{
            this._activeNode = _arg1;
        }
        public function addSingleSongToTargetListAtLast(_arg1:DLinkedList, _arg2):void{
            if (((Boolean(_arg2)) && (Boolean(_arg1)))){
                _arg1.append(_arg2);
            };
        }
        public function get isShuffled():Boolean{
            return (_isShuffled);
        }
        public function removeAllActiveSongList():void{
            var _local1:DListIterator;
            var _local2:DListNode;
            var _local3:SongInfoServiceObject;
            if (Boolean(this._activeMusicList)){
                _local1 = this._activeMusicList.getListIterator();
                while (_local1.hasNext()) {
                    _local2 = _local1.node;
                    if (Boolean(_local2)){
                        _local3 = _local2.data;
                        if (Boolean(_local3)){
                            _local3 = null;
                        };
                    };
                    _local1.remove();
                };
                this._activeMusicList.clear();
            };
        }
        public function addSingleSongToTargetListAtFirst(_arg1:DLinkedList, _arg2):void{
            if (((Boolean(_arg2)) && (Boolean(_arg1)))){
                _arg1.prepend(_arg2);
            };
        }
        public function searchVaildSongObjectFromPlayingList(_arg1:SongInfoServiceObject):DListNode{
            var _local2:DListIterator = (activeMusicList.nodeOf(_arg1) as DListIterator);
            var _local3:DListNode;
            if (Boolean(_local2)){
                _local3 = _local2.node;
            };
            return (_local3);
        }
        public function releaseModel():void{
            removeAllPlayList();
            _musicPlayList = null;
        }
        public function changeSongIndex(_arg1:Object, _arg2:Array, _arg3:int=-1):void{
            var _local5:int;
            var _local6:int;
            var _local4:DListIterator = _musicPlayList.nodeOf(_arg1);
            if (Boolean(_local4)){
                _local5 = _arg2.length;
                _local6 = 0;
                while (_local6 < _local5) {
                    _musicPlayList.insertAfter(_local4, _arg2[_local6]);
                    _local6++;
                };
            };
        }
        public function set musicPlayList(_arg1:DLinkedList):void{
            removeAllPlayList();
            this._musicPlayList = _arg1;
        }
        public function removeExistNode(_arg1):void{
            var _local2:DListIterator = _musicPlayList.nodeOf(_arg1);
            if (((Boolean(_local2)) && (Boolean(_local2.node)))){
                _local2.remove();
            };
        }
        public function addSingleSongToTargetListAtIndex(_arg1:DLinkedList, _arg2, _arg3:int):void{
            var _local4:int;
            var _local5:DListIterator;
            if (((Boolean(_arg1)) && (Boolean(_arg2)))){
                _local4 = 1;
                _local5 = _musicPlayList.getListIterator();
                _local5.start();
                while (_local5.hasNext()) {
                    if (_arg3 === _local4){
                        break;
                    };
                    _local4++;
                    _local5.next();
                };
                musicPlayList.insertAfter(_local5, _arg2);
            };
        }
        public function set activeMusicList(_arg1:DLinkedList):void{
            removeAllActiveSongList();
            this._activeMusicList = _arg1;
        }
        public function addSingleSongToPlayListAtLast(_arg1):void{
            if (((Boolean(_arg1)) && (Boolean(_musicPlayList)))){
                _musicPlayList.append(_arg1);
            };
        }
        public function get activeMusicList():DLinkedList{
            return (_activeMusicList);
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.data.serviceobjectlist 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class AssetControlEvent extends Event {

        public static const FAIL_LOAD_ASSET:String = "FAIL_LOAD_ASSET";
        public static const COMPETE_ASSIGN_NEW_ASSET:String = "COMPETE_ASSIGN_NEW_ASSET";
        public static const COMPLETE_LOAD_ASSET:String = "COMPLETE_LOAD_ASSET";

        private var _data:Object;

        public function AssetControlEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class UserInfoPropertyEvent extends Event {

        public static const USER_INFO_CHANGED:String = "USER_INFO_CHANGED";

        public function UserInfoPropertyEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
    }
}//package com.nhn.application.modules.webplayerpreview.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.application.notifications {

    public class ApplicationNotifications {

        public static const REGISTER_STAGE_OF_KEY_PROXY_MODULE:String = "NOTI_APPLICATION_REGISTER_STAGE_OF_KEY_PROXY_MODULE";

    }
}//package com.nhn.application.modules.application.notifications 
﻿package com.nhn.application.modules.application {
    import flash.events.*;
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.modules.application.patterns.facade.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.application.patterns.command.*;
    import com.nhn.application.modules.application.notifications.*;
    import com.nhn.application.modules.keyproxy.*;

    public class ApplicationModule extends PipeInterchangeableModule {

        public function ApplicationModule(_arg1:ModuleName, _arg2:ApplicationFacade=null, _arg3:ModuleInitializeData=null){
            super(_arg1, ((Boolean(_arg2)) ? _arg2 : ApplicationFacade.getInstance(_arg1.moduleName)), _arg3);
        }
        override protected function initialize(_arg1:ModuleInitializeData):void{
            super.initialize(_arg1);
            var _local2:PipeInterchangeModule = new PipeInterchangeModule(ModuleNameFactory.generateModuleName(PipeInterchangeModule.NAME_BASE));
            applicationFacade.registerModule(_local2);
            _local2.start();
            var _local3:KeyProxyModule = new KeyProxyModule(ModuleNameFactory.generateModuleName(KeyProxyModule.NAME_BASE));
            applicationFacade.registerModule(_local3);
            _local3.start();
            applicationFacade.registerModule(this);
            applicationFacade.registerCommand(ApplicationNotifications.REGISTER_STAGE_OF_KEY_PROXY_MODULE, RegisterStageOfKeyProxyModuleCommand);
        }
        override protected function registerMainVisualComponentMediator():void{
            var visualComponent:* = null;
            try {
                visualComponent = getVisualComponent();
            } catch(e:Error) {
            };
            if (Boolean(visualComponent)){
                visualComponent.addEventListener(Event.ADDED_TO_STAGE, handleMainVisualComponent, false, int.MAX_VALUE, true);
            };
            super.registerMainVisualComponentMediator();
        }
        protected function get applicationFacade():ApplicationFacade{
            return ((_facade as ApplicationFacade));
        }
        override public function remove():void{
            var visualComponent:* = null;
            try {
                visualComponent = getVisualComponent();
            } catch(e:Error) {
            };
            if (Boolean(visualComponent)){
                visualComponent.removeEventListener(Event.ADDED_TO_STAGE, handleMainVisualComponent, false);
            };
            super.remove();
        }
        protected function handleMainVisualComponent(_arg1:Event):void{
            if (_arg1.type === Event.ADDED_TO_STAGE){
                applicationFacade.sendNotification(ApplicationNotifications.REGISTER_STAGE_OF_KEY_PROXY_MODULE, getVisualComponent().stage);
                getVisualComponent().removeEventListener(Event.ADDED_TO_STAGE, handleMainVisualComponent, false);
            };
        }

    }
}//package com.nhn.application.modules.application 
﻿package com.nhn.application.modules.application.mvc {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.mvc.*;

    public class ApplicationController extends AdvancedController {

        public function ApplicationController(_arg1:String){
            super(_arg1);
        }
        public static function getInstance(_arg1:String):IController{
            if (!Boolean(instanceMap[_arg1])){
                instanceMap[_arg1] = new ApplicationController(_arg1);
            };
            return (instanceMap[_arg1]);
        }

        override protected function initializeController():void{
            view = ApplicationView.getInstance(multitonKey);
        }

    }
}//package com.nhn.application.modules.application.mvc 
﻿package com.nhn.application.modules.application.mvc {
    import com.nhn.application.modules.application.patterns.facade.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    import com.nhn.application.modules.core.mvc.*;

    public class ApplicationView extends AdvancedView {

        public function ApplicationView(_arg1:String){
            super(_arg1);
        }
        public static function removeView(_arg1:String):void{
            AdvancedView.removeView(_arg1);
        }
        public static function getInstance(_arg1:String):IView{
            if (!Boolean(instanceMap[_arg1])){
                instanceMap[_arg1] = new ApplicationView(_arg1);
            };
            return (instanceMap[_arg1]);
        }

        override public function removeMediatorAll():void{
            var _local2:ModuleMediator;
            var _local3:String;
            var _local1:IFacade = Facade.getInstance(multitonKey);
            if ((_local1 is ApplicationFacade)){
                _local2 = (_local1 as ApplicationFacade).retrievePipeICModuleMediator();
            };
            if (!Boolean(_local2)){
                super.removeMediatorAll();
            } else {
                for (_local3 in mediatorMap) {
                    if (_local3 !== _local2.name){
                        removeMediator(_local3);
                    };
                };
            };
            removeMediator(_local2.name);
            mediatorMap = [];
        }

    }
}//package com.nhn.application.modules.application.mvc 
﻿package com.nhn.application.modules.application.patterns.command {
    import com.nhn.application.modules.core.patterns.facade.*;
    import flash.display.*;
    import com.nhn.application.messages.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.keyproxy.pipemessages.*;

    public class RegisterStageOfKeyProxyModuleCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:PipelineFacade = (this.facade as PipelineFacade);
            var _local3:Stage = (_arg1.getBody() as Stage);
            if (!Boolean(_local3)){
                throw (new Error(((("RegisterStageOfKeyProxyModuleCommand(" + basicFacade.key) + ") : ") + "notification should be pass reference of stage through the body.")));
            };
            var _local4:Class = KeyProxyPipeMessages.REGISTER_STAGE.protocol;
            var _local5:IMessageProtocol = new _local4(KeyProxyPipeMessages.REGISTER_STAGE.name, basicFacade.key, _local3, 0);
            var _local6:QueryMessage = new QueryMessage(_local5);
            _local2.sendPipeMessage(_local6);
        }

    }
}//package com.nhn.application.modules.application.patterns.command 
﻿package com.nhn.application.modules.application.patterns.facade {
    import com.nhn.application.modules.core.*;
    import com.nhn.application.modules.core.patterns.facade.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.*;
    import org.puremvc.as3.multicore.patterns.facade.*;
    import com.nhn.application.modules.application.mvc.*;
    import com.nhn.application.ns.*;

    public class ApplicationFacade extends PipelineFacade {

        protected var pipeICMMediatorName:String;

        public function ApplicationFacade(_arg1:String, _arg2:uint=0){
            super(_arg1);
            _inoutput = _arg2;
        }
        public static function getInstance(_arg1:String, _arg2:uint=0):ApplicationFacade{
            if (!Boolean(instanceMap[_arg1])){
                return (new ApplicationFacade(_arg1, _arg2));
            };
            return ((Facade.instanceMap[_arg1] as ApplicationFacade));
        }

        public function retrievePipeICModuleMediator():ModuleMediator{
            return (retrieveModuleMediator(pipeICMMediatorName));
        }
        override protected function initializeView():void{
            if (Boolean(view)){
                return;
            };
            view = ApplicationView.getInstance(multitonKey);
        }
        override protected function initializeController():void{
            if (Boolean(controller)){
                return;
            };
            controller = ApplicationController.getInstance(multitonKey);
        }
        override public function registerModule(_arg1:BasicModule):String{
            var _local3:PipeInterchangeModule;
            if ((_arg1 is PipeInterchangeModule)){
                if (Boolean(pipeICMMediatorName)){
                    if (hasMediator(_arg1.moduleMediatorName)){
                        if (NHNApplication.mode === NHNApplication.DEBUG){
                            trace("NHNApplication warnning");
                            trace((("ApplicationFacade(" + multitonKey) + ")"));
                            trace((("\t\"PipeInterchangeModule(" + _arg1.moduleName) + " has already been registered.\n"));
                        };
                    } else {
                        if (_arg1.isRegistered){
                            throw (new Error((((((("ApplicationFacade(" + multitonKey) + ") : \"") + _arg1.moduleName) + "\" has already been registered in \"") + _arg1.keyOfRegisteredFacade) + "\".")));
                        };
                        throw (new Error(((((("ApplicationFacade(" + multitonKey) + ") : PipeInterchangeModule has already been registered.") + " Cannot register \"") + _arg1.moduleName) + "\".")));
                    };
                } else {
                    if (!_arg1.isRegistered){
                        pipeICMMediatorName = _arg1.moduleMediatorName;
                        registerMediator(new ModuleMediator(pipeICMMediatorName, _arg1));
                        var _local4 = _arg1;
                        _local4.nhn_app_ns::registeredBy(multitonKey);
                    } else {
                        throw (new Error((((((("ApplicationFacade(" + multitonKey) + ") : \"") + _arg1.moduleName) + "\" has already been registered in \"") + _arg1.keyOfRegisteredFacade) + "\". You should be register PipeInterchangeModule to ApplicationFacade.")));
                    };
                };
                return (pipeICMMediatorName);
            };
            var _local2:String = super.registerModule(_arg1);
            if ((_arg1 is PipeInterchangeableModule)){
                if (!Boolean(retrievePipeICModuleMediator())){
                    throw (new Error((("ApplicationFacade(" + multitonKey) + ") : PipeInterchangeModule is not registered at first.")));
                };
                _local3 = (retrievePipeICModuleMediator().getModule() as PipeInterchangeModule);
                _local3.connectModule((_arg1 as PipeInterchangeableModule));
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.application.patterns.facade 
﻿package com.nhn.application.modules.webplayerworkspace.notifications {

    public class WebPlayerWorkspaceNotifications {

        public static const WPW_HFCPM_STREAM_SERVICE_RESUME:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_RESUME";
        public static const WPW_HWCPM_REQUEST_MUSIC_INFO_GET_TOP_100:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_REQUEST_MUSIC_INFO_GET_TOP_100";
        public static const WPW_HWCPM_RESPOND_COMMON_IO_ERROR:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_COMMON_IO_ERROR";
        public static const REGISTER_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERWORKSPACE_REGISTER_WEB_PLAYER_WORKSPACE_UI";
        public static const WPW_HFCPM_STREAM_SERVICE_PROGRESS:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_PROGRESS";
        public static const WPW_HWCPM_REQUEST_MUSIC_INFO_GET_LYRIC:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_REQUEST_MUSIC_INFO_GET_LYRIC";
        public static const WPW_HFCPM_STREAM_SERVICE_PLAY:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_PLAY";
        public static const WPW_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST";
        public static const WPW_HFCPM_STREAM_SERVICE_COMPLETE:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_COMPLETE";
        public static const WPW_HFCPM_STREAM_SERVICE_CONNECTION_SUCCESS:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_CONNECTION_SUCCESS";
        public static const PREPARED_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERWORKSPACE_PREPARED_WEB_PLAYER_WORKSPACE_UI";
        public static const WPW_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE";
        public static const WPW_HWPEHPM_OPEN_ALERT_UI:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWPEHPM_OPEN_ALERT_UI";
        public static const WPW_HFCPM_STREAM_SERVICE_OPEN:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_OPEN";
        public static const WPW_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE";
        public static const ADD_EMPTY_SONG_LIST:String = "NOTI_WEBPLAYERWORKSPACE_ADD_EMPTY_SONG_LIST";
        public static const WPW_HWCPM_RESPOND_MUSIC_INFO_GET_TOP_100:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_MUSIC_INFO_GET_TOP_100";
        public static const WPW_HWPEHPM_INTERACT_ALERT_UI:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWPEHPM_INTERACT_ALERT_UI";
        public static const ADD_TRACKIDS_AND_LAUNCH_OPTION:String = "NOTI_WEBPLAYERCONTAINER_ADD_TRACKIDS_AND_LAUNCH_OPTION";
        public static const WPW_HWCPM_REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG";
        public static const WPW_HFCPM_STREAM_SERVICE_PAUSE:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_PAUSE";
        public static const WPW_HWPPPM_START_NONMEMBER_PROMOTION:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWPPPM_START_NONMEMBER_PROMOTION";
        public static const WPW_HWCPM_REQUEST_COMMON_CANCEL_REQUEST:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_REQUEST_COMMON_CANCEL_REQUEST";
        public static const WPW_HFCPM_STREAM_SERVICE_CONNECTION_CLOSED:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_CONNECTION_CLOSED";
        public static const WPW_HFCPM_STREAM_SERVICE_SEEK:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_SEEK";
        public static const WPW_HWCPM_RESPOND_COMMON_SECURITY_ERROR:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_COMMON_SECURITY_ERROR";
        public static const RESPOND_GET_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERWORKSPACE_RESPOND_GET_WEB_PLAYER_WORKSPACE_UI";
        public static const REQUEST_GET_WEB_PLAYER_WORKSPACE_UI:String = "NOTI_WEBPLAYERWORKSPACE_REQUEST_GET_WEB_PLAYER_WORKSPACE_UI";
        public static const WPW_HFCPM_STREAM_SERVICE_SET_VOLUME:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_SET_VOLUME";
        public static const WPW_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE";
        public static const WPW_HFCPM_STREAM_SERVICE_STOP:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HFCPM_STREAM_SERVICE_STOP";
        public static const WPW_HWCPM_RESPOND_MUSIC_INFO_GET_LYRIC:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_MUSIC_INFO_GET_LYRIC";
        public static const WPW_HWCPM_RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG:String = "NOTI_WEBPLAYERWORKSPACE_WPW_HWCPM_RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG";

    }
}//package com.nhn.application.modules.webplayerworkspace.notifications 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class WPW_HWCPM_RequestAuthorizationGetCookieCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (Boolean(_local2)){
                if (((((Boolean(_local2.callback)) ? !(Boolean((_local2.callback as ContextFunctionPair))) : false)) || (((Boolean(_local2.args)) ? !(Boolean((_local2.args as Array))) : false)))){
                    throw (new Error(("WPW_HWCPM_RequestAuthorizationGetCookieCommand : " + "body is not valid.")));
                };
            } else {
                _local2 = {};
            };
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            var _local4:Array = requestIDTableProxy.retrieveRequestIDsByBaseID(RequestID.getBaseID(_local3));
            if (Boolean(_local4)){
                if (_local4.length > 1){
                    throw (new Error(("WPW_HWCPM_RequestAuthorizationGetCookieCommand : " + "requestIDTable.length is not valid.")));
                };
                sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local4[0] as RequestID)});
                requestIDTableProxy.removeRequestID((_local4[0] as RequestID));
            };
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_AUTHORIZATION_GET_COOKIE, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerpromotion.pipemessages.*;

    public class WPW_HWPPPM_StartNonmemberPromotionCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerPromotionPipeMessages.START_NONMEMBER_PROMOTION, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class WPW_HFCPM_StreamServiceConnectionClosedCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;

    public class HWPWPM_PreparedWebPlayerWorkspaceUICommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerWorkspacePipeMessages.PREPARED_WEB_PLAYER_WORKSPACE_UI, null, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPW_HWCPM_RespondMusicInfoGetTop100Command extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local3:Top100;
            var _local4:SongList;
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.top100 as Top100))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPW_HWCPM_RespondMusicInfoGetTop100Command : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
            if (Boolean(_local2.success)){
                top100Proxy.setTop100((_local2.top100 as Top100));
                _local3 = top100Proxy.getTop100();
                if (Boolean(_local3)){
                    _local4 = _local3.songlist;
                    if (!Boolean(_local4)){
                        throw (new Error(("WPW_HWCPM_RespondMusicInfoGetTop100Command : " + "songList should not be null.")));
                    };
                    webPlayerWorkspaceUI.updateTop100SongList(_local4);
                } else {
                    throw (new Error(("WPW_HWCPM_RespondMusicInfoGetTop100Command : " + "top100 is not valid.")));
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;

    public class HWPWPM_RespondGetWebPlayerWorkspaceUICommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendPipeMessage(WebPlayerWorkspacePipeMessages.RESPOND_GET_WEB_PLAYER_WORKSPACE_UI, {webPlayerWorkspaceUI:webPlayerWorkspaceUI}, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;

    public class WPW_HWPEHPM_OpenAlertUICommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.resultCode as String)))))) || (!(Boolean(((_local2.hasOwnProperty("interationHelpData")) ? Boolean(_local2.interationHelpData) : true)))))){
                throw (new Error(("WPW_HWPEHPM_OpenAlertUICommand : " + "body is not valid.")));
            };
            sendPipeMessage(WebPlayerErrorHandlingPipeMessages.OPEN_ALERT_UI, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPW_HWCPM_RequestMusicInfoAddFavoriteSongCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))){
                throw (new Error(("WPW_HWCPM_RequestMusicInfoAddFavoriteSongCommand : " + "body is not valid.")));
            };
            var _local3:RequestID = RequestID.getRequestID(_arg1.getName());
            requestIDTableProxy.registerRequestID(_local3);
            _local2.requestID = _local3;
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.webplayererrorhandling.*;

    public class WPW_HWCPM_RespondMusicInfoGetSongListCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local4:SongList;
            var _local2:Object = _arg1.getBody();
            if (((((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.songList as SongList))) : false)))) || (!(_local2.hasOwnProperty("launchOption"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPW_HWCPM_RespondMusicInfoGetSongListCommand : " + "body is not valid.")));
            };
            var _local3:MusicServiceResult = (_local2.musicServiceResult as MusicServiceResult);
            if (((Boolean(_local2.success)) || ((_local3.resultcode === WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112)))){
                _local4 = (_local2.songList as SongList);
                webPlayerWorkspaceUI.addNewSongsToPlayList(_local4, int(_local2.launchOption));
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class WPW_HWCPM_RequestMusicInfoGetTop100Command extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local7:SongList;
            var _local8:RequestID;
            var _local9:Object;
            var _local2:Array;
            var _local3:Array;
            var _local4:int;
            var _local5:int;
            _local2 = requestIDTableProxy.retrieveAllBaseIDs();
            if (Boolean(_local2)){
                _local5 = _local2.length;
                _local4 = 0;
                while (_local4 < _local5) {
                    switch (_local2[_local4]){
                        case WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_LYRIC:
                            _local3 = requestIDTableProxy.retrieveRequestIDsByBaseID(_local2[_local4]);
                            if (_local3.length > 1){
                                throw (new Error(("WPW_HWCPM_RequestMusicInfoGetTop100Command : " + "requestIDTable.length is not valid.")));
                            };
                            sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local3[0] as RequestID)});
                            requestIDTableProxy.removeRequestID((_local3[0] as RequestID));
                            _local3 = null;
                    };
                    _local4++;
                };
            };
            _local2 = null;
            _local4 = 0;
            _local5 = 0;
            var _local6:Top100 = top100Proxy.getTop100();
            if (Boolean(_local6)){
                _local7 = _local6.songlist;
                if (Boolean(_local7)){
                    webPlayerWorkspaceUI.updateTop100SongList(_local7);
                } else {
                    throw (new Error(("WPW_HWCPM_RequestMusicInfoGetTop100Command : " + "songList should not be null.")));
                };
            } else {
                _local3 = requestIDTableProxy.retrieveRequestIDsByBaseID(_arg1.getName());
                if (Boolean(_local3)){
                    if (_local3.length > 1){
                        throw (new Error(("WPW_HWCPM_RequestMusicInfoGetTop100Command : " + "requestIDTable.length is not valid.")));
                    };
                    _local3 = null;
                    return;
                };
                _local8 = RequestID.getRequestID(_arg1.getName());
                requestIDTableProxy.registerRequestID(_local8);
                _local9 = {};
                _local9.requestID = _local8;
                sendPipeMessage(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_TOP_100, _local9, 0);
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class WPW_HWCPM_RequestMusicInfoGetLyricCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local8:RequestID;
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))){
                throw (new Error(("WPW_HWCPM_RequestMusicInfoGetLyricCommand : " + "body is not valid.")));
            };
            var _local3:Array;
            var _local4:Array;
            var _local5:int;
            var _local6:int;
            _local3 = requestIDTableProxy.retrieveAllBaseIDs();
            if (Boolean(_local3)){
                _local6 = _local3.length;
                _local5 = 0;
                while (_local5 < _local6) {
                    switch (_local3[_local5]){
                        case WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_TOP_100:
                        case WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_LYRIC:
                            _local4 = requestIDTableProxy.retrieveRequestIDsByBaseID(_local3[_local5]);
                            if (_local4.length > 1){
                                throw (new Error(("WPW_HWCPM_RequestMusicInfoGetTop100SongListCommand : " + "requestIDTable.length is not valid.")));
                            };
                            sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, {requestID:(_local4[0] as RequestID)});
                            requestIDTableProxy.removeRequestID((_local4[0] as RequestID));
                            _local4 = null;
                    };
                    _local5++;
                };
            };
            _local3 = null;
            _local5 = 0;
            _local6 = 0;
            var _local7:Song = lyricsProxy.retrieveSongForLyric((_local2.trackID as String));
            if (Boolean(_local7)){
                webPlayerWorkspaceUI.updateLylicsOfCurrentPlayingSong(_local7);
            } else {
                _local4 = requestIDTableProxy.retrieveRequestIDsByBaseID(_arg1.getName());
                if (Boolean(_local4)){
                    if (_local4.length > 1){
                        throw (new Error(("WPW_HWCPM_RequestMusicInfoGetTop100SongListCommand : " + "requestIDTable.length is not valid.")));
                    };
                    _local4 = null;
                    return;
                };
                _local8 = RequestID.getRequestID(_arg1.getName());
                requestIDTableProxy.registerRequestID(_local8);
                _local2.requestID = _local8;
                sendPipeMessage(WASCommunicationPipeMessages.REQUEST_MUSIC_INFO_GET_LYRIC, _local2, 0);
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPW_HWCPM_RespondMusicInfoGetLyricCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local3:Song;
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.song as Song))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPW_HWCPM_RespondMusicInfoGetLyricCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
            if (Boolean(_local2.success)){
                lyricsProxy.addSongForLyric((_local2.song as Song));
                _local3 = lyricsProxy.retrieveSongForLyric((_local2.song as Song).track.trackid);
                webPlayerWorkspaceUI.updateLylicsOfCurrentPlayingSong(_local3);
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayercore.*;

    public class HWPWPM_AddEmptySongListCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:SongList = new SongList();
            var _local3 = (WebPlayerCoreProperties.PARAMETER_VALUE_PUSH_NONE_TRACK | WebPlayerCoreProperties.PARAMETER_VALUE_PLAY_NONE_TRACK);
            webPlayerWorkspaceUI.addNewSongsToPlayList(_local2, _local3);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HWPWPM_AddTrackIdsAndLaunchOptionCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = (_arg1.getBody() as Object);
            var _local3:String = (_local2.commaSeparatedTrackIDs as String);
            var _local4:int = _local2.launchOption;
            webPlayerWorkspaceUI.addSongTrackIdsAndLaunchOption(_local3, _local4);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.proxy.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class StartCommand extends BasicSimpleCommand {

        override public function execute(_arg1:INotification):void{
            facade.registerProxy(new RequestIDTableProxy());
            facade.registerProxy(new Top100Proxy());
            facade.registerProxy(new LyricsProxy());
            facade.registerCommand(WebPlayerWorkspaceNotifications.ADD_TRACKIDS_AND_LAUNCH_OPTION, HWPWPM_AddTrackIdsAndLaunchOptionCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.REGISTER_WEB_PLAYER_WORKSPACE_UI, HWPWPM_RegisterWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.REQUEST_GET_WEB_PLAYER_WORKSPACE_UI, HWPWPM_RequestGetWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.RESPOND_GET_WEB_PLAYER_WORKSPACE_UI, HWPWPM_RespondGetWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.PREPARED_WEB_PLAYER_WORKSPACE_UI, HWPWPM_PreparedWebPlayerWorkspaceUICommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.ADD_EMPTY_SONG_LIST, HWPWPM_AddEmptySongListCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_COMMON_CANCEL_REQUEST, WPW_HWCPM_RequestCommonCancelRequestCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_COMMON_IO_ERROR, WPW_HWCPM_RespondCommonIOErrorCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_COMMON_SECURITY_ERROR, WPW_HWCPM_RespondCommonSecurityErrorCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE, WPW_HWCPM_RequestAuthorizationGetCookieCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE, WPW_HWCPM_RespondAuthorizationGetCookieCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST, WPW_HWCPM_RespondMusicInfoGetSongListCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_TOP_100, WPW_HWCPM_RequestMusicInfoGetTop100Command);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_TOP_100, WPW_HWCPM_RespondMusicInfoGetTop100Command);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_LYRIC, WPW_HWCPM_RequestMusicInfoGetLyricCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_LYRIC, WPW_HWCPM_RespondMusicInfoGetLyricCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE, WPW_HWCPM_RespondMusicInfoGetArticleCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG, WPW_HWCPM_RequestMusicInfoAddFavoriteSongCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG, WPW_HWCPM_RespondMusicInfoAddFavoriteSongCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_CONNECTION_SUCCESS, WPW_HFCPM_StreamServiceConnectionSuccessCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_CONNECTION_CLOSED, WPW_HFCPM_StreamServiceConnectionClosedCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_OPEN, WPW_HFCPM_StreamServiceOpenCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_PROGRESS, WPW_HFCPM_StreamServiceProgressCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_COMPLETE, WPW_HFCPM_StreamServiceCompleteCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_PLAY, WPW_HFCPM_StreamServicePlayCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_PAUSE, WPW_HFCPM_StreamServicePauseCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_RESUME, WPW_HFCPM_StreamServiceResumeCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_STOP, WPW_HFCPM_StreamServiceStopCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_SEEK, WPW_HFCPM_StreamServiceSeekCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_SET_VOLUME, WPW_HFCPM_StreamServiceSetVolumeCommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, WPW_HWPEHPM_OpenAlertUICommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_INTERACT_ALERT_UI, WPW_HWPEHPM_InteractAlertUICommand);
            facade.registerCommand(WebPlayerWorkspaceNotifications.WPW_HWPPPM_START_NONMEMBER_PROMOTION, WPW_HWPPPM_StartNonmemberPromotionCommand);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class WPW_HFCPM_StreamServiceConnectionSuccessCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class WPW_HWCPM_RespondMusicInfoAddFavoriteSongCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local3:MusicServiceResult;
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPW_HWCPM_RespondMusicInfoAddFavoriteSongCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
            if (Boolean(_local2.success)){
                _local3 = (_local2.musicServiceResult as MusicServiceResult);
                sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, {resultCode:_local3.resultcode}, null);
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayererrorhandling.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.ns.*;

    public class WPW_HWPEHPM_InteractAlertUICommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.resultCode as String)))))) || (!(Boolean((_local2.eventType as String)))))) || (!(Boolean(_local2.hasOwnProperty("interationHelpData")))))){
                throw (new Error(("WPW_HWPEHPM_InteractAlertUICommand : " + "body is not valid.")));
            };
            var _local3:String = (_local2.resultCode as String);
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    switch (_local3){
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_SECURITY_ERROR:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_CUSTOM_ERROR:
                            if (_local2.eventType === AlertUIEvent.CONFIRM){
                                var _local4 = webPlayerWorkspaceUIMediator;
                                _local4.nhn_webplayer_ns::attemptToMusicLogin(_local2.interationHelpData);
                            };
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_000:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_001:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_102:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_103:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_104:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_105:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_106:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_107:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_111:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_900:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_901:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_902:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_903:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_904:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_905:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_906:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_907:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_908:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2000:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2001:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2003:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2004:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2005:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2006:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2007:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2101:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2102:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2103:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2104:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2105:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2106:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2107:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2118:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000:
                            if (_local2.eventType === AlertUIEvent.CONFIRM){
                                _local4 = webPlayerWorkspaceUIMediator;
                                _local4.nhn_webplayer_ns::attemptToMusicLogin(_local2.interationHelpData);
                            };
                            break;
                    };
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    switch (_local3){
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_IO_ERROR:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_SECURITY_ERROR:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_CUSTOM_ERROR:
                            if (_local2.eventType === AlertUIEvent.CONFIRM){
                                _local4 = webPlayerWorkspaceUIMediator;
                                _local4.nhn_webplayer_ns::attemptToMusicLogin(_local2.interationHelpData);
                            };
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_000:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_001:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_102:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_103:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_104:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_105:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_106:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_107:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_110:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_111:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_112:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_900:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_901:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_902:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_903:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_904:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_905:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_906:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_907:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_FMS_908:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2000:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2001:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2002:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2003:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2004:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2005:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2006:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2007:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2100:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2101:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2102:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2103:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2104:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2105:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2106:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2107:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2108:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2109:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2110:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2111:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2112:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2113:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2114:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2115:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2116:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2117:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2118:
                            break;
                        case WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000:
                            if (_local2.eventType === AlertUIEvent.CONFIRM){
                                _local4 = webPlayerWorkspaceUIMediator;
                                _local4.nhn_webplayer_ns::attemptToMusicLogin(_local2.interationHelpData);
                            };
                            break;
                    };
                    break;
                default:
                    throw (new Error(("StartCommand : " + "WebPlayerCoreProperties.containerType is not valid.")));
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;

    public class WPW_HWCPM_RequestCommonCancelRequestCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))){
                throw (new Error(("WPW_HWCPM_RequestCommonCancelRequestCommand : " + "body is not valid.")));
            };
            sendPipeMessage(WASCommunicationPipeMessages.REQUEST_COMMON_CANCEL_REQUEST, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPW_HFCPM_StreamServiceResumeCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("WPW_HFCPM_StreamServiceResumeCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_RESUME, _local2, 0);
            stopNaverBlogCafeBGMPlayer();
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.proxy.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.core.patterns.command.*;
    import flash.external.*;

    public class WPWMBaseCommand extends BasicSimpleCommand {

        protected function get lyricsProxy():LyricsProxy{
            var _local1:IProxy = facade.retrieveProxy(LyricsProxy.NAME);
            return ((_local1 as LyricsProxy));
        }
        protected function get top100Proxy():Top100Proxy{
            var _local1:IProxy = facade.retrieveProxy(Top100Proxy.NAME);
            return ((_local1 as Top100Proxy));
        }
        protected function get webPlayerWorkspaceUI():IMusicPlayListManager{
            var _local1:IMusicPlayListManager;
            if (!Boolean(webPlayerWorkspaceUIMediator)){
                _local1 = null;
            } else {
                _local1 = webPlayerWorkspaceUIMediator.getWebPlayerWorkspaceUI();
            };
            return (_local1);
        }
        protected function get webPlayerWorkspaceUIMediator():WebPlayerWorkspaceUIMediator{
            var _local1:IMediator = facade.retrieveMediator(WebPlayerWorkspaceUIMediator.NAME);
            return ((_local1 as WebPlayerWorkspaceUIMediator));
        }
        protected function get requestIDTableProxy():RequestIDTableProxy{
            var _local1:IProxy = facade.retrieveProxy(RequestIDTableProxy.NAME);
            return ((_local1 as RequestIDTableProxy));
        }
        protected function stopNaverBlogCafeBGMPlayer():void{
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    if (WebPlayerCoreProperties.clientHost === WebPlayerCoreProperties.HOST_SUB_NAVER_SERVER){
                        try {
                            ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_BLOG_CAFE_BGM_PLAYER_STOP);
                        } catch(e:Error) {
                        };
                    };
                    break;
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;

    public class WPW_HWCPM_RespondMusicInfoGetArticleCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local3:Article;
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.article as Article))) : false)))) || (!(_local2.hasOwnProperty("launchOption"))))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPW_HWCPM_RespondMusicInfoGetArticleCommand : " + "body is not valid.")));
            };
            if (Boolean(_local2.success)){
                _local3 = (_local2.article as Article);
                webPlayerWorkspaceUI.configPostingPlayerInformation(_local3);
                webPlayerWorkspaceUI.addNewSongsToPlayList(_local3.songlist, int(_local2.launchOption));
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.dto.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class WPW_HFCPM_StreamServiceOpenCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local5:Object;
            var _local6:Object;
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(Boolean((_local2.streamInfo as NHNMusicStreamInfodto)))))){
                throw (new Error(("WPW_HFCPM_StreamServiceOpenCommand : " + "body is not valid.")));
            };
            var _local3:NHNMusicStreamInfodto = (_local2.streamInfo as NHNMusicStreamInfodto);
            var _local4:String = webPlayerWorkspaceUI.initializeActiveSong(_local3);
            if (_local3.isDisplayMessage.toUpperCase() === "Y"){
                _local5 = {};
                _local5.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_CUSTOM_ERROR;
                _local5.resultValue = {};
                _local5.resultValue.message = _local3.message;
                _local5.resultValue.resultUIDefine = {};
                _local5.resultValue.resultUIDefine.animationEnabled = false;
                _local5.resultValue.resultUIDefine.autoCloseEnabled = true;
                _local5.interationHelpData = _local3;
                facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, _local5, null);
            };
            if (((((Boolean(_local3.usingPlatformLimitFlashMsg)) && ((_local3.usingPlatformLimitFlashMsg.length > 0)))) && ((_local3.usingPlatformLimitFlashMsg.indexOf("empty") < 0)))){
                switch (WebPlayerCoreProperties.containerType){
                    case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                        _local6 = {};
                        _local6.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_COMMON_CUSTOM_ERROR;
                        _local6.resultValue = {};
                        _local6.resultValue.message = _local3.usingPlatformLimitFlashMsg;
                        _local6.resultValue.resultUIDefine = {};
                        _local6.resultValue.resultUIDefine.animationEnabled = false;
                        _local6.resultValue.resultUIDefine.autoCloseEnabled = true;
                        _local6.interationHelpData = _local3;
                        facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, _local6, null);
                        break;
                };
            };
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    break;
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPW_HFCPM_StreamServiceStopCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("WPW_HFCPM_StreamServiceStopCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_STOP, _local2, 0);
            if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP){
                WebPlayerCoreProperties.setWindowTitle(WebPlayerCoreProperties.TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_DEFAULT);
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPW_HFCPM_StreamServicePauseCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("WPW_HFCPM_StreamServicePauseCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_PAUSE, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import com.nhn.webapis.music.serviceobject.*;
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPW_HWCPM_RespondAuthorizationGetCookieCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (((_local2.success) ? !(Boolean((_local2.authorization as Authorization))) : false)))) || (!(Boolean((_local2.musicServiceResult as MusicServiceResult)))))){
                throw (new Error(("WPW_HWCPM_RespondAuthorizationGetCookieCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
            if (_local2.success){
                webPlayerWorkspaceUI.initializeAuth((_local2.authorization as Authorization));
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPW_HWCPM_RespondCommonIOErrorCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("WPW_HWCPM_RespondCommonIOErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPW_HFCPM_StreamServicePlayCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("WPW_HFCPM_StreamServicePlayCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_PLAY, _local2, 0);
            stopNaverBlogCafeBGMPlayer();
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.webapis.core.*;

    public class WPW_HWCPM_RespondCommonSecurityErrorCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.requestID as RequestID)))))) || (!(_local2.hasOwnProperty("success"))))) || (_local2.success))){
                throw (new Error(("WPW_HWCPM_RespondCommonSecurityErrorCommand : " + "body is not valid.")));
            };
            requestIDTableProxy.removeRequestID((_local2.requestID as RequestID));
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPW_HFCPM_StreamServiceSetVolumeCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((!(Boolean(_local2))) || (!(_local2.hasOwnProperty("volume"))))){
                throw (new Error(("WPW_HFCPM_StreamServiceSetVolumeCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_SET_VOLUME, _local2, 0);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayercore.*;
    import flash.external.*;

    public class WPW_HFCPM_StreamServiceCompleteCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var notification:* = _arg1;
            var body:* = notification.getBody();
            if (((!(Boolean(body))) || (!(Boolean((body.trackID as String)))))){
                throw (new Error(("WPW_HFCPM_StreamServiceCompleteCommand : " + "body is not valid.")));
            };
            trace("complete.....>>>>>>>>>>>>");
            webPlayerWorkspaceUI.notifyCurrentSongWasCompleted();
            switch (WebPlayerCoreProperties.containerType){
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP:
                    WebPlayerCoreProperties.setWindowTitle(WebPlayerCoreProperties.TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_DEFAULT);
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING:
                    break;
                case WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_PREVIEW:
                    try {
                        ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_LISTEN_STOP);
                    } catch(e:Error) {
                    };
                    break;
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class WPW_HFCPM_StreamServiceProgressCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("time"))))){
                throw (new Error(("WPW_HFCPM_StreamServiceProgressCommand : " + "body is not valid.")));
            };
            webPlayerWorkspaceUI.updateCurrentPlayTime((_local2.time as Number));
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;

    public class WPW_HFCPM_StreamServiceSeekCommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            var _local2:Object = _arg1.getBody();
            if (((((((!(Boolean(_local2))) || (!(Boolean((_local2.trackID as String)))))) || (!(_local2.hasOwnProperty("time"))))) || (!(_local2.hasOwnProperty("automaticRequest"))))){
                throw (new Error(("WPW_HFCPM_StreamServiceSeekCommand : " + "body is not valid.")));
            };
            sendPipeMessage(FMSCommunicationPipeMessages.STREAM_SERVICE_SEEK, _local2, 0);
            stopNaverBlogCafeBGMPlayer();
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;

    public class HWPWPM_RequestGetWebPlayerWorkspaceUICommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
            sendNotification(WebPlayerWorkspaceNotifications.RESPOND_GET_WEB_PLAYER_WORKSPACE_UI, null, null);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.command {
    import org.puremvc.as3.multicore.interfaces.*;

    public class HWPWPM_RegisterWebPlayerWorkspaceUICommand extends WPWMBaseCommand {

        override public function execute(_arg1:INotification):void{
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.command 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.mediator {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events.*;
    import com.nhn.application.modules.core.patterns.facade.*;
    import flash.display.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.modules.core.patterns.mediator.*;
    import com.nhn.application.messages.protocols.*;
    import flash.net.*;
    import com.nhn.core.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.application.modules.webplayererrorhandling.*;
    import com.nhn.application.modules.webplayerpromotion.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;
    import com.nhn.application.ns.*;
    import flash.external.*;

    public class WebPlayerWorkspaceUIMediator extends VisualComponentMediator {

        public static const NAME:String = "WebPlayerWorkspaceUIMediator";

        private var loadedSkinFirstTime:Boolean;

        public function WebPlayerWorkspaceUIMediator(_arg1:IMusicPlayListManager){
            super(name, (_arg1 as DisplayObject));
            loadedSkinFirstTime = true;
        }
        private function requestAddFavoriteSong(_arg1:MusicServiceResult, _arg2:Array):void{
            if (!openAlertUIWhenNeedLogin((_arg1.resultvalue as Authorization), null)){
                facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_ADD_FAVORITE_SONG, {trackID:(_arg2[0] as String)}, null);
            };
        }
        private function musicLogin():void{
            updateAuthorization();
            if ((((WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP)) || (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING))){
                if (ExternalInterface.available){
                    ExternalInterface.call("___musicBroadCast___", "nmp_check_auth", {});
                };
            };
        }
        nhn_webplayer_ns function attemptToMusicLogout():void{
            ExternalInterface.call(WebPlayerCoreProperties.METHOD_NAME_LOGOUT);
        }
        override public function onRemove():void{
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.HIDE_SONG_LIST, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_NAVER_HOME, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_HOME, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_LOG_IN, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_LOG_OUT, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_PLAYER_HELP, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.SEND_POSTING_SETTING_CONFIGURATION, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.RECORD_CURRENT_PLAYING_VOLUME, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.CHANGED_REPEAT_OPTION, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.CHANGED_SHUFFLE_OPTION, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.REQUEST_CREATOR_LINK_PAGE, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.CHANGED_PLAY_LIST, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.SETTING_SKIN_AND_SONG_QUALITY_EVENT, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.BOOKMARK_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.ME2DAY_POST_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.FACEBOOK_POST_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(NaverMusicPlayerBasicEvent.TWITTER_POST_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerPromotionEvent.BLOG_DJ_CHALLENGE, webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerPromotionEvent.BLOG_DJ_EVENT, webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerPromotionEvent.CHECK_OUT_EVENT, webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerActivateMainPanelEvent.DISPLAY_PLAY_LIST, webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerActivateMainPanelEvent.DISPLAY_TOP100_LIST, webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerActivateMainPanelEvent.DISPLAY_LYRICS_LIST, webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent, false);
            webPlayerWorkspaceUI.removeEventListener(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, webPlayerWorkspaceUI_handleMusicPlayerNotifyVilolateInternalPolicyEvent, false);
            webPlayerWorkspaceUI.removeEventListener(Event.ADDED_TO_STAGE, webPlayerWorkspaceUI_handleEvent, false);
            super.onRemove();
        }
        override public function get name():String{
            return (NAME);
        }
        nhn_webplayer_ns function attemptToMusicLogin(_arg1:Object=null):void{
            var _local4:String;
            var _local6:RedirectInformation;
            var _local7:NHNMusicStreamInfodto;
            var _local2 = "";
            var _local3 = "";
            var _local5:Boolean;
            _local2 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_LOGIN);
            if (Boolean(_arg1)){
                _local5 = false;
                if ((_arg1 is RedirectInformation)){
                    _local5 = true;
                    _local6 = (_arg1 as RedirectInformation);
                    _local2 = (_local2 + ("?url=" + _local6.windowURL));
                } else {
                    if ((_arg1 is NHNMusicStreamInfodto)){
                        _local7 = (_arg1 as NHNMusicStreamInfodto);
                        if (_local7.isTnB.toUpperCase() === "Y"){
                            if (_local7.isLogin.toUpperCase() === "N"){
                                _local5 = true;
                            };
                        };
                    };
                };
            };
            if (_local5){
                _local4 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_LOGIN_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_LOGIN_WINDOW);
                WebPlayerCoreProperties.openWindow(_local2, _local3, _local4);
            };
        }
        private function webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent(_arg1:MusicPlayerActivateMainPanelEvent):void{
            switch (_arg1.type){
                case MusicPlayerActivateMainPanelEvent.DISPLAY_PLAY_LIST:
                    WebPlayerCoreProperties.lcsDo(WebPlayerCoreProperties.LCS_TAG_MUSIC_PLAY_LIST);
                    break;
                case MusicPlayerActivateMainPanelEvent.DISPLAY_TOP100_LIST:
                    facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_TOP_100, null, null);
                    WebPlayerCoreProperties.lcsDo(WebPlayerCoreProperties.LCS_TAG_MUSIC_TOP_100);
                    break;
                case MusicPlayerActivateMainPanelEvent.DISPLAY_LYRICS_LIST:
                    facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_MUSIC_INFO_GET_LYRIC, {trackID:(_arg1.data.trackId as String)}, null);
                    WebPlayerCoreProperties.lcsDo(WebPlayerCoreProperties.LCS_TAG_MUSIC_LYRIC);
                    break;
                default:
                    throw (new Error(("WebPlayerWorkspaceUIMediator : " + "e.type is not valid.")));
            };
        }
        private function musicLogout():void{
            updateAuthorization();
            if ((((WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP)) || (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING))){
                if (ExternalInterface.available){
                    ExternalInterface.call("___musicBroadCast___", "nmp_check_auth", {});
                };
            };
        }
        public function getWebPlayerWorkspaceUI():IMusicPlayListManager{
            return (webPlayerWorkspaceUI);
        }
        private function openExporter(_arg1:MusicServiceResult, _arg2:String, _arg3:String, _arg4:Array):void{
            var _local5:String;
            var _local7:String;
            var _local8:RedirectInformation;
            var _local6 = "";
            _local5 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_UI);
            _local5 = (_local5 + ((((("?site=" + _arg2) + "&pcolor=") + _arg3) + "&trackid=") + _arg4.join(",")));
            _local7 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_EXPORTER) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_EXPORTER);
            _local8 = new RedirectInformation(_local5, _local6, _local7);
            if (!openAlertUIWhenNeedLogin((_arg1.resultvalue as Authorization), _local8)){
                WebPlayerCoreProperties.openWindow(_local5, _local6, _local7);
            };
        }
        private function webPlayerWorkspaceUI_handleMusicPlayerNotifyVilolateInternalPolicyEvent(_arg1:MusicPlayerNotifyVilolateInternalPolicyEvent):void{
            switch (_arg1.type){
                case MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED:
                    facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, {resultCode:_arg1.data.resultCode}, null);
                    break;
                default:
                    throw (new Error(("WebPlayerWorkspaceUIMediator : " + "e.type is not valid.")));
            };
        }
        private function openScraper(_arg1:MusicServiceResult, _arg2:String, _arg3:String):void{
            var _local4:String;
            var _local6:String;
            var _local7:RedirectInformation;
            var _local8:Number;
            var _local9:Number;
            var _local5 = "";
            switch (_arg3){
                case WebPlayerCoreProperties.PLAYER_TYPE_BA:
                    _local8 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC;
                    _local9 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_AL:
                    _local8 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_MINI;
                    _local9 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_MINI;
                    break;
                case WebPlayerCoreProperties.PLAYER_TYPE_BP:
                    _local8 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO;
                    _local9 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO;
                    break;
                default:
                    _local8 = WebPlayerCoreProperties.SIZE_OF_WIDTH_WEB_PLAYER_BASIC_PROMO;
                    _local9 = WebPlayerCoreProperties.SIZE_OF_HEIGHT_WEB_PLAYER_BASIC_PROMO;
            };
            _local4 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_EXPORT);
            _local4 = (_local4 + ((((((("&site=" + _arg2) + "&source_seq=") + WebPlayerCoreProperties.postingListSequence) + "&width=") + _local8) + "&height=") + _local9));
            _local6 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_LOGIN_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_LOGIN_WINDOW);
            _local7 = new RedirectInformation(_local4, _local5, _local6);
            if (!openAlertUIWhenNeedLogin((_arg1.resultvalue as Authorization), _local7)){
                WebPlayerCoreProperties.openWindow(_local4, _local5, _local6);
            };
        }
        override public function setViewComponent(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the view component object.")));
        }
        private function webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent(_arg1:MusicPlayerPromotionEvent):void{
            var _local2:String;
            switch (_arg1.type){
                case MusicPlayerPromotionEvent.BLOG_DJ_CHALLENGE:
                    _local2 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_CHALLENGE);
                    break;
                case MusicPlayerPromotionEvent.BLOG_DJ_EVENT:
                    _local2 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_EVENT);
                    break;
                case MusicPlayerPromotionEvent.CHECK_OUT_EVENT:
                    _local2 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_CHECK_OUT_EVENT);
                    break;
                default:
                    _local2 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BLOG_DJ_CHALLENGE);
            };
            navigateToURL(new URLRequest(_local2), "_blank");
        }
        override public function getViewComponent():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the view component object.")));
        }
        protected function get webPlayerWorkspaceUI():IMusicPlayListManager{
            return ((viewComponent as IMusicPlayListManager));
        }
        private function runTasksAfterPlaylistComplete(_arg1:MusicServiceResult):void{
            var _local2:Authorization = (_arg1.resultvalue as Authorization);
            var _local3:Boolean;
            if (WebPlayerPromotionProperties.nonmemberPromotionUIEnabled){
                if (_local2.islogin.toUpperCase() === "Y"){
                    if (_local2.hasticket.toUpperCase() === "N"){
                        _local3 = true;
                    };
                } else {
                    if (_local2.islogin.toUpperCase() === "N"){
                        _local3 = true;
                    };
                };
            };
            if (_local3){
                facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPPPM_START_NONMEMBER_PROMOTION, null, null);
            };
        }
        private function webPlayerWorkspaceUI_handleEvent(_arg1:Event):void{
            trace(((("CAME!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + WebPlayerCoreProperties.containerType) + ", ") + WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING));
            switch (_arg1.type){
                case Event.ADDED_TO_STAGE:
                    webPlayerWorkspaceUI.removeEventListener(Event.ADDED_TO_STAGE, webPlayerWorkspaceUI_handleEvent, false);
                    if (WebPlayerCoreProperties.containerType === WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP){
                        WebPlayerCoreProperties.setWindowTitle(WebPlayerCoreProperties.TITLE_OF_WINDOW_WEB_PLAYER_CONTAINER_DEFAULT);
                        ExternalInterface.addCallback(WebPlayerCoreProperties.METHOD_NAME_MUSIC_LOGIN, musicLogin);
                        ExternalInterface.addCallback(WebPlayerCoreProperties.METHOD_NAME_MUSIC_LOGOUT, musicLogout);
                        ExternalInterface.addCallback("setBitrateOfPlayer", setBitrate);
                        webPlayerWorkspaceUI.configPlayerSkin(WebPlayerCoreProperties.nhn_webplayer_ns::readSkinFromCookie());
                        webPlayerWorkspaceUI.configPlayerSongQualityOption(WebPlayerCoreProperties.bitrate);
                        webPlayerWorkspaceUI.configPlayerVolumeValue(WebPlayerCoreProperties.nhn_webplayer_ns::readVolumeFromCookie());
                        webPlayerWorkspaceUI.configPlayerRepeatOption(WebPlayerCoreProperties.nhn_webplayer_ns::readRepeatFromCookie());
                        webPlayerWorkspaceUI.configPlayerShuffleOption(WebPlayerCoreProperties.nhn_webplayer_ns::readShuffleFromCookie());
                        webPlayerWorkspaceUI.registerAdditionalCallBack();
                    } else {
                        if (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING){
                            ExternalInterface.addCallback(WebPlayerCoreProperties.METHOD_NAME_MUSIC_LOGIN, musicLogin);
                            ExternalInterface.addCallback(WebPlayerCoreProperties.METHOD_NAME_MUSIC_LOGOUT, musicLogout);
                        };
                    };
                    updateAuthorization();
                    break;
                default:
                    throw (new Error(("WebPlayerWorkspaceUIMediator : " + "e.type is not valid.")));
            };
        }
        override public function onRegister():void{
            super.onRegister();
            if (!Boolean(webPlayerWorkspaceUI)){
                throw (new Error(("WebPlayerWorkspaceUIMediator : " + "webPlayerWorkspaceUI is not valid.")));
            };
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.DISPLAY_SONG_LIST, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.HIDE_SONG_LIST, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_NAVER_HOME, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_HOME, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_LOG_IN, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_LOG_OUT, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_PLAYER_HELP, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.SEND_POSTING_SETTING_CONFIGURATION, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.RECORD_CURRENT_PLAYING_VOLUME, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.CHANGED_REPEAT_OPTION, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.CHANGED_SHUFFLE_OPTION, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.REQUEST_CREATOR_LINK_PAGE, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.CHANGED_PLAY_LIST, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.SETTING_SKIN_AND_SONG_QUALITY_EVENT, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.BOOKMARK_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.ME2DAY_POST_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.FACEBOOK_POST_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(NaverMusicPlayerBasicEvent.TWITTER_POST_CURRENT_SONG, webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerPromotionEvent.BLOG_DJ_CHALLENGE, webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerPromotionEvent.BLOG_DJ_EVENT, webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerPromotionEvent.CHECK_OUT_EVENT, webPlayerWorkspaceUI_handleMusicPlayerPromotionEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerActivateMainPanelEvent.DISPLAY_PLAY_LIST, webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerActivateMainPanelEvent.DISPLAY_TOP100_LIST, webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerActivateMainPanelEvent.DISPLAY_LYRICS_LIST, webPlayerWorkspaceUI_handleMusicPlayerActivateMainPanelEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(MusicPlayerNotifyVilolateInternalPolicyEvent.NOTIFY_VIOLATION_OCCURED, webPlayerWorkspaceUI_handleMusicPlayerNotifyVilolateInternalPolicyEvent, false, 0, false);
            webPlayerWorkspaceUI.addEventListener(Event.ADDED_TO_STAGE, webPlayerWorkspaceUI_handleEvent, false, int.MIN_VALUE, false);
        }
        public function setBitrate(_arg1:Object):void{
            WebPlayerCoreProperties.nhn_webplayer_ns::bitrate = _arg1.sBitrate.toString();
        }
        private function openME2DAYExporter(_arg1:MusicServiceResult, _arg2:Song):void{
            var _local3:String;
            var _local5:String;
            var _local12:String;
            var _local13:int;
            var _local14:int;
            var _local4 = "";
            var _local6 = 60;
            var _local7:String = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_WRITE_ME2DAY_POST);
            _local7 = (_local7 + "?system_body=");
            var _local8:String = _arg2.album.albumtitle;
            var _local9 = (("  Listening to " + _arg2.track.tracktitle) + " / ");
            var _local10:int;
            while (_local10 < _arg2.artistlist.length) {
                _local12 = ((_arg2.artistlist.list[_local10] as Artist).artistname + ", ");
                if (_local10 == (_arg2.artistlist.length - 1)){
                    _local12 = _local12.replace(", ", " ");
                };
                _local9 = (_local9 + _local12);
                _local13 = (_local8.length + _local9.length);
                if (_local13 > _local6){
                    _local14 = ((_local6 - _local8.length) - 4);
                    if (_local14 < 0){
                        _local14 = 0;
                    };
                    _local9 = _local9.substr(0, _local14);
                    _local9 = (_local9 + "... ");
                    break;
                };
                _local10++;
            };
            var _local11:String = encodeURIComponent((("\"" + _arg2.album.albumtitle) + "\":"));
            _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_ME2DAY);
            _local3 = (_local3 + encodeURIComponent(((("?albumId=" + _arg2.album.albumid) + "#") + _arg2.track.trackid)));
            _local11 = (_local11 + _local3);
            _local11 = (_local11 + encodeURIComponent(_local9));
            _local7 = (_local7 + _local11);
            _local5 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_ME2DAY_WRITING_POPUP_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_ME2DAY_WRITING_POPUP_WINDOW);
            WebPlayerCoreProperties.openWindow(_local7, _local4, _local5);
        }
        private function openMusicMall(_arg1:MusicServiceResult, _arg2:String):void{
            var _local3:String;
            var _local5:String;
            var _local6:RedirectInformation;
            var _local4 = "";
            var _local7:Boolean;
            switch (_arg2){
                case NaverMusicPlayerBasicEvent.NONE_MP3_LISTENING_ALL_3000:
                    _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE);
                    break;
                case NaverMusicPlayerBasicEvent.MP3_40_NOT_LISTENING_5000:
                    _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_40MP3);
                    break;
                case NaverMusicPlayerBasicEvent.MP3_40_LISTENING_ALL_7000:
                    _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_1MFREE_40MP3);
                    break;
                case NaverMusicPlayerBasicEvent.MP3_150_NOT_LISTENING:
                    _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET_150MP3);
                    break;
                case NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE:
                    _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_TICKET);
                    _local7 = false;
                    break;
            };
            if (_local7){
                _local5 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_LOGIN_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_LOGIN_WINDOW);
                _local6 = new RedirectInformation(encodeURIComponent(_local3), _local4, _local5);
                if (!openAlertUIWhenNeedLogin((_arg1.resultvalue as Authorization), _local6)){
                    WebPlayerCoreProperties.openWindow(_local3, _local4, _local5);
                };
            } else {
                switch (_arg2){
                    case NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE:
                        navigateToURL(new URLRequest(_local3), "_blank");
                        break;
                };
            };
        }
        private function updateAuthorization(_arg1:ContextFunctionPair=null, _arg2:Array=null):void{
            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_REQUEST_AUTHORIZATION_GET_COOKIE, {
                callback:_arg1,
                args:_arg2
            }, null);
        }
        private function openAlertUIWhenNeedLogin(_arg1:Authorization, _arg2:RedirectInformation=null):Boolean{
            var _local3:Object = {};
            if (!Boolean(_arg1)){
                _local3.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_WAS_101;
                facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, _local3, null);
                return (false);
            };
            if (_arg1.islogin.toUpperCase() === "N"){
                _local3.resultCode = WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_3000;
                if (Boolean(_arg2)){
                    _local3.interationHelpData = _arg2;
                };
                facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, _local3, null);
                return (true);
            };
            return (false);
        }
        private function webPlayerWorkspaceUI_handleNaverMusicPlayerBasicEvent(_arg1:NaverMusicPlayerBasicEvent):void{
            var _local3:Class;
            var _local4:IMessageProtocol;
            var _local5:QueryMessage;
            var _local6:String;
            var _local7:String;
            var _local8:String;
            var _local9:Array;
            var _local10:String;
            var _local11:String;
            var _local12:String;
            var _local2:PipelineFacade = (facade as PipelineFacade);
            switch (_arg1.type){
                case NaverMusicPlayerBasicEvent.PLAY_CURRENT_SONG:
                    _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_PLAY, {
                        trackID:(_arg1.data.trackId as String),
                        automaticRequest:(_arg1.data.auto as Boolean)
                    }, null);
                    break;
                case NaverMusicPlayerBasicEvent.PAUSE_CURRENT_SONG:
                    _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_PAUSE, {
                        trackID:(_arg1.data.trackId as String),
                        automaticRequest:(_arg1.data.auto as Boolean)
                    }, null);
                    break;
                case NaverMusicPlayerBasicEvent.RESUME_CURRENT_SONG:
                    _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_RESUME, {
                        trackID:(_arg1.data.trackId as String),
                        automaticRequest:(_arg1.data.auto as Boolean)
                    }, null);
                    break;
                case NaverMusicPlayerBasicEvent.NOTIFY_PLAYING_SONG_WAS_STOPPED:
                    _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_STOP, {automaticRequest:(_arg1.data.auto as Boolean)}, null);
                    break;
                case NaverMusicPlayerBasicEvent.SEEKING_CURRENT_SONG:
                    _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_SEEK, {
                        trackID:(_arg1.data.trackId as String),
                        time:(_arg1.data.seek as Number),
                        automaticRequest:(_arg1.data.auto as Boolean)
                    }, null);
                    break;
                case NaverMusicPlayerBasicEvent.CONTROL_VOLUMN_TO:
                    _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_SET_VOLUME, {volume:(_arg1.data.volume as Number)}, null);
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_NAVER_HOME:
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER);
                    navigateToURL(new URLRequest(_local6), "_blank");
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_HOME:
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC);
                    navigateToURL(new URLRequest(_local6), "_blank");
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_LOG_IN:
                    nhn_webplayer_ns::attemptToMusicLogin(null);
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_LOG_OUT:
                    nhn_webplayer_ns::attemptToMusicLogout();
                    break;
                case NaverMusicPlayerBasicEvent.PURCHASE_SPECIFIC_TICKET:
                    switch (_arg1.data.ticketKind){
                        case NaverMusicPlayerBasicEvent.NONE_MP3_LISTENING_ALL_3000:
                        case NaverMusicPlayerBasicEvent.MP3_40_NOT_LISTENING_5000:
                        case NaverMusicPlayerBasicEvent.MP3_40_LISTENING_ALL_7000:
                        case NaverMusicPlayerBasicEvent.MP3_150_NOT_LISTENING:
                        case NaverMusicPlayerBasicEvent.LINK_TO_PURCHASE_TICKET_MAIN_PAGE:
                            updateAuthorization(new ContextFunctionPair(this, openMusicMall), [(_arg1.data.ticketKind as String)]);
                            break;
                    };
                    break;
                case NaverMusicPlayerBasicEvent.PURCHASE_CURRENT_MP3:
                    updateAuthorization(new ContextFunctionPair(this, openMP3Downloader), [(_arg1.data.trackIds as Array)]);
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_NAVER_MUSIC_PLAYER_HELP:
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_HELP);
                    _local7 = "";
                    _local8 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_HELP_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_HELP_WINDOW);
                    WebPlayerCoreProperties.openWindow(_local6, _local7, _local8);
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_ALBUM_INFO:
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_ALBUM_INFO);
                    navigateToURL(new URLRequest((_local6 + (_arg1.data.albumid as String))), "_blank");
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_ARTIST_INFO:
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_ARTIST_INFO);
                    navigateToURL(new URLRequest((_local6 + (_arg1.data.artistid as String))), "_blank");
                    break;
                case NaverMusicPlayerBasicEvent.SEND_POSTING_SETTING_CONFIGURATION:
                    if (WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POPUP === WebPlayerCoreProperties.containerType){
                        updateAuthorization(new ContextFunctionPair(this, openExporter), [(_arg1.data.site as String), (_arg1.data.pcolor as String), (_arg1.data.trackId as Array)]);
                    } else {
                        if (WebPlayerCoreProperties.TYPE_WEB_PLAYER_CONTAINER_POSTING === WebPlayerCoreProperties.containerType){
                            updateAuthorization(new ContextFunctionPair(this, openScraper), [(_arg1.data.site as String), (_arg1.data.ptype as String)]);
                        };
                    };
                    break;
                case NaverMusicPlayerBasicEvent.PUT_SELECTED_SONGS_IN_MY_ALBUM:
                    updateAuthorization(new ContextFunctionPair(this, openImporter), [(_arg1.data.trackIds as Array)]);
                    break;
                case NaverMusicPlayerBasicEvent.COMPLELTE_ADD_VIEW_ON_PLAYER:
                    if (loadedSkinFirstTime){
                        loadedSkinFirstTime = false;
                        _local2.sendNotification(WebPlayerWorkspaceNotifications.PREPARED_WEB_PLAYER_WORKSPACE_UI, null, null);
                    };
                    break;
                case NaverMusicPlayerBasicEvent.RECORD_CURRENT_PLAYING_VOLUME:
                    var _local13 = WebPlayerCoreProperties;
                    _local13.nhn_webplayer_ns::writeVolumeToCookie(Number(_arg1.data.volume));
                    break;
                case NaverMusicPlayerBasicEvent.CHANGED_REPEAT_OPTION:
                    _local13 = WebPlayerCoreProperties;
                    _local13.nhn_webplayer_ns::writeRepeatToCookie(int(_arg1.data.repeatOption));
                    break;
                case NaverMusicPlayerBasicEvent.CHANGED_SHUFFLE_OPTION:
                    _local13 = WebPlayerCoreProperties;
                    _local13.nhn_webplayer_ns::writeShuffleToCookie(int(_arg1.data.shuffleOption));
                    break;
                case NaverMusicPlayerBasicEvent.REQUEST_CREATOR_LINK_PAGE:
                    navigateToURL(new URLRequest((_arg1.data.link as String)), "_blank");
                    break;
                case NaverMusicPlayerBasicEvent.CHANGED_PLAY_LIST:
                    _local13 = WebPlayerCoreProperties;
                    _local13.nhn_webplayer_ns::writePlayListToCookie((_arg1.data.trackIds as Array));
                    break;
                case NaverMusicPlayerBasicEvent.NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE:
                    updateAuthorization(new ContextFunctionPair(this, runTasksAfterPlaylistComplete), null);
                    break;
                case NaverMusicPlayerBasicEvent.SETTING_SKIN_AND_SONG_QUALITY_EVENT:
                    _local13 = WebPlayerCoreProperties;
                    _local13.nhn_webplayer_ns::writeSkinToCookie((_arg1.data.pcolor as String));
                    _local10 = (_arg1.data.bitrate as String);
                    if (WebPlayerCoreProperties.validateBitrate(_local10)){
                        if ((((WebPlayerCoreProperties.BITRATE_TYPE_HIGH === _local10)) && (!((WebPlayerCoreProperties.bitrate === _local10))))){
                            _local2.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_OPEN_ALERT_UI, {resultCode:WebPlayerErrorHandlingResultCodes.RESULT_CODE_CLIENT_2118}, null);
                        };
                        //unresolved jump
                    };
                    WebPlayerCoreProperties.nhn_webplayer_ns::bitrate = _local10;
                    break;
                case NaverMusicPlayerBasicEvent.BOOKMARK_CURRENT_SONG:
                    updateAuthorization(new ContextFunctionPair(this, requestAddFavoriteSong), [(_arg1.data.trackIds as Array)]);
                    break;
                case NaverMusicPlayerBasicEvent.ME2DAY_POST_CURRENT_SONG:
                    updateAuthorization(new ContextFunctionPair(this, openME2DAYExporter), [(_arg1.data.song as Song)]);
                    break;
                case NaverMusicPlayerBasicEvent.FACEBOOK_POST_CURRENT_SONG:
                    _local11 = "";
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_FACEBOOK);
                    _local6 = (_local6 + ("?u=" + encodeURIComponent(_local11)));
                    _local7 = "";
                    _local8 = (((((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_EXPORT_TO_FACEBOOK_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_EXPORT_TO_FACEBOOK_WINDOW) + ",") + "scrollbars=yes");
                    WebPlayerCoreProperties.openWindow(_local6, _local7, _local8);
                    break;
                case NaverMusicPlayerBasicEvent.TWITTER_POST_CURRENT_SONG:
                    _local12 = ("Listening to " + "#NaverMusic");
                    _local6 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_EXPORT_TO_TWITTER);
                    _local6 = (_local6 + ("?text=" + encodeURIComponent(_local12)));
                    _local7 = "";
                    _local8 = (((((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_EXPORT_TO_TWITTER_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_EXPORT_TO_TWITTER_WINDOW) + ",") + "scrollbars=yes");
                    WebPlayerCoreProperties.openWindow(_local6, _local7, _local8);
                    break;
                default:
                    throw (new Error(("WebPlayerWorkspaceUIMediator : " + "e.type is not valid.")));
            };
        }
        private function openMP3Downloader(_arg1:MusicServiceResult, _arg2:Array):void{
            var _local6:RedirectInformation;
            var _local3:String;
            var _local4:String;
            var _local5:String;
            var _local7:String = _arg2.join("^");
            var _local8:String = (_arg1.resultvalue as Authorization).encuserid;
            _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_BUY_MP3);
            _local3 = (_local3 + ("?trackid=" + _local7));
            _local4 = "musicCartPopup";
            _local5 = (((((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_MP3_DOWNLOAD_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_MP3_DOWNLOAD_WINDOW) + ",") + "menubar=no,toolbar=no,location=no,status=no,scrollbars=no,resizable=no");
            _local6 = new RedirectInformation(_local3, _local4, _local5);
            if (!openAlertUIWhenNeedLogin((_arg1.resultvalue as Authorization), _local6)){
                WebPlayerCoreProperties.openWindow(_local3, _local4, _local5);
            };
        }
        private function openImporter(_arg1:MusicServiceResult, _arg2:Array):void{
            var _local3:String;
            var _local5:String;
            var _local6:RedirectInformation;
            var _local4 = "";
            _local3 = WebPlayerCoreProperties.getOutLinkURL(WebPlayerCoreProperties.OUT_LINK_TYPE_NAVER_MUSIC_IMPORT);
            _local3 = (_local3 + ("?naverSongList=" + _arg2.join(",")));
            _local5 = (((("width=" + WebPlayerCoreProperties.SIZE_OF_WIDTH_IMPORT_WINDOW) + ",") + "height=") + WebPlayerCoreProperties.SIZE_OF_HEIGHT_IMPORT_WINDOW);
            _local6 = new RedirectInformation(_local3, _local4, _local5);
            if (!openAlertUIWhenNeedLogin((_arg1.resultvalue as Authorization), _local6)){
                WebPlayerCoreProperties.openWindow(_local3, _local4, _local5);
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.mediator 

class RedirectInformation {

    private var _windowURL:String;
    private var _windowName:String;
    private var _windowFeatures:String;

    public function RedirectInformation(_arg1:String=null, _arg2:String=null, _arg3:String=null){
        _windowURL = _arg1;
        _windowName = _arg2;
        _windowFeatures = _arg3;
    }
    public function toString():String{
        var _local1 = ((((((((("[RedirectInformation]\n" + "\twindowURL : ") + windowURL) + "\n") + "\twindowName : ") + windowName) + "\n") + "\twindowFeatures : ") + windowFeatures) + "\n");
        return (_local1);
    }
    public function get windowName():String{
        return (_windowName);
    }
    public function get windowFeatures():String{
        return (_windowFeatures);
    }
    public function get windowURL():String{
        return (_windowURL);
    }

}
﻿package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces {
    import flash.events.*;
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.dto.*;

    public interface IMusicPlayListManager extends IEventDispatcher {

        function configPlayerSkin(_arg1:String):void;
        function configPlayerSongQualityOption(_arg1:String):void;
        function updateTop100UpdatedDate(_arg1:String):void;
        function updateStateAndPlaySong():void;
        function updateLylicsOfCurrentPlayingSong(_arg1:Song):void;
        function updateTop100SongList(_arg1:SongList):void;
        function configPlayerSongListSaveOption(_arg1:String):void;
        function configPlayerShuffleOption(_arg1:int):void;
        function addNewSongsToPlayList(_arg1:SongList, _arg2:int):void;
        function notifyCurrentSongWasCompleted():void;
        function registerAdditionalCallBack():void;
        function initializeAuth(_arg1:Authorization):void;
        function updateCurrentPlayTime(_arg1:Number):void;
        function initializeActiveSong(_arg1:NHNMusicStreamInfodto):String;
        function configPlayerRepeatOption(_arg1:int):void;
        function configPlayerVolumeValue(_arg1:Number):void;
        function initPlayingSongView():void;
        function configPostingPlayerInformation(_arg1:Article):void;
        function addSongTrackIdsAndLaunchOption(_arg1:String, _arg2:int):void;
        function configPlayerSongListPlayOption(_arg1:String):void;

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class MusicPlayerPromotionEvent extends Event {

        public static const CHECK_OUT_EVENT:String = "CHECK_OUT_EVENT";
        public static const BLOG_DJ_CHALLENGE:String = "BLOG_DJ_CHALLENGE";
        public static const BLOG_DJ_EVENT:String = "BLOG_DJ_EVENT";

        private var _data:Object;

        public function MusicPlayerPromotionEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class NaverMusicPlayerBasicEvent extends Event {

        public static const MOVE_SELECTED_SONG_UPPER_BUTTON:String = "MOVE_SELECTED_SONG_UPPER_BUTTON";
        public static const PAUSE_CURRENT_SONG:String = "PAUSE_CURRENT_SONG";
        public static const NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE:String = "NOTIFY_COMPLETE_CURRENT_SONG_LIST_WAS_PLAYED_ONCE";
        public static const MP3_150_NOT_LISTENING:String = "MP3_150_NOT_LISTENING";
        public static const SEEKING_CURRENT_SONG:String = "SEEKING_CURRENT_SONG";
        public static const SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON:String = "SEND_SELECTED_SONG_TO_PLAYLIST_BUTTON";
        public static const ME2DAY_POST_CURRENT_SONG:String = "ME2DAY_POST_CURRENT_SONG";
        public static const RESUME_CURRENT_SONG:String = "RESUME_CURRENT_SONG";
        public static const DISPLAY_SONG_LIST:String = "DISPLAY_SONG_LIST";
        public static const RECORD_CURRENT_PLAY_LIST_SAVE_OPTION:String = "RECORD_CURRENT_PLAY_LIST_SAVE_OPTION";
        public static const CHANGED_REPEAT_OPTION:String = "CHANGED_REPEAT_OPTION";
        public static const COMPLELTE_ADD_VIEW_ON_PLAYER:String = "COMPLELTE_ADD_VIEW_ON_PLAYER";
        public static const SEND_POSTING_SETTING_CONFIGURATION:String = "SEND_POSTING_SETTING_CONFIGURATION";
        public static const POST_SELECTED_SONG_BUTTON:String = "POST_SELECTED_SONG_BUTTON";
        public static const FACEBOOK_POST_CURRENT_SONG:String = "FACEBOOK_POST_CURRENT_SONG";
        public static const ITEM_DOUBLE_CLICKED:String = "ITEM_DOUBLE_CLICKED";
        public static const REQUEST_NAVER_MUSIC_PLAYER_HELP:String = "REQUEST_NAVER_MUSIC_PLAYER_HELP";
        public static const CHANGED_SKIN:String = "CHANGED_SKIN";
        public static const LIST_CELL_DRAG_STOP:String = "LIST_CELL_DRAG_STOP";
        public static const NOTIFY_PLAYING_SONG_WAS_STOPPED:String = "NOTIFY_PLAYING_SONG_WAS_STOPPED";
        public static const PLAY_PREV_SONG:String = "PLAY_PREV_SONG";
        public static const REQUEST_NAVER_MUSIC_HOME:String = "REQUEST_NAVER_MUSIC_HOME";
        public static const COMPLETE_LOAD_VIEW_RESOURCES:String = "COMPLETE_LOAD_VIEW_RESOURCES";
        public static const PLAY_CURRENT_SONG:String = "PLAY_CURRENT_SONG";
        public static const REQUEST_MUSIC_SERVICE_CATALOG:String = "REQUEST_MUSIC_SERVICE_CATALOG";
        public static const SETTING_SKIN_AND_SONG_QUALITY_EVENT:String = "SETTING_SKIN_AND_SONG_QUALITY_EVENT";
        public static const REQUEST_ALBUM_INFO:String = "REQUEST_ALBUM_INFO";
        public static const REQUEST_CREATOR_LINK_PAGE:String = "REQUEST_CREATOR_LINK_PAGE";
        public static const REQUEST_PURCHASE_PAID_TICKET:String = "REQUEST_PURCHASE_PAID_TICKET";
        public static const PURCHASE_SPECIFIC_TICKET:String = "PURCHASE_SPECIFIC_TICKET";
        public static const MP3_40_LISTENING_ALL_7000:String = "MP3_40_LISTENING_ALL_7000";
        public static const UPDATE_PLAY_LIST_SAVE_CONFIGURATION:String = "UPDATE_PLAY_LIST_SAVE_CONFIGURATION";
        public static const TWITTER_POST_CURRENT_SONG:String = "TWITTER_POST_CURRENT_SONG";
        public static const CONTROL_VOLUMN_TO:String = "CONTROL_VOLUMN_TO";
        public static const SET_POSTING_CONFIG_END:String = "SET_POSTING_CONFIG_END";
        public static const SELECT_ALL_SONG_BUTTON:String = "SELECT_ALL_SONG_BUTTON";
        public static const PLAY_NEXT_SONG:String = "PLAY_NEXT_SONG";
        public static const MP3_40_NOT_LISTENING_5000:String = "MP3_40_NOT_LISTENING_5000";
        public static const PUT_SELECTED_SONGS_IN_MY_ALBUM:String = "PUT_SELECTED_SONGS_IN_MY_ALBUM";
        public static const BOOKMARK_CURRENT_SONG:String = "BOOKMARK_CURRENT_SONG";
        public static const REQUEST_NAVER_HOME:String = "REQUEST_NAVER_HOME";
        public static const CHANGED_SHUFFLE_OPTION:String = "CHANGED_SHUFFLE_OPTION";
        public static const LIST_CELL_DRAGGING:String = "LIST_CELL_DRAGGING";
        public static const MOVE_SELECTED_SONG_DOWNER_BUTTON:String = "MOVE_SELECTED_SONG_DOWNER_BUTTON";
        public static const RECORD_CURRENT_PLAYING_VOLUME:String = "RECORD_CURRENT_PLAYING_VOLUME";
        public static const LINK_TO_PURCHASE_TICKET_MAIN_PAGE:String = "LINK_TO_PURCHASE_TICKET_MAIN_PAGE";
        public static const REQUEST_TOP100_UPDATED_DATE:String = "REQUEST_TOP100_UPDATED_DATE";
        public static const REQUEST_LOG_OUT:String = "REQUEST_LOG_OUT";
        public static const HIDE_SONG_LIST:String = "HIDE_SONG_LIST";
        public static const PURCHASE_CURRENT_MP3:String = "PURCHASE_CURRENT_MP3";
        public static const NONE_MP3_LISTENING_ALL_3000:String = "NONE_MP3_LISTENING_ALL_3000";
        public static const REQUEST_ARTIST_INFO:String = "REQUEST_ARTIST_INFO";
        public static const CHANGED_PLAY_LIST:String = "CHANGED_PLAY_LIST";
        public static const UPDATE_CONFIGURATION:String = "UPDATE_CONFIGURATION";
        public static const START_LOAD_VIEW_RESOURCES:String = "START_LOAD_VIEW_RESOURCES";
        public static const SET_POSTING_TYPE_CAFE:String = "SET_POSTING_TYPE_CAFE";
        public static const LIST_CELL_DRAG_START:String = "LIST_CELL_DRAG_START";
        public static const CHANGE_SKIN_TYPE:String = "CHANGE_SKIN_TYPE";
        public static const REQUEST_LOG_IN:String = "REQUEST_LOG_IN";
        public static const SET_POSTING_TYPE_BLOG:String = "SET_POSTING_TYPE_BLOG";
        public static const REMOVE_SELECTED_SONG_BUTTON:String = "REMOVE_SELECTED_SONG_BUTTON";

        private var _data:Object;

        public function NaverMusicPlayerBasicEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class MusicPlayerActivateMainPanelEvent extends Event {

        public static const DISPLAY_LYRICS_LIST:String = "DISPLAY_LYRICS_LIST";
        public static const DISPLAY_TOP100_LIST:String = "DISPLAY_TOP100_LIST";
        public static const DISPLAY_PLAY_LIST:String = "DISPLAY_PLAY_LIST";

        private var _data:Object;

        public function MusicPlayerActivateMainPanelEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events {
    import flash.events.*;

    public class MusicPlayerNotifyVilolateInternalPolicyEvent extends Event {

        public static const NOTIFY_VIOLATION_OCCURED:String = "NOTIFY_VIOLATION_OCCURED";

        private var _data:Object;

        public function MusicPlayerNotifyVilolateInternalPolicyEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
        }
        public function get data():Object{
            return (_data);
        }
        public function set data(_arg1:Object):void{
            this._data = _arg1;
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.events 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.proxy {
    import com.nhn.webapis.music.serviceobject.*;
    import flash.utils.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayercore.*;

    public class Top100Proxy extends BasicProxy {

        public static const NAME:String = "Top100Proxy";

        private var initializedTime:int;

        public function Top100Proxy(){
            super(name, null);
            initializedTime = -1;
        }
        override public function getData():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the data object.")));
        }
        override public function onRemove():void{
            if (Boolean(top100)){
                top100.releaseMemory();
            };
            super.onRemove();
        }
        override public function get name():String{
            return (Top100Proxy.NAME);
        }
        override public function setData(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the data object.")));
        }
        public function getTop100():Top100{
            var _local1:int = getTimer();
            var _local2:Top100;
            if (Boolean(data)){
                if ((_local1 - initializedTime) > WebPlayerCoreProperties.TIMER_DELAY_REQUEST_TOP_100){
                    data = null;
                    initializedTime = -1;
                } else {
                    _local2 = (top100.clone() as Top100);
                };
            };
            return (_local2);
        }
        private function get top100():Top100{
            return ((data as Top100));
        }
        public function setTop100(_arg1:Top100):void{
            var _local2:int;
            if (((!(Boolean(data))) && (Boolean(_arg1)))){
                _local2 = getTimer();
                if ((((initializedTime < 0)) || (((_local2 - initializedTime) > WebPlayerCoreProperties.TIMER_DELAY_REQUEST_TOP_100)))){
                    initializedTime = _local2;
                    data = (_arg1.clone() as Top100);
                };
            };
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.proxy 
﻿package com.nhn.application.modules.webplayerworkspace.patterns.proxy {
    import com.nhn.webapis.music.serviceobject.*;
    import com.nhn.application.modules.core.patterns.proxy.*;
    import com.nhn.application.modules.webplayercore.*;

    public class LyricsProxy extends BasicProxy {

        public static const NAME:String = "LyricsProxy";

        public function LyricsProxy(){
            super(name, null);
            data = new SongList();
        }
        override public function getData():Object{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to get the data object.")));
        }
        private function get songList():SongList{
            return ((data as SongList));
        }
        override public function setData(_arg1:Object):void{
            throw (new Error(((((name + "(") + basicFacade.key) + ") : Do not allow external ") + "domain to set the data object.")));
        }
        override public function onRemove():void{
            songList.releaseMemory();
            super.onRemove();
        }
        override public function get name():String{
            return (LyricsProxy.NAME);
        }
        public function addSongForLyric(_arg1:Song):void{
            if (((Boolean(_arg1)) && (Boolean(_arg1.lyric)))){
                if (Boolean(songList.retrieveItem(_arg1, true, false))){
                    throw (new Error(("LyricsProxy : " + "song had been already added.")));
                };
                if (songList.length === WebPlayerCoreProperties.MAX_NUM_OF_LYRICS_IN_PROXY){
                    songList.removeItemAt(0);
                };
                songList.addItem(_arg1, true);
            };
        }
        public function retrieveSongForLyric(_arg1:String):Song{
            var _local2:Song;
            var _local3:int = songList.length;
            var _local4:int;
            while (_local4 < _local3) {
                _local2 = (songList.retrieveItemAt(_local4, false) as Song);
                if (_local2.track.trackid === _arg1){
                    break;
                };
                _local2 = null;
                _local4++;
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace.patterns.proxy 
﻿package com.nhn.application.modules.webplayerworkspace.pipemessages {
    import com.nhn.application.messages.*;
    import com.nhn.application.messages.protocols.*;

    public class WebPlayerWorkspacePipeMessages {

        public static const ADD_TRACKIDS_AND_LAUNCH_OPTION:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERWORKSPACE_ADD_TRACKIDS_AND_LAUNCH_OPTION", DataTransferProtocol);
        public static const RESPOND_GET_WEB_PLAYER_WORKSPACE_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERWORKSPACE_RESPOND_GET_WEB_PLAYER_WORKSPACE_UI", DataTransferProtocol);
        public static const PREPARED_WEB_PLAYER_WORKSPACE_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERWORKSPACE_PREPARED_WEB_PLAYER_WORKSPACE_UI", DataTransferProtocol);
        public static const REGISTER_WEB_PLAYER_WORKSPACE_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERWORKSPACE_REGISTER_WEB_PLAYER_WORKSPACE_UI", DataTransferProtocol);
        public static const ADD_EMPTY_SONG_LIST:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERWORKSPACE_ADD_EMPTY_SONG_LIST", DataTransferProtocol);
        public static const REQUEST_GET_WEB_PLAYER_WORKSPACE_UI:MessageDefine = new MessageDefine("PIPEMSG_WEBPLAYERWORKSPACE_REQUEST_GET_WEB_PLAYER_WORKSPACE_UI", DataTransferProtocol);

    }
}//package com.nhn.application.modules.webplayerworkspace.pipemessages 
﻿package com.nhn.application.modules.webplayerworkspace {
    import com.nhn.application.modules.core.data.*;
    import com.nhn.application.modules.utils.*;
    import com.nhn.application.messages.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.viewcomponent.interfaces.*;
    import com.nhn.application.messages.protocols.*;
    import com.nhn.application.modules.pipeinterchange.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.mediator.*;
    import com.nhn.application.modules.webplayererrorhandling.pipemessages.*;
    import com.nhn.application.modules.webplayerworkspace.pipemessages.*;
    import com.nhn.application.modules.wascommunication.pipemessages.*;
    import com.nhn.application.modules.fmscommunication.pipemessages.*;
    import com.nhn.application.modules.webplayerworkspace.notifications.*;
    import com.nhn.application.modules.webplayerworkspace.patterns.command.*;

    public class WebPlayerWorkspaceModule extends PipeInterchangeableModule {

        public static const NAME_BASE:String = "WebPlayerWorkspaceModule";

        public function WebPlayerWorkspaceModule(_arg1:ModuleName, _arg2:ModuleInitializeData=null){
            super(_arg1, null, _arg2);
        }
        override protected function initialize(_arg1:ModuleInitializeData):void{
            super.initialize(_arg1);
            var _local2:IMusicPlayListManager = (_arg1.data["webPlayerWorkspaceUI"] as IMusicPlayListManager);
            if (Boolean(_local2)){
                facade.registerMediator(new WebPlayerWorkspaceUIMediator(_local2));
            };
        }
        override public function handlePipeMessage(_arg1:IAdvancedPipeMessage):void{
            switch (_arg1.getType()){
                case DataTransferProtocol.TYPE:
                    switch (_arg1.getHeaderByIMessageHeader().name){
                        case WebPlayerWorkspacePipeMessages.ADD_TRACKIDS_AND_LAUNCH_OPTION.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.ADD_TRACKIDS_AND_LAUNCH_OPTION, _arg1.getBody(), null);
                            break;
                        case WebPlayerWorkspacePipeMessages.REGISTER_WEB_PLAYER_WORKSPACE_UI.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.REGISTER_WEB_PLAYER_WORKSPACE_UI, _arg1.getBody(), null);
                            break;
                        case WebPlayerWorkspacePipeMessages.REQUEST_GET_WEB_PLAYER_WORKSPACE_UI.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.REQUEST_GET_WEB_PLAYER_WORKSPACE_UI, _arg1.getBody(), null);
                            break;
                        case WebPlayerWorkspacePipeMessages.ADD_EMPTY_SONG_LIST.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.ADD_EMPTY_SONG_LIST, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_COMMON_IO_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_COMMON_SECURITY_ERROR, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_GET_COOKIE.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_AUTHORIZATION_GET_COOKIE, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_SONG_LIST.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_SONG_LIST, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_TOP_100.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_TOP_100, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_LYRIC.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_LYRIC, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_ARTICLE.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_GET_ARTICLE, _arg1.getBody(), null);
                            break;
                        case WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWCPM_RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_CONNECTION_SUCCESS.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_CONNECTION_SUCCESS, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_CONNECTION_CLOSED.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_CONNECTION_CLOSED, null, null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_OPEN.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_OPEN, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_PROGRESS.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_PROGRESS, _arg1.getBody(), null);
                            break;
                        case FMSCommunicationPipeMessages.STREAM_SERVICE_COMPLETE.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HFCPM_STREAM_SERVICE_COMPLETE, _arg1.getBody(), null);
                            break;
                        case WebPlayerErrorHandlingPipeMessages.INTERACT_ALERT_UI.name:
                            facade.sendNotification(WebPlayerWorkspaceNotifications.WPW_HWPEHPM_INTERACT_ALERT_UI, _arg1.getBody(), null);
                            break;
                        default:
                            throw (new Error(("WebPlayerWorkspaceModule : " + "message.getHeaderByIMessageHeader().name is not valid.")));
                    };
                    break;
                default:
                    super.handlePipeMessage(_arg1);
            };
        }
        override protected function registerStartCommand():void{
            facade.registerStartCommand(StartCommand);
        }
        override public function listPipeMessageInterests():Array{
            var _local1:Array = super.listPipeMessageInterests();
            _local1.push(WebPlayerWorkspacePipeMessages.REGISTER_WEB_PLAYER_WORKSPACE_UI.name);
            _local1.push(WebPlayerWorkspacePipeMessages.REQUEST_GET_WEB_PLAYER_WORKSPACE_UI.name);
            _local1.push(WebPlayerWorkspacePipeMessages.ADD_EMPTY_SONG_LIST.name);
            _local1.push(WebPlayerWorkspacePipeMessages.ADD_TRACKIDS_AND_LAUNCH_OPTION.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_IO_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_COMMON_SECURITY_ERROR.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_AUTHORIZATION_GET_COOKIE.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_SONG_LIST.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_TOP_100.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_LYRIC.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_GET_ARTICLE.name);
            _local1.push(WASCommunicationPipeMessages.RESPOND_MUSIC_INFO_ADD_FAVORITE_SONG.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_CONNECTION_SUCCESS.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_CONNECTION_CLOSED.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_OPEN.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_PROGRESS.name);
            _local1.push(FMSCommunicationPipeMessages.STREAM_SERVICE_COMPLETE.name);
            _local1.push(WebPlayerErrorHandlingPipeMessages.INTERACT_ALERT_UI.name);
            return (_local1);
        }

    }
}//package com.nhn.application.modules.webplayerworkspace 
﻿package com.nhn.application.modules.utils {
    import com.nhn.application.ns.*;

    public final class ModuleName {

        private var _moduleName:String;
        private var _moduleMediatorName:String;

        public function ModuleName(){
            _moduleName = null;
            _moduleMediatorName = null;
        }
        nhn_app_ns function set moduleMediatorName(_arg1:String):void{
            _moduleMediatorName = _arg1;
        }
        public function get moduleName():String{
            return (_moduleName);
        }
        public function get moduleMediatorName():String{
            return (_moduleMediatorName);
        }
        nhn_app_ns function set moduleName(_arg1:String):void{
            _moduleName = _arg1;
        }

    }
}//package com.nhn.application.modules.utils 
﻿package com.nhn.application.modules.utils {
    import com.nhn.application.modules.core.*;
    import com.nhn.application.ns.*;

    public final class ModuleNameFactory {

        private static const DELIMITER:String = "$";
        private static const MEDIATOR_NAME_SUFFIX:String = "Mediator";

        private static var counter:uint = 0;

        public static function generateModuleName(_arg1:String):ModuleName{
            var _local3:String;
            var _local2:ModuleName = new ModuleName();
            while (1) {
                _local3 = (((DELIMITER + int((Math.random() * 10000))) + DELIMITER) + ModuleNameFactory.counter++);
                _local2.nhn_app_ns::moduleName = (_arg1 + _local3);
                if (BasicModule.hasModule(_local2.moduleName)){
                } else {
                    _local2.nhn_app_ns::moduleMediatorName = ((_arg1 + MEDIATOR_NAME_SUFFIX) + _local3);
                    break;
                };
            };
            return (_local2);
        }

    }
}//package com.nhn.application.modules.utils 
﻿package com.nhn.application.messages {
    import com.nhn.application.messages.protocols.*;

    public class QueryMessage implements IAdvancedPipeMessage {

        protected var message:MessageFormat;

        public function QueryMessage(_arg1:IMessageProtocol){
            message = _arg1.decode();
        }
        public function getPriority():int{
            return (message.priority);
        }
        public function getHeader():Object{
            return (message.header);
        }
        public function setBody(_arg1:Object):void{
            throw (new Error(("QueryMessage : Do not allow external domain to set the body.m\tparam body = " + _arg1)));
        }
        public function getHeaderByIMessageHeader():IMessageHeader{
            return ((message.header as IMessageHeader));
        }
        public function setPriority(_arg1:int):void{
            throw (new Error(("QueryMessage : Do not allow external domain to set the priority.m\tparam priority = " + _arg1)));
        }
        public function setHeader(_arg1:Object):void{
            throw (new Error(("QueryMessage : Do not allow external domain to set the header.m\tparam header = " + _arg1)));
        }
        public function getType():String{
            return (message.type);
        }
        public function getBody():Object{
            return (message.body);
        }
        public function setType(_arg1:String):void{
            throw (new Error(("QueryMessage : Do not allow external domain to set the type.m\tparam type = " + _arg1)));
        }

    }
}//package com.nhn.application.messages 
﻿package com.nhn.application.messages {

    public class MessageDefine {

        protected var _protocol:Class;
        protected var _name:String;

        public function MessageDefine(_arg1:String, _arg2:Class){
            _name = _arg1;
            _protocol = _arg2;
        }
        public function get protocol():Class{
            return (_protocol);
        }
        public function get name():String{
            return (_name);
        }

    }
}//package com.nhn.application.messages 
﻿package com.nhn.application.messages.protocols {
    import com.nhn.application.messages.*;

    public class BasicMessageProtocol implements IMessageProtocol {

        protected var priority:int;
        protected var sender:String;
        protected var data:Object;
        protected var name:String;

        public function BasicMessageProtocol(_arg1:String, _arg2:String, _arg3:Object, _arg4:int=0){
            this.name = _arg1;
            this.sender = _arg2;
            this.data = _arg3;
            this.priority = _arg4;
        }
        public function decode():MessageFormat{
            return (null);
        }

    }
}//package com.nhn.application.messages.protocols 
﻿package com.nhn.application.messages.protocols {
    import com.nhn.application.messages.*;

    public class DataTransferProtocol extends BasicMessageProtocol {

        public static const TYPE:String = "DATA_TRANSFER_MESSAGE_PROTOCOL";

        public function DataTransferProtocol(_arg1:String, _arg2:String, _arg3:Object, _arg4:int=0){
            super(_arg1, _arg2, _arg3, _arg4);
        }
        override public function decode():MessageFormat{
            var _local1:MessageFormat = new MessageFormat();
            _local1.type = DataTransferProtocol.TYPE;
            _local1.header = new BasicMessageHeader(name, sender);
            _local1.body = data;
            _local1.priority = priority;
            return (_local1);
        }

    }
}//package com.nhn.application.messages.protocols 
﻿package com.nhn.application.messages.protocols {
    import com.nhn.application.messages.*;

    public interface IMessageProtocol {

        function decode():MessageFormat;

    }
}//package com.nhn.application.messages.protocols 
﻿package com.nhn.application.messages.protocols {
    import com.nhn.application.modules.core.*;
    import com.nhn.application.messages.*;

    public class ModuleTransferProtocol extends BasicMessageProtocol {

        public static const TYPE:String = "MODULE_TRANSFER_MESSAGE_PROTOCOL";

        public function ModuleTransferProtocol(_arg1:String, _arg2:String, _arg3:BasicModule, _arg4:int=0){
            super(_arg1, _arg2, _arg3, _arg4);
        }
        override public function decode():MessageFormat{
            var _local1:MessageFormat = new MessageFormat();
            _local1.type = ModuleTransferProtocol.TYPE;
            _local1.header = new BasicMessageHeader(name, sender);
            _local1.body = (data as BasicModule);
            _local1.priority = priority;
            return (_local1);
        }

    }
}//package com.nhn.application.messages.protocols 
﻿package com.nhn.application.messages {

    public class BasicMessageHeader implements IMessageHeader {

        protected var _sender:String;
        protected var _name:String;

        public function BasicMessageHeader(_arg1:String, _arg2:String){
            _name = _arg1;
            _sender = _arg2;
        }
        public function get sender():String{
            return (_sender);
        }
        public function get name():String{
            return (_name);
        }

    }
}//package com.nhn.application.messages 
﻿package com.nhn.application.messages {
    import org.puremvc.as3.multicore.utilities.pipes.interfaces.*;

    public interface IAdvancedPipeMessage extends IPipeMessage {

        function getHeaderByIMessageHeader():IMessageHeader;

    }
}//package com.nhn.application.messages 
﻿package com.nhn.application.messages {

    public interface IMessageHeader {

        function get name():String;
        function get sender():String;

    }
}//package com.nhn.application.messages 
﻿package com.nhn.application.messages {

    public class MessageFormat {

        public var type:String;
        public var body:Object;
        public var priority:int;
        public var header:IMessageHeader;

        public function MessageFormat(_arg1:String=null, _arg2:IMessageHeader=null, _arg3:Object=null, _arg4:int=0){
            this.type = _arg1;
            this.header = _arg2;
            this.body = _arg3;
            this.priority = _arg4;
        }
    }
}//package com.nhn.application.messages 
﻿package com.nhn.application.ns {

    public namespace nhn_app_ns = "http://www.nhncorp.com/nhn/application/ns";
}//package com.nhn.application.ns 
﻿package com.nhn.application.ns {

    public namespace nhn_webplayer_ns = "http://www.nhncorp.com/nhn/application/webplayer/ns";
}//package com.nhn.application.ns 
﻿package com.nhn.events {
    import flash.events.*;

    public class MotionEvent extends Event {

        public var index:Number;
        public var params:Array;
        public var position:Object;
        public var tweenTarget:Object;

        public function MotionEvent(_arg1:String, _arg2:Object, _arg3:Object, _arg4:Number, _arg5:Array, ... _args):void{
            super(_arg1, _args[0], _args[1]);
            this.tweenTarget = _arg2;
            this.position = _arg3;
            this.index = _arg4;
            this.params = _arg5;
        }
        override public function toString():String{
            return (formatToString("MotionEvent", "tweenTarget", "position", "index", "type", "bubbles", "cancelable", "eventPhase"));
        }
        override public function clone():Event{
            return (new MotionEvent(type, tweenTarget, position, index, params));
        }

    }
}//package com.nhn.events 
﻿package com.nhn.events {
    import flash.events.*;

    public class SmartLoaderEvent extends Event {

        public static const COMPLETE:String = "SmartLoaderEventComplete";

        public var content;
        private var _cancelable:Boolean;
        private var _bubbles:Boolean;
        private var _type:String;

        public function SmartLoaderEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            super(_arg1, _arg2, _arg3);
            _type = _arg1;
            _bubbles = _arg2;
            _cancelable = _arg3;
        }
        override public function clone():Event{
            return (new SmartLoaderEvent(_type, _bubbles, _cancelable));
        }

    }
}//package com.nhn.events 
﻿package com.nhn.events {
    import com.nhn.core.interfaces.*;

    public class EventsMapItem implements IReleaseMemory, ICloneable {

        public var listener:Function;
        public var type:String;
        public var useCapture:Boolean;

        public function EventsMapItem(_arg1:String, _arg2:Function, _arg3:Boolean=false){
            this.type = _arg1;
            this.listener = _arg2;
            this.useCapture = _arg3;
        }
        public static function compare(_arg1:EventsMapItem, _arg2:EventsMapItem):Boolean{
            var _local3:Boolean;
            if (((((!((_arg1.type === _arg2.type))) || (!((_arg1.listener === _arg2.listener))))) || (!((_arg1.useCapture === _arg2.useCapture))))){
                _local3 = false;
            };
            return (_local3);
        }

        public function releaseMemory():void{
            listener = null;
        }
        public function clone(){
            return (new EventsMapItem(type, listener, useCapture));
        }

    }
}//package com.nhn.events 
﻿package com.nhn.events {
    import com.nhn.core.interfaces.*;

    public class EventsMap implements IReleaseMemory {

        protected var eventsMap:Array;
        protected var _eventsMapItemNum:int;

        public function EventsMap(){
            eventsMap = [];
            _eventsMapItemNum = 0;
        }
        public function removeEventsMapItemsAll():void{
            var _local1:Array;
            var _local2:EventsMapItem;
            var _local3:String;
            for (_local3 in eventsMap) {
                _local1 = eventsMap[_local3];
                _local2 = (_local1.pop() as EventsMapItem);
                while (Boolean(_local2)) {
                    _local2.releaseMemory();
                    _local2 = (_local1.pop() as EventsMapItem);
                    if (_eventsMapItemNum === 0){
                        throw (new Error("EventsMap : eventsMapItemNum is not valid."));
                    };
                    _eventsMapItemNum--;
                };
                if (_eventsMapItemNum !== 0){
                    throw (new Error("EventsMap : eventsMapItemNum is not valid."));
                };
                eventsMap[_local3] = null;
                delete eventsMap[_local3];
            };
        }
        public function retrieveEventsMapItemsByListener(_arg1:Function):Array{
            var _local2:Array;
            var _local3:EventsMapItem;
            var _local5:int;
            var _local6:int;
            var _local7:String;
            var _local4:Array = [];
            for (_local7 in eventsMap) {
                _local2 = eventsMap[_local7];
                _local6 = _local2.length;
                _local5 = 0;
                while (_local5 < _local6) {
                    _local3 = (_local2[_local5] as EventsMapItem);
                    if (_local3.listener === _arg1){
                        _local4.push(_local3);
                    };
                    _local5++;
                };
            };
            return (((_local4.length)!==0) ? _local4 : null);
        }
        public function retrieveEventsMapItemsAll():Array{
            var _local1:Array;
            var _local3:String;
            var _local2:Array = [];
            for (_local3 in eventsMap) {
                _local2 = _local2.concat(retrieveEventsMapItemsByType(_local3));
            };
            return (((_local2.length)!==0) ? _local2 : null);
        }
        public function retrieveEventsMapItemsByType(_arg1:String):Array{
            return ((eventsMap[_arg1] as Array));
        }
        public function retrieveEventsMapItemsByUseCapture(_arg1:Boolean):Array{
            var _local2:Array;
            var _local3:EventsMapItem;
            var _local5:int;
            var _local6:int;
            var _local7:String;
            var _local4:Array = [];
            for (_local7 in eventsMap) {
                _local2 = eventsMap[_local7];
                _local6 = _local2.length;
                _local5 = 0;
                while (_local5 < _local6) {
                    _local3 = (_local2[_local5] as EventsMapItem);
                    if (_local3.useCapture === _arg1){
                        _local4.push(_local3);
                    };
                    _local5++;
                };
            };
            return (((_local4.length)!==0) ? _local4 : null);
        }
        public function get eventsMapItemNum():int{
            return (_eventsMapItemNum);
        }
        public function removeEventsMapItem(_arg1:EventsMapItem):void{
            var _local3:int;
            var _local2:Array = (eventsMap[_arg1.type] as Array);
            if (!Boolean(_local2)){
                throw (new Error("EventsMap : Given EventsMapItem is not added."));
            };
            _local3 = (_local2.length - 1);
            if (_local3 < 0){
                throw (new Error("EventsMap : Out of range."));
            };
            while (_local3 > -1) {
                if (EventsMapItem.compare((_local2[_local3] as EventsMapItem), _arg1)){
                    (_local2[_local3] as EventsMapItem).releaseMemory();
                    _local2.splice(_local3, 1);
                    if (_local2.length === 0){
                        eventsMap[_arg1.type] = null;
                        delete eventsMap[_arg1.type];
                    };
                    if (_eventsMapItemNum === 0){
                        throw (new Error("EventsMap : eventsMapItemNum is not valid."));
                    };
                    _eventsMapItemNum--;
                    return;
                };
                _local3--;
            };
            throw (new Error("EventsMap : Given EventsMapItem is not added."));
        }
        public function addEventsMapItem(_arg1:EventsMapItem):void{
            var _local3:int;
            var _local4:int;
            var _local2:Array = (eventsMap[_arg1.type] as Array);
            if (!Boolean(_local2)){
                eventsMap[_arg1.type] = [(_arg1.clone() as EventsMapItem)];
                _eventsMapItemNum++;
            } else {
                _local3 = _local2.length;
                _local4 = 0;
                while (_local4 < _local3) {
                    if (EventsMapItem.compare((_local2[_local4] as EventsMapItem), _arg1)){
                        throw (new Error("EventsMap : Given EventsMapItem is already added."));
                    };
                    _local4++;
                };
                _local2[_local3] = (_arg1.clone() as EventsMapItem);
                _eventsMapItemNum++;
            };
        }
        public function releaseMemory():void{
            removeEventsMapItemsAll();
            eventsMap = null;
        }

    }
}//package com.nhn.events 
﻿package com.nhn.events {
    import flash.events.*;
    import com.nhn.dto.*;

    public class NHNStreamEvent extends Event {

        public static const PLAY_COMPLETE:String = "playComplete";
        public static const STREAM_BUFFER_FULL:String = "streamBufferFull";
        public static const ONLOAD_STREAM_INFORMATION:String = "onloadStreamInformation";
        public static const PLAY_DISABLED:String = "playDisabled";
        public static const STREAM_PROGRESS:String = "streamProgress";

        public var data:NHNMusicStreamInfodto;
        private var _cancelable:Boolean;
        public var errorcode:String;
        private var _bubbles:Boolean;
        private var _type:String;

        public function NHNStreamEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:NHNMusicStreamInfodto=null, _arg5:String=null){
            super(_arg1, _arg2, _arg3);
            _type = _arg1;
            _bubbles = _arg2;
            _cancelable = _arg3;
            data = ((_arg4) || (new NHNMusicStreamInfodto()));
            errorcode = ((_arg5) || (""));
        }
        override public function clone():Event{
            return (new NHNStreamEvent(_type, _bubbles, _cancelable, data, errorcode));
        }

    }
}//package com.nhn.events 
﻿package com.nhn.events {
    import flash.events.*;

    public class AdvancedLoaderEvent extends Event {

        public static const CLOSE:String = "close";
        public static const LOAD:String = "load";

        public function AdvancedLoaderEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false){
            _arg1 = validateType(_arg1);
            super(_arg1, _arg2, _arg3);
        }
        protected function validateType(_arg1:String):String{
            switch (_arg1){
                case AdvancedLoaderEvent.LOAD:
                case AdvancedLoaderEvent.CLOSE:
                    break;
                default:
                    throw (new Error("AdvancedLoaderEvent : type is not valid."));
            };
            return (_arg1);
        }
        override public function toString():String{
            return (formatToString("AdvancedLoaderEvent", "type", "bubbles", "cancelable"));
        }
        override public function clone():Event{
            var _local1:AdvancedLoaderEvent = new AdvancedLoaderEvent(type, bubbles, cancelable);
            return (_local1);
        }

    }
}//package com.nhn.events 
﻿package com.nhn.events {
    import flash.events.*;

    public class NHNConnectionEvent extends Event {

        public static const CONNECTION_COMPLETE:String = "connectionComplete";
        public static const STREAM_IOERROR:String = "streamIoerror";
        public static const APPLICATION_SHUTDOWN:String = "applicationShoutdown";
        public static const CONNECTION_FAIL:String = "connectionFail";
        public static const INVALID_APPLICATION:String = "invalidApplication";
        public static const CONNECTION_CLOSED:String = "connectionClosed";
        public static const ONCONNECTED_STREAM:String = "onconnectedStream";
        public static const SERVICE_IOERROR:String = "serviceIoerror";
        public static const CONNECTION_CALL_FAILED:String = "connectionCallFailed";
        public static const CONNECTION_REJECTED:String = "connectionRejected";

        public var data:Object;
        private var _cancelable:Boolean;
        public var errorcode:String;
        private var _bubbles:Boolean;
        private var _type:String;

        public function NHNConnectionEvent(_arg1:String, _arg2:Boolean=false, _arg3:Boolean=false, _arg4:Object=null, _arg5:String=null){
            super(_arg1, _arg2, _arg3);
            _type = _arg1;
            _bubbles = _arg2;
            _cancelable = _arg3;
            data = ((_arg4) || ({}));
            errorcode = ((_arg5) || (""));
        }
        override public function clone():Event{
            return (new NHNConnectionEvent(_type, _bubbles, _cancelable, data, errorcode));
        }

    }
}//package com.nhn.events 
﻿package com.nhn.net {

    public class NHNConnectionCommand {

        public static const NPIS_PLAY_COMPLETE_LOG_COMMAND:String = "sendPlayCompleteLog";
        public static const NPIS_ERROR_LOG_COMMAND:String = "sendStreammingErrorLog";
        public static const PLAY_TRACK_COMMAND:String = "getStreamKey";
        public static const NPIS_PLAYBACK_LOG_COMMAND:String = "sendStreammingCountLog";

    }
}//package com.nhn.net 
﻿package com.nhn.net {
    import flash.events.*;
    import com.nhn.events.*;
    import flash.net.*;
    import com.nhn.core.interfaces.*;

    public class AdvancedURLStream extends URLStream implements IRunningIndicatableLoader, IMementoLoader, IReleaseMemory {

        protected var eventsMap:EventsMap;
        protected var _isRunning:Boolean;
        protected var _memento;

        public function AdvancedURLStream(){
            _isRunning = false;
            memento = null;
            eventsMap = new EventsMap();
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            var _local4:EventsMapItem;
            if (Boolean(eventsMap)){
                _local4 = new EventsMapItem(_arg1, _arg2, _arg3);
                eventsMap.removeEventsMapItem(_local4);
            };
            super.removeEventListener(_arg1, _arg2, _arg3);
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (_arg4 === int.MAX_VALUE){
                throw (new Error(("AdvancedURLStream : You cannot add event-listener " + "int.MAX_VALUE as a priority.")));
            };
            addEventListenerInternal(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        protected function addDefaultListeners():void{
            addEventListenerInternal(Event.COMPLETE, handleEventInternal, false, int.MAX_VALUE, true);
            addEventListenerInternal(IOErrorEvent.IO_ERROR, handleIOErrorEventInternal, false, int.MAX_VALUE, true);
            addEventListenerInternal(SecurityErrorEvent.SECURITY_ERROR, handleSecurityErrorEventInternal, false, int.MAX_VALUE, true);
        }
        protected function removeDefaultListeners():void{
            removeEventListener(Event.COMPLETE, handleEventInternal, false);
            removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorEventInternal, false);
            removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityErrorEventInternal, false);
        }
        override public function load(_arg1:URLRequest):void{
            if (!isRunning){
                _isRunning = true;
                addDefaultListeners();
                super.load(_arg1);
                dispatchEvent(new AdvancedLoaderEvent(AdvancedLoaderEvent.LOAD, false, false));
            } else {
                close();
                load(_arg1);
            };
        }
        public function releaseMemory():void{
            if (isRunning){
                try {
                    super.close();
                } catch(e:Error) {
                };
            };
            _isRunning = false;
            memento = null;
            removeEventListenersAll();
            eventsMap.releaseMemory();
            eventsMap = null;
        }
        protected function addEventListenerInternal(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (!Boolean(eventsMap)){
                eventsMap = new EventsMap();
            };
            var _local6:EventsMapItem = new EventsMapItem(_arg1, _arg2, _arg3);
            eventsMap.addEventsMapItem(_local6);
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function set memento(_arg1):void{
            _memento = _arg1;
        }
        public function get isRunning():Boolean{
            return (_isRunning);
        }
        protected function handleSecurityErrorEventInternal(_arg1:SecurityErrorEvent):void{
            switch (_arg1.type){
                case SecurityErrorEvent.SECURITY_ERROR:
                    _isRunning = false;
                    removeDefaultListeners();
                    break;
                default:
                    throw (new Error("AdvancedURLStream : type is not valid."));
            };
        }
        override public function close():void{
            if (isRunning){
                _isRunning = false;
                removeDefaultListeners();
                try {
                    super.close();
                } catch(e:Error) {
                };
                dispatchEvent(new AdvancedLoaderEvent(AdvancedLoaderEvent.CLOSE, false, false));
            };
        }
        public function get memento(){
            return (_memento);
        }
        protected function handleIOErrorEventInternal(_arg1:IOErrorEvent):void{
            switch (_arg1.type){
                case IOErrorEvent.IO_ERROR:
                    _isRunning = false;
                    removeDefaultListeners();
                    break;
                default:
                    throw (new Error("AdvancedURLStream : type is not valid."));
            };
        }
        protected function handleEventInternal(_arg1:Event):void{
            switch (_arg1.type){
                case Event.COMPLETE:
                    _isRunning = false;
                    removeDefaultListeners();
                    break;
                default:
                    throw (new Error("AdvancedURLStream : type is not valid."));
            };
        }
        public function removeEventListenersAll():void{
            var _local1:EventsMapItem;
            var _local2:Array;
            var _local3:uint;
            var _local4:uint;
            if (Boolean(eventsMap)){
                _local2 = eventsMap.retrieveEventsMapItemsAll();
                if (Boolean(_local2)){
                    _local3 = _local2.length;
                    _local4 = 0;
                    while (_local4 < _local3) {
                        _local1 = (_local2[_local4] as EventsMapItem);
                        removeEventListener(_local1.type, _local1.listener, _local1.useCapture);
                        _local4++;
                    };
                    eventsMap.removeEventsMapItemsAll();
                };
            };
        }

    }
}//package com.nhn.net 
﻿package com.nhn.net {
    import flash.events.*;
    import com.nhn.events.*;
    import flash.net.*;
    import com.nhn.core.interfaces.*;

    public class AdvancedURLLoader extends URLLoader implements IRunningIndicatableLoader, IMementoLoader, IReleaseMemory {

        protected var eventsMap:EventsMap;
        protected var _isRunning:Boolean;
        protected var _memento;

        public function AdvancedURLLoader(){
            _isRunning = false;
            memento = null;
            eventsMap = new EventsMap();
        }
        override public function removeEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false):void{
            var _local4:EventsMapItem;
            if (Boolean(eventsMap)){
                _local4 = new EventsMapItem(_arg1, _arg2, _arg3);
                eventsMap.removeEventsMapItem(_local4);
            };
            super.removeEventListener(_arg1, _arg2, _arg3);
        }
        override public function addEventListener(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (_arg4 === int.MAX_VALUE){
                throw (new Error(("AdvancedURLLoader : You cannot add event-listener " + "int.MAX_VALUE as a priority.")));
            };
            addEventListenerInternal(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        protected function addDefaultListeners():void{
            addEventListenerInternal(Event.COMPLETE, handleEventInternal, false, int.MAX_VALUE, true);
            addEventListenerInternal(IOErrorEvent.IO_ERROR, handleIOErrorEventInternal, false, int.MAX_VALUE, true);
            addEventListenerInternal(SecurityErrorEvent.SECURITY_ERROR, handleSecurityErrorEventInternal, false, int.MAX_VALUE, true);
        }
        protected function removeDefaultListeners():void{
            removeEventListener(Event.COMPLETE, handleEventInternal, false);
            removeEventListener(IOErrorEvent.IO_ERROR, handleIOErrorEventInternal, false);
            removeEventListener(SecurityErrorEvent.SECURITY_ERROR, handleSecurityErrorEventInternal, false);
        }
        override public function load(_arg1:URLRequest):void{
            if (!isRunning){
                _isRunning = true;
                addDefaultListeners();
                super.load(_arg1);
                dispatchEvent(new AdvancedLoaderEvent(AdvancedLoaderEvent.LOAD, false, false));
            } else {
                close();
                load(_arg1);
            };
        }
        public function releaseMemory():void{
            if (isRunning){
                super.close();
            };
            data = null;
            _isRunning = false;
            memento = null;
            removeEventListenersAll();
            eventsMap.releaseMemory();
            eventsMap = null;
        }
        protected function addEventListenerInternal(_arg1:String, _arg2:Function, _arg3:Boolean=false, _arg4:int=0, _arg5:Boolean=false):void{
            if (!Boolean(eventsMap)){
                eventsMap = new EventsMap();
            };
            var _local6:EventsMapItem = new EventsMapItem(_arg1, _arg2, _arg3);
            eventsMap.addEventsMapItem(_local6);
            super.addEventListener(_arg1, _arg2, _arg3, _arg4, _arg5);
        }
        public function set memento(_arg1):void{
            _memento = _arg1;
        }
        public function get isRunning():Boolean{
            return (_isRunning);
        }
        protected function handleSecurityErrorEventInternal(_arg1:SecurityErrorEvent):void{
            switch (_arg1.type){
                case SecurityErrorEvent.SECURITY_ERROR:
                    _isRunning = false;
                    removeDefaultListeners();
                    break;
                default:
                    throw (new Error("AdvancedURLLoader : type is not valid."));
            };
        }
        override public function close():void{
            if (isRunning){
                _isRunning = false;
                removeDefaultListeners();
                super.close();
                dispatchEvent(new AdvancedLoaderEvent(AdvancedLoaderEvent.CLOSE, false, false));
            };
        }
        public function get memento(){
            return (_memento);
        }
        protected function handleIOErrorEventInternal(_arg1:IOErrorEvent):void{
            switch (_arg1.type){
                case IOErrorEvent.IO_ERROR:
                    _isRunning = false;
                    removeDefaultListeners();
                    break;
                default:
                    throw (new Error("AdvancedURLLoader : type is not valid."));
            };
        }
        protected function handleEventInternal(_arg1:Event):void{
            switch (_arg1.type){
                case Event.COMPLETE:
                    _isRunning = false;
                    removeDefaultListeners();
                    break;
                default:
                    throw (new Error("AdvancedURLLoader : type is not valid."));
            };
        }
        public function removeEventListenersAll():void{
            var _local1:EventsMapItem;
            var _local2:Array;
            var _local3:uint;
            var _local4:uint;
            if (Boolean(eventsMap)){
                _local2 = eventsMap.retrieveEventsMapItemsAll();
                if (Boolean(_local2)){
                    _local3 = _local2.length;
                    _local4 = 0;
                    while (_local4 < _local3) {
                        _local1 = (_local2[_local4] as EventsMapItem);
                        removeEventListener(_local1.type, _local1.listener, _local1.useCapture);
                        _local4++;
                    };
                    eventsMap.removeEventsMapItemsAll();
                };
            };
        }

    }
}//package com.nhn.net 
﻿package com.nhn.net {
    import flash.net.*;
    import flash.errors.*;

    public class NHNNetConnectionProtocol {

        public static const PREVIEW_PLAYER_TYPE:String = "pv";
        public static const COMMON_PORT:String = "80";
        public static const POST_PLYAER_TYPE:String = "p";
        public static const PROTOCOLS:Array = ["rtmpe", "rtmpte"];
        public static const MUSIC_PLAYER_TYPE:String = "b";

        private const ALLOW_DOMAIN:String = "*.naver.com";
        private const PORTS:Array;

        private var _host:String;
        private var _playlistID:int;
        private var _application:String;
        private var _port:String = "1935";
        private var _ptype:String;
        private var _protocol:String;
        private var _encoding:uint;

        public function NHNNetConnectionProtocol(){
            PORTS = ["80", "1935"];
            _encoding = ObjectEncoding.AMF0;
            super();
        }
        public function get port():String{
            return (_port);
        }
        public function set port(_arg1:String):void{
            if (PORTS.indexOf(_arg1) == -1){
                throw (new IllegalOperationError((("NHNNetConnectionProtocol:: this port " + _arg1) + " is not available")));
            };
            _port = _arg1;
        }
        public function get application():String{
            return (_application);
        }
        public function get encoding():uint{
            return (_encoding);
        }
        public function set ptype(_arg1:String):void{
            switch (_arg1){
                case POST_PLYAER_TYPE:
                    break;
                case MUSIC_PLAYER_TYPE:
                    break;
                case PREVIEW_PLAYER_TYPE:
                    break;
                default:
                    throw (new IllegalOperationError("NHNNetConnectionProtocol:: not support type"));
            };
            _ptype = _arg1;
        }
        public function set host(_arg1:String):void{
            _host = codeArrayToString(parseApiCode(_arg1.split(",")));
        }
        public function get protocol():String{
            return (_protocol);
        }
        public function set playlistID(_arg1:int):void{
            _playlistID = _arg1;
        }
        public function set encoding(_arg1:uint):void{
            switch (_arg1){
                case ObjectEncoding.AMF0:
                    break;
                case ObjectEncoding.AMF3:
                    break;
                case ObjectEncoding.DEFAULT:
                    break;
                default:
                    throw (new IllegalOperationError((("NHNNetConnectionProtocol:: this encoding " + _arg1) + " is not available")));
            };
            _encoding = _arg1;
        }
        public function set application(_arg1:String):void{
            _application = codeArrayToString(parseApiCode(_arg1.split(",")));
        }
        public function get host():String{
            return (_host);
        }
        public function get ptype():String{
            return (_ptype);
        }
        public function get playlistID():int{
            return (_playlistID);
        }
        public function set protocol(_arg1:String):void{
            if (PROTOCOLS.indexOf(_arg1) == -1){
                throw (new IllegalOperationError((("NHNNetConnectionProtocol:: this protocol " + _arg1) + " is not available")));
            };
            _protocol = _arg1;
        }
        private function codeArrayToString(_arg1:Array):String{
            var _local2:Array = [];
            var _local3:uint;
            while (_local3 < _arg1.length) {
                _local2.push(String.fromCharCode(_arg1[_local3]));
                _local3++;
            };
            return (_local2.join(""));
        }
        private function parseApiCode(_arg1:Array):Array{
            var _local2:Array = [];
            var _local3:uint;
            var _local4:uint;
            while (_local4 < _arg1.length) {
                var _temp1 = _local3;
                _local3 = (_local3 + 1);
                _local2.push((_arg1[_local4] ^ ALLOW_DOMAIN.charCodeAt(_temp1)));
                if (_local3 > ALLOW_DOMAIN.length){
                    _local3 = 0;
                };
                _local4++;
            };
            return (_local2);
        }

    }
}//package com.nhn.net 
﻿package com.nhn.net {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import com.nhn.events.*;
    import flash.net.*;
    import flash.system.*;

    public class SmartLoader {

        private static var _cache:Object = {};
        private static var _loaderTmp:Dictionary = new Dictionary();
        private static var _cacheCount:uint = 0;
        private static var _loaderPool:Array = [];
        private static var _cacheRank:uint = 0;
        private static var _instance:SmartLoader = null;
        private static var _streamTmp:Dictionary = new Dictionary();

        private const LOADER_DELAY_WEIGHT:uint = 1000;
        private const LOADER_LIMIT_CNT:uint = 5;

        private var _gcTimer:Timer;
        private var _date:Date;
        private var _useCache:Boolean = false;
        private var _seq:uint = 1000;
        private var _cacheLimitCount:uint = 400;

        public function SmartLoader(_arg1:Lock){
            if (_arg1 == null){
                throw (new Error("SmartLoader::인스턴스를 생성할수 없습니다", 500));
            };
            init();
        }
        public static function getIntance():SmartLoader{
            if (_instance == null){
                _instance = new SmartLoader(new Lock());
            };
            return (_instance);
        }

        protected function gcTimerHandler(_arg1:TimerEvent):void{
            invalidateCache();
        }
        public function getBitmapByUrl(_arg1:String):Bitmap{
            return (((getBitmapFromCache(_arg1)) || (null)));
        }
        private function clearObject(_arg1:Object):void{
            var _local2:String;
            for (_local2 in _arg1) {
                if ((_arg1[_local2] is Object)){
                    clearObject(_arg1[_local2]);
                };
                _arg1[_local2] = null;
            };
            _arg1 = null;
        }
        private function saveCache(_arg1:String, _arg2:BitmapData):void{
            if (_cache[_arg1] == null){
                _cache[_arg1] = {
                    uri:_arg1,
                    bitmapData:_arg2,
                    rank:_cacheRank
                };
                _cacheCount++;
            };
            _cacheRank++;
            startGC();
        }
        private function onCompleteHandler(_arg1:Event):void{
            var ldr:* = null;
            var e:* = _arg1;
            var bytes:* = new ByteArray();
            try {
                URLStream(e.target).readBytes(bytes, bytes.length);
                ldr = getLoader();
                _loaderTmp[ldr.contentLoaderInfo] = {
                    id:_streamTmp[e.target].id,
                    url:_streamTmp[e.target].url.toString(),
                    loader:ldr,
                    params:_streamTmp[e.target].params,
                    url:_streamTmp[e.target].url
                };
                ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, ldrCompletetHanler, false, 0, true);
                ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadFail, false, 0, true);
                ldr.loadBytes(bytes);
            } catch(error:Error) {
                if (((!((_streamTmp[e.target].params == null))) && (Boolean(_streamTmp[e.target].params.onFailure)))){
                    _streamTmp[e.target].params.onFailure();
                    removeCacheByUrl(_streamTmp[e.target].url);
                };
            } finally {
                e.target.removeEventListener(Event.COMPLETE, onCompleteHandler);
                e.target.removeEventListener(Event.OPEN, onOpenHandler);
                e.target.removeEventListener(HTTPStatusEvent.HTTP_STATUS, onHttpStatusHandler);
                e.target.removeEventListener(ProgressEvent.PROGRESS, onProgressHandler);
                e.target.removeEventListener(IOErrorEvent.IO_ERROR, loadFail);
                e.target.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorHandler);
                _streamTmp[e.target] = null;
                if (_streamTmp[e.target]){
                    delete _streamTmp[e.target];
                };
            };
        }
        protected function hasCache(_arg1:URLRequest, _arg2:Object=null):Boolean{
            var _local5:SmartLoaderEvent;
            var _local6:SmartLoaderTimer;
            if (!_useCache){
                return (false);
            };
            var _local3:String = _arg1.url;
            var _local4:Bitmap = getBitmapFromCache(_local3);
            if (_local4 != null){
                if (((!((_arg2 == null))) && (!((_arg2.container == null))))){
                    _arg2.container.addChild(_local4);
                };
                if (((!((_arg2 == null))) && (!((_arg2.onComplete == null))))){
                    _local5 = new SmartLoaderEvent(SmartLoaderEvent.COMPLETE);
                    _local5.content = _local4;
                    if (_arg2.delay){
                        _local6 = new SmartLoaderTimer((_arg2.delay * LOADER_DELAY_WEIGHT), 1);
                        _local6.data = _arg2;
                        _local6.event = _local5;
                        _local6.addEventListener(TimerEvent.TIMER, delayTimerCompleteForHasCache);
                        _local6.start();
                    } else {
                        _arg2.onComplete.apply(null, [_local5]);
                    };
                };
                _cache[_local3].rank = _cacheRank;
                startGC();
                return (true);
            };
            return (false);
        }
        protected function getLoader():Loader{
            var _local1:Loader;
            if (_loaderPool.length > 0){
                _local1 = _loaderPool[0];
                _loaderPool.splice(0, 1);
                return (_local1);
            };
            return (new Loader());
        }
        private function ldrCompletetHanler(_arg1:Event):void{
            var _local4:SmartLoaderEvent;
            var _local2:Object = _loaderTmp[_arg1.target].params;
            var _local3:Bitmap;
            if (((!((_local2 == null))) && (_loaderTmp[_arg1.target].params.cache))){
                saveCache(_loaderTmp[_arg1.target].url, Bitmap(_arg1.target.content).bitmapData.clone());
                _local3 = getBitmapFromCache(_loaderTmp[_arg1.target].url);
            } else {
                _local3 = new Bitmap((LoaderInfo(_arg1.target).content as Bitmap).bitmapData.clone());
            };
            if (((!((_local2 == null))) && (!((_local2.container == null))))){
                (_local2.container as DisplayObjectContainer).addChild(_local3);
            };
            if (((!((_local2 == null))) && (!((_local2.onComplete == null))))){
                _local4 = new SmartLoaderEvent(SmartLoaderEvent.COMPLETE);
                _local4.content = _local3;
                _loaderTmp[_arg1.target].params.onComplete.apply(null, [_local4]);
            };
            (_arg1.target as LoaderInfo).removeEventListener(Event.COMPLETE, ldrCompletetHanler);
            (_loaderTmp[_arg1.target].loader as Loader).unload();
            _loaderPool.push(_loaderTmp[_arg1.target].loader);
            delete _loaderTmp[_arg1.target];
            startGC();
        }
        public function clearAllCache():void{
            var _local1:String;
            for (_local1 in _cache) {
                removeCacheByUrl(_local1);
            };
            _cacheCount = 0;
        }
        protected function init():void{
            _gcTimer = new Timer(10000, 1);
            configureEvents();
        }
        private function getBitmapFromCache(_arg1:String):Bitmap{
            return (((_cache[_arg1]) ? new Bitmap(_cache[_arg1].bitmapData) : null));
        }
        protected function delayTimerCompleteForHasCache(_arg1:TimerEvent):void{
            _arg1.target.data.onComplete(_arg1.target.event);
        }
        public function closeAll():void{
            var _local2:Object;
            var _local1:URLStream;
            for (_local2 in _streamTmp) {
                if (((Boolean(_local1)) && (!(_local1.connected)))){
                    _local1 = (_local2 as URLStream);
                    _local1.close();
                };
                if (((Boolean(_local1)) && (_streamTmp[_local2].params))){
                    clearObject(_streamTmp[_local2].params);
                };
            };
            for (_local2 in _loaderTmp) {
                if (((Boolean(_loaderTmp[_local2])) && (_loaderTmp[_local2].params))){
                    clearObject(_loaderTmp[_local2].params);
                };
            };
        }
        protected function onOpenHandler(_arg1:Event):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onOpen == null))))){
                _streamTmp[_arg1.target].params.onOpen.call(null, _arg1);
            };
        }
        protected function delayTimerComplete(_arg1:TimerEvent):void{
            var _local2:URLStream = URLStream(_arg1.target.stream);
            _local2.load(new URLRequest(_streamTmp[_local2].url));
            _local2.removeEventListener(TimerEvent.TIMER, delayTimerComplete);
        }
        public function clearAllCacheReference():void{
            var _local1:String;
            for (_local1 in _cache) {
                BitmapData(_cache[_local1].bitmapData).dispose();
                removeCacheByUrl(_local1);
            };
            _cacheCount = 0;
        }
        protected function onHttpStatusHandler(_arg1:HTTPStatusEvent):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onHttpStatus == null))))){
                _streamTmp[_arg1.target].params.onHttpStatus.call(null, _arg1);
            };
        }
        private function configureEvents():void{
            _gcTimer.addEventListener(TimerEvent.TIMER, gcTimerHandler, false, 0, true);
        }
        protected function onSecurityErrorHandler(_arg1:SecurityErrorEvent):void{
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onSecurityError == null))))){
                _streamTmp[_arg1.target].params.onSecurityError(_arg1);
            };
        }
        private function assignLoaderId():String{
            _date = new Date();
            var _local1:String = uint((_date.getTime() + _seq)).toString(16);
            _seq++;
            return (_local1);
        }
        public function load(_arg1:URLRequest, _arg2:Object=null):void{
            var _local5:SmartLoaderTimer;
            if (hasCache(_arg1, _arg2)){
                return;
            };
            _arg2.cache = (((_arg2.cache == null)) ? _useCache : _arg2.cache);
            var _local3:String = assignLoaderId();
            var _local4:URLStream = new URLStream();
            _local4.addEventListener(Event.COMPLETE, onCompleteHandler);
            _local4.addEventListener(Event.OPEN, onOpenHandler);
            _local4.addEventListener(HTTPStatusEvent.HTTP_STATUS, onHttpStatusHandler);
            _local4.addEventListener(ProgressEvent.PROGRESS, onProgressHandler);
            _local4.addEventListener(IOErrorEvent.IO_ERROR, onIoErrorHandler);
            _local4.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityErrorHandler);
            _streamTmp[_local4] = {
                id:_local3,
                url:_arg1.url.toString(),
                params:_arg2,
                uri:_arg1.url
            };
            if (_arg2.delay){
                _local5 = new SmartLoaderTimer((_arg2.delay * LOADER_DELAY_WEIGHT), 1);
                _local5.stream = _local4;
                _local5.addEventListener(TimerEvent.TIMER, delayTimerComplete);
                _local5.start();
            } else {
                _local4.load(_arg1);
            };
        }
        protected function onIoErrorHandler(_arg1:IOErrorEvent):void{
            trace(("IOErrorEvent : " + _arg1.toString()), _streamTmp[_arg1.target]);
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onIoError == null))))){
                _streamTmp[_arg1.target].params.onIoError.call(null, _arg1);
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onFailure == null))))){
                _streamTmp[_arg1.target].params.onFailure.call(null);
                return;
            };
            trace("IOERROR");
        }
        public function removeCacheByUrl(_arg1:String):void{
            if (((!(useCache)) && (getBitmapByUrl(_arg1)))){
                getBitmapByUrl(_arg1).bitmapData.dispose();
            };
            _cache[_arg1] = null;
            _cacheCount--;
            startGC();
        }
        protected function invalidateCache():void{
            var removableUrl:* = null;
            var max:* = 0;
            var url:* = null;
            if (_cacheLimitCount <= _cacheCount){
                removableUrl = null;
                max = 0;
                for (url in _cache) {
                    if (((_cache[url]) && ((_cache[url].rank < max)))){
                        max = _cache[url].rank;
                        removableUrl = url;
                    };
                };
                removeCacheByUrl(removableUrl);
            };
            if (_loaderPool.length > LOADER_LIMIT_CNT){
                _loaderPool.forEach(invalidateLoaderPool);
                _loaderPool.splice(LOADER_LIMIT_CNT, (_loaderPool.length - LOADER_LIMIT_CNT));
            };
            try {
                System.gc();
                new LocalConnection().connect("foo");
                new LocalConnection().connect("foo");
            } catch(e:Error) {
            };
            _gcTimer.reset();
        }
        protected function onProgressHandler(_arg1:ProgressEvent):void{
            if (!Boolean(_streamTmp[_arg1.target])){
                return;
            };
            if (((!((_streamTmp[_arg1.target].params == null))) && (!((_streamTmp[_arg1.target].params.onProgress == null))))){
                _streamTmp[_arg1.target].params.onProgress.call(null, _arg1);
            };
        }
        public function toString():String{
            var _local1:String = ("SmartLoader::" + _cache.toString());
            return (null);
        }
        private function invalidateLoaderPool(_arg1:Loader, _arg2:uint, _arg3:Array):void{
            if (_arg2 > LOADER_LIMIT_CNT){
                _arg1.unload();
                _arg1 = null;
            };
        }
        public function set cacheLimitCount(_arg1:uint):void{
            _cacheLimitCount = _arg1;
        }
        public function set useCache(_arg1:Boolean):void{
            _useCache = _arg1;
        }
        public function close(_arg1:URLRequest):void{
        }
        public function get useCache():Boolean{
            return (_useCache);
        }
        protected function loadFail(_arg1:IOErrorEvent):void{
            if (_loaderTmp[_arg1.target]){
                _loaderTmp[_arg1.target].params.onFailure();
            };
        }
        public function get cacheLimitCount():uint{
            return (_cacheLimitCount);
        }
        private function startGC():void{
            _gcTimer.stop();
            _gcTimer.reset();
            _gcTimer.start();
        }

    }
}//package com.nhn.net 

import flash.utils.*;
import com.nhn.events.*;
import flash.net.*;

class Lock {

    public function Lock(){
    }
}
class SmartLoaderTimer extends Timer {

    public var stream:URLStream;
    public var data:Object;
    public var event:SmartLoaderEvent;

    public function SmartLoaderTimer(_arg1:Number, _arg2:int=0):void{
        super(_arg1, _arg2);
    }
}
﻿package com.nhn.net {
    import flash.events.*;
    import com.nhn.dto.*;
    import flash.utils.*;
    import com.nhn.events.*;
    import flash.net.*;
    import com.nhn.application.modules.webplayercore.*;
    import com.nhn.errors.*;
    import flash.media.*;
    import flash.errors.*;

    public class NHNConnectionManager extends EventDispatcher {

        private static var _instance:NHNConnectionManager = null;

        private var stream:NHNNetStream = null;
        private var completed:Boolean = false;
        private var isPlayed:Boolean = false;
        private var soundTransform:SoundTransform;
        private var _isAliveStream:Boolean = false;
        private var nhnProtocol:NHNNetConnectionProtocol;
        private var emergencyProtocolIdx:uint = 0;
        private var tryAndBuyURLLoader:URLLoader;
        private var _volume:Number = 0.5;
        private var emergencyProtocol:NHNNetConnectionProtocol;
        private var _bufferTime:uint = 10;
        private var emergencyTimer:Timer;
        private var musicStreamInfodto:NHNMusicStreamInfodto;
        private var connection:NHNNetConnection = null;
        private var _isRejected:Boolean = false;

        public function NHNConnectionManager(_arg1:Lock){
            if (_arg1 == null){
                throw (new IllegalOperationError("NHNConnectionManager::Singletone::Don't create new instance"));
            };
            init();
        }
        public static function get instance():NHNConnectionManager{
            if (_instance == null){
                _instance = new NHNConnectionManager(new Lock());
            };
            return (_instance);
        }

        public function stop():void{
            if (!isPlayed){
                return;
            };
            validateConnection();
            stream.stop();
        }
        protected function emergencyTimerHandler(_arg1:TimerEvent):void{
            doEmergencyConnect();
        }
        protected function appectNetConnection():void{
            if (!connection.connected){
                throw (new Error("NHNConnectionManager::NetConnection이 연결되어 있지 않습니다"));
            };
            clearStream();
            stream = new NHNNetStream(connection);
            stream.addEventListener(NHNStreamEvent.PLAY_COMPLETE, streamPlayCompleteHandler);
            stream.addEventListener(NHNStreamEvent.STREAM_PROGRESS, streamProgressHandler);
            stream.addEventListener(NHNStreamEvent.STREAM_BUFFER_FULL, streamBufferFullHandler);
        }
        public function get connected():Boolean{
            return (connection.connected);
        }
        private function onConnectionRejectHandler(_arg1:NHNConnectionEvent):void{
            (_isRejected = true);
            dispatchEvent(_arg1);
        }
        protected function init():void{
            connection = new NHNNetConnection();
            soundTransform = new SoundTransform();
            emergencyTimer = new Timer(30, 1);
            configureEvents();
        }
        protected function dispatchConnectionEvent(_arg1:String):void{
            var _local2:NHNConnectionEvent;
            if (_arg1 == "NetConnection.Connect.NetworkChange"){
                return;
            };
            emergencyTimer.stop();
            clearStream();
            switch (_arg1){
                case "NetConnection.Connect.Success":
                    _isRejected = false;
                    _local2 = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_COMPLETE);
                    _local2.errorcode = MusicErrorCode.SUCCESS;
                    break;
                case "NetConnection.Connect.Rejected":
                    _local2 = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_REJECTED);
                    _local2.errorcode = MusicErrorCode.CONNECTION_REJECTED;
                    _isRejected = true;
                    isPlayed = false;
                    break;
                case "NetConnection.Connect.InvalidApp":
                    _local2 = new NHNConnectionEvent(NHNConnectionEvent.INVALID_APPLICATION);
                    _local2.errorcode = MusicErrorCode.INVALID_APPLICATION;
                    isPlayed = false;
                    break;
                case "NetConnection.Connect.Failed":
                    emergencyTimer.start();
                    isPlayed = false;
                    return;
                case "NetConnection.Connect.AppShutDown":
                    _local2 = new NHNConnectionEvent(NHNConnectionEvent.APPLICATION_SHUTDOWN);
                    _local2.errorcode = MusicErrorCode.APPLICATION_SHOUTDOWN;
                    isPlayed = false;
                    break;
                case "NetConnection.Connect.Closed":
                    _local2 = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_CLOSED);
                    _local2.errorcode = MusicErrorCode.CONNECTION_CLOSED;
                    isPlayed = false;
                    break;
                case "NetConnection.Call.Failed":
                    _local2 = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_CALL_FAILED);
                    _local2.errorcode = MusicErrorCode.CONNECTION_CALL_FAILED;
                    break;
            };
            if (Boolean(_local2)){
                dispatchEvent(_local2);
            };
        }
        public function validateConnection():Boolean{
            if (!connection.connected){
                throw (new Error("NHNConnectionManager::Stream is not connected"));
            };
            return (true);
        }
        public function get volume():Number{
            return (_volume);
        }
        protected function configureEvents():void{
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatushandler);
            connection.addEventListener(NHNStreamEvent.ONLOAD_STREAM_INFORMATION, onLoadStreamHanlder);
            connection.addEventListener(NHNConnectionEvent.CONNECTION_REJECTED, onConnectionRejectHandler);
            connection.addEventListener(NHNConnectionEvent.STREAM_IOERROR, onStreamIoError);
            connection.addEventListener(NHNConnectionEvent.SERVICE_IOERROR, onServiceIoError);
            emergencyTimer.addEventListener(TimerEvent.TIMER, emergencyTimerHandler);
        }
        public function resume():void{
            if (!isPlayed){
                return;
            };
            validateConnection();
            stream.resume();
        }
        private function securityErrorHandler(_arg1:SecurityErrorEvent):void{
            dispatchEvent(_arg1);
        }
        protected function onLoadStreamHanlder(_arg1:NHNStreamEvent):void{
            musicStreamInfodto = _arg1.data;
            if (WebPlayerCoreProperties.IS_ONLY_FOR_STREAMING){
                musicStreamInfodto.serviceType = "PCRadio";
            };
            dispatchEvent(_arg1);
        }
        public function set volume(_arg1:Number):void{
            var val:* = _arg1;
            validateConnection();
            val = Math.max(Math.min(val, 1), 0);
            soundTransform.volume = val;
            try {
                stream.soundTransform = soundTransform;
            } catch(e:Error) {
            } finally {
                _volume = val;
            };
        }
        public function get bufferTime():uint{
            return (_bufferTime);
        }
        protected function streamProgressHandler(_arg1:NHNStreamEvent):void{
            var _local3:URLRequest;
            var _local2:NHNStreamEvent;
            if (musicStreamInfodto.length <= 0){
                return;
            };
            switch (musicStreamInfodto.isAuth){
                case 0:
                    if (musicStreamInfodto.isTnB.toUpperCase() === "Y"){
                        if (60 < stream.time){
                            if (Boolean(musicStreamInfodto.tnBApiUrl)){
                                _local3 = new URLRequest((("http://" + WebPlayerCoreProperties.playerServerAPIHost) + musicStreamInfodto.tnBApiUrl));
                                musicStreamInfodto.sentTnBApiUrl();
                                tryAndBuyURLLoader = new URLLoader();
                                tryAndBuyURLLoader.addEventListener(Event.COMPLETE, tryAndBuyURLLoader_handleEvent, false, 0, true);
                                tryAndBuyURLLoader.addEventListener(IOErrorEvent.IO_ERROR, tryAndBuyURLLoader_handleIOErrorEvent, false, 0, true);
                                tryAndBuyURLLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, tryAndBuyURLLoader_handleSecurityErrorEvent, false, 0, true);
                                tryAndBuyURLLoader.load(_local3);
                            };
                        };
                    };
                    break;
                case 1:
                    if (60 <= stream.time){
                        if (!completed){
                            _arg1.data.time = 60;
                            dispatchEvent(_arg1);
                            _local2 = new NHNStreamEvent(NHNStreamEvent.PLAY_COMPLETE);
                            _local2.errorcode = MusicErrorCode.SUCCESS;
                        };
                    };
                    break;
                case 2:
                    break;
            };
            dispatchEvent(_arg1);
            if (Boolean(_local2)){
                streamPlayCompleteHandler(_local2);
            };
        }
        public function connectionClose():void{
            clearStream();
            connection.close();
        }
        protected function streamBufferFullHandler(_arg1:NHNStreamEvent):void{
            volume = _volume;
            _isAliveStream = true;
        }
        public function play(_arg1:String):void{
            appectNetConnection();
            if (_arg1 != musicStreamInfodto.path){
                if (connection){
                    connection.call(NHNConnectionCommand.NPIS_ERROR_LOG_COMMAND, null, musicStreamInfodto.toObject());
                };
                connectionClose();
                throw (new IllegalOperationError("Can't play this path :: Track Information Error"));
            };
            if (musicStreamInfodto.isAuth == 2){
                dispatchEvent(new NHNStreamEvent(NHNStreamEvent.PLAY_DISABLED));
                return;
            };
            completed = false;
            validateConnection();
            stream.bufferTime = _bufferTime;
            stream.play(codeArrayToString(parseApiCode(_arg1.split(","))), 0, musicStreamInfodto.displayTime);
            isPlayed = true;
            if (connection){
                connection.call(NHNConnectionCommand.NPIS_PLAYBACK_LOG_COMMAND, null, musicStreamInfodto.toObject(), nhnProtocol.ptype, nhnProtocol.playlistID);
            };
        }
        protected function doEmergencyConnect():void{
            var _local1:NHNConnectionEvent;
            if (emergencyProtocolIdx > (NHNNetConnectionProtocol.COMMON_PORT.length - 1)){
                emergencyProtocolIdx = 0;
                _local1 = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_FAIL);
                _local1.errorcode = MusicErrorCode.CONNECTION_FAIL;
                emergencyTimer.stop();
                dispatchEvent(_local1);
                return;
            };
            emergencyProtocol.port = NHNNetConnectionProtocol.COMMON_PORT;
            emergencyProtocol.protocol = NHNNetConnectionProtocol.PROTOCOLS[emergencyProtocolIdx];
            emergencyProtocolIdx++;
            connect(emergencyProtocol);
        }
        protected function clearStream():void{
            if (Boolean(stream)){
                stream.connected;
                stream.close();
                stream.removeEventListener(NHNStreamEvent.PLAY_COMPLETE, streamPlayCompleteHandler);
                stream.removeEventListener(NHNStreamEvent.STREAM_PROGRESS, streamProgressHandler);
                stream = null;
                _isAliveStream = false;
            };
        }
        private function tryAndBuyURLLoader_handleIOErrorEvent(_arg1:IOErrorEvent):void{
            tryAndBuyURLLoader.removeEventListener(Event.COMPLETE, tryAndBuyURLLoader_handleEvent, false);
            tryAndBuyURLLoader.removeEventListener(IOErrorEvent.IO_ERROR, tryAndBuyURLLoader_handleIOErrorEvent, false);
            tryAndBuyURLLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, tryAndBuyURLLoader_handleSecurityErrorEvent, false);
        }
        public function get isRejected():Boolean{
            return (_isRejected);
        }
        private function onStreamIoError(_arg1:NHNConnectionEvent):void{
            clearStream();
            dispatchEvent(_arg1);
            (isPlayed = false);
            connection.call(NHNConnectionCommand.NPIS_ERROR_LOG_COMMAND, null, musicStreamInfodto.toObject());
        }
        private function tryAndBuyURLLoader_handleSecurityErrorEvent(_arg1:SecurityErrorEvent):void{
            tryAndBuyURLLoader.removeEventListener(Event.COMPLETE, tryAndBuyURLLoader_handleEvent, false);
            tryAndBuyURLLoader.removeEventListener(IOErrorEvent.IO_ERROR, tryAndBuyURLLoader_handleIOErrorEvent, false);
            tryAndBuyURLLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, tryAndBuyURLLoader_handleSecurityErrorEvent, false);
        }
        private function onServiceIoError(_arg1:NHNConnectionEvent):void{
            clearStream();
            (isPlayed = false);
            dispatchEvent(_arg1);
        }
        public function set bufferTime(_arg1:uint):void{
            _bufferTime = Math.abs(_arg1);
        }
        protected function streamPlayCompleteHandler(_arg1:NHNStreamEvent):void{
            if (completed){
                return;
            };
            completed = true;
            isPlayed = false;
            clearStream();
            dispatchEvent(_arg1);
            trace((">>>>>>>>>: MusicServiceType: " + musicStreamInfodto.serviceType));
            connection.call(NHNConnectionCommand.NPIS_PLAY_COMPLETE_LOG_COMMAND, null, musicStreamInfodto.toObject());
        }
        public function get isaLiveStream():Boolean{
            return (_isAliveStream);
        }
        public function getTrackInfo(_arg1:String, _arg2:String, _arg3:String):void{
            if (!Boolean(_arg2)){
                _arg2 = "guest";
            };
            validateConnection();
            connection.call(NHNConnectionCommand.PLAY_TRACK_COMMAND, null, _arg1, _arg2, nhnProtocol.ptype, _arg3);
        }
        private function tryAndBuyURLLoader_handleEvent(_arg1:Event):void{
            tryAndBuyURLLoader.removeEventListener(Event.COMPLETE, tryAndBuyURLLoader_handleEvent, false);
            tryAndBuyURLLoader.removeEventListener(IOErrorEvent.IO_ERROR, tryAndBuyURLLoader_handleIOErrorEvent, false);
            tryAndBuyURLLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, tryAndBuyURLLoader_handleSecurityErrorEvent, false);
        }
        public function connect(_arg1:NHNNetConnectionProtocol):void{
            _isRejected = false;
            nhnProtocol = _arg1;
            var _local2:String = ((((((nhnProtocol.protocol + "://") + nhnProtocol.host) + ":") + nhnProtocol.port) + "/") + nhnProtocol.application);
            connection.objectEncoding = nhnProtocol.encoding;
            connection.connect(_local2);
            emergencyProtocol = nhnProtocol;
        }
        private function parseApiCode(_arg1:Array):Array{
            var _local2:Array = [];
            var _local3:uint;
            var _local4:uint;
            while (_local4 < _arg1.length) {
                var _temp1 = _local3;
                _local3 = (_local3 + 1);
                _local2.push((_arg1[_local4] ^ connection.nonce.charCodeAt(_temp1)));
                if (_local3 > connection.nonce.length){
                    _local3 = 0;
                    _local3;
                };
                _local4++;
            };
            return (_local2);
        }
        public function pause():void{
            if (!isPlayed){
                return;
            };
            validateConnection();
            stream.pause();
        }
        public function seek(_arg1:Number):void{
            var _local2:NHNStreamEvent;
            if (!isPlayed){
                return;
            };
            if (!Boolean(musicStreamInfodto)){
                return;
            };
            validateConnection();
            _arg1 = Math.max(Math.min(_arg1, musicStreamInfodto.displayTime), 0);
            if ((((((musicStreamInfodto.isAuth == 1)) && ((60 <= _arg1)))) && (!(completed)))){
                _local2 = new NHNStreamEvent(NHNStreamEvent.PLAY_COMPLETE);
                _local2.errorcode = MusicErrorCode.SUCCESS;
                streamPlayCompleteHandler(_local2);
                return;
            };
            stream.seek(_arg1);
        }
        protected function netStatushandler(_arg1:NetStatusEvent):void{
            dispatchConnectionEvent(_arg1.info.code);
        }
        public function getStream():NHNNetStream{
            if (!Boolean(stream)){
                stream = new NHNNetStream(connection);
            };
            return (stream);
        }
        private function codeArrayToString(_arg1:Array):String{
            var _local2:Array = [];
            var _local3:uint;
            while (_local3 < _arg1.length) {
                _local2.push(String.fromCharCode(_arg1[_local3]));
                _local3++;
            };
            return (_local2.join(""));
        }

    }
}//package com.nhn.net 

class Lock {

    public function Lock(){
    }
}
﻿package com.nhn.net {
    import flash.events.*;
    import flash.utils.*;
    import com.nhn.events.*;
    import flash.net.*;
    import com.nhn.errors.*;

    public class NHNNetStream extends NetStream {

        private const DEFAULT_TIMER_GAP:uint = 100;

        private var streamEvt:NHNStreamEvent;
        private var timer:Timer;
        private var _length:Number;
        private var prevPlayPath:String;
        private var _connected:Boolean;
        private var streamClient:StreamClient;
        private var _isPause:Boolean;
        private var _timerGap:uint;
        private var _isStop:Boolean;
        private var _isPlayed:Boolean;
        private var _connection:NHNNetConnection;

        public function NHNNetStream(_arg1:NHNNetConnection, _arg2:Number=0){
            if (_arg1.connected){
                super(_arg1);
                connection = _arg1;
                _length = _arg2;
                init();
                configureEventListener();
            };
        }
        public function stop():void{
            pause();
            seek(1);
        }
        protected function streamTimerHandler(_arg1:TimerEvent):void{
            if (((!(Boolean(connection))) || (!(connection.connected)))){
                timer.stop();
                return;
            };
            streamEvt.data.time = time;
            streamEvt.errorcode = MusicErrorCode.SUCCESS;
            dispatchEvent(streamEvt);
        }
        public function get connected():Boolean{
            return (_connected);
        }
        public function set connection(_arg1:NHNNetConnection):void{
            _connection = _arg1;
        }
        private function clear():void{
            if (prevPlayPath){
                close();
            };
            prevPlayPath = null;
        }
        override public function resume():void{
            super.resume();
            _isPause = false;
            timer.start();
        }
        protected function init():void{
            streamClient = new StreamClient();
            client = streamClient;
            timer = new Timer(_timerGap, 0);
            streamEvt = new NHNStreamEvent(NHNStreamEvent.STREAM_PROGRESS);
        }
        public function get isStop():Boolean{
            return (_isStop);
        }
        public function get isPlayed():Boolean{
            return (_isPlayed);
        }
        public function get connection():NHNNetConnection{
            return (_connection);
        }
        public function set timerGap(_arg1:uint):void{
            _arg1 = (((DEFAULT_TIMER_GAP > _arg1)) ? DEFAULT_TIMER_GAP : _arg1);
            _timerGap = _arg1;
        }
        protected function streamPlayCompleteHandler(_arg1:NHNStreamEvent):void{
            close();
            timer.stop();
            _arg1.errorcode = MusicErrorCode.SUCCESS;
            dispatchEvent(_arg1);
        }
        public function get length():Number{
            return (_length);
        }
        protected function configureEventListener():void{
            addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            timer.addEventListener(TimerEvent.TIMER, streamTimerHandler);
            streamClient.addEventListener(NHNStreamEvent.PLAY_COMPLETE, streamPlayCompleteHandler);
        }
        public function get timerGap():uint{
            return (_timerGap);
        }
        protected function netStatusHandler(_arg1:NetStatusEvent):void{
            var _local2:NHNStreamEvent;
            var _local3:NHNConnectionEvent;
            switch (_arg1.info.code){
                case "NetStream.Play.Start":
                    _connected = false;
                    break;
                case "NetStream.Buffer.Full":
                    if (_connected){
                        return;
                    };
                    _connected = true;
                    _local2 = new NHNStreamEvent(NHNStreamEvent.STREAM_BUFFER_FULL);
                    dispatchEvent(_local2);
                    break;
                case "NetStream.Play.Stop":
                    _connected = false;
                    break;
                case "NetStream.Buffer.Flush":
                    _connected = false;
                    break;
                case "NetStream.Play.StreamNotFound":
                    _local3 = new NHNConnectionEvent(NHNConnectionEvent.STREAM_IOERROR);
                    _local3.errorcode = MusicErrorCode.STREAM_IOERROR;
                    _connection.dispatchEvent(_local3);
                    _connected = false;
                    break;
            };
        }
        public function get isPause():Boolean{
            return (_isPause);
        }
        override public function play(... _args):void{
            if (Boolean(prevPlayPath)){
                clear();
            };
            super.play.apply(this, _args);
            _isPlayed = true;
            prevPlayPath = _args[0];
            timer.start();
        }
        override public function pause():void{
            timer.stop();
            super.pause();
            _isPause = true;
        }
        override public function close():void{
            timer.stop();
            super.close();
            connection.call("clearStream", null, prevPlayPath);
        }

    }
}//package com.nhn.net 

import flash.events.*;
import com.nhn.events.*;

class StreamClient extends EventDispatcher {

    public function StreamClient(){
    }
    public function onPlayStatus(_arg1:Object):void{
        switch (_arg1.code){
            case "NetStream.Play.Complete":
                dispatchEvent(new NHNStreamEvent(NHNStreamEvent.PLAY_COMPLETE));
                break;
        };
    }

}
﻿package com.nhn.net {
    import com.nhn.dto.*;
    import com.nhn.events.*;
    import flash.net.*;
    import com.nhn.errors.*;

    public class NHNNetConnection extends NetConnection {

        private static const AUTHORIZATION_KEY:uint = 123456789;

        private var _nonce:String;

        public function NHNNetConnection(){
            client = this;
        }
        public function onStreamIOError(_arg1:String):void{
            var _local2:NHNConnectionEvent = new NHNConnectionEvent(NHNConnectionEvent.STREAM_IOERROR);
            _local2.errorcode = _arg1;
            dispatchEvent(_local2);
        }
        public function onConnectComplete(_arg1:String):void{
            _nonce = _arg1;
        }
        public function onError(_arg1:String):void{
            var _local2:NHNConnectionEvent = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_REJECTED);
            _local2.errorcode = _arg1;
            dispatchEvent(_local2);
        }
        public function requestAuthorization(_arg1:uint):void{
            call("requestAuthorization", null, (_arg1 ^ NHNNetConnection.AUTHORIZATION_KEY));
        }
        public function onFailure():void{
            var _local1:NHNConnectionEvent = new NHNConnectionEvent(NHNConnectionEvent.SERVICE_IOERROR);
            _local1.errorcode = MusicErrorCode.SERVICE_IOERROR;
            dispatchEvent(_local1);
        }
        public function get nonce():String{
            return (_nonce);
        }
        public function onLoadStreamInfo(_arg1:Object):void{
            var _local2:NHNStreamEvent = new NHNStreamEvent(NHNStreamEvent.ONLOAD_STREAM_INFORMATION);
            _local2.data = new NHNMusicStreamInfodto(_arg1);
            _local2.errorcode = _arg1.errorcode;
            dispatchEvent(_local2);
        }
        public function onBWCheck(... _args):Number{
            return (0);
        }
        public function onBWDone(... _args):void{
        }
        public function onReject(_arg1:String):void{
            var _local2:NHNConnectionEvent = new NHNConnectionEvent(NHNConnectionEvent.CONNECTION_REJECTED);
            _local2.errorcode = _arg1;
            dispatchEvent(_local2);
            close();
        }

    }
}//package com.nhn.net 
﻿package com.nhn.net {

    public interface IMementoLoader {

        function get memento();
        function set memento(_arg1):void;

    }
}//package com.nhn.net 
﻿package com.nhn.net {

    public interface IRunningIndicatableLoader {

        function get isRunning():Boolean;

    }
}//package com.nhn.net 
﻿package com.flashdynamix.motion {
    import flash.events.*;
    import flash.display.*;
    import flash.utils.*;
    import flash.geom.*;
    import flash.media.*;
    import flash.filters.*;

    public class TweensyZero {

        public static const TIME:String = "time";
        public static const version:Number = 0.2;
        public static const FRAME:String = "frame";

        private static var _refreshType:String = "time";
        public static var onUpdate:Function;
        private static var list:Array = [];
        public static var defaultTween:Function = easeOut;
        private static var _secondsPerFrame:Number = 0.0333333333333333;
        public static var onComplete:Function;
        public static var onUpdateParams:Array;
        public static var lazyMode:Boolean = true;
        private static var filterDictionary:Dictionary = new Dictionary(true);
        private static var time:int = 0;
        public static var onCompleteParams:Array;
        private static var frame:Sprite = new Sprite();
        private static var _paused:Boolean = false;

        private static function easeOut(_arg1:Number, _arg2:Number, _arg3:Number, _arg4:Number):Number{
            _arg1 = ((_arg1 / _arg4) - 1);
            return (((_arg3 * (((((_arg1 * _arg1) * _arg1) * _arg1) * _arg1) + 1)) + _arg2));
        }
        public static function stop(_arg1=null, ... _args):void{
            var _local4:TweensyTimelineZero;
            var _local6:String;
            var _local3:Array = (((_arg1 is Array)) ? _arg1 : ((_arg1)==null) ? null : [_arg1]);
            var _local5:int = (_local3.length - 1);
            while (_local5 >= 0) {
                _local4 = list[_local5];
                if ((((_local3 == null)) || (!((_local3.indexOf(_local4.key) == -1))))){
                    if (_args.length == 0){
                        list.splice(_local5, 1);
                    } else {
                        for (_local6 in _local4.to) {
                            if (_args.indexOf(_local6) != -1){
                                delete _local4.to[_local6];
                                delete _local4.from[_local6];
                                _local4.properties--;
                            };
                        };
                        if (_local4.properties == 0){
                            list.splice(_local5, 1);
                        };
                    };
                };
                _local5--;
            };
            if (list.length == 0){
                stopUpdate();
            };
        }
        private static function add(_arg1:TweensyTimelineZero):void{
            var _local2:int;
            var _local3:int;
            var _local4:TweensyTimelineZero;
            var _local5:Number;
            var _local6:String;
            if (lazyMode){
                _local2 = 0;
                _local3 = list.length;
                _local2 = (_local3 - 1);
                while (_local2 >= 0) {
                    _local4 = list[_local2];
                    _local5 = ((_local4.delayStart + _local4.duration) + _local4.delayEnd);
                    if ((((_local4.key == _arg1.key)) && ((_arg1.delayStart < (_local5 - _local4.time))))){
                        for (_local6 in _arg1.to) {
                            delete _local4.to[_local6];
                            delete _local4.from[_local6];
                            _local4.properties--;
                        };
                        if (_local4.properties == 0){
                            list.splice(_local2, 1);
                        };
                    };
                    _local2--;
                };
            };
            list.push(_arg1);
        }
        public static function resume():void{
            if (!_paused){
                return;
            };
            _paused = false;
            startUpdate();
        }
        public static function get paused():Boolean{
            return (_paused);
        }
        public static function from(_arg1:Object, _arg2:Object, _arg3:Number=0.5, _arg4:Function=null, _arg5:Number=0, _arg6:Object=null, _arg7:Function=null, _arg8:Array=null):TweensyTimelineZero{
            var _local10:String;
            if (!hasTimelines){
                startUpdate();
            };
            var _local9:TweensyTimelineZero = setup(_arg1, _arg3, _arg4, _arg5, _arg7, _arg8, _arg6);
            for (_local10 in _arg2) {
                _local9.to[_local10] = _arg1[_local10];
                _arg1[_local10] = translate(_arg1[_local10], _arg2[_local10]);
                _local9.properties++;
            };
            add(_local9);
            return (_local9);
        }
        public static function get refreshType():String{
            return (_refreshType);
        }
        public static function stopAll():void{
            list.length = 0;
            stopUpdate();
        }
        public static function fromTo(_arg1:Object, _arg2:Object, _arg3:Object, _arg4:Number=0.5, _arg5:Function=null, _arg6:Number=0, _arg7:Object=null, _arg8:Function=null, _arg9:Array=null):TweensyTimelineZero{
            var _local11:String;
            if (!hasTimelines){
                startUpdate();
            };
            var _local10:TweensyTimelineZero = setup(_arg1, _arg4, _arg5, _arg6, _arg8, _arg9, _arg7);
            for (_local11 in _arg3) {
                _local10.to[_local11] = translate(_arg1[_local11], _arg3[_local11]);
                _arg1[_local11] = translate(_arg1[_local11], _arg2[_local11]);
                _local10.properties++;
            };
            add(_local10);
            return (_local10);
        }
        private static function update(_arg1:Event):void{
            var _local2:Number;
            var _local5:TweensyTimelineZero;
            var _local6:Array;
            var _local7:Number;
            var _local8:Boolean;
            var _local9:Number;
            var _local10:Number;
            var _local11:String;
            var _local12:Number;
            if (refreshType == TIME){
                _local2 = (getTimer() - time);
                time = (time + _local2);
                _local2 = (_local2 * 0.001);
            };
            var _local3:int;
            var _local4:int = list.length;
            _local3 = (_local4 - 1);
            while (_local3 >= 0) {
                _local5 = list[_local3];
                list[_local3].time = (_local5.time + _local2);
                if (_local5.time > _local5.delayStart){
                    _local7 = (_local5.time - _local5.delayStart);
                    _local7 = ((_local7)>_local5.duration) ? _local5.duration : _local7;
                    _local8 = (_local7 >= (_local5.duration + _local5.delayEnd));
                    _local6 = [_local7, 0, 1, _local5.duration].concat(_local5.easeParams);
                    _local9 = _local5.ease.apply(null, _local6);
                    _local10 = (1 - _local9);
                    for (_local11 in _local5.to) {
                        if (_local5.from[_local11] == null){
                            _local5.from[_local11] = _local5.instance[_local11];
                        };
                        _local12 = ((_local5.from[_local11] * _local10) + (_local5.to[_local11] * _local9));
                        if (_local11 == "currentFrame"){
                            MovieClip(_local5.instance).gotoAndStop(int(_local12));
                        } else {
                            _local5.instance[_local11] = _local12;
                        };
                    };
                    if (_local5.update != null){
                        if ((_local5.instance is ColorTransform)){
                            DisplayObject(_local5.update).transform.colorTransform = _local5.instance;
                        } else {
                            if ((_local5.instance is Matrix)){
                                DisplayObject(_local5.update).transform.matrix = _local5.instance;
                            } else {
                                if ((_local5.instance is SoundTransform)){
                                    if ((_local5.update is SoundChannel)){
                                        SoundChannel(_local5.update).soundTransform = _local5.instance;
                                    } else {
                                        Sprite(_local5.update).soundTransform = _local5.instance;
                                    };
                                } else {
                                    if ((_local5.instance is BitmapFilter)){
                                        DisplayObject(_local5.update).filters = filterDictionary[_local5.update];
                                    };
                                };
                            };
                        };
                    };
                    if (_local5.onUpdate != null){
                        _local5.onUpdate.apply(null, _local5.onUpdateParams);
                    };
                    if (_local8){
                        if (_local5.onComplete != null){
                            _local5.onComplete.apply(null, _local5.onCompleteParams);
                        };
                        list.splice(_local3, 1);
                    };
                };
                _local3--;
            };
            if (onUpdate != null){
                onUpdate.apply(null, onUpdateParams);
            };
            if (!hasTimelines){
                stopUpdate();
                if (onComplete != null){
                    onComplete.apply(null, onCompleteParams);
                };
            };
        }
        private static function startUpdate():void{
            time = getTimer();
            frame.addEventListener(Event.ENTER_FRAME, update, false, 0, true);
        }
        private static function translate(_arg1:Number, _arg2):Number{
            var _local3:Number;
            var _local4:Array;
            var _local5:Number;
            var _local6:Number;
            if ((_arg2 is String)){
                _local4 = String(_arg2).split(",");
                if (_local4.length == 1){
                    _local3 = (_arg1 + parseFloat(_arg2));
                } else {
                    _local5 = parseFloat(_local4[0]);
                    _local6 = parseFloat(_local4[1]);
                    _local3 = ((_arg1 + _local5) + (Math.random() * (_local6 - _local5)));
                };
            } else {
                _local3 = _arg2;
            };
            return (_local3);
        }
        public static function get timelines():int{
            return (list.length);
        }
        public static function set secondsPerFrame(_arg1:Number):void{
            _secondsPerFrame = _arg1;
        }
        public static function get hasTimelines():Boolean{
            return ((timelines > 0));
        }
        public static function set refreshType(_arg1:String):void{
            _refreshType = _arg1;
        }
        private static function stopUpdate():void{
            frame.removeEventListener(Event.ENTER_FRAME, update);
        }
        public static function pause():void{
            if (_paused){
                return;
            };
            _paused = true;
            stopUpdate();
        }
        public static function to(_arg1:Object, _arg2:Object, _arg3:Number=0.5, _arg4:Function=null, _arg5:Number=0, _arg6:Object=null, _arg7:Function=null, _arg8:Array=null):TweensyTimelineZero{
            var _local10:String;
            if (!hasTimelines){
                startUpdate();
            };
            var _local9:TweensyTimelineZero = setup(_arg1, _arg3, _arg4, _arg5, _arg7, _arg8, _arg6);
            for (_local10 in _arg2) {
                _local9.to[_local10] = translate(_arg1[_local10], _arg2[_local10]);
                _local9.properties++;
            };
            add(_local9);
            return (_local9);
        }
        private static function setup(_arg1:Object, _arg2:Number, _arg3:Function, _arg4:Number, _arg5:Function, _arg6:Array, _arg7:Object):TweensyTimelineZero{
            var _local9:Array;
            var _local8:TweensyTimelineZero = new TweensyTimelineZero();
            _local8.instance = _arg1;
            _local8.duration = _arg2;
            _local8.ease = ((_arg3)!=null) ? _arg3 : defaultTween;
            _local8.delayStart = _arg4;
            _local8.update = _arg7;
            _local8.onComplete = _arg5;
            _local8.onCompleteParams = _arg6;
            _local8.key = ((_arg7)!=null) ? _arg7 : _arg1;
            if ((((_arg1 is BitmapFilter)) && (!((_arg7 == null))))){
                _local9 = filterDictionary[_arg7];
                if ((((_local9 == null)) || (!((_local9.length == DisplayObject(_arg7).filters.length))))){
                    _local9 = (filterDictionary[_arg7] = DisplayObject(_arg7).filters);
                };
                if (_local9.indexOf(_arg1) == -1){
                    _local9.push(_arg1);
                };
                DisplayObject(_arg7).filters = _local9;
            };
            return (_local8);
        }
        public static function get secondsPerFrame():Number{
            return (_secondsPerFrame);
        }

        public function toString():String{
            return ((((("TweensyZero " + version) + " {timelines:") + timelines) + "}"));
        }

    }
}//package com.flashdynamix.motion 
﻿package com.flashdynamix.motion {

    public class TweensyTimelineZero {

        public var onUpdate:Function;
        public var update;
        public var time:Number = 0;
        public var instance;
        public var delayEnd:Number = 0;
        public var duration:Number = 0;
        public var onCompleteParams:Array;
        public var delayStart:Number = 0;
        public var easeParams:Array;
        public var ease:Function;
        public var from:Object;
        public var properties:int = 0;
        public var onUpdateParams:Array;
        public var key:Object;
        public var onComplete:Function;
        public var to:Object;

        public function TweensyTimelineZero(){
            this.to = {};
            this.from = {};
            this.easeParams = [];
        }
    }
}//package com.flashdynamix.motion 
﻿package {
    import flash.display.*;

    public dynamic class CheckBox_overIcon extends MovieClip {

    }
}//package 
﻿package {
    import flash.display.*;

    public dynamic class Button_overSkin extends MovieClip {

    }
}//package